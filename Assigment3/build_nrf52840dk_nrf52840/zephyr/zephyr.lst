
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001420 	.word	0x20001420
}
   4:	00001f71 	.word	0x00001f71
   8:	00006f81 	.word	0x00006f81
   c:	00001f5d 	.word	0x00001f5d
  10:	00001f5d 	.word	0x00001f5d
  14:	00001f5d 	.word	0x00001f5d
  18:	00001f5d 	.word	0x00001f5d
	...
  2c:	00001d79 	.word	0x00001d79
  30:	00001f5d 	.word	0x00001f5d
  34:	00000000 	.word	0x00000000
  38:	00001d25 	.word	0x00001d25
  3c:	00001f5d 	.word	0x00001f5d

00000040 <_irq_vector_table>:
  40:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  50:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  60:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  70:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  80:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  90:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  a0:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  b0:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  c0:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  d0:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  e0:	00001cdd 00001cdd 00001cdd 00001cdd     ................
  f0:	00001cdd 00001cdd 00001cdd 00001cdd     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <but1press_cbfunction>:
volatile int dcToggleFlag7 = 0; /* Flag to signal a BUT1 press */
volatile int dcToggleFlag8 = 0; /* Flag to signal a BUT1 press */


void but1press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     3f4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     3f6:	f006 ff34 	bl	7262 <sys_clock_cycle_get_32>
     3fa:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But1 pressed at %d\n\r", k_cycle_get_32());
     3fc:	4803      	ldr	r0, [pc, #12]	; (40c <CONFIG_FLASH_SIZE+0xc>)
     3fe:	f006 fd99 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag1 = 1;
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <CONFIG_FLASH_SIZE+0x10>)
     404:	2201      	movs	r2, #1
     406:	601a      	str	r2, [r3, #0]
}
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	0000789c 	.word	0x0000789c
     410:	20000334 	.word	0x20000334

00000414 <but2press_cbfunction>:

void but2press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     414:	b508      	push	{r3, lr}
     416:	f006 ff24 	bl	7262 <sys_clock_cycle_get_32>
     41a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But2 pressed at %d\n\r", k_cycle_get_32());
     41c:	4803      	ldr	r0, [pc, #12]	; (42c <but2press_cbfunction+0x18>)
     41e:	f006 fd89 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag2 = 1;
     422:	4b03      	ldr	r3, [pc, #12]	; (430 <but2press_cbfunction+0x1c>)
     424:	2201      	movs	r2, #1
     426:	601a      	str	r2, [r3, #0]
}
     428:	bd08      	pop	{r3, pc}
     42a:	bf00      	nop
     42c:	000078b1 	.word	0x000078b1
     430:	20000338 	.word	0x20000338

00000434 <but3press_cbfunction>:

void but3press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     434:	b508      	push	{r3, lr}
     436:	f006 ff14 	bl	7262 <sys_clock_cycle_get_32>
     43a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But3 pressed at %d\n\r", k_cycle_get_32());
     43c:	4803      	ldr	r0, [pc, #12]	; (44c <but3press_cbfunction+0x18>)
     43e:	f006 fd79 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag3 = 1;
     442:	4b03      	ldr	r3, [pc, #12]	; (450 <but3press_cbfunction+0x1c>)
     444:	2201      	movs	r2, #1
     446:	601a      	str	r2, [r3, #0]
}
     448:	bd08      	pop	{r3, pc}
     44a:	bf00      	nop
     44c:	000078c6 	.word	0x000078c6
     450:	2000033c 	.word	0x2000033c

00000454 <but4press_cbfunction>:

void but4press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     454:	b508      	push	{r3, lr}
     456:	f006 ff04 	bl	7262 <sys_clock_cycle_get_32>
     45a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But4 pressed at %d\n\r", k_cycle_get_32());
     45c:	4803      	ldr	r0, [pc, #12]	; (46c <but4press_cbfunction+0x18>)
     45e:	f006 fd69 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag4 = 1;
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <but4press_cbfunction+0x1c>)
     464:	2201      	movs	r2, #1
     466:	601a      	str	r2, [r3, #0]
}
     468:	bd08      	pop	{r3, pc}
     46a:	bf00      	nop
     46c:	000078db 	.word	0x000078db
     470:	20000340 	.word	0x20000340

00000474 <but5press_cbfunction>:

void but5press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     474:	b508      	push	{r3, lr}
     476:	f006 fef4 	bl	7262 <sys_clock_cycle_get_32>
     47a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But5 pressed at %d\n\r", k_cycle_get_32());
     47c:	4803      	ldr	r0, [pc, #12]	; (48c <but5press_cbfunction+0x18>)
     47e:	f006 fd59 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag5 = 1;
     482:	4b03      	ldr	r3, [pc, #12]	; (490 <but5press_cbfunction+0x1c>)
     484:	2201      	movs	r2, #1
     486:	601a      	str	r2, [r3, #0]
}
     488:	bd08      	pop	{r3, pc}
     48a:	bf00      	nop
     48c:	000078f0 	.word	0x000078f0
     490:	20000344 	.word	0x20000344

00000494 <but6press_cbfunction>:

void but6press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     494:	b508      	push	{r3, lr}
     496:	f006 fee4 	bl	7262 <sys_clock_cycle_get_32>
     49a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But6 pressed at %d\n\r", k_cycle_get_32());
     49c:	4803      	ldr	r0, [pc, #12]	; (4ac <but6press_cbfunction+0x18>)
     49e:	f006 fd49 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag6 = 1;
     4a2:	4b03      	ldr	r3, [pc, #12]	; (4b0 <but6press_cbfunction+0x1c>)
     4a4:	2201      	movs	r2, #1
     4a6:	601a      	str	r2, [r3, #0]
}
     4a8:	bd08      	pop	{r3, pc}
     4aa:	bf00      	nop
     4ac:	00007905 	.word	0x00007905
     4b0:	20000348 	.word	0x20000348

000004b4 <but7press_cbfunction>:

void but7press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     4b4:	b508      	push	{r3, lr}
     4b6:	f006 fed4 	bl	7262 <sys_clock_cycle_get_32>
     4ba:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But7 pressed at %d\n\r", k_cycle_get_32());
     4bc:	4803      	ldr	r0, [pc, #12]	; (4cc <but7press_cbfunction+0x18>)
     4be:	f006 fd39 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag7 = 1;
     4c2:	4b03      	ldr	r3, [pc, #12]	; (4d0 <but7press_cbfunction+0x1c>)
     4c4:	2201      	movs	r2, #1
     4c6:	601a      	str	r2, [r3, #0]
}
     4c8:	bd08      	pop	{r3, pc}
     4ca:	bf00      	nop
     4cc:	0000791a 	.word	0x0000791a
     4d0:	2000034c 	.word	0x2000034c

000004d4 <but8press_cbfunction>:

void but8press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     4d4:	b508      	push	{r3, lr}
     4d6:	f006 fec4 	bl	7262 <sys_clock_cycle_get_32>
     4da:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But8 pressed at %d\n\r", k_cycle_get_32());
     4dc:	4803      	ldr	r0, [pc, #12]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4de:	f006 fd29 	bl	6f34 <printk>
    
    /* Update Flag*/
    dcToggleFlag8 = 1;
     4e2:	4b03      	ldr	r3, [pc, #12]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     4e4:	2201      	movs	r2, #1
     4e6:	601a      	str	r2, [r3, #0]
}
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop
     4ec:	0000792f 	.word	0x0000792f
     4f0:	20000350 	.word	0x20000350

000004f4 <gpio_pin_configure.constprop.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
     4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4f8:	4604      	mov	r4, r0
     4fa:	460d      	mov	r5, r1
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4fc:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
     4fe:	f8d0 8008 	ldr.w	r8, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     502:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
     504:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     506:	2601      	movs	r6, #1
     508:	408e      	lsls	r6, r1
     50a:	421e      	tst	r6, r3
     50c:	d10e      	bne.n	52c <gpio_pin_configure.constprop.0+0x38>
     50e:	490e      	ldr	r1, [pc, #56]	; (548 <gpio_pin_configure.constprop.0+0x54>)
     510:	4a0e      	ldr	r2, [pc, #56]	; (54c <gpio_pin_configure.constprop.0+0x58>)
     512:	480f      	ldr	r0, [pc, #60]	; (550 <gpio_pin_configure.constprop.0+0x5c>)
     514:	f240 23fd 	movw	r3, #765	; 0x2fd
     518:	f006 fd0c 	bl	6f34 <printk>
     51c:	480d      	ldr	r0, [pc, #52]	; (554 <gpio_pin_configure.constprop.0+0x60>)
     51e:	f006 fd09 	bl	6f34 <printk>
     522:	480a      	ldr	r0, [pc, #40]	; (54c <gpio_pin_configure.constprop.0+0x58>)
     524:	f240 21fd 	movw	r1, #765	; 0x2fd
     528:	f006 fc30 	bl	6d8c <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     52c:	683b      	ldr	r3, [r7, #0]
     52e:	ea23 0606 	bic.w	r6, r3, r6
     532:	603e      	str	r6, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
     534:	f8d8 3000 	ldr.w	r3, [r8]
     538:	4629      	mov	r1, r5
     53a:	4620      	mov	r0, r4
     53c:	f44f 7288 	mov.w	r2, #272	; 0x110
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
     540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     544:	4718      	bx	r3
     546:	bf00      	nop
     548:	0000796e 	.word	0x0000796e
     54c:	00007944 	.word	0x00007944
     550:	000079ac 	.word	0x000079ac
     554:	000079c9 	.word	0x000079c9

00000558 <gpio_pin_interrupt_configure.constprop.0>:
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
     558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     55c:	4604      	mov	r4, r0
     55e:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     560:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
     562:	6887      	ldr	r7, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     564:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
     566:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     56a:	2601      	movs	r6, #1
     56c:	408e      	lsls	r6, r1
     56e:	421e      	tst	r6, r3
     570:	d10e      	bne.n	590 <gpio_pin_interrupt_configure.constprop.0+0x38>
     572:	4910      	ldr	r1, [pc, #64]	; (5b4 <gpio_pin_interrupt_configure.constprop.0+0x5c>)
     574:	4a10      	ldr	r2, [pc, #64]	; (5b8 <gpio_pin_interrupt_configure.constprop.0+0x60>)
     576:	4811      	ldr	r0, [pc, #68]	; (5bc <gpio_pin_interrupt_configure.constprop.0+0x64>)
     578:	f240 239d 	movw	r3, #669	; 0x29d
     57c:	f006 fcda 	bl	6f34 <printk>
     580:	480f      	ldr	r0, [pc, #60]	; (5c0 <gpio_pin_interrupt_configure.constprop.0+0x68>)
     582:	f006 fcd7 	bl	6f34 <printk>
     586:	480c      	ldr	r0, [pc, #48]	; (5b8 <gpio_pin_interrupt_configure.constprop.0+0x60>)
     588:	f240 219d 	movw	r1, #669	; 0x29d
     58c:	f006 fbfe 	bl	6d8c <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     590:	f8d8 3000 	ldr.w	r3, [r8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     594:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
     596:	69be      	ldr	r6, [r7, #24]
     598:	4629      	mov	r1, r5
     59a:	4620      	mov	r0, r4
     59c:	46b4      	mov	ip, r6
     59e:	bf18      	it	ne
     5a0:	f44f 3300 	movne.w	r3, #131072	; 0x20000
}
     5a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     5a8:	bf08      	it	eq
     5aa:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
     5ae:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
     5b2:	4760      	bx	ip
     5b4:	0000796e 	.word	0x0000796e
     5b8:	00007944 	.word	0x00007944
     5bc:	000079ac 	.word	0x000079ac
     5c0:	000079c9 	.word	0x000079c9

000005c4 <showSpace>:
  }
  return;
}

void showSpace()
{
     5c4:	b510      	push	{r4, lr}
  printk("\n\r");
     5c6:	4c06      	ldr	r4, [pc, #24]	; (5e0 <showSpace+0x1c>)
     5c8:	4620      	mov	r0, r4
     5ca:	f006 fcb3 	bl	6f34 <printk>
  printk("----------------------------------------------------\n\r");
     5ce:	4805      	ldr	r0, [pc, #20]	; (5e4 <showSpace+0x20>)
     5d0:	f006 fcb0 	bl	6f34 <printk>
  printk("\n\r");
     5d4:	4620      	mov	r0, r4
  return;
}
     5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printk("\n\r");
     5da:	f006 bcab 	b.w	6f34 <printk>
     5de:	bf00      	nop
     5e0:	00007a53 	.word	0x00007a53
     5e4:	000079db 	.word	0x000079db

000005e8 <showMenu>:
{
     5e8:	b510      	push	{r4, lr}
     5ea:	4604      	mov	r4, r0
  printk("\n\x1b[2J\r");
     5ec:	481a      	ldr	r0, [pc, #104]	; (658 <showMenu+0x70>)
     5ee:	f006 fca1 	bl	6f34 <printk>
  if(choice == 1)
     5f2:	4b1a      	ldr	r3, [pc, #104]	; (65c <showMenu+0x74>)
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	2b01      	cmp	r3, #1
     5f8:	d116      	bne.n	628 <showMenu+0x40>
    printk("Products : \n\r");
     5fa:	4819      	ldr	r0, [pc, #100]	; (660 <showMenu+0x78>)
     5fc:	f006 fc9a 	bl	6f34 <printk>
    printk("   - Beer : 150 Centimos              <---- \n\r");
     600:	4818      	ldr	r0, [pc, #96]	; (664 <showMenu+0x7c>)
     602:	f006 fc97 	bl	6f34 <printk>
    printk("   - Tuna Sandwich : 100 Centimos \n\r");
     606:	4818      	ldr	r0, [pc, #96]	; (668 <showMenu+0x80>)
    printk("   - Tuna Sandwich : 100 Centimos     <---- \n\r");
     608:	f006 fc94 	bl	6f34 <printk>
    printk("   - Coffee Sandwich : 50 Centimos \n\r");
     60c:	4817      	ldr	r0, [pc, #92]	; (66c <showMenu+0x84>)
    printk("   - Coffee Sandwich : 50 Centimos    <---- \n\r");
     60e:	f006 fc91 	bl	6f34 <printk>
  if(flag == 1)
     612:	2c01      	cmp	r4, #1
     614:	d11f      	bne.n	656 <showMenu+0x6e>
    showSpace();
     616:	f7ff ffd5 	bl	5c4 <showSpace>
    printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     61a:	4b15      	ldr	r3, [pc, #84]	; (670 <showMenu+0x88>)
     61c:	4815      	ldr	r0, [pc, #84]	; (674 <showMenu+0x8c>)
     61e:	6819      	ldr	r1, [r3, #0]
}
     620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     624:	f006 bc86 	b.w	6f34 <printk>
  } else if(choice == 2)
     628:	2b02      	cmp	r3, #2
     62a:	d107      	bne.n	63c <showMenu+0x54>
    printk("Products : \n\r");
     62c:	480c      	ldr	r0, [pc, #48]	; (660 <showMenu+0x78>)
     62e:	f006 fc81 	bl	6f34 <printk>
    printk("   - Beer : 150 Centimos \n\r");
     632:	4811      	ldr	r0, [pc, #68]	; (678 <showMenu+0x90>)
     634:	f006 fc7e 	bl	6f34 <printk>
    printk("   - Tuna Sandwich : 100 Centimos     <---- \n\r");
     638:	4810      	ldr	r0, [pc, #64]	; (67c <showMenu+0x94>)
     63a:	e7e5      	b.n	608 <showMenu+0x20>
  } else if(choice == 3)
     63c:	2b03      	cmp	r3, #3
     63e:	d1e8      	bne.n	612 <showMenu+0x2a>
    printk("Products : \n\r");
     640:	4807      	ldr	r0, [pc, #28]	; (660 <showMenu+0x78>)
     642:	f006 fc77 	bl	6f34 <printk>
    printk("   - Beer : 150 Centimos \n\r");
     646:	480c      	ldr	r0, [pc, #48]	; (678 <showMenu+0x90>)
     648:	f006 fc74 	bl	6f34 <printk>
    printk("   - Tuna Sandwich : 100 Centimos \n\r");
     64c:	4806      	ldr	r0, [pc, #24]	; (668 <showMenu+0x80>)
     64e:	f006 fc71 	bl	6f34 <printk>
    printk("   - Coffee Sandwich : 50 Centimos    <---- \n\r");
     652:	480b      	ldr	r0, [pc, #44]	; (680 <showMenu+0x98>)
     654:	e7db      	b.n	60e <showMenu+0x26>
}
     656:	bd10      	pop	{r4, pc}
     658:	00007a12 	.word	0x00007a12
     65c:	20000000 	.word	0x20000000
     660:	00007a19 	.word	0x00007a19
     664:	00007a27 	.word	0x00007a27
     668:	00007a56 	.word	0x00007a56
     66c:	00007a7b 	.word	0x00007a7b
     670:	20000330 	.word	0x20000330
     674:	00007b1b 	.word	0x00007b1b
     678:	00007aa1 	.word	0x00007aa1
     67c:	00007abd 	.word	0x00007abd
     680:	00007aec 	.word	0x00007aec

00000684 <UpOrDown>:
  if(flag == 1)
     684:	2801      	cmp	r0, #1
     686:	d109      	bne.n	69c <UpOrDown+0x18>
    choice = choice + 1;
     688:	4a09      	ldr	r2, [pc, #36]	; (6b0 <UpOrDown+0x2c>)
     68a:	6813      	ldr	r3, [r2, #0]
     68c:	3301      	adds	r3, #1
     68e:	2b03      	cmp	r3, #3
     690:	bfc8      	it	gt
     692:	4603      	movgt	r3, r0
    if(choice <= 0) choice = 3;
     694:	6013      	str	r3, [r2, #0]
  showMenu(1);
     696:	2001      	movs	r0, #1
     698:	f7ff bfa6 	b.w	5e8 <showMenu>
  } else if (flag == 2)
     69c:	2802      	cmp	r0, #2
     69e:	d1fa      	bne.n	696 <UpOrDown+0x12>
    choice = choice - 1;
     6a0:	4a03      	ldr	r2, [pc, #12]	; (6b0 <UpOrDown+0x2c>)
     6a2:	6813      	ldr	r3, [r2, #0]
     6a4:	3b01      	subs	r3, #1
    if(choice <= 0) choice = 3;
     6a6:	2b00      	cmp	r3, #0
     6a8:	bfd8      	it	le
     6aa:	2303      	movle	r3, #3
     6ac:	e7f2      	b.n	694 <UpOrDown+0x10>
     6ae:	bf00      	nop
     6b0:	20000000 	.word	0x20000000

000006b4 <addMoney>:
{
     6b4:	b538      	push	{r3, r4, r5, lr}
  credit = credit + cach;
     6b6:	4d0a      	ldr	r5, [pc, #40]	; (6e0 <addMoney+0x2c>)
     6b8:	682b      	ldr	r3, [r5, #0]
{
     6ba:	4604      	mov	r4, r0
  credit = credit + cach;
     6bc:	4403      	add	r3, r0
  showMenu(0);
     6be:	2000      	movs	r0, #0
  credit = credit + cach;
     6c0:	602b      	str	r3, [r5, #0]
  showMenu(0);
     6c2:	f7ff ff91 	bl	5e8 <showMenu>
  showSpace();
     6c6:	f7ff ff7d 	bl	5c4 <showSpace>
  printk("Dinheiro adicionado : %d Centimos\n\r", cach);
     6ca:	4621      	mov	r1, r4
     6cc:	4805      	ldr	r0, [pc, #20]	; (6e4 <addMoney+0x30>)
     6ce:	f006 fc31 	bl	6f34 <printk>
  printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     6d2:	6829      	ldr	r1, [r5, #0]
     6d4:	4804      	ldr	r0, [pc, #16]	; (6e8 <addMoney+0x34>)
}
     6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     6da:	f006 bc2b 	b.w	6f34 <printk>
     6de:	bf00      	nop
     6e0:	20000330 	.word	0x20000330
     6e4:	00007b3a 	.word	0x00007b3a
     6e8:	00007b1b 	.word	0x00007b1b

000006ec <resetMoney>:
{
     6ec:	b510      	push	{r4, lr}
  printk("Dinheiro devolvido : %d Centimos\n\r", credit);
     6ee:	4c08      	ldr	r4, [pc, #32]	; (710 <resetMoney+0x24>)
  showMenu(0);
     6f0:	2000      	movs	r0, #0
     6f2:	f7ff ff79 	bl	5e8 <showMenu>
  showSpace();
     6f6:	f7ff ff65 	bl	5c4 <showSpace>
  printk("Dinheiro devolvido : %d Centimos\n\r", credit);
     6fa:	6821      	ldr	r1, [r4, #0]
     6fc:	4805      	ldr	r0, [pc, #20]	; (714 <resetMoney+0x28>)
     6fe:	f006 fc19 	bl	6f34 <printk>
  credit = 0;
     702:	2100      	movs	r1, #0
     704:	6021      	str	r1, [r4, #0]
  printk("Dinheiro Atual : %d Centimos\n\r", credit);
     706:	4804      	ldr	r0, [pc, #16]	; (718 <resetMoney+0x2c>)
}
     708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printk("Dinheiro Atual : %d Centimos\n\r", credit);
     70c:	f006 bc12 	b.w	6f34 <printk>
     710:	20000330 	.word	0x20000330
     714:	00007b5e 	.word	0x00007b5e
     718:	00007b1b 	.word	0x00007b1b

0000071c <Check>:
  if(choice == 1)
     71c:	4b30      	ldr	r3, [pc, #192]	; (7e0 <Check+0xc4>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	2b01      	cmp	r3, #1
{
     722:	b510      	push	{r4, lr}
  if(choice == 1)
     724:	d123      	bne.n	76e <Check+0x52>
    if(credit >= 150)
     726:	4c2f      	ldr	r4, [pc, #188]	; (7e4 <Check+0xc8>)
     728:	6823      	ldr	r3, [r4, #0]
     72a:	2b95      	cmp	r3, #149	; 0x95
     72c:	dd11      	ble.n	752 <Check+0x36>
      credit = credit - 150;
     72e:	3b96      	subs	r3, #150	; 0x96
     730:	6023      	str	r3, [r4, #0]
      showMenu();
     732:	f7ff ff59 	bl	5e8 <showMenu>
      showSpace();
     736:	f7ff ff45 	bl	5c4 <showSpace>
      printk("Produto Entregue (Beer)\n\r");
     73a:	482b      	ldr	r0, [pc, #172]	; (7e8 <Check+0xcc>)
     73c:	f006 fbfa 	bl	6f34 <printk>
      printk("Dinheiro Descontado: 150 Centimos\n\r");
     740:	482a      	ldr	r0, [pc, #168]	; (7ec <Check+0xd0>)
      printk("Dinheiro Descontado: 50 Centimos\n\r");
     742:	f006 fbf7 	bl	6f34 <printk>
      printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     746:	6821      	ldr	r1, [r4, #0]
     748:	4829      	ldr	r0, [pc, #164]	; (7f0 <Check+0xd4>)
}
     74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     74e:	f006 bbf1 	b.w	6f34 <printk>
      showMenu();
     752:	f7ff ff49 	bl	5e8 <showMenu>
      showSpace();
     756:	f7ff ff35 	bl	5c4 <showSpace>
      printk("Custo do Produto : 150 Centimos\n\r");
     75a:	4826      	ldr	r0, [pc, #152]	; (7f4 <Check+0xd8>)
     75c:	f006 fbea 	bl	6f34 <printk>
      printk("Dinheiro que Falta: %d Centimos\n\r",(150-credit));
     760:	6821      	ldr	r1, [r4, #0]
     762:	f1c1 0196 	rsb	r1, r1, #150	; 0x96
      printk("Dinheiro que Falta: %d Centimos\n\r",(50-credit));
     766:	4824      	ldr	r0, [pc, #144]	; (7f8 <Check+0xdc>)
     768:	f006 fbe4 	bl	6f34 <printk>
     76c:	e7eb      	b.n	746 <Check+0x2a>
  } else if (choice == 2)
     76e:	2b02      	cmp	r3, #2
     770:	d119      	bne.n	7a6 <Check+0x8a>
    if(credit >= 100)
     772:	4c1c      	ldr	r4, [pc, #112]	; (7e4 <Check+0xc8>)
     774:	6823      	ldr	r3, [r4, #0]
     776:	2b63      	cmp	r3, #99	; 0x63
     778:	dd0a      	ble.n	790 <Check+0x74>
      credit = credit - 100;
     77a:	3b64      	subs	r3, #100	; 0x64
     77c:	6023      	str	r3, [r4, #0]
      showMenu();
     77e:	f7ff ff33 	bl	5e8 <showMenu>
      showSpace();
     782:	f7ff ff1f 	bl	5c4 <showSpace>
      printk("Produto Entregue (Tuna Sandwich)\n\r");
     786:	481d      	ldr	r0, [pc, #116]	; (7fc <Check+0xe0>)
     788:	f006 fbd4 	bl	6f34 <printk>
      printk("Dinheiro Descontado: 100 Centimos\n\r");
     78c:	481c      	ldr	r0, [pc, #112]	; (800 <CONFIG_ISR_STACK_SIZE>)
     78e:	e7d8      	b.n	742 <Check+0x26>
      showMenu();
     790:	f7ff ff2a 	bl	5e8 <showMenu>
      showSpace();
     794:	f7ff ff16 	bl	5c4 <showSpace>
      printk("Custo do Produto : 100 Centimos\n\r");
     798:	481a      	ldr	r0, [pc, #104]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     79a:	f006 fbcb 	bl	6f34 <printk>
      printk("Dinheiro que Falta: %d Centimos\n\r",(100-credit));
     79e:	6821      	ldr	r1, [r4, #0]
     7a0:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
     7a4:	e7df      	b.n	766 <Check+0x4a>
  } else if (choice == 3)
     7a6:	2b03      	cmp	r3, #3
     7a8:	d119      	bne.n	7de <Check+0xc2>
    if(credit >= 50)
     7aa:	4c0e      	ldr	r4, [pc, #56]	; (7e4 <Check+0xc8>)
     7ac:	6823      	ldr	r3, [r4, #0]
     7ae:	2b31      	cmp	r3, #49	; 0x31
     7b0:	dd0a      	ble.n	7c8 <Check+0xac>
      credit = credit - 50;
     7b2:	3b32      	subs	r3, #50	; 0x32
     7b4:	6023      	str	r3, [r4, #0]
      showMenu();
     7b6:	f7ff ff17 	bl	5e8 <showMenu>
      showSpace();
     7ba:	f7ff ff03 	bl	5c4 <showSpace>
      printk("Produto Entregue (Coffee)\n\r");
     7be:	4812      	ldr	r0, [pc, #72]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7c0:	f006 fbb8 	bl	6f34 <printk>
      printk("Dinheiro Descontado: 50 Centimos\n\r");
     7c4:	4811      	ldr	r0, [pc, #68]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7c6:	e7bc      	b.n	742 <Check+0x26>
      showMenu();
     7c8:	f7ff ff0e 	bl	5e8 <showMenu>
      showSpace();
     7cc:	f7ff fefa 	bl	5c4 <showSpace>
      printk("Custo do Produto : 50 Centimos\n\r");
     7d0:	480f      	ldr	r0, [pc, #60]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7d2:	f006 fbaf 	bl	6f34 <printk>
      printk("Dinheiro que Falta: %d Centimos\n\r",(50-credit));
     7d6:	6821      	ldr	r1, [r4, #0]
     7d8:	f1c1 0132 	rsb	r1, r1, #50	; 0x32
     7dc:	e7c3      	b.n	766 <Check+0x4a>
}
     7de:	bd10      	pop	{r4, pc}
     7e0:	20000000 	.word	0x20000000
     7e4:	20000330 	.word	0x20000330
     7e8:	00007b81 	.word	0x00007b81
     7ec:	00007b9b 	.word	0x00007b9b
     7f0:	00007b1b 	.word	0x00007b1b
     7f4:	00007bbf 	.word	0x00007bbf
     7f8:	00007be1 	.word	0x00007be1
     7fc:	00007c03 	.word	0x00007c03
     800:	00007c26 	.word	0x00007c26
     804:	00007c4a 	.word	0x00007c4a
     808:	00007c6c 	.word	0x00007c6c
     80c:	00007c88 	.word	0x00007c88
     810:	00007cab 	.word	0x00007cab

00000814 <StateMachine>:
{
     814:	b580      	push	{r7, lr}
      switch(state)
     816:	4d3a      	ldr	r5, [pc, #232]	; (900 <StateMachine+0xec>)
          dcToggleFlag8 = 0; 
     818:	4e3a      	ldr	r6, [pc, #232]	; (904 <StateMachine+0xf0>)
     81a:	462c      	mov	r4, r5
      switch(state)
     81c:	682b      	ldr	r3, [r5, #0]
     81e:	2b04      	cmp	r3, #4
     820:	d850      	bhi.n	8c4 <StateMachine+0xb0>
     822:	e8df f003 	tbb	[pc, r3]
     826:	2b03      	.short	0x2b03
     828:	5751      	.short	0x5751
     82a:	67          	.byte	0x67
     82b:	00          	.byte	0x00
          if((dcToggleFlag1 == 1) || (dcToggleFlag2 == 1) || (dcToggleFlag3 == 1) || (dcToggleFlag4 == 1) )
     82c:	4b36      	ldr	r3, [pc, #216]	; (908 <StateMachine+0xf4>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	2b01      	cmp	r3, #1
     832:	d00b      	beq.n	84c <StateMachine+0x38>
     834:	4b35      	ldr	r3, [pc, #212]	; (90c <StateMachine+0xf8>)
     836:	681b      	ldr	r3, [r3, #0]
     838:	2b01      	cmp	r3, #1
     83a:	d007      	beq.n	84c <StateMachine+0x38>
     83c:	4b34      	ldr	r3, [pc, #208]	; (910 <StateMachine+0xfc>)
     83e:	681b      	ldr	r3, [r3, #0]
     840:	2b01      	cmp	r3, #1
     842:	d003      	beq.n	84c <StateMachine+0x38>
     844:	4b33      	ldr	r3, [pc, #204]	; (914 <StateMachine+0x100>)
     846:	681b      	ldr	r3, [r3, #0]
     848:	2b01      	cmp	r3, #1
     84a:	d101      	bne.n	850 <StateMachine+0x3c>
            state = S1;
     84c:	2301      	movs	r3, #1
     84e:	6023      	str	r3, [r4, #0]
          if(dcToggleFlag6 == 1)
     850:	4b31      	ldr	r3, [pc, #196]	; (918 <StateMachine+0x104>)
     852:	681b      	ldr	r3, [r3, #0]
     854:	2b01      	cmp	r3, #1
            state = S2;
     856:	bf04      	itt	eq
     858:	2302      	moveq	r3, #2
     85a:	6023      	streq	r3, [r4, #0]
          if((dcToggleFlag5 == 1) || (dcToggleFlag7 == 1))
     85c:	4b2f      	ldr	r3, [pc, #188]	; (91c <StateMachine+0x108>)
     85e:	681b      	ldr	r3, [r3, #0]
     860:	2b01      	cmp	r3, #1
     862:	d003      	beq.n	86c <StateMachine+0x58>
     864:	4b2e      	ldr	r3, [pc, #184]	; (920 <StateMachine+0x10c>)
     866:	681b      	ldr	r3, [r3, #0]
     868:	2b01      	cmp	r3, #1
     86a:	d101      	bne.n	870 <StateMachine+0x5c>
            state = S3;
     86c:	2303      	movs	r3, #3
     86e:	6023      	str	r3, [r4, #0]
          if(dcToggleFlag8 == 1)
     870:	6833      	ldr	r3, [r6, #0]
     872:	2b01      	cmp	r3, #1
     874:	d1d2      	bne.n	81c <StateMachine+0x8>
            state = S4;
     876:	2304      	movs	r3, #4
          state = S0; 
     878:	6023      	str	r3, [r4, #0]
          break;    
     87a:	e7cf      	b.n	81c <StateMachine+0x8>
          if(dcToggleFlag1 == 1) 
     87c:	4f22      	ldr	r7, [pc, #136]	; (908 <StateMachine+0xf4>)
     87e:	683b      	ldr	r3, [r7, #0]
     880:	2b01      	cmp	r3, #1
     882:	d104      	bne.n	88e <StateMachine+0x7a>
            addMoney(10);
     884:	200a      	movs	r0, #10
     886:	f7ff ff15 	bl	6b4 <addMoney>
            dcToggleFlag1 = 0;
     88a:	2300      	movs	r3, #0
     88c:	603b      	str	r3, [r7, #0]
          if(dcToggleFlag2 == 1) 
     88e:	4f1f      	ldr	r7, [pc, #124]	; (90c <StateMachine+0xf8>)
     890:	683b      	ldr	r3, [r7, #0]
     892:	2b01      	cmp	r3, #1
     894:	d104      	bne.n	8a0 <StateMachine+0x8c>
            addMoney(20);
     896:	2014      	movs	r0, #20
     898:	f7ff ff0c 	bl	6b4 <addMoney>
            dcToggleFlag2 = 0;
     89c:	2300      	movs	r3, #0
     89e:	603b      	str	r3, [r7, #0]
          if(dcToggleFlag3 == 1) 
     8a0:	4f1b      	ldr	r7, [pc, #108]	; (910 <StateMachine+0xfc>)
     8a2:	683b      	ldr	r3, [r7, #0]
     8a4:	2b01      	cmp	r3, #1
     8a6:	d104      	bne.n	8b2 <StateMachine+0x9e>
            addMoney(50);
     8a8:	2032      	movs	r0, #50	; 0x32
     8aa:	f7ff ff03 	bl	6b4 <addMoney>
            dcToggleFlag3 = 0;
     8ae:	2300      	movs	r3, #0
     8b0:	603b      	str	r3, [r7, #0]
          if(dcToggleFlag4 == 1) 
     8b2:	4f18      	ldr	r7, [pc, #96]	; (914 <StateMachine+0x100>)
     8b4:	683b      	ldr	r3, [r7, #0]
     8b6:	2b01      	cmp	r3, #1
     8b8:	d104      	bne.n	8c4 <StateMachine+0xb0>
            addMoney(100);
     8ba:	2064      	movs	r0, #100	; 0x64
     8bc:	f7ff fefa 	bl	6b4 <addMoney>
            dcToggleFlag4 = 0;
     8c0:	2300      	movs	r3, #0
     8c2:	603b      	str	r3, [r7, #0]
          state = S0; 
     8c4:	2300      	movs	r3, #0
     8c6:	e7d7      	b.n	878 <StateMachine+0x64>
          resetMoney();
     8c8:	f7ff ff10 	bl	6ec <resetMoney>
          dcToggleFlag6 = 0;
     8cc:	4a12      	ldr	r2, [pc, #72]	; (918 <StateMachine+0x104>)
     8ce:	2300      	movs	r3, #0
     8d0:	6013      	str	r3, [r2, #0]
          state = S0;
     8d2:	6023      	str	r3, [r4, #0]
          if(dcToggleFlag5 == 1)
     8d4:	4f11      	ldr	r7, [pc, #68]	; (91c <StateMachine+0x108>)
     8d6:	683b      	ldr	r3, [r7, #0]
     8d8:	2b01      	cmp	r3, #1
     8da:	d104      	bne.n	8e6 <StateMachine+0xd2>
            UpOrDown(2);
     8dc:	2002      	movs	r0, #2
     8de:	f7ff fed1 	bl	684 <UpOrDown>
            dcToggleFlag5 = 0;
     8e2:	2300      	movs	r3, #0
     8e4:	603b      	str	r3, [r7, #0]
          if(dcToggleFlag7 == 1)
     8e6:	4f0e      	ldr	r7, [pc, #56]	; (920 <StateMachine+0x10c>)
     8e8:	6838      	ldr	r0, [r7, #0]
     8ea:	2801      	cmp	r0, #1
     8ec:	d1ea      	bne.n	8c4 <StateMachine+0xb0>
            UpOrDown(1);
     8ee:	f7ff fec9 	bl	684 <UpOrDown>
            dcToggleFlag7 = 0;
     8f2:	e7e5      	b.n	8c0 <StateMachine+0xac>
          Check();
     8f4:	f7ff ff12 	bl	71c <Check>
          dcToggleFlag8 = 0; 
     8f8:	2300      	movs	r3, #0
     8fa:	6033      	str	r3, [r6, #0]
          state = S0;
     8fc:	e7bc      	b.n	878 <StateMachine+0x64>
     8fe:	bf00      	nop
     900:	20000358 	.word	0x20000358
     904:	20000350 	.word	0x20000350
     908:	20000334 	.word	0x20000334
     90c:	20000338 	.word	0x20000338
     910:	2000033c 	.word	0x2000033c
     914:	20000340 	.word	0x20000340
     918:	20000348 	.word	0x20000348
     91c:	20000344 	.word	0x20000344
     920:	2000034c 	.word	0x2000034c

00000924 <CONFIG_BUTTONS>:

/*Configure Buttons*/

void CONFIG_BUTTONS()
{
     924:	b510      	push	{r4, lr}
    int ret = 0;
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT1, GPIO_INPUT | GPIO_PULL_UP);
     926:	4c4a      	ldr	r4, [pc, #296]	; (a50 <CONFIG_BUTTONS+0x12c>)
     928:	210b      	movs	r1, #11
     92a:	6820      	ldr	r0, [r4, #0]
     92c:	f7ff fde2 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT2, GPIO_INPUT | GPIO_PULL_UP);
     930:	210c      	movs	r1, #12
     932:	6820      	ldr	r0, [r4, #0]
     934:	f7ff fdde 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT3, GPIO_INPUT | GPIO_PULL_UP);
     938:	2118      	movs	r1, #24
     93a:	6820      	ldr	r0, [r4, #0]
     93c:	f7ff fdda 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT4, GPIO_INPUT | GPIO_PULL_UP);
     940:	2119      	movs	r1, #25
     942:	6820      	ldr	r0, [r4, #0]
     944:	f7ff fdd6 	bl	4f4 <gpio_pin_configure.constprop.0>

    ret = gpio_pin_configure(gpio0_dev, BOARDBUT5, GPIO_INPUT | GPIO_PULL_UP);
     948:	2103      	movs	r1, #3
     94a:	6820      	ldr	r0, [r4, #0]
     94c:	f7ff fdd2 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT6, GPIO_INPUT | GPIO_PULL_UP);
     950:	2104      	movs	r1, #4
     952:	6820      	ldr	r0, [r4, #0]
     954:	f7ff fdce 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT7, GPIO_INPUT | GPIO_PULL_UP);
     958:	211c      	movs	r1, #28
     95a:	6820      	ldr	r0, [r4, #0]
     95c:	f7ff fdca 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT8, GPIO_INPUT | GPIO_PULL_UP);
     960:	211d      	movs	r1, #29
     962:	6820      	ldr	r0, [r4, #0]
     964:	f7ff fdc6 	bl	4f4 <gpio_pin_configure.constprop.0>

    if (ret < 0) {
     968:	1e01      	subs	r1, r0, #0
     96a:	da04      	bge.n	976 <CONFIG_BUTTONS+0x52>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
     96c:	4839      	ldr	r0, [pc, #228]	; (a54 <CONFIG_BUTTONS+0x130>)
    gpio_init_callback(&but7_cb_data, but7press_cbfunction, BIT(BOARDBUT7));
    gpio_add_callback(gpio0_dev, &but7_cb_data);

    gpio_init_callback(&but8_cb_data, but8press_cbfunction, BIT(BOARDBUT8));
    gpio_add_callback(gpio0_dev, &but8_cb_data);
}
     96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
     972:	f006 badf 	b.w	6f34 <printk>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT1, GPIO_INT_EDGE_TO_ACTIVE);
     976:	210b      	movs	r1, #11
     978:	6820      	ldr	r0, [r4, #0]
     97a:	f7ff fded 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT2, GPIO_INT_EDGE_TO_ACTIVE);
     97e:	210c      	movs	r1, #12
     980:	6820      	ldr	r0, [r4, #0]
     982:	f7ff fde9 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT3, GPIO_INT_EDGE_TO_ACTIVE);
     986:	2118      	movs	r1, #24
     988:	6820      	ldr	r0, [r4, #0]
     98a:	f7ff fde5 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT4, GPIO_INT_EDGE_TO_ACTIVE);
     98e:	2119      	movs	r1, #25
     990:	6820      	ldr	r0, [r4, #0]
     992:	f7ff fde1 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT5, GPIO_INT_EDGE_TO_ACTIVE);
     996:	2103      	movs	r1, #3
     998:	6820      	ldr	r0, [r4, #0]
     99a:	f7ff fddd 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT6, GPIO_INT_EDGE_TO_ACTIVE);
     99e:	2104      	movs	r1, #4
     9a0:	6820      	ldr	r0, [r4, #0]
     9a2:	f7ff fdd9 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT7, GPIO_INT_EDGE_TO_ACTIVE);
     9a6:	211c      	movs	r1, #28
     9a8:	6820      	ldr	r0, [r4, #0]
     9aa:	f7ff fdd5 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT8, GPIO_INT_EDGE_TO_ACTIVE);
     9ae:	211d      	movs	r1, #29
     9b0:	6820      	ldr	r0, [r4, #0]
     9b2:	f7ff fdd1 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
     9b6:	4601      	mov	r1, r0
     9b8:	b108      	cbz	r0, 9be <CONFIG_BUTTONS+0x9a>
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
     9ba:	4827      	ldr	r0, [pc, #156]	; (a58 <CONFIG_BUTTONS+0x134>)
     9bc:	e7d7      	b.n	96e <CONFIG_BUTTONS+0x4a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     9be:	4927      	ldr	r1, [pc, #156]	; (a5c <CONFIG_BUTTONS+0x138>)
     9c0:	4b27      	ldr	r3, [pc, #156]	; (a60 <CONFIG_BUTTONS+0x13c>)
     9c2:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but1_cb_data);
     9c4:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     9c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
     9ca:	608b      	str	r3, [r1, #8]
     9cc:	f006 f9d6 	bl	6d7c <gpio_add_callback>
	callback->handler = handler;
     9d0:	4924      	ldr	r1, [pc, #144]	; (a64 <CONFIG_BUTTONS+0x140>)
     9d2:	4b25      	ldr	r3, [pc, #148]	; (a68 <CONFIG_BUTTONS+0x144>)
     9d4:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but2_cb_data);
     9d6:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9dc:	608b      	str	r3, [r1, #8]
     9de:	f006 f9cd 	bl	6d7c <gpio_add_callback>
	callback->handler = handler;
     9e2:	4922      	ldr	r1, [pc, #136]	; (a6c <CONFIG_BUTTONS+0x148>)
     9e4:	4b22      	ldr	r3, [pc, #136]	; (a70 <CONFIG_BUTTONS+0x14c>)
     9e6:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but3_cb_data);
     9e8:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     9ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     9ee:	608b      	str	r3, [r1, #8]
     9f0:	f006 f9c4 	bl	6d7c <gpio_add_callback>
	callback->handler = handler;
     9f4:	491f      	ldr	r1, [pc, #124]	; (a74 <CONFIG_BUTTONS+0x150>)
     9f6:	4b20      	ldr	r3, [pc, #128]	; (a78 <CONFIG_BUTTONS+0x154>)
     9f8:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but4_cb_data);
     9fa:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     9fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     a00:	608b      	str	r3, [r1, #8]
     a02:	f006 f9bb 	bl	6d7c <gpio_add_callback>
	callback->handler = handler;
     a06:	491d      	ldr	r1, [pc, #116]	; (a7c <CONFIG_BUTTONS+0x158>)
     a08:	4b1d      	ldr	r3, [pc, #116]	; (a80 <CONFIG_BUTTONS+0x15c>)
     a0a:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but5_cb_data);
     a0c:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     a0e:	2308      	movs	r3, #8
     a10:	608b      	str	r3, [r1, #8]
     a12:	f006 f9b3 	bl	6d7c <gpio_add_callback>
	callback->handler = handler;
     a16:	491b      	ldr	r1, [pc, #108]	; (a84 <CONFIG_BUTTONS+0x160>)
     a18:	4b1b      	ldr	r3, [pc, #108]	; (a88 <CONFIG_BUTTONS+0x164>)
     a1a:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but6_cb_data);
     a1c:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     a1e:	2310      	movs	r3, #16
     a20:	608b      	str	r3, [r1, #8]
     a22:	f006 f9ab 	bl	6d7c <gpio_add_callback>
	callback->handler = handler;
     a26:	4919      	ldr	r1, [pc, #100]	; (a8c <CONFIG_BUTTONS+0x168>)
     a28:	4b19      	ldr	r3, [pc, #100]	; (a90 <CONFIG_BUTTONS+0x16c>)
     a2a:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but7_cb_data);
     a2c:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     a32:	608b      	str	r3, [r1, #8]
     a34:	f006 f9a2 	bl	6d7c <gpio_add_callback>
	callback->handler = handler;
     a38:	4916      	ldr	r1, [pc, #88]	; (a94 <CONFIG_BUTTONS+0x170>)
     a3a:	4b17      	ldr	r3, [pc, #92]	; (a98 <CONFIG_BUTTONS+0x174>)
    gpio_add_callback(gpio0_dev, &but8_cb_data);
     a3c:	6820      	ldr	r0, [r4, #0]
     a3e:	604b      	str	r3, [r1, #4]
}
     a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	callback->pin_mask = pin_mask;
     a44:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     a48:	608b      	str	r3, [r1, #8]
    gpio_add_callback(gpio0_dev, &but8_cb_data);
     a4a:	f006 b997 	b.w	6d7c <gpio_add_callback>
     a4e:	bf00      	nop
     a50:	20000354 	.word	0x20000354
     a54:	00007ccc 	.word	0x00007ccc
     a58:	00007cf3 	.word	0x00007cf3
     a5c:	200002d0 	.word	0x200002d0
     a60:	000003f5 	.word	0x000003f5
     a64:	200002dc 	.word	0x200002dc
     a68:	00000415 	.word	0x00000415
     a6c:	200002e8 	.word	0x200002e8
     a70:	00000435 	.word	0x00000435
     a74:	200002f4 	.word	0x200002f4
     a78:	00000455 	.word	0x00000455
     a7c:	20000300 	.word	0x20000300
     a80:	00000475 	.word	0x00000475
     a84:	2000030c 	.word	0x2000030c
     a88:	00000495 	.word	0x00000495
     a8c:	20000318 	.word	0x20000318
     a90:	000004b5 	.word	0x000004b5
     a94:	20000324 	.word	0x20000324
     a98:	000004d5 	.word	0x000004d5

00000a9c <main>:
{
     a9c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     a9e:	480a      	ldr	r0, [pc, #40]	; (ac8 <main+0x2c>)
     aa0:	f003 fd6a 	bl	4578 <z_impl_device_get_binding>
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
     aa4:	4b09      	ldr	r3, [pc, #36]	; (acc <main+0x30>)
     aa6:	6018      	str	r0, [r3, #0]
    if (gpio0_dev == NULL) 
     aa8:	b920      	cbnz	r0, ab4 <main+0x18>
} 
     aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Failed to bind to GPIO0\n\r");        
     aae:	4808      	ldr	r0, [pc, #32]	; (ad0 <main+0x34>)
     ab0:	f006 ba40 	b.w	6f34 <printk>
        printk("Bind to GPIO0 successfull \n\r");        
     ab4:	4807      	ldr	r0, [pc, #28]	; (ad4 <main+0x38>)
     ab6:	f006 fa3d 	bl	6f34 <printk>
    CONFIG_BUTTONS();
     aba:	f7ff ff33 	bl	924 <CONFIG_BUTTONS>
    showMenu(1);
     abe:	2001      	movs	r0, #1
     ac0:	f7ff fd92 	bl	5e8 <showMenu>
    StateMachine();                       
     ac4:	f7ff fea6 	bl	814 <StateMachine>
     ac8:	00007d2a 	.word	0x00007d2a
     acc:	20000354 	.word	0x20000354
     ad0:	00007d31 	.word	0x00007d31
     ad4:	00007d4b 	.word	0x00007d4b

00000ad8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     adc:	b091      	sub	sp, #68	; 0x44
     ade:	468b      	mov	fp, r1
     ae0:	9002      	str	r0, [sp, #8]
     ae2:	4692      	mov	sl, r2
     ae4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     ae6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     ae8:	f89a 0000 	ldrb.w	r0, [sl]
     aec:	b908      	cbnz	r0, af2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     aee:	4628      	mov	r0, r5
     af0:	e35e      	b.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
		if (*fp != '%') {
     af2:	2825      	cmp	r0, #37	; 0x25
     af4:	f10a 0701 	add.w	r7, sl, #1
     af8:	d007      	beq.n	b0a <cbvprintf+0x32>
			OUTC('%');
     afa:	9b02      	ldr	r3, [sp, #8]
     afc:	4659      	mov	r1, fp
     afe:	4798      	blx	r3
     b00:	2800      	cmp	r0, #0
     b02:	f2c0 8355 	blt.w	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
     b06:	3501      	adds	r5, #1
			break;
     b08:	e210      	b.n	f2c <cbvprintf+0x454>
		} state = {
     b0a:	2218      	movs	r2, #24
     b0c:	2100      	movs	r1, #0
     b0e:	a80a      	add	r0, sp, #40	; 0x28
     b10:	f006 fa71 	bl	6ff6 <memset>
	if (*sp == '%') {
     b14:	f89a 3001 	ldrb.w	r3, [sl, #1]
     b18:	2b25      	cmp	r3, #37	; 0x25
     b1a:	d078      	beq.n	c0e <cbvprintf+0x136>
     b1c:	2200      	movs	r2, #0
     b1e:	4694      	mov	ip, r2
     b20:	4616      	mov	r6, r2
     b22:	4696      	mov	lr, r2
     b24:	4610      	mov	r0, r2
     b26:	4639      	mov	r1, r7
		switch (*sp) {
     b28:	f817 3b01 	ldrb.w	r3, [r7], #1
     b2c:	2b2b      	cmp	r3, #43	; 0x2b
     b2e:	f000 809d 	beq.w	c6c <cbvprintf+0x194>
     b32:	f200 8094 	bhi.w	c5e <cbvprintf+0x186>
     b36:	2b20      	cmp	r3, #32
     b38:	f000 809b 	beq.w	c72 <cbvprintf+0x19a>
     b3c:	2b23      	cmp	r3, #35	; 0x23
     b3e:	f000 809a 	beq.w	c76 <cbvprintf+0x19e>
     b42:	b128      	cbz	r0, b50 <cbvprintf+0x78>
     b44:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b48:	f040 0004 	orr.w	r0, r0, #4
     b4c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b50:	f1be 0f00 	cmp.w	lr, #0
     b54:	d005      	beq.n	b62 <cbvprintf+0x8a>
     b56:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b5a:	f040 0008 	orr.w	r0, r0, #8
     b5e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b62:	b12e      	cbz	r6, b70 <cbvprintf+0x98>
     b64:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b68:	f040 0010 	orr.w	r0, r0, #16
     b6c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b70:	f1bc 0f00 	cmp.w	ip, #0
     b74:	d005      	beq.n	b82 <cbvprintf+0xaa>
     b76:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b7a:	f040 0020 	orr.w	r0, r0, #32
     b7e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b82:	b12a      	cbz	r2, b90 <cbvprintf+0xb8>
     b84:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b8c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b94:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b98:	2844      	cmp	r0, #68	; 0x44
     b9a:	d103      	bne.n	ba4 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b9c:	f36f 1286 	bfc	r2, #6, #1
     ba0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     ba4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     ba8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     baa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     bae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     bb2:	d17b      	bne.n	cac <cbvprintf+0x1d4>
		conv->width_star = true;
     bb4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     bb8:	f042 0201 	orr.w	r2, r2, #1
     bbc:	1c4b      	adds	r3, r1, #1
     bbe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     bc2:	781a      	ldrb	r2, [r3, #0]
     bc4:	2a2e      	cmp	r2, #46	; 0x2e
     bc6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     bca:	bf0c      	ite	eq
     bcc:	2101      	moveq	r1, #1
     bce:	2100      	movne	r1, #0
     bd0:	f361 0241 	bfi	r2, r1, #1, #1
     bd4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     bd8:	d174      	bne.n	cc4 <cbvprintf+0x1ec>
	if (*sp == '*') {
     bda:	785a      	ldrb	r2, [r3, #1]
     bdc:	2a2a      	cmp	r2, #42	; 0x2a
     bde:	d06a      	beq.n	cb6 <cbvprintf+0x1de>
     be0:	3301      	adds	r3, #1
	size_t val = 0;
     be2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     be4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     be6:	4618      	mov	r0, r3
     be8:	f810 2b01 	ldrb.w	r2, [r0], #1
     bec:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     bf0:	2f09      	cmp	r7, #9
     bf2:	f240 808e 	bls.w	d12 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     bf6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     bfa:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     bfc:	f3c2 0040 	ubfx	r0, r2, #1, #1
     c00:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     c04:	f361 0241 	bfi	r2, r1, #1, #1
     c08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     c0c:	e05a      	b.n	cc4 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     c0e:	f10a 0702 	add.w	r7, sl, #2
     c12:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     c16:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c1a:	07d9      	lsls	r1, r3, #31
     c1c:	f140 8149 	bpl.w	eb2 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     c20:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     c24:	f1b9 0f00 	cmp.w	r9, #0
     c28:	da07      	bge.n	c3a <cbvprintf+0x162>
				conv->flag_dash = true;
     c2a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     c2e:	f042 0204 	orr.w	r2, r2, #4
     c32:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     c36:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     c3a:	075a      	lsls	r2, r3, #29
     c3c:	f140 8142 	bpl.w	ec4 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     c40:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c44:	f1b8 0f00 	cmp.w	r8, #0
     c48:	f280 8141 	bge.w	ece <cbvprintf+0x3f6>
				conv->prec_present = false;
     c4c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c50:	f36f 0341 	bfc	r3, #1, #1
     c54:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c58:	f04f 38ff 	mov.w	r8, #4294967295
     c5c:	e137      	b.n	ece <cbvprintf+0x3f6>
		switch (*sp) {
     c5e:	2b2d      	cmp	r3, #45	; 0x2d
     c60:	d00c      	beq.n	c7c <cbvprintf+0x1a4>
     c62:	2b30      	cmp	r3, #48	; 0x30
     c64:	f47f af6d 	bne.w	b42 <cbvprintf+0x6a>
			conv->flag_zero = true;
     c68:	2201      	movs	r2, #1
	} while (loop);
     c6a:	e75c      	b.n	b26 <cbvprintf+0x4e>
			conv->flag_plus = true;
     c6c:	f04f 0e01 	mov.w	lr, #1
     c70:	e759      	b.n	b26 <cbvprintf+0x4e>
			conv->flag_space = true;
     c72:	2601      	movs	r6, #1
     c74:	e757      	b.n	b26 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c76:	f04f 0c01 	mov.w	ip, #1
     c7a:	e754      	b.n	b26 <cbvprintf+0x4e>
		switch (*sp) {
     c7c:	2001      	movs	r0, #1
     c7e:	e752      	b.n	b26 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c80:	fb0c 0202 	mla	r2, ip, r2, r0
     c84:	3a30      	subs	r2, #48	; 0x30
     c86:	4633      	mov	r3, r6
     c88:	461e      	mov	r6, r3
     c8a:	f816 0b01 	ldrb.w	r0, [r6], #1
     c8e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c92:	2f09      	cmp	r7, #9
     c94:	d9f4      	bls.n	c80 <cbvprintf+0x1a8>
	if (sp != wp) {
     c96:	4299      	cmp	r1, r3
     c98:	d093      	beq.n	bc2 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c9a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c9e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     ca0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     ca2:	f362 0141 	bfi	r1, r2, #1, #1
     ca6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     caa:	e78a      	b.n	bc2 <cbvprintf+0xea>
     cac:	460b      	mov	r3, r1
	size_t val = 0;
     cae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     cb0:	f04f 0c0a 	mov.w	ip, #10
     cb4:	e7e8      	b.n	c88 <cbvprintf+0x1b0>
		conv->prec_star = true;
     cb6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cba:	f042 0204 	orr.w	r2, r2, #4
     cbe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     cc2:	3302      	adds	r3, #2
	switch (*sp) {
     cc4:	461f      	mov	r7, r3
     cc6:	f817 2b01 	ldrb.w	r2, [r7], #1
     cca:	2a6c      	cmp	r2, #108	; 0x6c
     ccc:	d041      	beq.n	d52 <cbvprintf+0x27a>
     cce:	d825      	bhi.n	d1c <cbvprintf+0x244>
     cd0:	2a68      	cmp	r2, #104	; 0x68
     cd2:	d02b      	beq.n	d2c <cbvprintf+0x254>
     cd4:	2a6a      	cmp	r2, #106	; 0x6a
     cd6:	d046      	beq.n	d66 <cbvprintf+0x28e>
     cd8:	2a4c      	cmp	r2, #76	; 0x4c
     cda:	d04c      	beq.n	d76 <cbvprintf+0x29e>
     cdc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     cde:	f817 2b01 	ldrb.w	r2, [r7], #1
     ce2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ce6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     cea:	2a78      	cmp	r2, #120	; 0x78
     cec:	f200 80d9 	bhi.w	ea2 <cbvprintf+0x3ca>
     cf0:	2a57      	cmp	r2, #87	; 0x57
     cf2:	d84d      	bhi.n	d90 <cbvprintf+0x2b8>
     cf4:	2a41      	cmp	r2, #65	; 0x41
     cf6:	d003      	beq.n	d00 <cbvprintf+0x228>
     cf8:	3a45      	subs	r2, #69	; 0x45
     cfa:	2a02      	cmp	r2, #2
     cfc:	f200 80d1 	bhi.w	ea2 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     d00:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d04:	2204      	movs	r2, #4
     d06:	f362 0302 	bfi	r3, r2, #0, #3
     d0a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     d0e:	2301      	movs	r3, #1
			break;
     d10:	e09e      	b.n	e50 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     d12:	fb06 2101 	mla	r1, r6, r1, r2
     d16:	3930      	subs	r1, #48	; 0x30
     d18:	4603      	mov	r3, r0
     d1a:	e764      	b.n	be6 <cbvprintf+0x10e>
	switch (*sp) {
     d1c:	2a74      	cmp	r2, #116	; 0x74
     d1e:	d026      	beq.n	d6e <cbvprintf+0x296>
     d20:	2a7a      	cmp	r2, #122	; 0x7a
     d22:	d1db      	bne.n	cdc <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     d24:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d28:	2206      	movs	r2, #6
     d2a:	e00d      	b.n	d48 <cbvprintf+0x270>
		if (*++sp == 'h') {
     d2c:	785a      	ldrb	r2, [r3, #1]
     d2e:	2a68      	cmp	r2, #104	; 0x68
     d30:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d34:	d106      	bne.n	d44 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     d36:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d38:	f361 02c6 	bfi	r2, r1, #3, #4
     d3c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     d40:	1c9f      	adds	r7, r3, #2
     d42:	e7cc      	b.n	cde <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     d44:	4613      	mov	r3, r2
     d46:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d48:	f362 03c6 	bfi	r3, r2, #3, #4
     d4c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d50:	e7c5      	b.n	cde <cbvprintf+0x206>
		if (*++sp == 'l') {
     d52:	785a      	ldrb	r2, [r3, #1]
     d54:	2a6c      	cmp	r2, #108	; 0x6c
     d56:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d5a:	d101      	bne.n	d60 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d5c:	2104      	movs	r1, #4
     d5e:	e7eb      	b.n	d38 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     d60:	4613      	mov	r3, r2
     d62:	2203      	movs	r2, #3
     d64:	e7f0      	b.n	d48 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     d66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d6a:	2205      	movs	r2, #5
     d6c:	e7ec      	b.n	d48 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d72:	2207      	movs	r2, #7
     d74:	e7e8      	b.n	d48 <cbvprintf+0x270>
		conv->unsupported = true;
     d76:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d7a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d7e:	f023 0302 	bic.w	r3, r3, #2
     d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d86:	f043 0302 	orr.w	r3, r3, #2
     d8a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d8e:	e7a6      	b.n	cde <cbvprintf+0x206>
     d90:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d94:	2920      	cmp	r1, #32
     d96:	f200 8084 	bhi.w	ea2 <cbvprintf+0x3ca>
     d9a:	a001      	add	r0, pc, #4	; (adr r0, da0 <cbvprintf+0x2c8>)
     d9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     da0:	00000e65 	.word	0x00000e65
     da4:	00000ea3 	.word	0x00000ea3
     da8:	00000ea3 	.word	0x00000ea3
     dac:	00000ea3 	.word	0x00000ea3
     db0:	00000ea3 	.word	0x00000ea3
     db4:	00000ea3 	.word	0x00000ea3
     db8:	00000ea3 	.word	0x00000ea3
     dbc:	00000ea3 	.word	0x00000ea3
     dc0:	00000ea3 	.word	0x00000ea3
     dc4:	00000d01 	.word	0x00000d01
     dc8:	00000ea3 	.word	0x00000ea3
     dcc:	00000e65 	.word	0x00000e65
     dd0:	00000e25 	.word	0x00000e25
     dd4:	00000d01 	.word	0x00000d01
     dd8:	00000d01 	.word	0x00000d01
     ddc:	00000d01 	.word	0x00000d01
     de0:	00000ea3 	.word	0x00000ea3
     de4:	00000e25 	.word	0x00000e25
     de8:	00000ea3 	.word	0x00000ea3
     dec:	00000ea3 	.word	0x00000ea3
     df0:	00000ea3 	.word	0x00000ea3
     df4:	00000ea3 	.word	0x00000ea3
     df8:	00000e6d 	.word	0x00000e6d
     dfc:	00000e65 	.word	0x00000e65
     e00:	00000e89 	.word	0x00000e89
     e04:	00000ea3 	.word	0x00000ea3
     e08:	00000ea3 	.word	0x00000ea3
     e0c:	00000e89 	.word	0x00000e89
     e10:	00000ea3 	.word	0x00000ea3
     e14:	00000e65 	.word	0x00000e65
     e18:	00000ea3 	.word	0x00000ea3
     e1c:	00000ea3 	.word	0x00000ea3
     e20:	00000e65 	.word	0x00000e65
		conv->specifier_cat = SPECIFIER_SINT;
     e24:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e28:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     e2a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     e2e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e32:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e34:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e38:	bf02      	ittt	eq
     e3a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e3e:	f041 0101 	orreq.w	r1, r1, #1
     e42:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e46:	2a63      	cmp	r2, #99	; 0x63
     e48:	d131      	bne.n	eae <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e4a:	3b00      	subs	r3, #0
     e4c:	bf18      	it	ne
     e4e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e50:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e54:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e58:	430b      	orrs	r3, r1
     e5a:	f363 0241 	bfi	r2, r3, #1, #1
     e5e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e62:	e6d8      	b.n	c16 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     e64:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e68:	2002      	movs	r0, #2
     e6a:	e7de      	b.n	e2a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e6c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e70:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e74:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e78:	2103      	movs	r1, #3
     e7a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e7e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e80:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e84:	4143      	adcs	r3, r0
     e86:	e7e3      	b.n	e50 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e88:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     e8c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     e8e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e92:	f361 0202 	bfi	r2, r1, #0, #3
     e96:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e9a:	bf14      	ite	ne
     e9c:	2301      	movne	r3, #1
     e9e:	2300      	moveq	r3, #0
     ea0:	e7d6      	b.n	e50 <cbvprintf+0x378>
		conv->invalid = true;
     ea2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ea6:	f043 0301 	orr.w	r3, r3, #1
     eaa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     eae:	2300      	movs	r3, #0
     eb0:	e7ce      	b.n	e50 <cbvprintf+0x378>
		} else if (conv->width_present) {
     eb2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     eb6:	2a00      	cmp	r2, #0
			width = conv->width_value;
     eb8:	bfb4      	ite	lt
     eba:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     ebe:	f04f 39ff 	movge.w	r9, #4294967295
     ec2:	e6ba      	b.n	c3a <cbvprintf+0x162>
		} else if (conv->prec_present) {
     ec4:	079b      	lsls	r3, r3, #30
     ec6:	f57f aec7 	bpl.w	c58 <cbvprintf+0x180>
			precision = conv->prec_value;
     eca:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     ece:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     ed2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ed4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     ed8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     edc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     ee0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     ee2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     ee6:	d136      	bne.n	f56 <cbvprintf+0x47e>
			switch (length_mod) {
     ee8:	1ed3      	subs	r3, r2, #3
     eea:	2b04      	cmp	r3, #4
     eec:	d820      	bhi.n	f30 <cbvprintf+0x458>
     eee:	e8df f003 	tbb	[pc, r3]
     ef2:	0703      	.short	0x0703
     ef4:	1f07      	.short	0x1f07
     ef6:	1f          	.byte	0x1f
     ef7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     ef8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     efc:	17c1      	asrs	r1, r0, #31
     efe:	e004      	b.n	f0a <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     f00:	3407      	adds	r4, #7
     f02:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     f06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     f0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     f0e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     f12:	f013 0603 	ands.w	r6, r3, #3
     f16:	d054      	beq.n	fc2 <cbvprintf+0x4ea>
			OUTS(sp, fp);
     f18:	9802      	ldr	r0, [sp, #8]
     f1a:	463b      	mov	r3, r7
     f1c:	4652      	mov	r2, sl
     f1e:	4659      	mov	r1, fp
     f20:	f005 ff86 	bl	6e30 <outs>
     f24:	2800      	cmp	r0, #0
     f26:	f2c0 8143 	blt.w	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
     f2a:	4405      	add	r5, r0
			continue;
     f2c:	46ba      	mov	sl, r7
     f2e:	e5db      	b.n	ae8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f30:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     f34:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f36:	ea4f 71e0 	mov.w	r1, r0, asr #31
     f3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f3e:	d105      	bne.n	f4c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     f40:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     f44:	930a      	str	r3, [sp, #40]	; 0x28
     f46:	2300      	movs	r3, #0
     f48:	930b      	str	r3, [sp, #44]	; 0x2c
     f4a:	e7e0      	b.n	f0e <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     f4c:	2a02      	cmp	r2, #2
     f4e:	d1de      	bne.n	f0e <cbvprintf+0x436>
				value->sint = (short)value->sint;
     f50:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     f54:	e7d2      	b.n	efc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f56:	2b02      	cmp	r3, #2
     f58:	d123      	bne.n	fa2 <cbvprintf+0x4ca>
			switch (length_mod) {
     f5a:	1ed3      	subs	r3, r2, #3
     f5c:	2b04      	cmp	r3, #4
     f5e:	d813      	bhi.n	f88 <cbvprintf+0x4b0>
     f60:	e8df f003 	tbb	[pc, r3]
     f64:	120a0a03 	.word	0x120a0a03
     f68:	12          	.byte	0x12
     f69:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     f6a:	6820      	ldr	r0, [r4, #0]
     f6c:	900a      	str	r0, [sp, #40]	; 0x28
     f6e:	2100      	movs	r1, #0
     f70:	1d23      	adds	r3, r4, #4
     f72:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f74:	461c      	mov	r4, r3
     f76:	e7ca      	b.n	f0e <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     f78:	3407      	adds	r4, #7
     f7a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     f7e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     f82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     f86:	e7f5      	b.n	f74 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     f88:	f854 3b04 	ldr.w	r3, [r4], #4
     f8c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f8e:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     f90:	f04f 0300 	mov.w	r3, #0
     f94:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f96:	d0d3      	beq.n	f40 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     f98:	2a02      	cmp	r2, #2
     f9a:	d1b8      	bne.n	f0e <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     f9c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     fa0:	e7d0      	b.n	f44 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     fa2:	2b04      	cmp	r3, #4
     fa4:	d107      	bne.n	fb6 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     fa6:	3407      	adds	r4, #7
     fa8:	f024 0407 	bic.w	r4, r4, #7
     fac:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     fb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     fb4:	e7ab      	b.n	f0e <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     fb6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     fb8:	bf04      	itt	eq
     fba:	f854 3b04 	ldreq.w	r3, [r4], #4
     fbe:	930a      	streq	r3, [sp, #40]	; 0x28
     fc0:	e7a5      	b.n	f0e <cbvprintf+0x436>
		switch (conv->specifier) {
     fc2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     fc6:	2878      	cmp	r0, #120	; 0x78
     fc8:	d8b0      	bhi.n	f2c <cbvprintf+0x454>
     fca:	2862      	cmp	r0, #98	; 0x62
     fcc:	d822      	bhi.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     fce:	2825      	cmp	r0, #37	; 0x25
     fd0:	f43f ad93 	beq.w	afa <cbvprintf+0x22>
     fd4:	2858      	cmp	r0, #88	; 0x58
     fd6:	d1a9      	bne.n	f2c <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     fd8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     fdc:	9300      	str	r3, [sp, #0]
     fde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     fe2:	ab04      	add	r3, sp, #16
     fe4:	aa0c      	add	r2, sp, #48	; 0x30
     fe6:	f005 fed8 	bl	6d9a <encode_uint>
     fea:	4682      	mov	sl, r0
			if (precision >= 0) {
     fec:	f1b8 0f00 	cmp.w	r8, #0
     ff0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     ff4:	db0c      	blt.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
				conv->flag_zero = false;
     ff6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     ffa:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     ffe:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1002:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1004:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1008:	d902      	bls.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
					conv->pad0_value = precision - (int)len;
    100a:	eba8 0303 	sub.w	r3, r8, r3
    100e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1010:	4680      	mov	r8, r0
    1012:	e03d      	b.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
    1014:	3863      	subs	r0, #99	; 0x63
    1016:	2815      	cmp	r0, #21
    1018:	d888      	bhi.n	f2c <cbvprintf+0x454>
    101a:	a101      	add	r1, pc, #4	; (adr r1, 1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    101c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1020:	000010a1 	.word	0x000010a1
    1024:	00001105 	.word	0x00001105
    1028:	00000f2d 	.word	0x00000f2d
    102c:	00000f2d 	.word	0x00000f2d
    1030:	00000f2d 	.word	0x00000f2d
    1034:	00000f2d 	.word	0x00000f2d
    1038:	00001105 	.word	0x00001105
    103c:	00000f2d 	.word	0x00000f2d
    1040:	00000f2d 	.word	0x00000f2d
    1044:	00000f2d 	.word	0x00000f2d
    1048:	00000f2d 	.word	0x00000f2d
    104c:	00001163 	.word	0x00001163
    1050:	00001131 	.word	0x00001131
    1054:	00001135 	.word	0x00001135
    1058:	00000f2d 	.word	0x00000f2d
    105c:	00000f2d 	.word	0x00000f2d
    1060:	00001079 	.word	0x00001079
    1064:	00000f2d 	.word	0x00000f2d
    1068:	00001131 	.word	0x00001131
    106c:	00000f2d 	.word	0x00000f2d
    1070:	00000f2d 	.word	0x00000f2d
    1074:	00001131 	.word	0x00001131
			if (precision >= 0) {
    1078:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    107c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1080:	db0a      	blt.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
				len = strnlen(bps, precision);
    1082:	4641      	mov	r1, r8
    1084:	4650      	mov	r0, sl
    1086:	f005 ff96 	bl	6fb6 <strnlen>
			bpe = bps + len;
    108a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    108e:	2600      	movs	r6, #0
		if (bps == NULL) {
    1090:	f1ba 0f00 	cmp.w	sl, #0
    1094:	d10c      	bne.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    1096:	e749      	b.n	f2c <cbvprintf+0x454>
				len = strlen(bps);
    1098:	4650      	mov	r0, sl
    109a:	f005 ff85 	bl	6fa8 <strlen>
    109e:	e7f4      	b.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10a2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    10a6:	2600      	movs	r6, #0
			bpe = buf + 1;
    10a8:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    10ac:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    10b0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    10b4:	b106      	cbz	r6, 10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
			nj_len += 1U;
    10b6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    10b8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    10bc:	06d0      	lsls	r0, r2, #27
    10be:	d56b      	bpl.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
			nj_len += 2U;
    10c0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    10c2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    10c4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    10c6:	bf48      	it	mi
    10c8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    10ca:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    10cc:	bf48      	it	mi
    10ce:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    10d0:	f1b9 0f00 	cmp.w	r9, #0
    10d4:	dd79      	ble.n	11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
			if (!conv->flag_dash) {
    10d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    10da:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    10de:	f3c2 0380 	ubfx	r3, r2, #2, #1
    10e2:	9303      	str	r3, [sp, #12]
    10e4:	0753      	lsls	r3, r2, #29
    10e6:	d470      	bmi.n	11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
				if (conv->flag_zero) {
    10e8:	0650      	lsls	r0, r2, #25
    10ea:	d564      	bpl.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
					if (sign != 0) {
    10ec:	b146      	cbz	r6, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
						OUTC(sign);
    10ee:	9b02      	ldr	r3, [sp, #8]
    10f0:	4659      	mov	r1, fp
    10f2:	4630      	mov	r0, r6
    10f4:	4798      	blx	r3
    10f6:	2800      	cmp	r0, #0
    10f8:	db5a      	blt.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
						sign = 0;
    10fa:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    10fc:	3501      	adds	r5, #1
						sign = 0;
    10fe:	461e      	mov	r6, r3
					pad = '0';
    1100:	2330      	movs	r3, #48	; 0x30
    1102:	e059      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
			if (conv->flag_plus) {
    1104:	071e      	lsls	r6, r3, #28
    1106:	d411      	bmi.n	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
				sign = ' ';
    1108:	f013 0610 	ands.w	r6, r3, #16
    110c:	bf18      	it	ne
    110e:	2620      	movne	r6, #32
			sint = value->sint;
    1110:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1114:	2a00      	cmp	r2, #0
    1116:	f173 0100 	sbcs.w	r1, r3, #0
    111a:	f6bf af5d 	bge.w	fd8 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    111e:	4252      	negs	r2, r2
    1120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1124:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1128:	262d      	movs	r6, #45	; 0x2d
    112a:	e755      	b.n	fd8 <cbvprintf+0x500>
				sign = '+';
    112c:	262b      	movs	r6, #43	; 0x2b
    112e:	e7ef      	b.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
		switch (conv->specifier) {
    1130:	2600      	movs	r6, #0
    1132:	e751      	b.n	fd8 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1134:	980a      	ldr	r0, [sp, #40]	; 0x28
    1136:	b348      	cbz	r0, 118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1138:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    113c:	9300      	str	r3, [sp, #0]
    113e:	aa0c      	add	r2, sp, #48	; 0x30
    1140:	ab04      	add	r3, sp, #16
    1142:	2100      	movs	r1, #0
    1144:	f005 fe29 	bl	6d9a <encode_uint>
				conv->altform_0c = true;
    1148:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    114c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1150:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1154:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1158:	4682      	mov	sl, r0
				conv->altform_0c = true;
    115a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    115e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1160:	e744      	b.n	fec <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1164:	2a07      	cmp	r2, #7
    1166:	f63f aee1 	bhi.w	f2c <cbvprintf+0x454>
    116a:	e8df f002 	tbb	[pc, r2]
    116e:	040d      	.short	0x040d
    1170:	08080d06 	.word	0x08080d06
    1174:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1176:	701d      	strb	r5, [r3, #0]
		break;
    1178:	e6d8      	b.n	f2c <cbvprintf+0x454>
		*(short *)dp = (short)count;
    117a:	801d      	strh	r5, [r3, #0]
		break;
    117c:	e6d6      	b.n	f2c <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    117e:	4628      	mov	r0, r5
    1180:	17e9      	asrs	r1, r5, #31
    1182:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1186:	e6d1      	b.n	f2c <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1188:	601d      	str	r5, [r3, #0]
		break;
    118a:	e6cf      	b.n	f2c <cbvprintf+0x454>
			bpe = bps + 5;
    118c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    1190:	4606      	mov	r6, r0
			bps = "(nil)";
    1192:	f1a8 0a05 	sub.w	sl, r8, #5
    1196:	e78b      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
		} else if (conv->altform_0) {
    1198:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    119a:	bf48      	it	mi
    119c:	3301      	addmi	r3, #1
    119e:	e790      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
					OUTC(pad);
    11a0:	4618      	mov	r0, r3
    11a2:	9303      	str	r3, [sp, #12]
    11a4:	4659      	mov	r1, fp
    11a6:	9b02      	ldr	r3, [sp, #8]
    11a8:	4798      	blx	r3
    11aa:	2800      	cmp	r0, #0
    11ac:	9b03      	ldr	r3, [sp, #12]
    11ae:	da04      	bge.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
#undef OUTS
#undef OUTC
}
    11b0:	b011      	add	sp, #68	; 0x44
    11b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    11b6:	2320      	movs	r3, #32
    11b8:	444d      	add	r5, r9
    11ba:	464a      	mov	r2, r9
				while (width-- > 0) {
    11bc:	2a00      	cmp	r2, #0
    11be:	eba5 0109 	sub.w	r1, r5, r9
    11c2:	f109 39ff 	add.w	r9, r9, #4294967295
    11c6:	dceb      	bgt.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    11c8:	460d      	mov	r5, r1
		if (sign != 0) {
    11ca:	b136      	cbz	r6, 11da <CONFIG_FPROTECT_BLOCK_SIZE+0x1da>
			OUTC(sign);
    11cc:	9b02      	ldr	r3, [sp, #8]
    11ce:	4659      	mov	r1, fp
    11d0:	4630      	mov	r0, r6
    11d2:	4798      	blx	r3
    11d4:	2800      	cmp	r0, #0
    11d6:	dbeb      	blt.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    11d8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    11da:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11de:	06d9      	lsls	r1, r3, #27
    11e0:	d401      	bmi.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
    11e2:	071a      	lsls	r2, r3, #28
    11e4:	d506      	bpl.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
				OUTC('0');
    11e6:	9b02      	ldr	r3, [sp, #8]
    11e8:	4659      	mov	r1, fp
    11ea:	2030      	movs	r0, #48	; 0x30
    11ec:	4798      	blx	r3
    11ee:	2800      	cmp	r0, #0
    11f0:	dbde      	blt.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    11f2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    11f4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11f8:	06db      	lsls	r3, r3, #27
    11fa:	d507      	bpl.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
				OUTC(conv->specifier);
    11fc:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1200:	9b02      	ldr	r3, [sp, #8]
    1202:	4659      	mov	r1, fp
    1204:	4798      	blx	r3
    1206:	2800      	cmp	r0, #0
    1208:	dbd2      	blt.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    120a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    120c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    120e:	442e      	add	r6, r5
    1210:	1b73      	subs	r3, r6, r5
    1212:	2b00      	cmp	r3, #0
    1214:	dc16      	bgt.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
			OUTS(bps, bpe);
    1216:	9802      	ldr	r0, [sp, #8]
    1218:	4643      	mov	r3, r8
    121a:	4652      	mov	r2, sl
    121c:	4659      	mov	r1, fp
    121e:	f005 fe07 	bl	6e30 <outs>
    1222:	2800      	cmp	r0, #0
    1224:	dbc4      	blt.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    1226:	4405      	add	r5, r0
		while (width > 0) {
    1228:	44a9      	add	r9, r5
    122a:	eba9 0305 	sub.w	r3, r9, r5
    122e:	2b00      	cmp	r3, #0
    1230:	f77f ae7c 	ble.w	f2c <cbvprintf+0x454>
			OUTC(' ');
    1234:	9b02      	ldr	r3, [sp, #8]
    1236:	4659      	mov	r1, fp
    1238:	2020      	movs	r0, #32
    123a:	4798      	blx	r3
    123c:	2800      	cmp	r0, #0
    123e:	dbb7      	blt.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    1240:	3501      	adds	r5, #1
			--width;
    1242:	e7f2      	b.n	122a <CONFIG_FPROTECT_BLOCK_SIZE+0x22a>
				OUTC('0');
    1244:	9b02      	ldr	r3, [sp, #8]
    1246:	4659      	mov	r1, fp
    1248:	2030      	movs	r0, #48	; 0x30
    124a:	4798      	blx	r3
    124c:	2800      	cmp	r0, #0
    124e:	dbaf      	blt.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    1250:	3501      	adds	r5, #1
    1252:	e7dd      	b.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1254:	00007d6d 	.word	0x00007d6d

00001258 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1258:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    125a:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    125c:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    125e:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    1262:	2c03      	cmp	r4, #3
{
    1264:	4605      	mov	r5, r0
	switch (method) {
    1266:	d002      	beq.n	126e <sys_notify_finalize+0x16>
    1268:	b12c      	cbz	r4, 1276 <sys_notify_finalize+0x1e>
    126a:	2000      	movs	r0, #0
    126c:	e000      	b.n	1270 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    126e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1270:	2300      	movs	r3, #0
    1272:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1274:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    1276:	4a05      	ldr	r2, [pc, #20]	; (128c <sys_notify_finalize+0x34>)
    1278:	4905      	ldr	r1, [pc, #20]	; (1290 <sys_notify_finalize+0x38>)
    127a:	4806      	ldr	r0, [pc, #24]	; (1294 <sys_notify_finalize+0x3c>)
    127c:	2345      	movs	r3, #69	; 0x45
    127e:	f005 fe59 	bl	6f34 <printk>
    1282:	4802      	ldr	r0, [pc, #8]	; (128c <sys_notify_finalize+0x34>)
    1284:	2145      	movs	r1, #69	; 0x45
    1286:	f005 fd81 	bl	6d8c <assert_post_action>
    128a:	e7ee      	b.n	126a <sys_notify_finalize+0x12>
    128c:	00007d6e 	.word	0x00007d6e
    1290:	00007e6f 	.word	0x00007e6f
    1294:	000079ac 	.word	0x000079ac

00001298 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1298:	4801      	ldr	r0, [pc, #4]	; (12a0 <nrf_cc3xx_platform_abort_init+0x8>)
    129a:	f005 bbdd 	b.w	6a58 <nrf_cc3xx_platform_set_abort>
    129e:	bf00      	nop
    12a0:	000076d8 	.word	0x000076d8

000012a4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12a4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    12a6:	b1d0      	cbz	r0, 12de <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    12a8:	6843      	ldr	r3, [r0, #4]
    12aa:	2b04      	cmp	r3, #4
    12ac:	d111      	bne.n	12d2 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    12ae:	2200      	movs	r2, #0
    12b0:	6803      	ldr	r3, [r0, #0]
    12b2:	f3bf 8f5b 	dmb	ish
    12b6:	e853 1f00 	ldrex	r1, [r3]
    12ba:	2901      	cmp	r1, #1
    12bc:	d103      	bne.n	12c6 <mutex_unlock_platform+0x22>
    12be:	e843 2000 	strex	r0, r2, [r3]
    12c2:	2800      	cmp	r0, #0
    12c4:	d1f7      	bne.n	12b6 <mutex_unlock_platform+0x12>
    12c6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12ca:	4807      	ldr	r0, [pc, #28]	; (12e8 <mutex_unlock_platform+0x44>)
    12cc:	bf08      	it	eq
    12ce:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    12d0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12d2:	b13b      	cbz	r3, 12e4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    12d4:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    12d6:	f003 fca7 	bl	4c28 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    12da:	2000      	movs	r0, #0
    12dc:	e7f8      	b.n	12d0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    12de:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    12e2:	e7f5      	b.n	12d0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    12e4:	4801      	ldr	r0, [pc, #4]	; (12ec <mutex_unlock_platform+0x48>)
    12e6:	e7f3      	b.n	12d0 <mutex_unlock_platform+0x2c>
    12e8:	ffff8fe9 	.word	0xffff8fe9
    12ec:	ffff8fea 	.word	0xffff8fea

000012f0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12f0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    12f2:	4604      	mov	r4, r0
    12f4:	b918      	cbnz	r0, 12fe <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    12f6:	4b0d      	ldr	r3, [pc, #52]	; (132c <mutex_free_platform+0x3c>)
    12f8:	480d      	ldr	r0, [pc, #52]	; (1330 <mutex_free_platform+0x40>)
    12fa:	685b      	ldr	r3, [r3, #4]
    12fc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12fe:	6861      	ldr	r1, [r4, #4]
    1300:	2908      	cmp	r1, #8
    1302:	d00d      	beq.n	1320 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1304:	f031 0304 	bics.w	r3, r1, #4
    1308:	d00a      	beq.n	1320 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    130a:	f011 0102 	ands.w	r1, r1, #2
    130e:	d008      	beq.n	1322 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1310:	4808      	ldr	r0, [pc, #32]	; (1334 <mutex_free_platform+0x44>)
    1312:	4621      	mov	r1, r4
    1314:	f003 fb24 	bl	4960 <k_mem_slab_free>
        mutex->mutex = NULL;
    1318:	2300      	movs	r3, #0
    131a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    131c:	2300      	movs	r3, #0
    131e:	6063      	str	r3, [r4, #4]
}
    1320:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1322:	6820      	ldr	r0, [r4, #0]
    1324:	2214      	movs	r2, #20
    1326:	f005 fe66 	bl	6ff6 <memset>
    132a:	e7f7      	b.n	131c <mutex_free_platform+0x2c>
    132c:	200000e0 	.word	0x200000e0
    1330:	00007d91 	.word	0x00007d91
    1334:	2000035c 	.word	0x2000035c

00001338 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1338:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    133a:	4604      	mov	r4, r0
    133c:	b918      	cbnz	r0, 1346 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    133e:	4b16      	ldr	r3, [pc, #88]	; (1398 <mutex_init_platform+0x60>)
    1340:	4816      	ldr	r0, [pc, #88]	; (139c <mutex_init_platform+0x64>)
    1342:	685b      	ldr	r3, [r3, #4]
    1344:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1346:	6863      	ldr	r3, [r4, #4]
    1348:	2b04      	cmp	r3, #4
    134a:	d023      	beq.n	1394 <mutex_init_platform+0x5c>
    134c:	2b08      	cmp	r3, #8
    134e:	d021      	beq.n	1394 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1350:	b9cb      	cbnz	r3, 1386 <mutex_init_platform+0x4e>
    1352:	6823      	ldr	r3, [r4, #0]
    1354:	b9bb      	cbnz	r3, 1386 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1356:	4812      	ldr	r0, [pc, #72]	; (13a0 <mutex_init_platform+0x68>)
    1358:	f04f 32ff 	mov.w	r2, #4294967295
    135c:	f04f 33ff 	mov.w	r3, #4294967295
    1360:	4621      	mov	r1, r4
    1362:	f003 fa91 	bl	4888 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1366:	b908      	cbnz	r0, 136c <mutex_init_platform+0x34>
    1368:	6823      	ldr	r3, [r4, #0]
    136a:	b91b      	cbnz	r3, 1374 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    136c:	4b0a      	ldr	r3, [pc, #40]	; (1398 <mutex_init_platform+0x60>)
    136e:	480d      	ldr	r0, [pc, #52]	; (13a4 <mutex_init_platform+0x6c>)
    1370:	685b      	ldr	r3, [r3, #4]
    1372:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1374:	6820      	ldr	r0, [r4, #0]
    1376:	2214      	movs	r2, #20
    1378:	2100      	movs	r1, #0
    137a:	f005 fe3c 	bl	6ff6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    137e:	6863      	ldr	r3, [r4, #4]
    1380:	f043 0302 	orr.w	r3, r3, #2
    1384:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1386:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1388:	f006 f826 	bl	73d8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    138c:	6863      	ldr	r3, [r4, #4]
    138e:	f043 0301 	orr.w	r3, r3, #1
    1392:	6063      	str	r3, [r4, #4]
}
    1394:	bd10      	pop	{r4, pc}
    1396:	bf00      	nop
    1398:	200000e0 	.word	0x200000e0
    139c:	00007d91 	.word	0x00007d91
    13a0:	2000035c 	.word	0x2000035c
    13a4:	00007db7 	.word	0x00007db7

000013a8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13a8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    13aa:	b308      	cbz	r0, 13f0 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    13ac:	6843      	ldr	r3, [r0, #4]
    13ae:	2b04      	cmp	r3, #4
    13b0:	d110      	bne.n	13d4 <mutex_lock_platform+0x2c>
    13b2:	2201      	movs	r2, #1
    13b4:	6803      	ldr	r3, [r0, #0]
    13b6:	f3bf 8f5b 	dmb	ish
    13ba:	e853 1f00 	ldrex	r1, [r3]
    13be:	2900      	cmp	r1, #0
    13c0:	d103      	bne.n	13ca <mutex_lock_platform+0x22>
    13c2:	e843 2000 	strex	r0, r2, [r3]
    13c6:	2800      	cmp	r0, #0
    13c8:	d1f7      	bne.n	13ba <mutex_lock_platform+0x12>
    13ca:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13ce:	d10b      	bne.n	13e8 <mutex_lock_platform+0x40>
    13d0:	2000      	movs	r0, #0
}
    13d2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    13d4:	b153      	cbz	r3, 13ec <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    13d6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    13d8:	f04f 32ff 	mov.w	r2, #4294967295
    13dc:	f04f 33ff 	mov.w	r3, #4294967295
    13e0:	f003 fb22 	bl	4a28 <z_impl_k_mutex_lock>
        if (ret == 0) {
    13e4:	2800      	cmp	r0, #0
    13e6:	d0f3      	beq.n	13d0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13e8:	4803      	ldr	r0, [pc, #12]	; (13f8 <mutex_lock_platform+0x50>)
    13ea:	e7f2      	b.n	13d2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    13ec:	4803      	ldr	r0, [pc, #12]	; (13fc <mutex_lock_platform+0x54>)
    13ee:	e7f0      	b.n	13d2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    13f0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    13f4:	e7ed      	b.n	13d2 <mutex_lock_platform+0x2a>
    13f6:	bf00      	nop
    13f8:	ffff8fe9 	.word	0xffff8fe9
    13fc:	ffff8fea 	.word	0xffff8fea

00001400 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1400:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1402:	4906      	ldr	r1, [pc, #24]	; (141c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1404:	4806      	ldr	r0, [pc, #24]	; (1420 <nrf_cc3xx_platform_mutex_init+0x20>)
    1406:	2340      	movs	r3, #64	; 0x40
    1408:	2214      	movs	r2, #20
    140a:	f005 ffc9 	bl	73a0 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    140e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1412:	4904      	ldr	r1, [pc, #16]	; (1424 <nrf_cc3xx_platform_mutex_init+0x24>)
    1414:	4804      	ldr	r0, [pc, #16]	; (1428 <nrf_cc3xx_platform_mutex_init+0x28>)
    1416:	f005 bb81 	b.w	6b1c <nrf_cc3xx_platform_set_mutexes>
    141a:	bf00      	nop
    141c:	2000037c 	.word	0x2000037c
    1420:	2000035c 	.word	0x2000035c
    1424:	000076f0 	.word	0x000076f0
    1428:	000076e0 	.word	0x000076e0

0000142c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1430:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1434:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1436:	f019 0f08 	tst.w	r9, #8
{
    143a:	4604      	mov	r4, r0
    143c:	9203      	str	r2, [sp, #12]
	if (processing) {
    143e:	d022      	beq.n	1486 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1440:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1442:	bf0c      	ite	eq
    1444:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1448:	f049 0920 	orrne.w	r9, r9, #32
    144c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1450:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1452:	4620      	mov	r0, r4
    1454:	f004 ff4e 	bl	62f4 <z_spin_unlock_valid>
    1458:	b968      	cbnz	r0, 1476 <process_event+0x4a>
    145a:	4a9f      	ldr	r2, [pc, #636]	; (16d8 <process_event+0x2ac>)
    145c:	499f      	ldr	r1, [pc, #636]	; (16dc <process_event+0x2b0>)
    145e:	48a0      	ldr	r0, [pc, #640]	; (16e0 <process_event+0x2b4>)
    1460:	23ac      	movs	r3, #172	; 0xac
    1462:	f005 fd67 	bl	6f34 <printk>
    1466:	489f      	ldr	r0, [pc, #636]	; (16e4 <process_event+0x2b8>)
    1468:	4621      	mov	r1, r4
    146a:	f005 fd63 	bl	6f34 <printk>
    146e:	489a      	ldr	r0, [pc, #616]	; (16d8 <process_event+0x2ac>)
    1470:	21ac      	movs	r1, #172	; 0xac
    1472:	f005 fc8b 	bl	6d8c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1476:	9b03      	ldr	r3, [sp, #12]
    1478:	f383 8811 	msr	BASEPRI, r3
    147c:	f3bf 8f6f 	isb	sy
}
    1480:	b005      	add	sp, #20
    1482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    1486:	4f98      	ldr	r7, [pc, #608]	; (16e8 <process_event+0x2bc>)
    1488:	f8df 8254 	ldr.w	r8, [pc, #596]	; 16e0 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    148c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1490:	2902      	cmp	r1, #2
    1492:	d106      	bne.n	14a2 <process_event+0x76>
			evt = process_recheck(mgr);
    1494:	4620      	mov	r0, r4
    1496:	f005 fcf7 	bl	6e88 <process_recheck>
		if (evt == EVT_NOP) {
    149a:	2800      	cmp	r0, #0
    149c:	d0d8      	beq.n	1450 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    149e:	2801      	cmp	r0, #1
    14a0:	d168      	bne.n	1574 <process_event+0x148>
			res = mgr->last_res;
    14a2:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14a6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    14a8:	f1bb 0f00 	cmp.w	fp, #0
    14ac:	da0a      	bge.n	14c4 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    14ae:	2600      	movs	r6, #0
		*clients = mgr->clients;
    14b0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14b2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    14b6:	e9c4 6600 	strd	r6, r6, [r4]
    14ba:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    14be:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    14c0:	9601      	str	r6, [sp, #4]
    14c2:	e027      	b.n	1514 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14c4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    14c8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    14ca:	2901      	cmp	r1, #1
    14cc:	d834      	bhi.n	1538 <process_event+0x10c>
	list->head = NULL;
    14ce:	2100      	movs	r1, #0
    14d0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    14d4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    14d6:	6825      	ldr	r5, [r4, #0]
    14d8:	b29b      	uxth	r3, r3
	list->tail = NULL;
    14da:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    14de:	d10c      	bne.n	14fa <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    14e0:	428d      	cmp	r5, r1
    14e2:	462a      	mov	r2, r5
    14e4:	bf38      	it	cc
    14e6:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14e8:	b12a      	cbz	r2, 14f6 <process_event+0xca>
				mgr->refs += 1U;
    14ea:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    14ec:	6812      	ldr	r2, [r2, #0]
    14ee:	3101      	adds	r1, #1
    14f0:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14f2:	2a00      	cmp	r2, #0
    14f4:	d1f8      	bne.n	14e8 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f6:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    14fa:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    14fc:	4620      	mov	r0, r4
    14fe:	f005 fcc3 	bl	6e88 <process_recheck>
    1502:	4606      	mov	r6, r0
    1504:	2800      	cmp	r0, #0
    1506:	d0db      	beq.n	14c0 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1508:	8ba3      	ldrh	r3, [r4, #28]
    150a:	f043 0320 	orr.w	r3, r3, #32
    150e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1510:	2300      	movs	r3, #0
    1512:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1514:	8ba3      	ldrh	r3, [r4, #28]
    1516:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    151a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    151c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    151e:	d003      	beq.n	1528 <process_event+0xfc>
		if (do_monitors
    1520:	68a2      	ldr	r2, [r4, #8]
    1522:	2a00      	cmp	r2, #0
    1524:	f040 80f0 	bne.w	1708 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    1528:	b91d      	cbnz	r5, 1532 <process_event+0x106>
		    || (transit != NULL)) {
    152a:	9a01      	ldr	r2, [sp, #4]
    152c:	2a00      	cmp	r2, #0
    152e:	f000 8136 	beq.w	179e <process_event+0x372>
    1532:	f04f 0900 	mov.w	r9, #0
    1536:	e0e9      	b.n	170c <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1538:	2a04      	cmp	r2, #4
    153a:	d10e      	bne.n	155a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    153c:	f023 0307 	bic.w	r3, r3, #7
    1540:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1542:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1544:	4620      	mov	r0, r4
    1546:	f005 fc9f 	bl	6e88 <process_recheck>
    154a:	4605      	mov	r5, r0
    154c:	b118      	cbz	r0, 1556 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    154e:	f042 0220 	orr.w	r2, r2, #32
    1552:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1554:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1556:	9501      	str	r5, [sp, #4]
    1558:	e7dc      	b.n	1514 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    155a:	4640      	mov	r0, r8
    155c:	4963      	ldr	r1, [pc, #396]	; (16ec <process_event+0x2c0>)
    155e:	f240 131b 	movw	r3, #283	; 0x11b
    1562:	463a      	mov	r2, r7
    1564:	f005 fce6 	bl	6f34 <printk>
    1568:	f240 111b 	movw	r1, #283	; 0x11b
    156c:	4638      	mov	r0, r7
    156e:	f005 fc0d 	bl	6d8c <assert_post_action>
    1572:	e7ef      	b.n	1554 <process_event+0x128>
		} else if (evt == EVT_START) {
    1574:	2803      	cmp	r0, #3
    1576:	d135      	bne.n	15e4 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1578:	f1b9 0f00 	cmp.w	r9, #0
    157c:	d00b      	beq.n	1596 <process_event+0x16a>
    157e:	495c      	ldr	r1, [pc, #368]	; (16f0 <process_event+0x2c4>)
    1580:	4640      	mov	r0, r8
    1582:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1586:	463a      	mov	r2, r7
    1588:	f005 fcd4 	bl	6f34 <printk>
    158c:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1590:	4638      	mov	r0, r7
    1592:	f005 fbfb 	bl	6d8c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1596:	6823      	ldr	r3, [r4, #0]
    1598:	b95b      	cbnz	r3, 15b2 <process_event+0x186>
    159a:	4956      	ldr	r1, [pc, #344]	; (16f4 <process_event+0x2c8>)
    159c:	4640      	mov	r0, r8
    159e:	f240 1357 	movw	r3, #343	; 0x157
    15a2:	463a      	mov	r2, r7
    15a4:	f005 fcc6 	bl	6f34 <printk>
    15a8:	f240 1157 	movw	r1, #343	; 0x157
    15ac:	4638      	mov	r0, r7
    15ae:	f005 fbed 	bl	6d8c <assert_post_action>
			transit = mgr->transitions->start;
    15b2:	6923      	ldr	r3, [r4, #16]
    15b4:	681b      	ldr	r3, [r3, #0]
    15b6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    15b8:	b95b      	cbnz	r3, 15d2 <process_event+0x1a6>
    15ba:	494f      	ldr	r1, [pc, #316]	; (16f8 <process_event+0x2cc>)
    15bc:	4640      	mov	r0, r8
    15be:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    15c2:	463a      	mov	r2, r7
    15c4:	f005 fcb6 	bl	6f34 <printk>
    15c8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    15cc:	4638      	mov	r0, r7
    15ce:	f005 fbdd 	bl	6d8c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15d2:	8ba3      	ldrh	r3, [r4, #28]
    15d4:	f023 0307 	bic.w	r3, r3, #7
    15d8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    15dc:	83a3      	strh	r3, [r4, #28]
}
    15de:	2500      	movs	r5, #0
		res = 0;
    15e0:	46ab      	mov	fp, r5
}
    15e2:	e797      	b.n	1514 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    15e4:	2804      	cmp	r0, #4
    15e6:	d132      	bne.n	164e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    15e8:	f1b9 0f02 	cmp.w	r9, #2
    15ec:	d00b      	beq.n	1606 <process_event+0x1da>
    15ee:	4943      	ldr	r1, [pc, #268]	; (16fc <process_event+0x2d0>)
    15f0:	4640      	mov	r0, r8
    15f2:	f240 135d 	movw	r3, #349	; 0x15d
    15f6:	463a      	mov	r2, r7
    15f8:	f005 fc9c 	bl	6f34 <printk>
    15fc:	f240 115d 	movw	r1, #349	; 0x15d
    1600:	4638      	mov	r0, r7
    1602:	f005 fbc3 	bl	6d8c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1606:	8be3      	ldrh	r3, [r4, #30]
    1608:	b15b      	cbz	r3, 1622 <process_event+0x1f6>
    160a:	493d      	ldr	r1, [pc, #244]	; (1700 <process_event+0x2d4>)
    160c:	4640      	mov	r0, r8
    160e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1612:	463a      	mov	r2, r7
    1614:	f005 fc8e 	bl	6f34 <printk>
    1618:	f44f 71af 	mov.w	r1, #350	; 0x15e
    161c:	4638      	mov	r0, r7
    161e:	f005 fbb5 	bl	6d8c <assert_post_action>
			transit = mgr->transitions->stop;
    1622:	6923      	ldr	r3, [r4, #16]
    1624:	685b      	ldr	r3, [r3, #4]
    1626:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1628:	b95b      	cbnz	r3, 1642 <process_event+0x216>
    162a:	4933      	ldr	r1, [pc, #204]	; (16f8 <process_event+0x2cc>)
    162c:	4640      	mov	r0, r8
    162e:	f240 1361 	movw	r3, #353	; 0x161
    1632:	463a      	mov	r2, r7
    1634:	f005 fc7e 	bl	6f34 <printk>
    1638:	f240 1161 	movw	r1, #353	; 0x161
    163c:	4638      	mov	r0, r7
    163e:	f005 fba5 	bl	6d8c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1642:	8ba3      	ldrh	r3, [r4, #28]
    1644:	f023 0307 	bic.w	r3, r3, #7
    1648:	f043 0304 	orr.w	r3, r3, #4
    164c:	e7c6      	b.n	15dc <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    164e:	2805      	cmp	r0, #5
    1650:	d132      	bne.n	16b8 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1652:	f1b9 0f01 	cmp.w	r9, #1
    1656:	d00b      	beq.n	1670 <process_event+0x244>
    1658:	492a      	ldr	r1, [pc, #168]	; (1704 <process_event+0x2d8>)
    165a:	4640      	mov	r0, r8
    165c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1660:	463a      	mov	r2, r7
    1662:	f005 fc67 	bl	6f34 <printk>
    1666:	f44f 71b2 	mov.w	r1, #356	; 0x164
    166a:	4638      	mov	r0, r7
    166c:	f005 fb8e 	bl	6d8c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1670:	6823      	ldr	r3, [r4, #0]
    1672:	b95b      	cbnz	r3, 168c <process_event+0x260>
    1674:	491f      	ldr	r1, [pc, #124]	; (16f4 <process_event+0x2c8>)
    1676:	4640      	mov	r0, r8
    1678:	f240 1365 	movw	r3, #357	; 0x165
    167c:	463a      	mov	r2, r7
    167e:	f005 fc59 	bl	6f34 <printk>
    1682:	f240 1165 	movw	r1, #357	; 0x165
    1686:	4638      	mov	r0, r7
    1688:	f005 fb80 	bl	6d8c <assert_post_action>
			transit = mgr->transitions->reset;
    168c:	6923      	ldr	r3, [r4, #16]
    168e:	689b      	ldr	r3, [r3, #8]
    1690:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1692:	b95b      	cbnz	r3, 16ac <process_event+0x280>
    1694:	4918      	ldr	r1, [pc, #96]	; (16f8 <process_event+0x2cc>)
    1696:	4640      	mov	r0, r8
    1698:	f44f 73b4 	mov.w	r3, #360	; 0x168
    169c:	463a      	mov	r2, r7
    169e:	f005 fc49 	bl	6f34 <printk>
    16a2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    16a6:	4638      	mov	r0, r7
    16a8:	f005 fb70 	bl	6d8c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16ac:	8ba3      	ldrh	r3, [r4, #28]
    16ae:	f023 0307 	bic.w	r3, r3, #7
    16b2:	f043 0305 	orr.w	r3, r3, #5
    16b6:	e791      	b.n	15dc <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    16b8:	490c      	ldr	r1, [pc, #48]	; (16ec <process_event+0x2c0>)
    16ba:	f240 136b 	movw	r3, #363	; 0x16b
    16be:	463a      	mov	r2, r7
    16c0:	4640      	mov	r0, r8
    16c2:	f005 fc37 	bl	6f34 <printk>
    16c6:	2500      	movs	r5, #0
    16c8:	f240 116b 	movw	r1, #363	; 0x16b
    16cc:	4638      	mov	r0, r7
    16ce:	f005 fb5d 	bl	6d8c <assert_post_action>
		onoff_transition_fn transit = NULL;
    16d2:	9501      	str	r5, [sp, #4]
    16d4:	e784      	b.n	15e0 <process_event+0x1b4>
    16d6:	bf00      	nop
    16d8:	00007e87 	.word	0x00007e87
    16dc:	00007ead 	.word	0x00007ead
    16e0:	000079ac 	.word	0x000079ac
    16e4:	00007ec4 	.word	0x00007ec4
    16e8:	00007de4 	.word	0x00007de4
    16ec:	00007e6f 	.word	0x00007e6f
    16f0:	00007e06 	.word	0x00007e06
    16f4:	00007e12 	.word	0x00007e12
    16f8:	00007e35 	.word	0x00007e35
    16fc:	00007e4c 	.word	0x00007e4c
    1700:	00007e62 	.word	0x00007e62
    1704:	00007e71 	.word	0x00007e71
				   && !sys_slist_is_empty(&mgr->monitors);
    1708:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    170c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1710:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1714:	83a3      	strh	r3, [r4, #28]
    1716:	4650      	mov	r0, sl
    1718:	f004 fdec 	bl	62f4 <z_spin_unlock_valid>
    171c:	b968      	cbnz	r0, 173a <process_event+0x30e>
    171e:	4a3a      	ldr	r2, [pc, #232]	; (1808 <process_event+0x3dc>)
    1720:	493a      	ldr	r1, [pc, #232]	; (180c <process_event+0x3e0>)
    1722:	23ac      	movs	r3, #172	; 0xac
    1724:	4640      	mov	r0, r8
    1726:	f005 fc05 	bl	6f34 <printk>
    172a:	4839      	ldr	r0, [pc, #228]	; (1810 <process_event+0x3e4>)
    172c:	4651      	mov	r1, sl
    172e:	f005 fc01 	bl	6f34 <printk>
    1732:	4835      	ldr	r0, [pc, #212]	; (1808 <process_event+0x3dc>)
    1734:	21ac      	movs	r1, #172	; 0xac
    1736:	f005 fb29 	bl	6d8c <assert_post_action>
    173a:	9b03      	ldr	r3, [sp, #12]
    173c:	f383 8811 	msr	BASEPRI, r3
    1740:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1744:	f1b9 0f00 	cmp.w	r9, #0
    1748:	d138      	bne.n	17bc <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    174a:	2d00      	cmp	r5, #0
    174c:	d14b      	bne.n	17e6 <process_event+0x3ba>
			if (transit != NULL) {
    174e:	9b01      	ldr	r3, [sp, #4]
    1750:	b113      	cbz	r3, 1758 <process_event+0x32c>
				transit(mgr, transition_complete);
    1752:	4930      	ldr	r1, [pc, #192]	; (1814 <process_event+0x3e8>)
    1754:	4620      	mov	r0, r4
    1756:	4798      	blx	r3
	__asm__ volatile(
    1758:	f04f 0320 	mov.w	r3, #32
    175c:	f3ef 8b11 	mrs	fp, BASEPRI
    1760:	f383 8812 	msr	BASEPRI_MAX, r3
    1764:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1768:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    176a:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    176e:	f004 fdb3 	bl	62d8 <z_spin_lock_valid>
    1772:	b968      	cbnz	r0, 1790 <process_event+0x364>
    1774:	4a24      	ldr	r2, [pc, #144]	; (1808 <process_event+0x3dc>)
    1776:	4928      	ldr	r1, [pc, #160]	; (1818 <process_event+0x3ec>)
    1778:	2381      	movs	r3, #129	; 0x81
    177a:	4640      	mov	r0, r8
    177c:	f005 fbda 	bl	6f34 <printk>
    1780:	4826      	ldr	r0, [pc, #152]	; (181c <process_event+0x3f0>)
    1782:	4651      	mov	r1, sl
    1784:	f005 fbd6 	bl	6f34 <printk>
    1788:	481f      	ldr	r0, [pc, #124]	; (1808 <process_event+0x3dc>)
    178a:	2181      	movs	r1, #129	; 0x81
    178c:	f005 fafe 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    1790:	4650      	mov	r0, sl
    1792:	f004 fdbf 	bl	6314 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1796:	8ba3      	ldrh	r3, [r4, #28]
    1798:	f023 0308 	bic.w	r3, r3, #8
    179c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    179e:	8ba3      	ldrh	r3, [r4, #28]
    17a0:	06da      	lsls	r2, r3, #27
    17a2:	d528      	bpl.n	17f6 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    17a4:	f023 0310 	bic.w	r3, r3, #16
    17a8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    17aa:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    17ac:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    17b0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    17b4:	2900      	cmp	r1, #0
    17b6:	f47f ae6b 	bne.w	1490 <process_event+0x64>
out:
    17ba:	e649      	b.n	1450 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17bc:	68a1      	ldr	r1, [r4, #8]
    17be:	2900      	cmp	r1, #0
    17c0:	d0c3      	beq.n	174a <process_event+0x31e>
	return node->next;
    17c2:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    17c4:	9a02      	ldr	r2, [sp, #8]
    17c6:	2b00      	cmp	r3, #0
    17c8:	bf38      	it	cc
    17ca:	2300      	movcc	r3, #0
    17cc:	4699      	mov	r9, r3
    17ce:	684b      	ldr	r3, [r1, #4]
    17d0:	4620      	mov	r0, r4
    17d2:	461e      	mov	r6, r3
    17d4:	465b      	mov	r3, fp
    17d6:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17d8:	f1b9 0f00 	cmp.w	r9, #0
    17dc:	d0b5      	beq.n	174a <process_event+0x31e>
    17de:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    17e2:	4649      	mov	r1, r9
    17e4:	e7ee      	b.n	17c4 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    17e6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    17e8:	9a02      	ldr	r2, [sp, #8]
    17ea:	682d      	ldr	r5, [r5, #0]
    17ec:	465b      	mov	r3, fp
    17ee:	4620      	mov	r0, r4
    17f0:	f005 fb66 	bl	6ec0 <notify_one>
    17f4:	e7a9      	b.n	174a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    17f6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    17fa:	bf1e      	ittt	ne
    17fc:	f023 0320 	bicne.w	r3, r3, #32
    1800:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1802:	2102      	movne	r1, #2
    1804:	e7d2      	b.n	17ac <process_event+0x380>
    1806:	bf00      	nop
    1808:	00007e87 	.word	0x00007e87
    180c:	00007ead 	.word	0x00007ead
    1810:	00007ec4 	.word	0x00007ec4
    1814:	00001821 	.word	0x00001821
    1818:	00007ed9 	.word	0x00007ed9
    181c:	00007eee 	.word	0x00007eee

00001820 <transition_complete>:
{
    1820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1822:	4604      	mov	r4, r0
    1824:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1826:	f100 0614 	add.w	r6, r0, #20
    182a:	f04f 0320 	mov.w	r3, #32
    182e:	f3ef 8711 	mrs	r7, BASEPRI
    1832:	f383 8812 	msr	BASEPRI_MAX, r3
    1836:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    183a:	4630      	mov	r0, r6
    183c:	f004 fd4c 	bl	62d8 <z_spin_lock_valid>
    1840:	b968      	cbnz	r0, 185e <transition_complete+0x3e>
    1842:	4a0c      	ldr	r2, [pc, #48]	; (1874 <transition_complete+0x54>)
    1844:	490c      	ldr	r1, [pc, #48]	; (1878 <transition_complete+0x58>)
    1846:	480d      	ldr	r0, [pc, #52]	; (187c <transition_complete+0x5c>)
    1848:	2381      	movs	r3, #129	; 0x81
    184a:	f005 fb73 	bl	6f34 <printk>
    184e:	480c      	ldr	r0, [pc, #48]	; (1880 <transition_complete+0x60>)
    1850:	4631      	mov	r1, r6
    1852:	f005 fb6f 	bl	6f34 <printk>
    1856:	4807      	ldr	r0, [pc, #28]	; (1874 <transition_complete+0x54>)
    1858:	2181      	movs	r1, #129	; 0x81
    185a:	f005 fa97 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    185e:	4630      	mov	r0, r6
    1860:	f004 fd58 	bl	6314 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1864:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1866:	463a      	mov	r2, r7
    1868:	4620      	mov	r0, r4
    186a:	2101      	movs	r1, #1
}
    186c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1870:	f7ff bddc 	b.w	142c <process_event>
    1874:	00007e87 	.word	0x00007e87
    1878:	00007ed9 	.word	0x00007ed9
    187c:	000079ac 	.word	0x000079ac
    1880:	00007eee 	.word	0x00007eee

00001884 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1888:	4604      	mov	r4, r0
    188a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    188c:	f005 fb2e 	bl	6eec <validate_args>

	if (rv < 0) {
    1890:	1e05      	subs	r5, r0, #0
    1892:	db5e      	blt.n	1952 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1894:	f104 0914 	add.w	r9, r4, #20
    1898:	f04f 0320 	mov.w	r3, #32
    189c:	f3ef 8a11 	mrs	sl, BASEPRI
    18a0:	f383 8812 	msr	BASEPRI_MAX, r3
    18a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    18a8:	4648      	mov	r0, r9
    18aa:	f004 fd15 	bl	62d8 <z_spin_lock_valid>
    18ae:	b968      	cbnz	r0, 18cc <onoff_request+0x48>
    18b0:	4a38      	ldr	r2, [pc, #224]	; (1994 <onoff_request+0x110>)
    18b2:	4939      	ldr	r1, [pc, #228]	; (1998 <onoff_request+0x114>)
    18b4:	4839      	ldr	r0, [pc, #228]	; (199c <onoff_request+0x118>)
    18b6:	2381      	movs	r3, #129	; 0x81
    18b8:	f005 fb3c 	bl	6f34 <printk>
    18bc:	4838      	ldr	r0, [pc, #224]	; (19a0 <onoff_request+0x11c>)
    18be:	4649      	mov	r1, r9
    18c0:	f005 fb38 	bl	6f34 <printk>
    18c4:	4833      	ldr	r0, [pc, #204]	; (1994 <onoff_request+0x110>)
    18c6:	2181      	movs	r1, #129	; 0x81
    18c8:	f005 fa60 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    18cc:	4648      	mov	r0, r9
    18ce:	f004 fd21 	bl	6314 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    18d2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18d4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    18d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    18da:	428b      	cmp	r3, r1
    18dc:	f002 0607 	and.w	r6, r2, #7
    18e0:	d050      	beq.n	1984 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    18e2:	2e02      	cmp	r6, #2
    18e4:	d124      	bne.n	1930 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    18e6:	3301      	adds	r3, #1
    18e8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    18ea:	4635      	mov	r5, r6
		notify = true;
    18ec:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    18f0:	4648      	mov	r0, r9
    18f2:	f004 fcff 	bl	62f4 <z_spin_unlock_valid>
    18f6:	b968      	cbnz	r0, 1914 <onoff_request+0x90>
    18f8:	4a26      	ldr	r2, [pc, #152]	; (1994 <onoff_request+0x110>)
    18fa:	492a      	ldr	r1, [pc, #168]	; (19a4 <onoff_request+0x120>)
    18fc:	4827      	ldr	r0, [pc, #156]	; (199c <onoff_request+0x118>)
    18fe:	23ac      	movs	r3, #172	; 0xac
    1900:	f005 fb18 	bl	6f34 <printk>
    1904:	4828      	ldr	r0, [pc, #160]	; (19a8 <onoff_request+0x124>)
    1906:	4649      	mov	r1, r9
    1908:	f005 fb14 	bl	6f34 <printk>
    190c:	4821      	ldr	r0, [pc, #132]	; (1994 <onoff_request+0x110>)
    190e:	21ac      	movs	r1, #172	; 0xac
    1910:	f005 fa3c 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    1914:	f38a 8811 	msr	BASEPRI, sl
    1918:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    191c:	f1b8 0f00 	cmp.w	r8, #0
    1920:	d017      	beq.n	1952 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1922:	2300      	movs	r3, #0
    1924:	4632      	mov	r2, r6
    1926:	4639      	mov	r1, r7
    1928:	4620      	mov	r0, r4
    192a:	f005 fac9 	bl	6ec0 <notify_one>
    192e:	e010      	b.n	1952 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1930:	0793      	lsls	r3, r2, #30
    1932:	d001      	beq.n	1938 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1934:	2e06      	cmp	r6, #6
    1936:	d10f      	bne.n	1958 <onoff_request+0xd4>
	parent->next = child;
    1938:	2300      	movs	r3, #0
    193a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    193c:	6863      	ldr	r3, [r4, #4]
    193e:	b9f3      	cbnz	r3, 197e <onoff_request+0xfa>
	list->head = node;
    1940:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1944:	4635      	mov	r5, r6
    1946:	b9fe      	cbnz	r6, 1988 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    1948:	4652      	mov	r2, sl
    194a:	2102      	movs	r1, #2
    194c:	4620      	mov	r0, r4
    194e:	f7ff fd6d 	bl	142c <process_event>
		}
	}

	return rv;
}
    1952:	4628      	mov	r0, r5
    1954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    1958:	2e05      	cmp	r6, #5
    195a:	d018      	beq.n	198e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    195c:	2e01      	cmp	r6, #1
    195e:	d00b      	beq.n	1978 <onoff_request+0xf4>
    1960:	4912      	ldr	r1, [pc, #72]	; (19ac <onoff_request+0x128>)
    1962:	480e      	ldr	r0, [pc, #56]	; (199c <onoff_request+0x118>)
    1964:	4a12      	ldr	r2, [pc, #72]	; (19b0 <onoff_request+0x12c>)
    1966:	f240 13c9 	movw	r3, #457	; 0x1c9
    196a:	f005 fae3 	bl	6f34 <printk>
    196e:	4810      	ldr	r0, [pc, #64]	; (19b0 <onoff_request+0x12c>)
    1970:	f240 11c9 	movw	r1, #457	; 0x1c9
    1974:	f005 fa0a 	bl	6d8c <assert_post_action>
		rv = -EIO;
    1978:	f06f 0504 	mvn.w	r5, #4
    197c:	e004      	b.n	1988 <onoff_request+0x104>
	parent->next = child;
    197e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1980:	6067      	str	r7, [r4, #4]
}
    1982:	e7df      	b.n	1944 <onoff_request+0xc0>
		rv = -EAGAIN;
    1984:	f06f 050a 	mvn.w	r5, #10
    1988:	f04f 0800 	mov.w	r8, #0
    198c:	e7b0      	b.n	18f0 <onoff_request+0x6c>
		rv = -ENOTSUP;
    198e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1992:	e7f9      	b.n	1988 <onoff_request+0x104>
    1994:	00007e87 	.word	0x00007e87
    1998:	00007ed9 	.word	0x00007ed9
    199c:	000079ac 	.word	0x000079ac
    19a0:	00007eee 	.word	0x00007eee
    19a4:	00007ead 	.word	0x00007ead
    19a8:	00007ec4 	.word	0x00007ec4
    19ac:	00007e71 	.word	0x00007e71
    19b0:	00007de4 	.word	0x00007de4

000019b4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    19b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    19b8:	4605      	mov	r5, r0
	__asm__ volatile(
    19ba:	f04f 0320 	mov.w	r3, #32
    19be:	f3ef 8611 	mrs	r6, BASEPRI
    19c2:	f383 8812 	msr	BASEPRI_MAX, r3
    19c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    19ca:	4823      	ldr	r0, [pc, #140]	; (1a58 <pm_state_notify+0xa4>)
    19cc:	f004 fc84 	bl	62d8 <z_spin_lock_valid>
    19d0:	b968      	cbnz	r0, 19ee <pm_state_notify+0x3a>
    19d2:	4a22      	ldr	r2, [pc, #136]	; (1a5c <pm_state_notify+0xa8>)
    19d4:	4922      	ldr	r1, [pc, #136]	; (1a60 <pm_state_notify+0xac>)
    19d6:	4823      	ldr	r0, [pc, #140]	; (1a64 <pm_state_notify+0xb0>)
    19d8:	2381      	movs	r3, #129	; 0x81
    19da:	f005 faab 	bl	6f34 <printk>
    19de:	491e      	ldr	r1, [pc, #120]	; (1a58 <pm_state_notify+0xa4>)
    19e0:	4821      	ldr	r0, [pc, #132]	; (1a68 <pm_state_notify+0xb4>)
    19e2:	f005 faa7 	bl	6f34 <printk>
    19e6:	481d      	ldr	r0, [pc, #116]	; (1a5c <pm_state_notify+0xa8>)
    19e8:	2181      	movs	r1, #129	; 0x81
    19ea:	f005 f9cf 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    19ee:	481a      	ldr	r0, [pc, #104]	; (1a58 <pm_state_notify+0xa4>)
    19f0:	f004 fc90 	bl	6314 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    19f4:	4b1d      	ldr	r3, [pc, #116]	; (1a6c <pm_state_notify+0xb8>)
    19f6:	681c      	ldr	r4, [r3, #0]
    19f8:	2c00      	cmp	r4, #0
    19fa:	bf38      	it	cc
    19fc:	2400      	movcc	r4, #0
    19fe:	b19c      	cbz	r4, 1a28 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1a00:	4f1b      	ldr	r7, [pc, #108]	; (1a70 <pm_state_notify+0xbc>)
    1a02:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1a7c <pm_state_notify+0xc8>
    1a06:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1a0a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1a0e:	2d00      	cmp	r5, #0
    1a10:	bf08      	it	eq
    1a12:	4613      	moveq	r3, r2
		if (callback) {
    1a14:	b12b      	cbz	r3, 1a22 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    1a16:	f898 2014 	ldrb.w	r2, [r8, #20]
    1a1a:	fb09 f202 	mul.w	r2, r9, r2
    1a1e:	5cb8      	ldrb	r0, [r7, r2]
    1a20:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1a22:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1a24:	2c00      	cmp	r4, #0
    1a26:	d1f0      	bne.n	1a0a <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1a28:	480b      	ldr	r0, [pc, #44]	; (1a58 <pm_state_notify+0xa4>)
    1a2a:	f004 fc63 	bl	62f4 <z_spin_unlock_valid>
    1a2e:	b968      	cbnz	r0, 1a4c <pm_state_notify+0x98>
    1a30:	4a0a      	ldr	r2, [pc, #40]	; (1a5c <pm_state_notify+0xa8>)
    1a32:	4910      	ldr	r1, [pc, #64]	; (1a74 <pm_state_notify+0xc0>)
    1a34:	480b      	ldr	r0, [pc, #44]	; (1a64 <pm_state_notify+0xb0>)
    1a36:	23ac      	movs	r3, #172	; 0xac
    1a38:	f005 fa7c 	bl	6f34 <printk>
    1a3c:	4906      	ldr	r1, [pc, #24]	; (1a58 <pm_state_notify+0xa4>)
    1a3e:	480e      	ldr	r0, [pc, #56]	; (1a78 <pm_state_notify+0xc4>)
    1a40:	f005 fa78 	bl	6f34 <printk>
    1a44:	4805      	ldr	r0, [pc, #20]	; (1a5c <pm_state_notify+0xa8>)
    1a46:	21ac      	movs	r1, #172	; 0xac
    1a48:	f005 f9a0 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    1a4c:	f386 8811 	msr	BASEPRI, r6
    1a50:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a58:	2000087c 	.word	0x2000087c
    1a5c:	00007e87 	.word	0x00007e87
    1a60:	00007ed9 	.word	0x00007ed9
    1a64:	000079ac 	.word	0x000079ac
    1a68:	00007eee 	.word	0x00007eee
    1a6c:	20000880 	.word	0x20000880
    1a70:	2000088c 	.word	0x2000088c
    1a74:	00007ead 	.word	0x00007ead
    1a78:	00007ec4 	.word	0x00007ec4
    1a7c:	200009f0 	.word	0x200009f0

00001a80 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a80:	f000 031f 	and.w	r3, r0, #31
    1a84:	2201      	movs	r2, #1
    1a86:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1a88:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <atomic_test_and_set_bit.constprop.0+0x34>)
    1a8a:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1a8e:	0940      	lsrs	r0, r0, #5
    1a90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1a94:	e850 3f00 	ldrex	r3, [r0]
    1a98:	ea43 0102 	orr.w	r1, r3, r2
    1a9c:	e840 1c00 	strex	ip, r1, [r0]
    1aa0:	f1bc 0f00 	cmp.w	ip, #0
    1aa4:	d1f6      	bne.n	1a94 <atomic_test_and_set_bit.constprop.0+0x14>
    1aa6:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1aaa:	421a      	tst	r2, r3
}
    1aac:	bf14      	ite	ne
    1aae:	2001      	movne	r0, #1
    1ab0:	2000      	moveq	r0, #0
    1ab2:	4770      	bx	lr
    1ab4:	20000898 	.word	0x20000898

00001ab8 <pm_system_resume>:

void pm_system_resume(void)
{
    1ab8:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1aba:	4b1d      	ldr	r3, [pc, #116]	; (1b30 <pm_system_resume+0x78>)
    1abc:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1abe:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1ac2:	f005 031f 	and.w	r3, r5, #31
    1ac6:	2201      	movs	r2, #1
    1ac8:	409a      	lsls	r2, r3
    1aca:	4b1a      	ldr	r3, [pc, #104]	; (1b34 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1acc:	0969      	lsrs	r1, r5, #5
{
    1ace:	b085      	sub	sp, #20
    1ad0:	43d0      	mvns	r0, r2
    1ad2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1ad6:	e853 1f00 	ldrex	r1, [r3]
    1ada:	ea01 0400 	and.w	r4, r1, r0
    1ade:	e843 4c00 	strex	ip, r4, [r3]
    1ae2:	f1bc 0f00 	cmp.w	ip, #0
    1ae6:	d1f6      	bne.n	1ad6 <pm_system_resume+0x1e>
    1ae8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1aec:	4211      	tst	r1, r2
    1aee:	d017      	beq.n	1b20 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1af0:	4c11      	ldr	r4, [pc, #68]	; (1b38 <pm_system_resume+0x80>)
    1af2:	220c      	movs	r2, #12
    1af4:	fb02 4205 	mla	r2, r2, r5, r4
    1af8:	ca07      	ldmia	r2, {r0, r1, r2}
    1afa:	ab01      	add	r3, sp, #4
    1afc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1b00:	4a0e      	ldr	r2, [pc, #56]	; (1b3c <pm_system_resume+0x84>)
    1b02:	b17a      	cbz	r2, 1b24 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1b04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1b08:	f005 fa91 	bl	702e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1b0c:	2000      	movs	r0, #0
    1b0e:	f7ff ff51 	bl	19b4 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1b12:	230c      	movs	r3, #12
    1b14:	436b      	muls	r3, r5
    1b16:	2200      	movs	r2, #0
    1b18:	18e1      	adds	r1, r4, r3
    1b1a:	50e2      	str	r2, [r4, r3]
    1b1c:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1b20:	b005      	add	sp, #20
    1b22:	bd30      	pop	{r4, r5, pc}
    1b24:	f382 8811 	msr	BASEPRI, r2
    1b28:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1b2c:	e7ee      	b.n	1b0c <pm_system_resume+0x54>
    1b2e:	bf00      	nop
    1b30:	200009f0 	.word	0x200009f0
    1b34:	20000888 	.word	0x20000888
    1b38:	2000088c 	.word	0x2000088c
    1b3c:	0000702f 	.word	0x0000702f

00001b40 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1b44:	4b37      	ldr	r3, [pc, #220]	; (1c24 <pm_system_suspend+0xe4>)
    1b46:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c3c <pm_system_suspend+0xfc>
    1b4a:	7d1c      	ldrb	r4, [r3, #20]
{
    1b4c:	b088      	sub	sp, #32
    1b4e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1b50:	4620      	mov	r0, r4
    1b52:	f7ff ff95 	bl	1a80 <atomic_test_and_set_bit.constprop.0>
    1b56:	b960      	cbnz	r0, 1b72 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1b58:	466e      	mov	r6, sp
    1b5a:	463a      	mov	r2, r7
    1b5c:	4621      	mov	r1, r4
    1b5e:	4630      	mov	r0, r6
    1b60:	f005 f9f5 	bl	6f4e <pm_policy_next_state>
    1b64:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1b68:	250c      	movs	r5, #12
    1b6a:	fb05 8504 	mla	r5, r5, r4, r8
    1b6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    1b72:	230c      	movs	r3, #12
    1b74:	4363      	muls	r3, r4
    1b76:	eb08 0203 	add.w	r2, r8, r3
    1b7a:	f818 0003 	ldrb.w	r0, [r8, r3]
    1b7e:	0965      	lsrs	r5, r4, #5
    1b80:	f004 061f 	and.w	r6, r4, #31
    1b84:	b3c8      	cbz	r0, 1bfa <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1b86:	1c7b      	adds	r3, r7, #1
    1b88:	d00f      	beq.n	1baa <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1b8a:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1b8e:	4826      	ldr	r0, [pc, #152]	; (1c28 <pm_system_suspend+0xe8>)
    1b90:	4a26      	ldr	r2, [pc, #152]	; (1c2c <pm_system_suspend+0xec>)
    1b92:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1b96:	2100      	movs	r1, #0
    1b98:	2300      	movs	r3, #0
    1b9a:	fbec 010e 	umlal	r0, r1, ip, lr
    1b9e:	f7fe faaf 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1ba2:	2101      	movs	r1, #1
    1ba4:	1a38      	subs	r0, r7, r0
    1ba6:	f004 fd77 	bl	6698 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1baa:	f003 f9c5 	bl	4f38 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1bae:	2001      	movs	r0, #1
    1bb0:	f7ff ff00 	bl	19b4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1bb4:	f3bf 8f5b 	dmb	ish
    1bb8:	4b1d      	ldr	r3, [pc, #116]	; (1c30 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1bba:	2201      	movs	r2, #1
    1bbc:	40b2      	lsls	r2, r6
    1bbe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1bc2:	e853 1f00 	ldrex	r1, [r3]
    1bc6:	4311      	orrs	r1, r2
    1bc8:	e843 1000 	strex	r0, r1, [r3]
    1bcc:	2800      	cmp	r0, #0
    1bce:	d1f8      	bne.n	1bc2 <pm_system_suspend+0x82>
    1bd0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    1bd4:	230c      	movs	r3, #12
    1bd6:	fb03 8404 	mla	r4, r3, r4, r8
    1bda:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1bde:	ab05      	add	r3, sp, #20
    1be0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1be4:	4a13      	ldr	r2, [pc, #76]	; (1c34 <pm_system_suspend+0xf4>)
    1be6:	b11a      	cbz	r2, 1bf0 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    1be8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1bec:	f005 fa0c 	bl	7008 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1bf0:	f7ff ff62 	bl	1ab8 <pm_system_resume>
	k_sched_unlock();
    1bf4:	f003 fe98 	bl	5928 <k_sched_unlock>
	bool ret = true;
    1bf8:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1bfa:	4a0f      	ldr	r2, [pc, #60]	; (1c38 <pm_system_suspend+0xf8>)
    1bfc:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1c00:	2301      	movs	r3, #1
    1c02:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c04:	43db      	mvns	r3, r3
    1c06:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1c0a:	e855 2f00 	ldrex	r2, [r5]
    1c0e:	401a      	ands	r2, r3
    1c10:	e845 2100 	strex	r1, r2, [r5]
    1c14:	2900      	cmp	r1, #0
    1c16:	d1f8      	bne.n	1c0a <pm_system_suspend+0xca>
    1c18:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1c1c:	b008      	add	sp, #32
    1c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c22:	bf00      	nop
    1c24:	200009f0 	.word	0x200009f0
    1c28:	000f423f 	.word	0x000f423f
    1c2c:	000f4240 	.word	0x000f4240
    1c30:	20000888 	.word	0x20000888
    1c34:	00007009 	.word	0x00007009
    1c38:	20000898 	.word	0x20000898
    1c3c:	2000088c 	.word	0x2000088c

00001c40 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1c40:	680b      	ldr	r3, [r1, #0]
    1c42:	3301      	adds	r3, #1
    1c44:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1c46:	4b01      	ldr	r3, [pc, #4]	; (1c4c <char_out+0xc>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	4718      	bx	r3
    1c4c:	20000024 	.word	0x20000024

00001c50 <__printk_hook_install>:
	_char_out = fn;
    1c50:	4b01      	ldr	r3, [pc, #4]	; (1c58 <__printk_hook_install+0x8>)
    1c52:	6018      	str	r0, [r3, #0]
}
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop
    1c58:	20000024 	.word	0x20000024

00001c5c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1c5c:	b507      	push	{r0, r1, r2, lr}
    1c5e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1c60:	2100      	movs	r1, #0
{
    1c62:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1c64:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1c66:	4803      	ldr	r0, [pc, #12]	; (1c74 <vprintk+0x18>)
    1c68:	a901      	add	r1, sp, #4
    1c6a:	f7fe ff35 	bl	ad8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1c6e:	b003      	add	sp, #12
    1c70:	f85d fb04 	ldr.w	pc, [sp], #4
    1c74:	00001c41 	.word	0x00001c41

00001c78 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1c78:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c7a:	f04f 0220 	mov.w	r2, #32
    1c7e:	f3ef 8311 	mrs	r3, BASEPRI
    1c82:	f382 8812 	msr	BASEPRI_MAX, r2
    1c86:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c8a:	f000 fca1 	bl	25d0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1c8e:	4803      	ldr	r0, [pc, #12]	; (1c9c <sys_reboot+0x24>)
    1c90:	f005 f950 	bl	6f34 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c94:	f000 f80a 	bl	1cac <arch_cpu_idle>
    1c98:	e7fc      	b.n	1c94 <sys_reboot+0x1c>
    1c9a:	bf00      	nop
    1c9c:	00007f06 	.word	0x00007f06

00001ca0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1ca0:	4901      	ldr	r1, [pc, #4]	; (1ca8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1ca2:	2210      	movs	r2, #16
	str	r2, [r1]
    1ca4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1ca6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1ca8:	e000ed10 	.word	0xe000ed10

00001cac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1cac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1cae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1cb0:	f380 8811 	msr	BASEPRI, r0
	isb
    1cb4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1cb8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1cbc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1cbe:	b662      	cpsie	i
	isb
    1cc0:	f3bf 8f6f 	isb	sy

	bx	lr
    1cc4:	4770      	bx	lr
    1cc6:	bf00      	nop

00001cc8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1cc8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1cca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1ccc:	f381 8811 	msr	BASEPRI, r1

	wfe
    1cd0:	bf20      	wfe

	msr	BASEPRI, r0
    1cd2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1cd6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1cd8:	4770      	bx	lr
    1cda:	bf00      	nop

00001cdc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1cdc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1cde:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1ce0:	4a0b      	ldr	r2, [pc, #44]	; (1d10 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1ce2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1ce4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1ce6:	bf1e      	ittt	ne
	movne	r1, #0
    1ce8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1cea:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1cec:	f005 fb51 	blne	7392 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1cf0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1cf2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1cf6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1cfa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1cfe:	4905      	ldr	r1, [pc, #20]	; (1d14 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d00:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d02:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d04:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d0a:	4903      	ldr	r1, [pc, #12]	; (1d18 <_isr_wrapper+0x3c>)
	bx r1
    1d0c:	4708      	bx	r1
    1d0e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1d10:	200009f0 	.word	0x200009f0
	ldr r1, =_sw_isr_table
    1d14:	00007528 	.word	0x00007528
	ldr r1, =z_arm_int_exit
    1d18:	00001f41 	.word	0x00001f41

00001d1c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1d1c:	bf30      	wfi
    b z_SysNmiOnReset
    1d1e:	f7ff bffd 	b.w	1d1c <z_SysNmiOnReset>
    1d22:	bf00      	nop

00001d24 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1d24:	4912      	ldr	r1, [pc, #72]	; (1d70 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1d26:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1d28:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1d2c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1d2e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1d32:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1d36:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1d38:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1d3c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1d40:	4f0c      	ldr	r7, [pc, #48]	; (1d74 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1d42:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1d46:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1d48:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1d4a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1d4c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1d4e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1d50:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1d52:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1d56:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1d58:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1d5a:	f000 fae7 	bl	232c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1d5e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1d62:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1d66:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1d6a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1d6e:	4770      	bx	lr
    ldr r1, =_kernel
    1d70:	200009f0 	.word	0x200009f0
    ldr v4, =_SCS_ICSR
    1d74:	e000ed04 	.word	0xe000ed04

00001d78 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1d78:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1d7c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1d7e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1d82:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1d86:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1d88:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1d8c:	2902      	cmp	r1, #2
    beq _oops
    1d8e:	d0ff      	beq.n	1d90 <_oops>

00001d90 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1d90:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1d92:	f005 f8ed 	bl	6f70 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1d96:	bd01      	pop	{r0, pc}

00001d98 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1d98:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	db08      	blt.n	1db0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d9e:	2201      	movs	r2, #1
    1da0:	f000 001f 	and.w	r0, r0, #31
    1da4:	fa02 f000 	lsl.w	r0, r2, r0
    1da8:	095b      	lsrs	r3, r3, #5
    1daa:	4a02      	ldr	r2, [pc, #8]	; (1db4 <arch_irq_enable+0x1c>)
    1dac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1db0:	4770      	bx	lr
    1db2:	bf00      	nop
    1db4:	e000e100 	.word	0xe000e100

00001db8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1db8:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <arch_irq_is_enabled+0x18>)
    1dba:	0942      	lsrs	r2, r0, #5
    1dbc:	f000 001f 	and.w	r0, r0, #31
    1dc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1dc4:	2301      	movs	r3, #1
    1dc6:	fa03 f000 	lsl.w	r0, r3, r0
}
    1dca:	4010      	ands	r0, r2
    1dcc:	4770      	bx	lr
    1dce:	bf00      	nop
    1dd0:	e000e100 	.word	0xe000e100

00001dd4 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1dd4:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1dd6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1dd8:	2c07      	cmp	r4, #7
{
    1dda:	4605      	mov	r5, r0
    1ddc:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1dde:	d90f      	bls.n	1e00 <z_arm_irq_priority_set+0x2c>
    1de0:	4a11      	ldr	r2, [pc, #68]	; (1e28 <z_arm_irq_priority_set+0x54>)
    1de2:	4912      	ldr	r1, [pc, #72]	; (1e2c <z_arm_irq_priority_set+0x58>)
    1de4:	4812      	ldr	r0, [pc, #72]	; (1e30 <z_arm_irq_priority_set+0x5c>)
    1de6:	2359      	movs	r3, #89	; 0x59
    1de8:	f005 f8a4 	bl	6f34 <printk>
    1dec:	4811      	ldr	r0, [pc, #68]	; (1e34 <z_arm_irq_priority_set+0x60>)
    1dee:	4631      	mov	r1, r6
    1df0:	2307      	movs	r3, #7
    1df2:	462a      	mov	r2, r5
    1df4:	f005 f89e 	bl	6f34 <printk>
    1df8:	480b      	ldr	r0, [pc, #44]	; (1e28 <z_arm_irq_priority_set+0x54>)
    1dfa:	2159      	movs	r1, #89	; 0x59
    1dfc:	f004 ffc6 	bl	6d8c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1e00:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1e02:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e04:	bfac      	ite	ge
    1e06:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e0a:	4b0b      	ldrlt	r3, [pc, #44]	; (1e38 <z_arm_irq_priority_set+0x64>)
    1e0c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1e10:	bfb8      	it	lt
    1e12:	f005 050f 	andlt.w	r5, r5, #15
    1e16:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e18:	bfaa      	itet	ge
    1e1a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e1e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e20:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1e24:	bd70      	pop	{r4, r5, r6, pc}
    1e26:	bf00      	nop
    1e28:	00007f2f 	.word	0x00007f2f
    1e2c:	00007f65 	.word	0x00007f65
    1e30:	000079ac 	.word	0x000079ac
    1e34:	00007f80 	.word	0x00007f80
    1e38:	e000ed14 	.word	0xe000ed14

00001e3c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e3c:	4a0b      	ldr	r2, [pc, #44]	; (1e6c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1e3e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e40:	4b0b      	ldr	r3, [pc, #44]	; (1e70 <z_arm_prep_c+0x34>)
    1e42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1e46:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1e48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e4c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1e54:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1e5c:	f002 fc5c 	bl	4718 <z_bss_zero>
	z_data_copy();
    1e60:	f004 fd86 	bl	6970 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1e64:	f000 f9f6 	bl	2254 <z_arm_interrupt_init>
	z_cstart();
    1e68:	f002 fc60 	bl	472c <z_cstart>
    1e6c:	00000000 	.word	0x00000000
    1e70:	e000ed00 	.word	0xe000ed00

00001e74 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1e74:	4a09      	ldr	r2, [pc, #36]	; (1e9c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1e76:	490a      	ldr	r1, [pc, #40]	; (1ea0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1e78:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1e7a:	6809      	ldr	r1, [r1, #0]
    1e7c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e7e:	4909      	ldr	r1, [pc, #36]	; (1ea4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1e80:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e82:	684b      	ldr	r3, [r1, #4]
    1e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1e88:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1e8a:	2300      	movs	r3, #0
    1e8c:	f383 8811 	msr	BASEPRI, r3
    1e90:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1e94:	6893      	ldr	r3, [r2, #8]
}
    1e96:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop
    1e9c:	200009f0 	.word	0x200009f0
    1ea0:	00007810 	.word	0x00007810
    1ea4:	e000ed00 	.word	0xe000ed00

00001ea8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1ea8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1eac:	9b00      	ldr	r3, [sp, #0]
    1eae:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1eb2:	490a      	ldr	r1, [pc, #40]	; (1edc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1eb4:	9b01      	ldr	r3, [sp, #4]
    1eb6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1eba:	9b02      	ldr	r3, [sp, #8]
    1ebc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1ec0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1ec8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1ecc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1ed0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1ed2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1ed4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1ed6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1ed8:	4770      	bx	lr
    1eda:	bf00      	nop
    1edc:	00006f59 	.word	0x00006f59

00001ee0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1ee0:	4a0b      	ldr	r2, [pc, #44]	; (1f10 <z_check_thread_stack_fail+0x30>)
{
    1ee2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1ee4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1ee6:	b190      	cbz	r0, 1f0e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1ee8:	f113 0f16 	cmn.w	r3, #22
    1eec:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1eee:	d005      	beq.n	1efc <z_check_thread_stack_fail+0x1c>
    1ef0:	f1a0 0220 	sub.w	r2, r0, #32
    1ef4:	429a      	cmp	r2, r3
    1ef6:	d806      	bhi.n	1f06 <z_check_thread_stack_fail+0x26>
    1ef8:	4283      	cmp	r3, r0
    1efa:	d204      	bcs.n	1f06 <z_check_thread_stack_fail+0x26>
    1efc:	4281      	cmp	r1, r0
    1efe:	bf2c      	ite	cs
    1f00:	2100      	movcs	r1, #0
    1f02:	2101      	movcc	r1, #1
    1f04:	e000      	b.n	1f08 <z_check_thread_stack_fail+0x28>
    1f06:	2100      	movs	r1, #0
    1f08:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1f0a:	bf08      	it	eq
    1f0c:	2000      	moveq	r0, #0
}
    1f0e:	4770      	bx	lr
    1f10:	200009f0 	.word	0x200009f0

00001f14 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1f14:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1f16:	4b09      	ldr	r3, [pc, #36]	; (1f3c <arch_switch_to_main_thread+0x28>)
    1f18:	6098      	str	r0, [r3, #8]
{
    1f1a:	460d      	mov	r5, r1
    1f1c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1f1e:	f000 fa05 	bl	232c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1f22:	4620      	mov	r0, r4
    1f24:	f385 8809 	msr	PSP, r5
    1f28:	2100      	movs	r1, #0
    1f2a:	b663      	cpsie	if
    1f2c:	f381 8811 	msr	BASEPRI, r1
    1f30:	f3bf 8f6f 	isb	sy
    1f34:	2200      	movs	r2, #0
    1f36:	2300      	movs	r3, #0
    1f38:	f005 f80e 	bl	6f58 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1f3c:	200009f0 	.word	0x200009f0

00001f40 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1f40:	4b04      	ldr	r3, [pc, #16]	; (1f54 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1f42:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1f44:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1f46:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1f48:	d003      	beq.n	1f52 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1f4a:	4903      	ldr	r1, [pc, #12]	; (1f58 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1f50:	600a      	str	r2, [r1, #0]

00001f52 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1f52:	4770      	bx	lr
	ldr r3, =_kernel
    1f54:	200009f0 	.word	0x200009f0
	ldr r1, =_SCS_ICSR
    1f58:	e000ed04 	.word	0xe000ed04

00001f5c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1f5c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1f60:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1f64:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1f66:	4672      	mov	r2, lr
	bl z_arm_fault
    1f68:	f000 f8ae 	bl	20c8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1f6c:	bd01      	pop	{r0, pc}
    1f6e:	bf00      	nop

00001f70 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1f70:	2000      	movs	r0, #0
    msr CONTROL, r0
    1f72:	f380 8814 	msr	CONTROL, r0
    isb
    1f76:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1f7a:	f005 fa63 	bl	7444 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1f7e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1f80:	490d      	ldr	r1, [pc, #52]	; (1fb8 <__start+0x48>)
    str r0, [r1]
    1f82:	6008      	str	r0, [r1, #0]
    dsb
    1f84:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f88:	480c      	ldr	r0, [pc, #48]	; (1fbc <__start+0x4c>)
    msr msp, r0
    1f8a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1f8e:	f000 f97d 	bl	228c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1f92:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1f94:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1f98:	4809      	ldr	r0, [pc, #36]	; (1fc0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1f9a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1f9e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1fa0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1fa4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1fa8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1faa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1fac:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1fb0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1fb4:	f7ff ff42 	bl	1e3c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1fb8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1fbc:	20001420 	.word	0x20001420
    ldr r0, =z_interrupt_stacks
    1fc0:	200015a0 	.word	0x200015a0

00001fc4 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1fc4:	4b23      	ldr	r3, [pc, #140]	; (2054 <mem_manage_fault+0x90>)
{
    1fc6:	b570      	push	{r4, r5, r6, lr}
    1fc8:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1fd0:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1fd2:	0790      	lsls	r0, r2, #30
    1fd4:	d51a      	bpl.n	200c <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1fd6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fda:	0612      	lsls	r2, r2, #24
    1fdc:	d516      	bpl.n	200c <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1fde:	b119      	cbz	r1, 1fe8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1fe6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fee:	06d6      	lsls	r6, r2, #27
    1ff0:	d40f      	bmi.n	2012 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1ff4:	0799      	lsls	r1, r3, #30
    1ff6:	d40c      	bmi.n	2012 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1ff8:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1ffa:	4a16      	ldr	r2, [pc, #88]	; (2054 <mem_manage_fault+0x90>)
    1ffc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1ffe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2002:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2004:	2300      	movs	r3, #0
    2006:	702b      	strb	r3, [r5, #0]

	return reason;
}
    2008:	4620      	mov	r0, r4
    200a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    200c:	f06f 0015 	mvn.w	r0, #21
    2010:	e7ea      	b.n	1fe8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2012:	4e10      	ldr	r6, [pc, #64]	; (2054 <mem_manage_fault+0x90>)
    2014:	6873      	ldr	r3, [r6, #4]
    2016:	051a      	lsls	r2, r3, #20
    2018:	d5ee      	bpl.n	1ff8 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    201a:	4621      	mov	r1, r4
    201c:	f7ff ff60 	bl	1ee0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2020:	4604      	mov	r4, r0
    2022:	b118      	cbz	r0, 202c <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2024:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2028:	2402      	movs	r4, #2
    202a:	e7e6      	b.n	1ffa <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    202c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    202e:	06db      	lsls	r3, r3, #27
    2030:	d5e2      	bpl.n	1ff8 <mem_manage_fault+0x34>
    2032:	4a09      	ldr	r2, [pc, #36]	; (2058 <mem_manage_fault+0x94>)
    2034:	4909      	ldr	r1, [pc, #36]	; (205c <mem_manage_fault+0x98>)
    2036:	480a      	ldr	r0, [pc, #40]	; (2060 <mem_manage_fault+0x9c>)
    2038:	f240 1349 	movw	r3, #329	; 0x149
    203c:	f004 ff7a 	bl	6f34 <printk>
    2040:	4808      	ldr	r0, [pc, #32]	; (2064 <mem_manage_fault+0xa0>)
    2042:	f004 ff77 	bl	6f34 <printk>
    2046:	4804      	ldr	r0, [pc, #16]	; (2058 <mem_manage_fault+0x94>)
    2048:	f240 1149 	movw	r1, #329	; 0x149
    204c:	f004 fe9e 	bl	6d8c <assert_post_action>
    2050:	e7d3      	b.n	1ffa <mem_manage_fault+0x36>
    2052:	bf00      	nop
    2054:	e000ed00 	.word	0xe000ed00
    2058:	00007fc0 	.word	0x00007fc0
    205c:	00007ffa 	.word	0x00007ffa
    2060:	000079ac 	.word	0x000079ac
    2064:	00008044 	.word	0x00008044

00002068 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2068:	4b0d      	ldr	r3, [pc, #52]	; (20a0 <bus_fault.isra.0+0x38>)
    206a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    206c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    206e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2070:	0592      	lsls	r2, r2, #22
    2072:	d508      	bpl.n	2086 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2074:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2078:	0412      	lsls	r2, r2, #16
    207a:	d504      	bpl.n	2086 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    207c:	b118      	cbz	r0, 2086 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    207e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2084:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2086:	4b06      	ldr	r3, [pc, #24]	; (20a0 <bus_fault.isra.0+0x38>)
    2088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    208a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    208c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    208e:	bf58      	it	pl
    2090:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2092:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2094:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2096:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    209a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    209c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    209e:	4770      	bx	lr
    20a0:	e000ed00 	.word	0xe000ed00

000020a4 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    20a4:	4b07      	ldr	r3, [pc, #28]	; (20c4 <usage_fault.isra.0+0x20>)
    20a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    20a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    20aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    20ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    20ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    20b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    20b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20b4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    20b8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    20bc:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    20be:	2000      	movs	r0, #0
    20c0:	4770      	bx	lr
    20c2:	bf00      	nop
    20c4:	e000ed00 	.word	0xe000ed00

000020c8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    20ca:	4b54      	ldr	r3, [pc, #336]	; (221c <z_arm_fault+0x154>)
    20cc:	685c      	ldr	r4, [r3, #4]
{
    20ce:	b08a      	sub	sp, #40	; 0x28
    20d0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    20d2:	f3c4 0408 	ubfx	r4, r4, #0, #9
    20d6:	2600      	movs	r6, #0
    20d8:	f386 8811 	msr	BASEPRI, r6
    20dc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    20e0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    20e4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    20e8:	d108      	bne.n	20fc <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    20ea:	f002 030c 	and.w	r3, r2, #12
    20ee:	2b08      	cmp	r3, #8
    20f0:	d004      	beq.n	20fc <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    20f2:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    20f4:	bf5c      	itt	pl
    20f6:	4605      	movpl	r5, r0
			*nested_exc = true;
    20f8:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    20fa:	b97d      	cbnz	r5, 211c <z_arm_fault+0x54>
    20fc:	4a48      	ldr	r2, [pc, #288]	; (2220 <z_arm_fault+0x158>)
    20fe:	4949      	ldr	r1, [pc, #292]	; (2224 <z_arm_fault+0x15c>)
    2100:	4849      	ldr	r0, [pc, #292]	; (2228 <z_arm_fault+0x160>)
    2102:	f240 33f2 	movw	r3, #1010	; 0x3f2
    2106:	f004 ff15 	bl	6f34 <printk>
    210a:	4848      	ldr	r0, [pc, #288]	; (222c <z_arm_fault+0x164>)
    210c:	f004 ff12 	bl	6f34 <printk>
    2110:	4843      	ldr	r0, [pc, #268]	; (2220 <z_arm_fault+0x158>)
    2112:	f240 31f2 	movw	r1, #1010	; 0x3f2
    2116:	f004 fe39 	bl	6d8c <assert_post_action>
    211a:	2500      	movs	r5, #0
	*recoverable = false;
    211c:	2300      	movs	r3, #0
    211e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2122:	1ee3      	subs	r3, r4, #3
    2124:	2b03      	cmp	r3, #3
    2126:	d872      	bhi.n	220e <z_arm_fault+0x146>
    2128:	e8df f003 	tbb	[pc, r3]
    212c:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2130:	4b3a      	ldr	r3, [pc, #232]	; (221c <z_arm_fault+0x154>)
    2132:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2134:	f014 0402 	ands.w	r4, r4, #2
    2138:	d169      	bne.n	220e <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    213c:	2a00      	cmp	r2, #0
    213e:	db18      	blt.n	2172 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2142:	005b      	lsls	r3, r3, #1
    2144:	d54e      	bpl.n	21e4 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    2146:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2148:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    214c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2150:	429a      	cmp	r2, r3
    2152:	d00d      	beq.n	2170 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    2154:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2158:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    215c:	781b      	ldrb	r3, [r3, #0]
    215e:	b30b      	cbz	r3, 21a4 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2160:	f10d 0207 	add.w	r2, sp, #7
    2164:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2166:	4628      	mov	r0, r5
    2168:	f7ff ff2c 	bl	1fc4 <mem_manage_fault>
		reason = usage_fault(esf);
    216c:	4604      	mov	r4, r0
		break;
    216e:	e000      	b.n	2172 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2170:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2172:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2176:	b99b      	cbnz	r3, 21a0 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2178:	2220      	movs	r2, #32
    217a:	4629      	mov	r1, r5
    217c:	a802      	add	r0, sp, #8
    217e:	f004 ff2f 	bl	6fe0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2182:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2184:	2e00      	cmp	r6, #0
    2186:	d044      	beq.n	2212 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2188:	f3c3 0208 	ubfx	r2, r3, #0, #9
    218c:	b922      	cbnz	r2, 2198 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    218e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2192:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2196:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2198:	a902      	add	r1, sp, #8
    219a:	4620      	mov	r0, r4
    219c:	f004 fee6 	bl	6f6c <z_arm_fatal_error>
}
    21a0:	b00a      	add	sp, #40	; 0x28
    21a2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    21a4:	4b22      	ldr	r3, [pc, #136]	; (2230 <z_arm_fault+0x168>)
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	b12b      	cbz	r3, 21b6 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    21aa:	f10d 0107 	add.w	r1, sp, #7
    21ae:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    21b0:	f7ff ff5a 	bl	2068 <bus_fault.isra.0>
    21b4:	e7da      	b.n	216c <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    21b6:	4b1f      	ldr	r3, [pc, #124]	; (2234 <z_arm_fault+0x16c>)
    21b8:	881b      	ldrh	r3, [r3, #0]
    21ba:	b29b      	uxth	r3, r3
    21bc:	b113      	cbz	r3, 21c4 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    21be:	f7ff ff71 	bl	20a4 <usage_fault.isra.0>
    21c2:	e7d3      	b.n	216c <z_arm_fault+0xa4>
			__ASSERT(0,
    21c4:	491c      	ldr	r1, [pc, #112]	; (2238 <z_arm_fault+0x170>)
    21c6:	4a16      	ldr	r2, [pc, #88]	; (2220 <z_arm_fault+0x158>)
    21c8:	4817      	ldr	r0, [pc, #92]	; (2228 <z_arm_fault+0x160>)
    21ca:	f240 23c3 	movw	r3, #707	; 0x2c3
    21ce:	f004 feb1 	bl	6f34 <printk>
    21d2:	481a      	ldr	r0, [pc, #104]	; (223c <z_arm_fault+0x174>)
    21d4:	f004 feae 	bl	6f34 <printk>
    21d8:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    21dc:	4810      	ldr	r0, [pc, #64]	; (2220 <z_arm_fault+0x158>)
    21de:	f004 fdd5 	bl	6d8c <assert_post_action>
    21e2:	e7c6      	b.n	2172 <z_arm_fault+0xaa>
    21e4:	4914      	ldr	r1, [pc, #80]	; (2238 <z_arm_fault+0x170>)
    21e6:	4a0e      	ldr	r2, [pc, #56]	; (2220 <z_arm_fault+0x158>)
    21e8:	480f      	ldr	r0, [pc, #60]	; (2228 <z_arm_fault+0x160>)
    21ea:	f240 23c7 	movw	r3, #711	; 0x2c7
    21ee:	f004 fea1 	bl	6f34 <printk>
    21f2:	4813      	ldr	r0, [pc, #76]	; (2240 <z_arm_fault+0x178>)
    21f4:	f004 fe9e 	bl	6f34 <printk>
    21f8:	f240 21c7 	movw	r1, #711	; 0x2c7
    21fc:	e7ee      	b.n	21dc <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    21fe:	f10d 0207 	add.w	r2, sp, #7
    2202:	2100      	movs	r1, #0
    2204:	e7af      	b.n	2166 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    2206:	f10d 0107 	add.w	r1, sp, #7
    220a:	2000      	movs	r0, #0
    220c:	e7d0      	b.n	21b0 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    220e:	2400      	movs	r4, #0
    2210:	e7af      	b.n	2172 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2212:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2216:	f023 0301 	bic.w	r3, r3, #1
    221a:	e7bc      	b.n	2196 <z_arm_fault+0xce>
    221c:	e000ed00 	.word	0xe000ed00
    2220:	00007fc0 	.word	0x00007fc0
    2224:	00008067 	.word	0x00008067
    2228:	000079ac 	.word	0x000079ac
    222c:	0000807a 	.word	0x0000807a
    2230:	e000ed29 	.word	0xe000ed29
    2234:	e000ed2a 	.word	0xe000ed2a
    2238:	00007e6f 	.word	0x00007e6f
    223c:	000080b8 	.word	0x000080b8
    2240:	000080dc 	.word	0x000080dc

00002244 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2244:	4a02      	ldr	r2, [pc, #8]	; (2250 <z_arm_fault_init+0xc>)
    2246:	6953      	ldr	r3, [r2, #20]
    2248:	f043 0310 	orr.w	r3, r3, #16
    224c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    224e:	4770      	bx	lr
    2250:	e000ed00 	.word	0xe000ed00

00002254 <z_arm_interrupt_init>:
    2254:	4804      	ldr	r0, [pc, #16]	; (2268 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2256:	2300      	movs	r3, #0
    2258:	2120      	movs	r1, #32
    225a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    225c:	3301      	adds	r3, #1
    225e:	2b30      	cmp	r3, #48	; 0x30
    2260:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2264:	d1f9      	bne.n	225a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2266:	4770      	bx	lr
    2268:	e000e100 	.word	0xe000e100

0000226c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    226c:	4a06      	ldr	r2, [pc, #24]	; (2288 <z_arm_clear_arm_mpu_config+0x1c>)
    226e:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2270:	2300      	movs	r3, #0
	int num_regions =
    2272:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2276:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2278:	428b      	cmp	r3, r1
    227a:	d100      	bne.n	227e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    227c:	4770      	bx	lr
  MPU->RNR = rnr;
    227e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2280:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2282:	3301      	adds	r3, #1
    2284:	e7f8      	b.n	2278 <z_arm_clear_arm_mpu_config+0xc>
    2286:	bf00      	nop
    2288:	e000ed90 	.word	0xe000ed90

0000228c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    228c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    228e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2290:	2300      	movs	r3, #0
    2292:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2296:	f7ff ffe9 	bl	226c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    229a:	4b14      	ldr	r3, [pc, #80]	; (22ec <z_arm_init_arch_hw_at_boot+0x60>)
    229c:	f04f 32ff 	mov.w	r2, #4294967295
    22a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    22a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    22a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    22ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    22b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    22b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    22b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    22bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    22c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    22c4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    22c8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    22cc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    22d0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    22d4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    22d8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    22dc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    22e0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    22e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22e6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    22ea:	bd08      	pop	{r3, pc}
    22ec:	e000e100 	.word	0xe000e100

000022f0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    22f0:	4b06      	ldr	r3, [pc, #24]	; (230c <z_impl_k_thread_abort+0x1c>)
    22f2:	689b      	ldr	r3, [r3, #8]
    22f4:	4283      	cmp	r3, r0
    22f6:	d107      	bne.n	2308 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    22f8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    22fc:	b123      	cbz	r3, 2308 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    22fe:	4a04      	ldr	r2, [pc, #16]	; (2310 <z_impl_k_thread_abort+0x20>)
    2300:	6853      	ldr	r3, [r2, #4]
    2302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2306:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2308:	f003 bd76 	b.w	5df8 <z_thread_abort>
    230c:	200009f0 	.word	0x200009f0
    2310:	e000ed00 	.word	0xe000ed00

00002314 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2314:	4b02      	ldr	r3, [pc, #8]	; (2320 <z_arm_configure_static_mpu_regions+0xc>)
    2316:	4a03      	ldr	r2, [pc, #12]	; (2324 <z_arm_configure_static_mpu_regions+0x10>)
    2318:	4803      	ldr	r0, [pc, #12]	; (2328 <z_arm_configure_static_mpu_regions+0x14>)
    231a:	2101      	movs	r1, #1
    231c:	f000 b868 	b.w	23f0 <arm_core_mpu_configure_static_mpu_regions>
    2320:	20040000 	.word	0x20040000
    2324:	20000000 	.word	0x20000000
    2328:	00007704 	.word	0x00007704

0000232c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    232c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    232e:	4b05      	ldr	r3, [pc, #20]	; (2344 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2330:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2332:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2334:	4a04      	ldr	r2, [pc, #16]	; (2348 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2336:	2120      	movs	r1, #32
    2338:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    233c:	4618      	mov	r0, r3
    233e:	2101      	movs	r1, #1
    2340:	f000 b87e 	b.w	2440 <arm_core_mpu_configure_dynamic_mpu_regions>
    2344:	2000089c 	.word	0x2000089c
    2348:	150b0000 	.word	0x150b0000

0000234c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    234c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    234e:	4f1e      	ldr	r7, [pc, #120]	; (23c8 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2350:	2600      	movs	r6, #0
    2352:	428e      	cmp	r6, r1
    2354:	db01      	blt.n	235a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2356:	4610      	mov	r0, r2
    2358:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    235a:	6844      	ldr	r4, [r0, #4]
    235c:	b384      	cbz	r4, 23c0 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    235e:	b153      	cbz	r3, 2376 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2360:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2364:	ea14 0f0c 	tst.w	r4, ip
    2368:	d118      	bne.n	239c <mpu_configure_regions+0x50>
		&&
    236a:	2c1f      	cmp	r4, #31
    236c:	d916      	bls.n	239c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    236e:	6805      	ldr	r5, [r0, #0]
		&&
    2370:	ea1c 0f05 	tst.w	ip, r5
    2374:	d112      	bne.n	239c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2376:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2378:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    237a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    237e:	b2d2      	uxtb	r2, r2
    2380:	d90f      	bls.n	23a2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2382:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2386:	d80e      	bhi.n	23a6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2388:	3c01      	subs	r4, #1
    238a:	fab4 f484 	clz	r4, r4
    238e:	f1c4 041f 	rsb	r4, r4, #31
    2392:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2394:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2396:	ea4c 0404 	orr.w	r4, ip, r4
    239a:	d906      	bls.n	23aa <mpu_configure_regions+0x5e>
			return -EINVAL;
    239c:	f06f 0215 	mvn.w	r2, #21
    23a0:	e7d9      	b.n	2356 <mpu_configure_regions+0xa>
		return REGION_32B;
    23a2:	2408      	movs	r4, #8
    23a4:	e7f6      	b.n	2394 <mpu_configure_regions+0x48>
		return REGION_4G;
    23a6:	243e      	movs	r4, #62	; 0x3e
    23a8:	e7f4      	b.n	2394 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    23aa:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    23ae:	4315      	orrs	r5, r2
    23b0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    23b4:	f044 0401 	orr.w	r4, r4, #1
    23b8:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    23ba:	60fd      	str	r5, [r7, #12]
		reg_index++;
    23bc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    23be:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    23c0:	3601      	adds	r6, #1
    23c2:	300c      	adds	r0, #12
    23c4:	e7c5      	b.n	2352 <mpu_configure_regions+0x6>
    23c6:	bf00      	nop
    23c8:	e000ed90 	.word	0xe000ed90

000023cc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    23cc:	4b03      	ldr	r3, [pc, #12]	; (23dc <arm_core_mpu_enable+0x10>)
    23ce:	2205      	movs	r2, #5
    23d0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    23d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23d6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    23da:	4770      	bx	lr
    23dc:	e000ed90 	.word	0xe000ed90

000023e0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    23e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    23e4:	4b01      	ldr	r3, [pc, #4]	; (23ec <arm_core_mpu_disable+0xc>)
    23e6:	2200      	movs	r2, #0
    23e8:	605a      	str	r2, [r3, #4]
}
    23ea:	4770      	bx	lr
    23ec:	e000ed90 	.word	0xe000ed90

000023f0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    23f0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    23f2:	4d0e      	ldr	r5, [pc, #56]	; (242c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    23f4:	2301      	movs	r3, #1
    23f6:	782a      	ldrb	r2, [r5, #0]
    23f8:	460c      	mov	r4, r1
    23fa:	f7ff ffa7 	bl	234c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    23fe:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2400:	3016      	adds	r0, #22
    2402:	d111      	bne.n	2428 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2404:	f240 1311 	movw	r3, #273	; 0x111
    2408:	4a09      	ldr	r2, [pc, #36]	; (2430 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    240a:	490a      	ldr	r1, [pc, #40]	; (2434 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    240c:	480a      	ldr	r0, [pc, #40]	; (2438 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    240e:	f004 fd91 	bl	6f34 <printk>
    2412:	4621      	mov	r1, r4
    2414:	4809      	ldr	r0, [pc, #36]	; (243c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2416:	f004 fd8d 	bl	6f34 <printk>
			regions_num);
	}
}
    241a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    241e:	4804      	ldr	r0, [pc, #16]	; (2430 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2420:	f240 1111 	movw	r1, #273	; 0x111
    2424:	f004 bcb2 	b.w	6d8c <assert_post_action>
}
    2428:	bd38      	pop	{r3, r4, r5, pc}
    242a:	bf00      	nop
    242c:	20000a50 	.word	0x20000a50
    2430:	0000810c 	.word	0x0000810c
    2434:	00007e6f 	.word	0x00007e6f
    2438:	000079ac 	.word	0x000079ac
    243c:	00008143 	.word	0x00008143

00002440 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2440:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2442:	4a12      	ldr	r2, [pc, #72]	; (248c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2444:	2300      	movs	r3, #0
    2446:	7812      	ldrb	r2, [r2, #0]
    2448:	460c      	mov	r4, r1
    244a:	f7ff ff7f 	bl	234c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    244e:	f110 0f16 	cmn.w	r0, #22
    2452:	d008      	beq.n	2466 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2454:	4b0e      	ldr	r3, [pc, #56]	; (2490 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2456:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2458:	2807      	cmp	r0, #7
    245a:	dd00      	ble.n	245e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    245c:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    245e:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2460:	611a      	str	r2, [r3, #16]
    2462:	3001      	adds	r0, #1
    2464:	e7f8      	b.n	2458 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2466:	4a0b      	ldr	r2, [pc, #44]	; (2494 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2468:	490b      	ldr	r1, [pc, #44]	; (2498 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    246a:	480c      	ldr	r0, [pc, #48]	; (249c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    246c:	f44f 7398 	mov.w	r3, #304	; 0x130
    2470:	f004 fd60 	bl	6f34 <printk>
    2474:	4621      	mov	r1, r4
    2476:	480a      	ldr	r0, [pc, #40]	; (24a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2478:	f004 fd5c 	bl	6f34 <printk>
}
    247c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2480:	4804      	ldr	r0, [pc, #16]	; (2494 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2482:	f44f 7198 	mov.w	r1, #304	; 0x130
    2486:	f004 bc81 	b.w	6d8c <assert_post_action>
    248a:	bf00      	nop
    248c:	20000a50 	.word	0x20000a50
    2490:	e000ed90 	.word	0xe000ed90
    2494:	0000810c 	.word	0x0000810c
    2498:	00007e6f 	.word	0x00007e6f
    249c:	000079ac 	.word	0x000079ac
    24a0:	0000816f 	.word	0x0000816f

000024a4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    24a4:	4925      	ldr	r1, [pc, #148]	; (253c <z_arm_mpu_init+0x98>)
{
    24a6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    24a8:	680c      	ldr	r4, [r1, #0]
    24aa:	2c08      	cmp	r4, #8
    24ac:	d913      	bls.n	24d6 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    24ae:	f44f 73a4 	mov.w	r3, #328	; 0x148
    24b2:	4a23      	ldr	r2, [pc, #140]	; (2540 <z_arm_mpu_init+0x9c>)
    24b4:	4923      	ldr	r1, [pc, #140]	; (2544 <z_arm_mpu_init+0xa0>)
    24b6:	4824      	ldr	r0, [pc, #144]	; (2548 <z_arm_mpu_init+0xa4>)
    24b8:	f004 fd3c 	bl	6f34 <printk>
    24bc:	4823      	ldr	r0, [pc, #140]	; (254c <z_arm_mpu_init+0xa8>)
    24be:	2208      	movs	r2, #8
    24c0:	4621      	mov	r1, r4
    24c2:	f004 fd37 	bl	6f34 <printk>
    24c6:	481e      	ldr	r0, [pc, #120]	; (2540 <z_arm_mpu_init+0x9c>)
    24c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    24cc:	f004 fc5e 	bl	6d8c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    24d0:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    24d4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    24d6:	f7ff ff83 	bl	23e0 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    24da:	6848      	ldr	r0, [r1, #4]
    24dc:	491c      	ldr	r1, [pc, #112]	; (2550 <z_arm_mpu_init+0xac>)
    24de:	2200      	movs	r2, #0
    24e0:	4294      	cmp	r4, r2
    24e2:	f100 000c 	add.w	r0, r0, #12
    24e6:	d119      	bne.n	251c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    24e8:	4b1a      	ldr	r3, [pc, #104]	; (2554 <z_arm_mpu_init+0xb0>)
    24ea:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    24ec:	f7ff ff6e 	bl	23cc <arm_core_mpu_enable>
	__ASSERT(
    24f0:	680b      	ldr	r3, [r1, #0]
    24f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    24f6:	2b08      	cmp	r3, #8
    24f8:	d00e      	beq.n	2518 <z_arm_mpu_init+0x74>
    24fa:	4917      	ldr	r1, [pc, #92]	; (2558 <z_arm_mpu_init+0xb4>)
    24fc:	4a10      	ldr	r2, [pc, #64]	; (2540 <z_arm_mpu_init+0x9c>)
    24fe:	4812      	ldr	r0, [pc, #72]	; (2548 <z_arm_mpu_init+0xa4>)
    2500:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2504:	f004 fd16 	bl	6f34 <printk>
    2508:	4814      	ldr	r0, [pc, #80]	; (255c <z_arm_mpu_init+0xb8>)
    250a:	f004 fd13 	bl	6f34 <printk>
    250e:	480c      	ldr	r0, [pc, #48]	; (2540 <z_arm_mpu_init+0x9c>)
    2510:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2514:	f004 fc3a 	bl	6d8c <assert_post_action>
	return 0;
    2518:	2000      	movs	r0, #0
    251a:	e7db      	b.n	24d4 <z_arm_mpu_init+0x30>
    251c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    251e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2522:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2526:	4313      	orrs	r3, r2
    2528:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    252c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    252e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2532:	f043 0301 	orr.w	r3, r3, #1
    2536:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2538:	3201      	adds	r2, #1
    253a:	e7d1      	b.n	24e0 <z_arm_mpu_init+0x3c>
    253c:	00007710 	.word	0x00007710
    2540:	0000810c 	.word	0x0000810c
    2544:	00007e6f 	.word	0x00007e6f
    2548:	000079ac 	.word	0x000079ac
    254c:	0000819c 	.word	0x0000819c
    2550:	e000ed90 	.word	0xe000ed90
    2554:	20000a50 	.word	0x20000a50
    2558:	000081d0 	.word	0x000081d0
    255c:	00008220 	.word	0x00008220

00002560 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2560:	4b01      	ldr	r3, [pc, #4]	; (2568 <__stdout_hook_install+0x8>)
    2562:	6018      	str	r0, [r3, #0]
}
    2564:	4770      	bx	lr
    2566:	bf00      	nop
    2568:	20000028 	.word	0x20000028

0000256c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    256c:	f04f 0320 	mov.w	r3, #32
    2570:	f3ef 8111 	mrs	r1, BASEPRI
    2574:	f383 8812 	msr	BASEPRI_MAX, r3
    2578:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    257c:	4a0f      	ldr	r2, [pc, #60]	; (25bc <nordicsemi_nrf52_init+0x50>)
    257e:	2301      	movs	r3, #1
    2580:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2588:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    258c:	4a0c      	ldr	r2, [pc, #48]	; (25c0 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    258e:	6812      	ldr	r2, [r2, #0]
    2590:	2a08      	cmp	r2, #8
    2592:	d108      	bne.n	25a6 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2594:	4a0b      	ldr	r2, [pc, #44]	; (25c4 <nordicsemi_nrf52_init+0x58>)
    2596:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2598:	2a05      	cmp	r2, #5
    259a:	d804      	bhi.n	25a6 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    259c:	480a      	ldr	r0, [pc, #40]	; (25c8 <nordicsemi_nrf52_init+0x5c>)
    259e:	5c82      	ldrb	r2, [r0, r2]
    25a0:	b10a      	cbz	r2, 25a6 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    25a2:	4a0a      	ldr	r2, [pc, #40]	; (25cc <nordicsemi_nrf52_init+0x60>)
    25a4:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    25a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25aa:	2201      	movs	r2, #1
    25ac:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    25b0:	f381 8811 	msr	BASEPRI, r1
    25b4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    25b8:	2000      	movs	r0, #0
    25ba:	4770      	bx	lr
    25bc:	4001e000 	.word	0x4001e000
    25c0:	10000130 	.word	0x10000130
    25c4:	10000134 	.word	0x10000134
    25c8:	00008250 	.word	0x00008250
    25cc:	40000638 	.word	0x40000638

000025d0 <sys_arch_reboot>:
    *p_gpregret = val;
    25d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25d4:	b2c0      	uxtb	r0, r0
    25d6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    25da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    25de:	4905      	ldr	r1, [pc, #20]	; (25f4 <sys_arch_reboot+0x24>)
    25e0:	4b05      	ldr	r3, [pc, #20]	; (25f8 <sys_arch_reboot+0x28>)
    25e2:	68ca      	ldr	r2, [r1, #12]
    25e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    25e8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    25ea:	60cb      	str	r3, [r1, #12]
    25ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    25f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    25f2:	e7fd      	b.n	25f0 <sys_arch_reboot+0x20>
    25f4:	e000ed00 	.word	0xe000ed00
    25f8:	05fa0004 	.word	0x05fa0004

000025fc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    25fc:	b120      	cbz	r0, 2608 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    25fe:	4b03      	ldr	r3, [pc, #12]	; (260c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2600:	0180      	lsls	r0, r0, #6
    2602:	f043 0301 	orr.w	r3, r3, #1
    2606:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	000076d0 	.word	0x000076d0

00002610 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2614:	4c10      	ldr	r4, [pc, #64]	; (2658 <onoff_start+0x48>)
    2616:	1b07      	subs	r7, r0, r4
    2618:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    261c:	f04f 080c 	mov.w	r8, #12
    2620:	fb08 f807 	mul.w	r8, r8, r7
{
    2624:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    2626:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    262a:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    262c:	4420      	add	r0, r4
    262e:	2140      	movs	r1, #64	; 0x40
    2630:	f004 fd08 	bl	7044 <set_starting_state>
	if (err < 0) {
    2634:	1e01      	subs	r1, r0, #0
    2636:	db09      	blt.n	264c <onoff_start+0x3c>
	subdata->cb = cb;
    2638:	4b08      	ldr	r3, [pc, #32]	; (265c <onoff_start+0x4c>)
    263a:	4444      	add	r4, r8
	subdata->user_data = user_data;
    263c:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2640:	4b07      	ldr	r3, [pc, #28]	; (2660 <onoff_start+0x50>)
    2642:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    264a:	4718      	bx	r3
		notify(mgr, err);
    264c:	4630      	mov	r0, r6
    264e:	462b      	mov	r3, r5
}
    2650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2654:	4718      	bx	r3
    2656:	bf00      	nop
    2658:	200008b8 	.word	0x200008b8
    265c:	000070a7 	.word	0x000070a7
    2660:	00007748 	.word	0x00007748

00002664 <get_status>:
{
    2664:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2666:	b2cc      	uxtb	r4, r1
    2668:	2c01      	cmp	r4, #1
{
    266a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    266c:	d909      	bls.n	2682 <get_status+0x1e>
    266e:	4909      	ldr	r1, [pc, #36]	; (2694 <get_status+0x30>)
    2670:	4809      	ldr	r0, [pc, #36]	; (2698 <get_status+0x34>)
    2672:	4a0a      	ldr	r2, [pc, #40]	; (269c <get_status+0x38>)
    2674:	2379      	movs	r3, #121	; 0x79
    2676:	f004 fc5d 	bl	6f34 <printk>
    267a:	4808      	ldr	r0, [pc, #32]	; (269c <get_status+0x38>)
    267c:	2179      	movs	r1, #121	; 0x79
    267e:	f004 fb85 	bl	6d8c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2682:	692b      	ldr	r3, [r5, #16]
    2684:	210c      	movs	r1, #12
    2686:	fb04 3401 	mla	r4, r4, r1, r3
    268a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    268c:	f000 0007 	and.w	r0, r0, #7
    2690:	bd38      	pop	{r3, r4, r5, pc}
    2692:	bf00      	nop
    2694:	00008293 	.word	0x00008293
    2698:	000079ac 	.word	0x000079ac
    269c:	00008256 	.word	0x00008256

000026a0 <stop>:
{
    26a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26a2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    26a4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    26a6:	6907      	ldr	r7, [r0, #16]
{
    26a8:	4605      	mov	r5, r0
    26aa:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    26ac:	d90b      	bls.n	26c6 <stop+0x26>
    26ae:	4918      	ldr	r1, [pc, #96]	; (2710 <stop+0x70>)
    26b0:	4818      	ldr	r0, [pc, #96]	; (2714 <stop+0x74>)
    26b2:	4a19      	ldr	r2, [pc, #100]	; (2718 <stop+0x78>)
    26b4:	f240 134d 	movw	r3, #333	; 0x14d
    26b8:	f004 fc3c 	bl	6f34 <printk>
    26bc:	4816      	ldr	r0, [pc, #88]	; (2718 <stop+0x78>)
    26be:	f240 114d 	movw	r1, #333	; 0x14d
    26c2:	f004 fb63 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    26c6:	f04f 0320 	mov.w	r3, #32
    26ca:	f3ef 8211 	mrs	r2, BASEPRI
    26ce:	f383 8812 	msr	BASEPRI_MAX, r3
    26d2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    26d6:	230c      	movs	r3, #12
    26d8:	fb03 7104 	mla	r1, r3, r4, r7
    26dc:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    26de:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    26e2:	d001      	beq.n	26e8 <stop+0x48>
    26e4:	428e      	cmp	r6, r1
    26e6:	d110      	bne.n	270a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    26e8:	fb03 7304 	mla	r3, r3, r4, r7
    26ec:	2101      	movs	r1, #1
    26ee:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    26f0:	2000      	movs	r0, #0
	__asm__ volatile(
    26f2:	f382 8811 	msr	BASEPRI, r2
    26f6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    26fa:	b928      	cbnz	r0, 2708 <stop+0x68>
	get_sub_config(dev, type)->stop();
    26fc:	6869      	ldr	r1, [r5, #4]
    26fe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2702:	6863      	ldr	r3, [r4, #4]
    2704:	4798      	blx	r3
	return 0;
    2706:	2000      	movs	r0, #0
}
    2708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    270a:	f04f 30ff 	mov.w	r0, #4294967295
    270e:	e7f0      	b.n	26f2 <stop+0x52>
    2710:	00008293 	.word	0x00008293
    2714:	000079ac 	.word	0x000079ac
    2718:	00008256 	.word	0x00008256

0000271c <onoff_stop>:
{
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2720:	4906      	ldr	r1, [pc, #24]	; (273c <onoff_stop+0x20>)
    2722:	1a41      	subs	r1, r0, r1
{
    2724:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2726:	1149      	asrs	r1, r1, #5
    2728:	4805      	ldr	r0, [pc, #20]	; (2740 <onoff_stop+0x24>)
    272a:	2240      	movs	r2, #64	; 0x40
    272c:	f7ff ffb8 	bl	26a0 <stop>
	notify(mgr, res);
    2730:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2732:	4601      	mov	r1, r0
	notify(mgr, res);
    2734:	4620      	mov	r0, r4
}
    2736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    273a:	4718      	bx	r3
    273c:	200008b8 	.word	0x200008b8
    2740:	000074b0 	.word	0x000074b0

00002744 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2744:	2200      	movs	r2, #0
{
    2746:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2748:	2101      	movs	r1, #1
{
    274a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    274c:	4610      	mov	r0, r2
    274e:	f7ff fb41 	bl	1dd4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2752:	2000      	movs	r0, #0
    2754:	f7ff fb20 	bl	1d98 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2758:	480f      	ldr	r0, [pc, #60]	; (2798 <clk_init+0x54>)
    275a:	f001 f853 	bl	3804 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    275e:	4b0f      	ldr	r3, [pc, #60]	; (279c <clk_init+0x58>)
    2760:	4298      	cmp	r0, r3
    2762:	d115      	bne.n	2790 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2764:	f001 f872 	bl	384c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2768:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    276a:	490d      	ldr	r1, [pc, #52]	; (27a0 <clk_init+0x5c>)
    276c:	4630      	mov	r0, r6
    276e:	f004 fbcc 	bl	6f0a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2772:	2800      	cmp	r0, #0
    2774:	db0b      	blt.n	278e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2776:	2501      	movs	r5, #1
    2778:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    277a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    277c:	4908      	ldr	r1, [pc, #32]	; (27a0 <clk_init+0x5c>)
    277e:	f104 0020 	add.w	r0, r4, #32
    2782:	f004 fbc2 	bl	6f0a <onoff_manager_init>
		if (err < 0) {
    2786:	2800      	cmp	r0, #0
    2788:	db01      	blt.n	278e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    278a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    278c:	2000      	movs	r0, #0
}
    278e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2790:	f06f 0004 	mvn.w	r0, #4
    2794:	e7fb      	b.n	278e <clk_init+0x4a>
    2796:	bf00      	nop
    2798:	000027d9 	.word	0x000027d9
    279c:	0bad0000 	.word	0x0bad0000
    27a0:	00007758 	.word	0x00007758

000027a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    27a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    27a6:	230c      	movs	r3, #12
    27a8:	4809      	ldr	r0, [pc, #36]	; (27d0 <clkstarted_handle.constprop.0+0x2c>)
    27aa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    27ac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    27ae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    27b0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    27b4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    27b6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    27b8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    27ba:	4418      	add	r0, r3
    27bc:	f004 fc60 	bl	7080 <set_on_state>
	if (callback) {
    27c0:	b12d      	cbz	r5, 27ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    27c2:	4632      	mov	r2, r6
    27c4:	462b      	mov	r3, r5
    27c6:	4803      	ldr	r0, [pc, #12]	; (27d4 <clkstarted_handle.constprop.0+0x30>)
}
    27c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    27cc:	4718      	bx	r3
}
    27ce:	bd70      	pop	{r4, r5, r6, pc}
    27d0:	200008b8 	.word	0x200008b8
    27d4:	000074b0 	.word	0x000074b0

000027d8 <clock_event_handler>:
	switch (event) {
    27d8:	2801      	cmp	r0, #1
{
    27da:	b508      	push	{r3, lr}
	switch (event) {
    27dc:	d006      	beq.n	27ec <clock_event_handler+0x14>
    27de:	2803      	cmp	r0, #3
    27e0:	d008      	beq.n	27f4 <clock_event_handler+0x1c>
    27e2:	b9a8      	cbnz	r0, 2810 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    27e4:	4b10      	ldr	r3, [pc, #64]	; (2828 <clock_event_handler+0x50>)
    27e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    27e8:	075b      	lsls	r3, r3, #29
    27ea:	d11b      	bne.n	2824 <clock_event_handler+0x4c>
}
    27ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    27f0:	f7ff bfd8 	b.w	27a4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    27f4:	490d      	ldr	r1, [pc, #52]	; (282c <clock_event_handler+0x54>)
    27f6:	4a0e      	ldr	r2, [pc, #56]	; (2830 <clock_event_handler+0x58>)
    27f8:	480e      	ldr	r0, [pc, #56]	; (2834 <clock_event_handler+0x5c>)
    27fa:	f240 235e 	movw	r3, #606	; 0x25e
    27fe:	f004 fb99 	bl	6f34 <printk>
    2802:	f240 215e 	movw	r1, #606	; 0x25e
}
    2806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    280a:	4809      	ldr	r0, [pc, #36]	; (2830 <clock_event_handler+0x58>)
    280c:	f004 babe 	b.w	6d8c <assert_post_action>
    2810:	4906      	ldr	r1, [pc, #24]	; (282c <clock_event_handler+0x54>)
    2812:	4a07      	ldr	r2, [pc, #28]	; (2830 <clock_event_handler+0x58>)
    2814:	4807      	ldr	r0, [pc, #28]	; (2834 <clock_event_handler+0x5c>)
    2816:	f240 2362 	movw	r3, #610	; 0x262
    281a:	f004 fb8b 	bl	6f34 <printk>
    281e:	f240 2162 	movw	r1, #610	; 0x262
    2822:	e7f0      	b.n	2806 <clock_event_handler+0x2e>
}
    2824:	bd08      	pop	{r3, pc}
    2826:	bf00      	nop
    2828:	200008b8 	.word	0x200008b8
    282c:	00007e6f 	.word	0x00007e6f
    2830:	00008256 	.word	0x00008256
    2834:	000079ac 	.word	0x000079ac

00002838 <generic_hfclk_start>:
{
    2838:	b508      	push	{r3, lr}
	__asm__ volatile(
    283a:	f04f 0320 	mov.w	r3, #32
    283e:	f3ef 8111 	mrs	r1, BASEPRI
    2842:	f383 8812 	msr	BASEPRI_MAX, r3
    2846:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    284a:	4a12      	ldr	r2, [pc, #72]	; (2894 <generic_hfclk_start+0x5c>)
    284c:	6813      	ldr	r3, [r2, #0]
    284e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2852:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2856:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2858:	d00c      	beq.n	2874 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    285a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    285e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2862:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2866:	f013 0301 	ands.w	r3, r3, #1
    286a:	d003      	beq.n	2874 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    286c:	480a      	ldr	r0, [pc, #40]	; (2898 <generic_hfclk_start+0x60>)
    286e:	f004 fc07 	bl	7080 <set_on_state>
			already_started = true;
    2872:	2301      	movs	r3, #1
	__asm__ volatile(
    2874:	f381 8811 	msr	BASEPRI, r1
    2878:	f3bf 8f6f 	isb	sy
	if (already_started) {
    287c:	b123      	cbz	r3, 2888 <generic_hfclk_start+0x50>
}
    287e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2882:	2000      	movs	r0, #0
    2884:	f7ff bf8e 	b.w	27a4 <clkstarted_handle.constprop.0>
}
    2888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    288c:	2001      	movs	r0, #1
    288e:	f000 bffd 	b.w	388c <nrfx_clock_start>
    2892:	bf00      	nop
    2894:	20000910 	.word	0x20000910
    2898:	20000900 	.word	0x20000900

0000289c <generic_hfclk_stop>:
    289c:	4b09      	ldr	r3, [pc, #36]	; (28c4 <generic_hfclk_stop+0x28>)
    289e:	f3bf 8f5b 	dmb	ish
    28a2:	e853 2f00 	ldrex	r2, [r3]
    28a6:	f022 0102 	bic.w	r1, r2, #2
    28aa:	e843 1000 	strex	r0, r1, [r3]
    28ae:	2800      	cmp	r0, #0
    28b0:	d1f7      	bne.n	28a2 <generic_hfclk_stop+0x6>
    28b2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    28b6:	07d3      	lsls	r3, r2, #31
    28b8:	d402      	bmi.n	28c0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    28ba:	2001      	movs	r0, #1
    28bc:	f001 b83a 	b.w	3934 <nrfx_clock_stop>
}
    28c0:	4770      	bx	lr
    28c2:	bf00      	nop
    28c4:	20000910 	.word	0x20000910

000028c8 <api_blocking_start>:
{
    28c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    28ca:	2200      	movs	r2, #0
    28cc:	2301      	movs	r3, #1
    28ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    28d2:	4a09      	ldr	r2, [pc, #36]	; (28f8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    28d4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    28d8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    28da:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    28de:	f004 fbf4 	bl	70ca <api_start>
	if (err < 0) {
    28e2:	2800      	cmp	r0, #0
    28e4:	db05      	blt.n	28f2 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    28e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    28ea:	2300      	movs	r3, #0
    28ec:	4668      	mov	r0, sp
    28ee:	f003 fb75 	bl	5fdc <z_impl_k_sem_take>
}
    28f2:	b005      	add	sp, #20
    28f4:	f85d fb04 	ldr.w	pc, [sp], #4
    28f8:	000070c5 	.word	0x000070c5

000028fc <z_nrf_clock_control_lf_on>:
{
    28fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2900:	4949      	ldr	r1, [pc, #292]	; (2a28 <z_nrf_clock_control_lf_on+0x12c>)
    2902:	f3bf 8f5b 	dmb	ish
    2906:	4605      	mov	r5, r0
    2908:	2201      	movs	r2, #1
    290a:	e851 3f00 	ldrex	r3, [r1]
    290e:	e841 2000 	strex	r0, r2, [r1]
    2912:	2800      	cmp	r0, #0
    2914:	d1f9      	bne.n	290a <z_nrf_clock_control_lf_on+0xe>
    2916:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    291a:	b9a3      	cbnz	r3, 2946 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    291c:	4943      	ldr	r1, [pc, #268]	; (2a2c <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    291e:	4844      	ldr	r0, [pc, #272]	; (2a30 <z_nrf_clock_control_lf_on+0x134>)
    2920:	604b      	str	r3, [r1, #4]
    2922:	60cb      	str	r3, [r1, #12]
    2924:	608a      	str	r2, [r1, #8]
    2926:	f7fe ffad 	bl	1884 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    292a:	2800      	cmp	r0, #0
    292c:	da0b      	bge.n	2946 <z_nrf_clock_control_lf_on+0x4a>
    292e:	4941      	ldr	r1, [pc, #260]	; (2a34 <z_nrf_clock_control_lf_on+0x138>)
    2930:	4841      	ldr	r0, [pc, #260]	; (2a38 <z_nrf_clock_control_lf_on+0x13c>)
    2932:	4a42      	ldr	r2, [pc, #264]	; (2a3c <z_nrf_clock_control_lf_on+0x140>)
    2934:	f44f 7308 	mov.w	r3, #544	; 0x220
    2938:	f004 fafc 	bl	6f34 <printk>
    293c:	483f      	ldr	r0, [pc, #252]	; (2a3c <z_nrf_clock_control_lf_on+0x140>)
    293e:	f44f 7108 	mov.w	r1, #544	; 0x220
    2942:	f004 fa23 	bl	6d8c <assert_post_action>
	switch (start_mode) {
    2946:	b3ad      	cbz	r5, 29b4 <z_nrf_clock_control_lf_on+0xb8>
    2948:	1e6b      	subs	r3, r5, #1
    294a:	2b01      	cmp	r3, #1
    294c:	d856      	bhi.n	29fc <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    294e:	2d01      	cmp	r5, #1
    2950:	d107      	bne.n	2962 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2956:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    295a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    295e:	2b01      	cmp	r3, #1
    2960:	d028      	beq.n	29b4 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2962:	f004 fd60 	bl	7426 <k_is_in_isr>
    2966:	4604      	mov	r4, r0
    2968:	b918      	cbnz	r0, 2972 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    296a:	4b35      	ldr	r3, [pc, #212]	; (2a40 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    296c:	781b      	ldrb	r3, [r3, #0]
    296e:	2b00      	cmp	r3, #0
    2970:	d152      	bne.n	2a18 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    2972:	f04f 0320 	mov.w	r3, #32
    2976:	f3ef 8611 	mrs	r6, BASEPRI
    297a:	f383 8812 	msr	BASEPRI_MAX, r3
    297e:	f3bf 8f6f 	isb	sy
    2982:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2984:	4f2f      	ldr	r7, [pc, #188]	; (2a44 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2986:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2a4c <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    298a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2a50 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    298e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2992:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2996:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    299a:	03d2      	lsls	r2, r2, #15
    299c:	d50c      	bpl.n	29b8 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    299e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    29a2:	2b01      	cmp	r3, #1
    29a4:	d001      	beq.n	29aa <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    29a6:	2d01      	cmp	r5, #1
    29a8:	d106      	bne.n	29b8 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    29aa:	b30c      	cbz	r4, 29f0 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    29ac:	f386 8811 	msr	BASEPRI, r6
    29b0:	f3bf 8f6f 	isb	sy
}
    29b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    29b8:	b1ac      	cbz	r4, 29e6 <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    29ba:	4630      	mov	r0, r6
    29bc:	f7ff f984 	bl	1cc8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    29c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29c4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    29c8:	2b00      	cmp	r3, #0
    29ca:	d1e0      	bne.n	298e <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    29cc:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    29ce:	2900      	cmp	r1, #0
    29d0:	d0dd      	beq.n	298e <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29d2:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    29d4:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    29d6:	2301      	movs	r3, #1
    29d8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    29dc:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    29e0:	f8c9 3000 	str.w	r3, [r9]
}
    29e4:	e7d3      	b.n	298e <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    29e6:	2100      	movs	r1, #0
    29e8:	2021      	movs	r0, #33	; 0x21
    29ea:	f003 f9c7 	bl	5d7c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    29ee:	e7e7      	b.n	29c0 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    29f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f4:	2202      	movs	r2, #2
    29f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    29fa:	e7db      	b.n	29b4 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    29fc:	4912      	ldr	r1, [pc, #72]	; (2a48 <z_nrf_clock_control_lf_on+0x14c>)
    29fe:	480e      	ldr	r0, [pc, #56]	; (2a38 <z_nrf_clock_control_lf_on+0x13c>)
    2a00:	4a0e      	ldr	r2, [pc, #56]	; (2a3c <z_nrf_clock_control_lf_on+0x140>)
    2a02:	f240 2332 	movw	r3, #562	; 0x232
    2a06:	f004 fa95 	bl	6f34 <printk>
}
    2a0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2a0e:	480b      	ldr	r0, [pc, #44]	; (2a3c <z_nrf_clock_control_lf_on+0x140>)
    2a10:	f240 2132 	movw	r1, #562	; 0x232
    2a14:	f004 b9ba 	b.w	6d8c <assert_post_action>
    p_reg->INTENCLR = mask;
    2a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a1c:	2202      	movs	r2, #2
    2a1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2a22:	4606      	mov	r6, r0
}
    2a24:	e7ae      	b.n	2984 <z_nrf_clock_control_lf_on+0x88>
    2a26:	bf00      	nop
    2a28:	20000914 	.word	0x20000914
    2a2c:	200008a8 	.word	0x200008a8
    2a30:	200008d8 	.word	0x200008d8
    2a34:	000082b7 	.word	0x000082b7
    2a38:	000079ac 	.word	0x000079ac
    2a3c:	00008256 	.word	0x00008256
    2a40:	20000e61 	.word	0x20000e61
    2a44:	40000104 	.word	0x40000104
    2a48:	00007e6f 	.word	0x00007e6f
    2a4c:	e000e100 	.word	0xe000e100
    2a50:	40000008 	.word	0x40000008

00002a54 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2a54:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2a56:	4b08      	ldr	r3, [pc, #32]	; (2a78 <uart_console_init+0x24>)
    2a58:	4808      	ldr	r0, [pc, #32]	; (2a7c <uart_console_init+0x28>)
    2a5a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2a5c:	f004 fc8f 	bl	737e <z_device_ready>
    2a60:	b138      	cbz	r0, 2a72 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2a62:	4807      	ldr	r0, [pc, #28]	; (2a80 <uart_console_init+0x2c>)
    2a64:	f7ff fd7c 	bl	2560 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2a68:	4805      	ldr	r0, [pc, #20]	; (2a80 <uart_console_init+0x2c>)
    2a6a:	f7ff f8f1 	bl	1c50 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2a6e:	2000      	movs	r0, #0
}
    2a70:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2a72:	f06f 0012 	mvn.w	r0, #18
    2a76:	e7fb      	b.n	2a70 <uart_console_init+0x1c>
    2a78:	20000918 	.word	0x20000918
    2a7c:	00007510 	.word	0x00007510
    2a80:	00002a85 	.word	0x00002a85

00002a84 <console_out>:
	if ('\n' == c) {
    2a84:	280a      	cmp	r0, #10
{
    2a86:	b538      	push	{r3, r4, r5, lr}
    2a88:	4d07      	ldr	r5, [pc, #28]	; (2aa8 <console_out+0x24>)
    2a8a:	4604      	mov	r4, r0
	if ('\n' == c) {
    2a8c:	d104      	bne.n	2a98 <console_out+0x14>
    2a8e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2a90:	6883      	ldr	r3, [r0, #8]
    2a92:	210d      	movs	r1, #13
    2a94:	685b      	ldr	r3, [r3, #4]
    2a96:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2a98:	6828      	ldr	r0, [r5, #0]
    2a9a:	6883      	ldr	r3, [r0, #8]
    2a9c:	b2e1      	uxtb	r1, r4
    2a9e:	685b      	ldr	r3, [r3, #4]
    2aa0:	4798      	blx	r3
}
    2aa2:	4620      	mov	r0, r4
    2aa4:	bd38      	pop	{r3, r4, r5, pc}
    2aa6:	bf00      	nop
    2aa8:	20000918 	.word	0x20000918

00002aac <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2aac:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2aae:	6905      	ldr	r5, [r0, #16]
{
    2ab0:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2ab2:	460c      	mov	r4, r1
    2ab4:	b961      	cbnz	r1, 2ad0 <gpio_nrfx_manage_callback+0x24>
    2ab6:	4922      	ldr	r1, [pc, #136]	; (2b40 <gpio_nrfx_manage_callback+0x94>)
    2ab8:	4a22      	ldr	r2, [pc, #136]	; (2b44 <gpio_nrfx_manage_callback+0x98>)
    2aba:	4823      	ldr	r0, [pc, #140]	; (2b48 <gpio_nrfx_manage_callback+0x9c>)
    2abc:	2324      	movs	r3, #36	; 0x24
    2abe:	f004 fa39 	bl	6f34 <printk>
    2ac2:	4822      	ldr	r0, [pc, #136]	; (2b4c <gpio_nrfx_manage_callback+0xa0>)
    2ac4:	f004 fa36 	bl	6f34 <printk>
    2ac8:	481e      	ldr	r0, [pc, #120]	; (2b44 <gpio_nrfx_manage_callback+0x98>)
    2aca:	2124      	movs	r1, #36	; 0x24
    2acc:	f004 f95e 	bl	6d8c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2ad0:	6863      	ldr	r3, [r4, #4]
    2ad2:	b963      	cbnz	r3, 2aee <gpio_nrfx_manage_callback+0x42>
    2ad4:	491e      	ldr	r1, [pc, #120]	; (2b50 <gpio_nrfx_manage_callback+0xa4>)
    2ad6:	4a1b      	ldr	r2, [pc, #108]	; (2b44 <gpio_nrfx_manage_callback+0x98>)
    2ad8:	481b      	ldr	r0, [pc, #108]	; (2b48 <gpio_nrfx_manage_callback+0x9c>)
    2ada:	2325      	movs	r3, #37	; 0x25
    2adc:	f004 fa2a 	bl	6f34 <printk>
    2ae0:	481c      	ldr	r0, [pc, #112]	; (2b54 <gpio_nrfx_manage_callback+0xa8>)
    2ae2:	f004 fa27 	bl	6f34 <printk>
    2ae6:	4817      	ldr	r0, [pc, #92]	; (2b44 <gpio_nrfx_manage_callback+0x98>)
    2ae8:	2125      	movs	r1, #37	; 0x25
    2aea:	f004 f94f 	bl	6d8c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2aee:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2af0:	b15b      	cbz	r3, 2b0a <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2af2:	2200      	movs	r2, #0
    2af4:	429c      	cmp	r4, r3
    2af6:	d113      	bne.n	2b20 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2af8:	6823      	ldr	r3, [r4, #0]
    2afa:	b95a      	cbnz	r2, 2b14 <gpio_nrfx_manage_callback+0x68>
    2afc:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2afe:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2b00:	4294      	cmp	r4, r2
    2b02:	d100      	bne.n	2b06 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2b04:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2b06:	2300      	movs	r3, #0
    2b08:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2b0a:	b976      	cbnz	r6, 2b2a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2b0c:	2000      	movs	r0, #0
				     callback, set);
}
    2b0e:	bd70      	pop	{r4, r5, r6, pc}
    2b10:	460b      	mov	r3, r1
    2b12:	e7ef      	b.n	2af4 <gpio_nrfx_manage_callback+0x48>
    2b14:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2b16:	68ab      	ldr	r3, [r5, #8]
    2b18:	429c      	cmp	r4, r3
	list->tail = node;
    2b1a:	bf08      	it	eq
    2b1c:	60aa      	streq	r2, [r5, #8]
}
    2b1e:	e7f2      	b.n	2b06 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2b20:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2b22:	461a      	mov	r2, r3
    2b24:	2900      	cmp	r1, #0
    2b26:	d1f3      	bne.n	2b10 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2b28:	b13e      	cbz	r6, 2b3a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2b2a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2b2c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2b2e:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2b30:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    2b32:	2800      	cmp	r0, #0
    2b34:	d1ea      	bne.n	2b0c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2b36:	60ac      	str	r4, [r5, #8]
}
    2b38:	e7e9      	b.n	2b0e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2b3a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2b3e:	e7e6      	b.n	2b0e <gpio_nrfx_manage_callback+0x62>
    2b40:	000082f3 	.word	0x000082f3
    2b44:	000082c6 	.word	0x000082c6
    2b48:	000079ac 	.word	0x000079ac
    2b4c:	000082fc 	.word	0x000082fc
    2b50:	0000830b 	.word	0x0000830b
    2b54:	0000831d 	.word	0x0000831d

00002b58 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b58:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b5e:	d003      	beq.n	2b68 <nrfx_gpio_handler+0x10>
    2b60:	2b01      	cmp	r3, #1
    2b62:	d036      	beq.n	2bd2 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b68:	4f1b      	ldr	r7, [pc, #108]	; (2bd8 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b6a:	693b      	ldr	r3, [r7, #16]
    2b6c:	685c      	ldr	r4, [r3, #4]
    2b6e:	2c00      	cmp	r4, #0
    2b70:	d0f8      	beq.n	2b64 <nrfx_gpio_handler+0xc>
    2b72:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    2b74:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2be4 <nrfx_gpio_handler+0x8c>
    2b78:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2be8 <nrfx_gpio_handler+0x90>
    2b7c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2bec <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2b80:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2b84:	2601      	movs	r6, #1
    2b86:	2d00      	cmp	r5, #0
    2b88:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    2b8c:	bf38      	it	cc
    2b8e:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2b90:	68a3      	ldr	r3, [r4, #8]
    2b92:	421e      	tst	r6, r3
    2b94:	d014      	beq.n	2bc0 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    2b96:	6863      	ldr	r3, [r4, #4]
    2b98:	b963      	cbnz	r3, 2bb4 <nrfx_gpio_handler+0x5c>
    2b9a:	4649      	mov	r1, r9
    2b9c:	2345      	movs	r3, #69	; 0x45
    2b9e:	4642      	mov	r2, r8
    2ba0:	4650      	mov	r0, sl
    2ba2:	f004 f9c7 	bl	6f34 <printk>
    2ba6:	480d      	ldr	r0, [pc, #52]	; (2bdc <nrfx_gpio_handler+0x84>)
    2ba8:	f004 f9c4 	bl	6f34 <printk>
    2bac:	2145      	movs	r1, #69	; 0x45
    2bae:	4640      	mov	r0, r8
    2bb0:	f004 f8ec 	bl	6d8c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2bb4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2bb8:	4621      	mov	r1, r4
    2bba:	4032      	ands	r2, r6
    2bbc:	4638      	mov	r0, r7
    2bbe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2bc0:	2d00      	cmp	r5, #0
    2bc2:	d0cf      	beq.n	2b64 <nrfx_gpio_handler+0xc>
    2bc4:	682b      	ldr	r3, [r5, #0]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	bf38      	it	cc
    2bca:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2bcc:	462c      	mov	r4, r5
    2bce:	461d      	mov	r5, r3
    2bd0:	e7de      	b.n	2b90 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2bd2:	4f03      	ldr	r7, [pc, #12]	; (2be0 <nrfx_gpio_handler+0x88>)
    2bd4:	e7c9      	b.n	2b6a <nrfx_gpio_handler+0x12>
    2bd6:	bf00      	nop
    2bd8:	000074c8 	.word	0x000074c8
    2bdc:	0000831d 	.word	0x0000831d
    2be0:	000074e0 	.word	0x000074e0
    2be4:	000082c6 	.word	0x000082c6
    2be8:	00008334 	.word	0x00008334
    2bec:	000079ac 	.word	0x000079ac

00002bf0 <gpio_nrfx_pin_interrupt_configure>:
{
    2bf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2bf2:	6840      	ldr	r0, [r0, #4]
    2bf4:	7b05      	ldrb	r5, [r0, #12]
    2bf6:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2bfa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2bfe:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2c02:	f04f 0500 	mov.w	r5, #0
    2c06:	d104      	bne.n	2c12 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2c08:	4620      	mov	r0, r4
    2c0a:	f001 fa2b 	bl	4064 <nrfx_gpiote_trigger_disable>
	return 0;
    2c0e:	2000      	movs	r0, #0
    2c10:	e054      	b.n	2cbc <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2c12:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2c16:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2c1a:	d151      	bne.n	2cc0 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2c20:	bf0c      	ite	eq
    2c22:	2304      	moveq	r3, #4
    2c24:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2c26:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2c2a:	6883      	ldr	r3, [r0, #8]
    2c2c:	fa23 f101 	lsr.w	r1, r3, r1
    2c30:	f011 0101 	ands.w	r1, r1, #1
    2c34:	d155      	bne.n	2ce2 <gpio_nrfx_pin_interrupt_configure+0xf2>
    2c36:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2c3a:	d152      	bne.n	2ce2 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    2c3c:	0966      	lsrs	r6, r4, #5
    2c3e:	d04a      	beq.n	2cd6 <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    2c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c44:	2e01      	cmp	r6, #1
    2c46:	bf08      	it	eq
    2c48:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    2c4a:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2c4e:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c50:	07ca      	lsls	r2, r1, #31
    2c52:	d40b      	bmi.n	2c6c <gpio_nrfx_pin_interrupt_configure+0x7c>
    2c54:	492b      	ldr	r1, [pc, #172]	; (2d04 <gpio_nrfx_pin_interrupt_configure+0x114>)
    2c56:	482c      	ldr	r0, [pc, #176]	; (2d08 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2c58:	4a2c      	ldr	r2, [pc, #176]	; (2d0c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2c5a:	f240 2329 	movw	r3, #553	; 0x229
    2c5e:	f004 f969 	bl	6f34 <printk>
    2c62:	482a      	ldr	r0, [pc, #168]	; (2d0c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2c64:	f240 2129 	movw	r1, #553	; 0x229
    2c68:	f004 f890 	bl	6d8c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c6c:	b16e      	cbz	r6, 2c8a <gpio_nrfx_pin_interrupt_configure+0x9a>
    2c6e:	2e01      	cmp	r6, #1
    2c70:	d034      	beq.n	2cdc <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    2c72:	4927      	ldr	r1, [pc, #156]	; (2d10 <gpio_nrfx_pin_interrupt_configure+0x120>)
    2c74:	4824      	ldr	r0, [pc, #144]	; (2d08 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2c76:	4a25      	ldr	r2, [pc, #148]	; (2d0c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2c78:	f240 232e 	movw	r3, #558	; 0x22e
    2c7c:	f004 f95a 	bl	6f34 <printk>
    2c80:	4822      	ldr	r0, [pc, #136]	; (2d0c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2c82:	f240 212e 	movw	r1, #558	; 0x22e
    2c86:	f004 f881 	bl	6d8c <assert_post_action>
        case 0: return NRF_P0;
    2c8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2c8e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2c92:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2c96:	07db      	lsls	r3, r3, #31
    2c98:	d423      	bmi.n	2ce2 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2c9a:	f10d 0507 	add.w	r5, sp, #7
    2c9e:	4629      	mov	r1, r5
    2ca0:	4620      	mov	r0, r4
    2ca2:	f001 f909 	bl	3eb8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2ca6:	4b1b      	ldr	r3, [pc, #108]	; (2d14 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2ca8:	4298      	cmp	r0, r3
    2caa:	d119      	bne.n	2ce0 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    2cac:	4628      	mov	r0, r5
    2cae:	f001 f963 	bl	3f78 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2cb2:	4b19      	ldr	r3, [pc, #100]	; (2d18 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2cb4:	4298      	cmp	r0, r3
    2cb6:	d013      	beq.n	2ce0 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    2cb8:	f06f 000b 	mvn.w	r0, #11
}
    2cbc:	b004      	add	sp, #16
    2cbe:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2cc0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2cc4:	d005      	beq.n	2cd2 <gpio_nrfx_pin_interrupt_configure+0xe2>
    2cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2cca:	bf0c      	ite	eq
    2ccc:	2302      	moveq	r3, #2
    2cce:	2301      	movne	r3, #1
    2cd0:	e7a9      	b.n	2c26 <gpio_nrfx_pin_interrupt_configure+0x36>
    2cd2:	2303      	movs	r3, #3
    2cd4:	e7a7      	b.n	2c26 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    2cd6:	f04f 31ff 	mov.w	r1, #4294967295
    2cda:	e7b6      	b.n	2c4a <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2cdc:	4b0f      	ldr	r3, [pc, #60]	; (2d1c <gpio_nrfx_pin_interrupt_configure+0x12c>)
    2cde:	e7d6      	b.n	2c8e <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    2ce0:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2ce2:	2300      	movs	r3, #0
    2ce4:	4619      	mov	r1, r3
    2ce6:	aa02      	add	r2, sp, #8
    2ce8:	4620      	mov	r0, r4
    2cea:	f000 ffc7 	bl	3c7c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2cee:	4b0a      	ldr	r3, [pc, #40]	; (2d18 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2cf0:	4298      	cmp	r0, r3
    2cf2:	d104      	bne.n	2cfe <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2cf4:	2101      	movs	r1, #1
    2cf6:	4620      	mov	r0, r4
    2cf8:	f001 f944 	bl	3f84 <nrfx_gpiote_trigger_enable>
    2cfc:	e787      	b.n	2c0e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    2cfe:	f06f 0004 	mvn.w	r0, #4
    2d02:	e7db      	b.n	2cbc <gpio_nrfx_pin_interrupt_configure+0xcc>
    2d04:	00008373 	.word	0x00008373
    2d08:	000079ac 	.word	0x000079ac
    2d0c:	00008340 	.word	0x00008340
    2d10:	00007e6f 	.word	0x00007e6f
    2d14:	0bad0004 	.word	0x0bad0004
    2d18:	0bad0000 	.word	0x0bad0000
    2d1c:	50000300 	.word	0x50000300

00002d20 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2d20:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2d22:	f001 f919 	bl	3f58 <nrfx_gpiote_is_init>
    2d26:	4604      	mov	r4, r0
    2d28:	b968      	cbnz	r0, 2d46 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2d2a:	f001 f8ed 	bl	3f08 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2d2e:	4b08      	ldr	r3, [pc, #32]	; (2d50 <gpio_nrfx_init+0x30>)
    2d30:	4298      	cmp	r0, r3
    2d32:	d10a      	bne.n	2d4a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2d34:	4807      	ldr	r0, [pc, #28]	; (2d54 <gpio_nrfx_init+0x34>)
    2d36:	4621      	mov	r1, r4
    2d38:	f001 f8b8 	bl	3eac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2d3c:	4622      	mov	r2, r4
    2d3e:	2105      	movs	r1, #5
    2d40:	2006      	movs	r0, #6
    2d42:	f7ff f847 	bl	1dd4 <z_arm_irq_priority_set>
		return 0;
    2d46:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2d48:	bd10      	pop	{r4, pc}
		return -EIO;
    2d4a:	f06f 0004 	mvn.w	r0, #4
    2d4e:	e7fb      	b.n	2d48 <gpio_nrfx_init+0x28>
    2d50:	0bad0000 	.word	0x0bad0000
    2d54:	00002b59 	.word	0x00002b59

00002d58 <gpio_nrfx_pin_configure>:
{
    2d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2d5c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2d5e:	7b3b      	ldrb	r3, [r7, #12]
    2d60:	f001 051f 	and.w	r5, r1, #31
{
    2d64:	b085      	sub	sp, #20
    2d66:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2d68:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2d6c:	4614      	mov	r4, r2
    2d6e:	b9ca      	cbnz	r2, 2da4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2d70:	a902      	add	r1, sp, #8
    2d72:	4628      	mov	r0, r5
    2d74:	f001 f8a0 	bl	3eb8 <nrfx_gpiote_channel_get>
    2d78:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2d7a:	4628      	mov	r0, r5
    2d7c:	f001 f994 	bl	40a8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2d80:	4b48      	ldr	r3, [pc, #288]	; (2ea4 <gpio_nrfx_pin_configure+0x14c>)
    2d82:	4298      	cmp	r0, r3
    2d84:	d004      	beq.n	2d90 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2d86:	f06f 0004 	mvn.w	r0, #4
}
    2d8a:	b005      	add	sp, #20
    2d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2d90:	4284      	cmp	r4, r0
    2d92:	d105      	bne.n	2da0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2d94:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2d98:	f001 f8e8 	bl	3f6c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2d9c:	42a0      	cmp	r0, r4
    2d9e:	d1f2      	bne.n	2d86 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2da0:	2000      	movs	r0, #0
    2da2:	e7f2      	b.n	2d8a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2da4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2da8:	f10d 0103 	add.w	r1, sp, #3
    2dac:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2dae:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2db2:	f001 f881 	bl	3eb8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2db6:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2db8:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2dba:	aa02      	add	r2, sp, #8
    2dbc:	4649      	mov	r1, r9
    2dbe:	4628      	mov	r0, r5
    2dc0:	f000 ff5c 	bl	3c7c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2dc4:	4b37      	ldr	r3, [pc, #220]	; (2ea4 <gpio_nrfx_pin_configure+0x14c>)
    2dc6:	4298      	cmp	r0, r3
    2dc8:	d002      	beq.n	2dd0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2dca:	f06f 0015 	mvn.w	r0, #21
    2dce:	e7dc      	b.n	2d8a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2dd0:	4580      	cmp	r8, r0
    2dd2:	d103      	bne.n	2ddc <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2dd4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2dd8:	f001 f8c8 	bl	3f6c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2ddc:	05a3      	lsls	r3, r4, #22
    2dde:	d54e      	bpl.n	2e7e <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2de0:	4b31      	ldr	r3, [pc, #196]	; (2ea8 <gpio_nrfx_pin_configure+0x150>)
    2de2:	4a32      	ldr	r2, [pc, #200]	; (2eac <gpio_nrfx_pin_configure+0x154>)
    2de4:	4023      	ands	r3, r4
    2de6:	4293      	cmp	r3, r2
    2de8:	d03a      	beq.n	2e60 <gpio_nrfx_pin_configure+0x108>
    2dea:	d80c      	bhi.n	2e06 <gpio_nrfx_pin_configure+0xae>
    2dec:	2b06      	cmp	r3, #6
    2dee:	d014      	beq.n	2e1a <gpio_nrfx_pin_configure+0xc2>
    2df0:	d804      	bhi.n	2dfc <gpio_nrfx_pin_configure+0xa4>
    2df2:	b193      	cbz	r3, 2e1a <gpio_nrfx_pin_configure+0xc2>
    2df4:	2b02      	cmp	r3, #2
    2df6:	d1e8      	bne.n	2dca <gpio_nrfx_pin_configure+0x72>
    2df8:	2304      	movs	r3, #4
    2dfa:	e00e      	b.n	2e1a <gpio_nrfx_pin_configure+0xc2>
    2dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2e00:	d1e3      	bne.n	2dca <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2e02:	2301      	movs	r3, #1
    2e04:	e009      	b.n	2e1a <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2e06:	4a2a      	ldr	r2, [pc, #168]	; (2eb0 <gpio_nrfx_pin_configure+0x158>)
    2e08:	4293      	cmp	r3, r2
    2e0a:	d02b      	beq.n	2e64 <gpio_nrfx_pin_configure+0x10c>
    2e0c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2e10:	d02a      	beq.n	2e68 <gpio_nrfx_pin_configure+0x110>
    2e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2e16:	d1d8      	bne.n	2dca <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2e18:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2e1a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2e1e:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2e22:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2e26:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2e28:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2e2c:	bf54      	ite	pl
    2e2e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2e32:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2e34:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2e36:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2e3a:	d517      	bpl.n	2e6c <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	2101      	movs	r1, #1
    2e40:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2e44:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2e48:	2200      	movs	r2, #0
    2e4a:	a901      	add	r1, sp, #4
    2e4c:	4628      	mov	r0, r5
    2e4e:	f000 ffbd 	bl	3dcc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2e52:	4b14      	ldr	r3, [pc, #80]	; (2ea4 <gpio_nrfx_pin_configure+0x14c>)
    2e54:	4298      	cmp	r0, r3
    2e56:	bf14      	ite	ne
    2e58:	f06f 0015 	mvnne.w	r0, #21
    2e5c:	2000      	moveq	r0, #0
    2e5e:	e794      	b.n	2d8a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2e60:	2307      	movs	r3, #7
    2e62:	e7da      	b.n	2e1a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2e64:	2305      	movs	r3, #5
    2e66:	e7d8      	b.n	2e1a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2e68:	2303      	movs	r3, #3
    2e6a:	e7d6      	b.n	2e1a <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2e6c:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2e6e:	bf41      	itttt	mi
    2e70:	687b      	ldrmi	r3, [r7, #4]
    2e72:	2101      	movmi	r1, #1
    2e74:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2e78:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2e7c:	e7e4      	b.n	2e48 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2e7e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2e80:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2e84:	bf54      	ite	pl
    2e86:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2e8a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2e8c:	461a      	mov	r2, r3
    2e8e:	a901      	add	r1, sp, #4
    2e90:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2e92:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2e96:	f000 fef1 	bl	3c7c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2e9a:	4b02      	ldr	r3, [pc, #8]	; (2ea4 <gpio_nrfx_pin_configure+0x14c>)
    2e9c:	4298      	cmp	r0, r3
    2e9e:	f43f af7f 	beq.w	2da0 <gpio_nrfx_pin_configure+0x48>
    2ea2:	e792      	b.n	2dca <gpio_nrfx_pin_configure+0x72>
    2ea4:	0bad0000 	.word	0x0bad0000
    2ea8:	00f00006 	.word	0x00f00006
    2eac:	00100006 	.word	0x00100006
    2eb0:	00400002 	.word	0x00400002

00002eb4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2eb6:	794b      	ldrb	r3, [r1, #5]
    2eb8:	2b01      	cmp	r3, #1
    2eba:	d026      	beq.n	2f0a <uarte_nrfx_configure+0x56>
    2ebc:	2b03      	cmp	r3, #3
    2ebe:	d121      	bne.n	2f04 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2ec0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2ec2:	798b      	ldrb	r3, [r1, #6]
    2ec4:	2b03      	cmp	r3, #3
    2ec6:	d11d      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2ec8:	79cc      	ldrb	r4, [r1, #7]
    2eca:	b10c      	cbz	r4, 2ed0 <uarte_nrfx_configure+0x1c>
    2ecc:	2c01      	cmp	r4, #1
    2ece:	d119      	bne.n	2f04 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2ed0:	790a      	ldrb	r2, [r1, #4]
    2ed2:	b112      	cbz	r2, 2eda <uarte_nrfx_configure+0x26>
    2ed4:	2a02      	cmp	r2, #2
    2ed6:	d115      	bne.n	2f04 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2ed8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2eda:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2edc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2ede:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2ee2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2ee4:	d065      	beq.n	2fb2 <uarte_nrfx_configure+0xfe>
    2ee6:	d82d      	bhi.n	2f44 <uarte_nrfx_configure+0x90>
    2ee8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2eec:	d064      	beq.n	2fb8 <uarte_nrfx_configure+0x104>
    2eee:	d816      	bhi.n	2f1e <uarte_nrfx_configure+0x6a>
    2ef0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ef4:	d062      	beq.n	2fbc <uarte_nrfx_configure+0x108>
    2ef6:	d80a      	bhi.n	2f0e <uarte_nrfx_configure+0x5a>
    2ef8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2efc:	d061      	beq.n	2fc2 <uarte_nrfx_configure+0x10e>
    2efe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2f02:	d061      	beq.n	2fc8 <uarte_nrfx_configure+0x114>
    2f04:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2f08:	e052      	b.n	2fb0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2f0a:	2600      	movs	r6, #0
    2f0c:	e7d9      	b.n	2ec2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2f0e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2f12:	d05c      	beq.n	2fce <uarte_nrfx_configure+0x11a>
    2f14:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2f18:	d1f4      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2f1a:	4b37      	ldr	r3, [pc, #220]	; (2ff8 <uarte_nrfx_configure+0x144>)
    2f1c:	e03c      	b.n	2f98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f1e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2f22:	d057      	beq.n	2fd4 <uarte_nrfx_configure+0x120>
    2f24:	d807      	bhi.n	2f36 <uarte_nrfx_configure+0x82>
    2f26:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2f2a:	d055      	beq.n	2fd8 <uarte_nrfx_configure+0x124>
    2f2c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2f30:	d1e8      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2f32:	4b32      	ldr	r3, [pc, #200]	; (2ffc <uarte_nrfx_configure+0x148>)
    2f34:	e030      	b.n	2f98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f36:	f647 2712 	movw	r7, #31250	; 0x7a12
    2f3a:	42bb      	cmp	r3, r7
    2f3c:	d1e2      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2f3e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2f42:	e029      	b.n	2f98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f44:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2f48:	d048      	beq.n	2fdc <uarte_nrfx_configure+0x128>
    2f4a:	d813      	bhi.n	2f74 <uarte_nrfx_configure+0xc0>
    2f4c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2f50:	d047      	beq.n	2fe2 <uarte_nrfx_configure+0x12e>
    2f52:	d809      	bhi.n	2f68 <uarte_nrfx_configure+0xb4>
    2f54:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2f58:	42bb      	cmp	r3, r7
    2f5a:	d044      	beq.n	2fe6 <uarte_nrfx_configure+0x132>
    2f5c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2f60:	d1d0      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2f62:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2f66:	e017      	b.n	2f98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f68:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f6c:	d1ca      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2f6e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2f72:	e011      	b.n	2f98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f74:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2f78:	d038      	beq.n	2fec <uarte_nrfx_configure+0x138>
    2f7a:	d808      	bhi.n	2f8e <uarte_nrfx_configure+0xda>
    2f7c:	4f20      	ldr	r7, [pc, #128]	; (3000 <uarte_nrfx_configure+0x14c>)
    2f7e:	42bb      	cmp	r3, r7
    2f80:	d037      	beq.n	2ff2 <uarte_nrfx_configure+0x13e>
    2f82:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2f86:	d1bd      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2f88:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2f8c:	e004      	b.n	2f98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f8e:	4f1d      	ldr	r7, [pc, #116]	; (3004 <uarte_nrfx_configure+0x150>)
    2f90:	42bb      	cmp	r3, r7
    2f92:	d1b7      	bne.n	2f04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2f98:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2f9c:	6903      	ldr	r3, [r0, #16]
    2f9e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2fa0:	4334      	orrs	r4, r6
    2fa2:	4322      	orrs	r2, r4
    2fa4:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2fa6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2faa:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2fae:	2000      	movs	r0, #0
}
    2fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2fb2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2fb6:	e7ef      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2fb8:	4b13      	ldr	r3, [pc, #76]	; (3008 <uarte_nrfx_configure+0x154>)
    2fba:	e7ed      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2fbc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2fc0:	e7ea      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2fc2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2fc6:	e7e7      	b.n	2f98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2fc8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2fcc:	e7e4      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2fce:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2fd2:	e7e1      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2fd4:	4b0d      	ldr	r3, [pc, #52]	; (300c <uarte_nrfx_configure+0x158>)
    2fd6:	e7df      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2fd8:	4b0d      	ldr	r3, [pc, #52]	; (3010 <uarte_nrfx_configure+0x15c>)
    2fda:	e7dd      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2fdc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2fe0:	e7da      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2fe2:	4b0c      	ldr	r3, [pc, #48]	; (3014 <uarte_nrfx_configure+0x160>)
    2fe4:	e7d8      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2fe6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2fea:	e7d5      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2fec:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2ff0:	e7d2      	b.n	2f98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2ff2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2ff6:	e7cf      	b.n	2f98 <uarte_nrfx_configure+0xe4>
    2ff8:	0013b000 	.word	0x0013b000
    2ffc:	004ea000 	.word	0x004ea000
    3000:	0003d090 	.word	0x0003d090
    3004:	000f4240 	.word	0x000f4240
    3008:	00275000 	.word	0x00275000
    300c:	0075c000 	.word	0x0075c000
    3010:	003af000 	.word	0x003af000
    3014:	013a9000 	.word	0x013a9000

00003018 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3018:	6802      	ldr	r2, [r0, #0]
    switch (port)
    301a:	0953      	lsrs	r3, r2, #5
{
    301c:	b510      	push	{r4, lr}
    301e:	4604      	mov	r4, r0
    switch (port)
    3020:	d02c      	beq.n	307c <nrf_gpio_pin_port_decode+0x64>
    3022:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3024:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3028:	bf18      	it	ne
    302a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    302c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3030:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3032:	07db      	lsls	r3, r3, #31
    3034:	d40b      	bmi.n	304e <nrf_gpio_pin_port_decode+0x36>
    3036:	4914      	ldr	r1, [pc, #80]	; (3088 <nrf_gpio_pin_port_decode+0x70>)
    3038:	4814      	ldr	r0, [pc, #80]	; (308c <nrf_gpio_pin_port_decode+0x74>)
    303a:	4a15      	ldr	r2, [pc, #84]	; (3090 <nrf_gpio_pin_port_decode+0x78>)
    303c:	f240 2329 	movw	r3, #553	; 0x229
    3040:	f003 ff78 	bl	6f34 <printk>
    3044:	4812      	ldr	r0, [pc, #72]	; (3090 <nrf_gpio_pin_port_decode+0x78>)
    3046:	f240 2129 	movw	r1, #553	; 0x229
    304a:	f003 fe9f 	bl	6d8c <assert_post_action>
    uint32_t pin_number = *p_pin;
    304e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3050:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3054:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3056:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3058:	d00d      	beq.n	3076 <nrf_gpio_pin_port_decode+0x5e>
    305a:	2b01      	cmp	r3, #1
    305c:	d011      	beq.n	3082 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    305e:	490d      	ldr	r1, [pc, #52]	; (3094 <nrf_gpio_pin_port_decode+0x7c>)
    3060:	480a      	ldr	r0, [pc, #40]	; (308c <nrf_gpio_pin_port_decode+0x74>)
    3062:	4a0b      	ldr	r2, [pc, #44]	; (3090 <nrf_gpio_pin_port_decode+0x78>)
    3064:	f240 232e 	movw	r3, #558	; 0x22e
    3068:	f003 ff64 	bl	6f34 <printk>
    306c:	4808      	ldr	r0, [pc, #32]	; (3090 <nrf_gpio_pin_port_decode+0x78>)
    306e:	f240 212e 	movw	r1, #558	; 0x22e
    3072:	f003 fe8b 	bl	6d8c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3076:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    307a:	bd10      	pop	{r4, pc}
    switch (port)
    307c:	f04f 33ff 	mov.w	r3, #4294967295
    3080:	e7d4      	b.n	302c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3082:	4805      	ldr	r0, [pc, #20]	; (3098 <nrf_gpio_pin_port_decode+0x80>)
    3084:	e7f9      	b.n	307a <nrf_gpio_pin_port_decode+0x62>
    3086:	bf00      	nop
    3088:	00008373 	.word	0x00008373
    308c:	000079ac 	.word	0x000079ac
    3090:	00008340 	.word	0x00008340
    3094:	00007e6f 	.word	0x00007e6f
    3098:	50000300 	.word	0x50000300

0000309c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    309e:	6906      	ldr	r6, [r0, #16]
{
    30a0:	4605      	mov	r5, r0
    30a2:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    30a4:	f004 f9bf 	bl	7426 <k_is_in_isr>
    30a8:	b910      	cbnz	r0, 30b0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    30aa:	4b2c      	ldr	r3, [pc, #176]	; (315c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    30ac:	781b      	ldrb	r3, [r3, #0]
    30ae:	b983      	cbnz	r3, 30d2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    30b0:	f04f 0320 	mov.w	r3, #32
    30b4:	f3ef 8411 	mrs	r4, BASEPRI
    30b8:	f383 8812 	msr	BASEPRI_MAX, r3
    30bc:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    30c0:	4628      	mov	r0, r5
    30c2:	f004 f88d 	bl	71e0 <is_tx_ready>
    30c6:	bb28      	cbnz	r0, 3114 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    30c8:	f384 8811 	msr	BASEPRI, r4
    30cc:	f3bf 8f6f 	isb	sy
}
    30d0:	e7ee      	b.n	30b0 <uarte_nrfx_poll_out+0x14>
{
    30d2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    30d4:	4628      	mov	r0, r5
    30d6:	f004 f883 	bl	71e0 <is_tx_ready>
    30da:	b970      	cbnz	r0, 30fa <uarte_nrfx_poll_out+0x5e>
    30dc:	2001      	movs	r0, #1
    30de:	f004 f8d5 	bl	728c <nrfx_busy_wait>
    30e2:	3c01      	subs	r4, #1
    30e4:	d1f6      	bne.n	30d4 <uarte_nrfx_poll_out+0x38>
    30e6:	2100      	movs	r1, #0
    30e8:	2021      	movs	r0, #33	; 0x21
    30ea:	f002 fe47 	bl	5d7c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    30ee:	e7f0      	b.n	30d2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    30f0:	f384 8811 	msr	BASEPRI, r4
    30f4:	f3bf 8f6f 	isb	sy
}
    30f8:	e7f5      	b.n	30e6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    30fa:	f04f 0320 	mov.w	r3, #32
    30fe:	f3ef 8411 	mrs	r4, BASEPRI
    3102:	f383 8812 	msr	BASEPRI_MAX, r3
    3106:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    310a:	4628      	mov	r0, r5
    310c:	f004 f868 	bl	71e0 <is_tx_ready>
    3110:	2800      	cmp	r0, #0
    3112:	d0ed      	beq.n	30f0 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3114:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3118:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    311a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    311c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    311e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3122:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3126:	2200      	movs	r2, #0
    3128:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    312c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3130:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3134:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3138:	684a      	ldr	r2, [r1, #4]
    313a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    313c:	bf41      	itttt	mi
    313e:	2208      	movmi	r2, #8
    3140:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3144:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3148:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    314c:	2201      	movs	r2, #1
    314e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3150:	f384 8811 	msr	BASEPRI, r4
    3154:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    315a:	bf00      	nop
    315c:	20000e61 	.word	0x20000e61

00003160 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3164:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3168:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    316a:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    316e:	2300      	movs	r3, #0
    3170:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3174:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3176:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3178:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    317a:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    317c:	1c58      	adds	r0, r3, #1
    317e:	d013      	beq.n	31a8 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3180:	a801      	add	r0, sp, #4
    3182:	9301      	str	r3, [sp, #4]
    3184:	f7ff ff48 	bl	3018 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3188:	9a01      	ldr	r2, [sp, #4]
    318a:	2301      	movs	r3, #1
    318c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    318e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3192:	68eb      	ldr	r3, [r5, #12]
    3194:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3196:	a801      	add	r0, sp, #4
    3198:	f7ff ff3e 	bl	3018 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    319c:	9b01      	ldr	r3, [sp, #4]
    319e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    31a2:	2203      	movs	r2, #3
    31a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    31a8:	692b      	ldr	r3, [r5, #16]
    31aa:	1c59      	adds	r1, r3, #1
    31ac:	d011      	beq.n	31d2 <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    31ae:	7f2a      	ldrb	r2, [r5, #28]
    31b0:	9301      	str	r3, [sp, #4]
    31b2:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31b4:	a801      	add	r0, sp, #4
    31b6:	bf14      	ite	ne
    31b8:	f04f 0903 	movne.w	r9, #3
    31bc:	f04f 0900 	moveq.w	r9, #0
    31c0:	f7ff ff2a 	bl	3018 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    31c4:	9b01      	ldr	r3, [sp, #4]
    31c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    31ca:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    31ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    31d2:	696b      	ldr	r3, [r5, #20]
    31d4:	1c5a      	adds	r2, r3, #1
    31d6:	d013      	beq.n	3200 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31d8:	a801      	add	r0, sp, #4
    31da:	9301      	str	r3, [sp, #4]
    31dc:	f7ff ff1c 	bl	3018 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    31e0:	9a01      	ldr	r2, [sp, #4]
    31e2:	2301      	movs	r3, #1
    31e4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    31e6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    31ea:	696b      	ldr	r3, [r5, #20]
    31ec:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31ee:	a801      	add	r0, sp, #4
    31f0:	f7ff ff12 	bl	3018 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    31f4:	9b01      	ldr	r3, [sp, #4]
    31f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    31fa:	2203      	movs	r2, #3
    31fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3200:	69ab      	ldr	r3, [r5, #24]
    3202:	1c58      	adds	r0, r3, #1
    3204:	d011      	beq.n	322a <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3206:	7f6a      	ldrb	r2, [r5, #29]
    3208:	9301      	str	r3, [sp, #4]
    320a:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    320c:	a801      	add	r0, sp, #4
    320e:	bf14      	ite	ne
    3210:	f04f 0903 	movne.w	r9, #3
    3214:	f04f 0900 	moveq.w	r9, #0
    3218:	f7ff fefe 	bl	3018 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    321c:	9b01      	ldr	r3, [sp, #4]
    321e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3222:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3226:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    322a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    322e:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3230:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3234:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3238:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    323c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3240:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    3242:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3246:	3104      	adds	r1, #4
    3248:	4630      	mov	r0, r6
    324a:	f7ff fe33 	bl	2eb4 <uarte_nrfx_configure>
	if (err) {
    324e:	4605      	mov	r5, r0
    3250:	2800      	cmp	r0, #0
    3252:	d146      	bne.n	32e2 <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3254:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3258:	0799      	lsls	r1, r3, #30
    325a:	d519      	bpl.n	3290 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    325c:	f107 0012 	add.w	r0, r7, #18
    3260:	f001 f820 	bl	42a4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3264:	4b22      	ldr	r3, [pc, #136]	; (32f0 <uarte_instance_init.isra.0+0x190>)
    3266:	4298      	cmp	r0, r3
    3268:	d13f      	bne.n	32ea <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    326a:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    326c:	00c3      	lsls	r3, r0, #3
    326e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3272:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3276:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    327a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    327e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3282:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3286:	4a1b      	ldr	r2, [pc, #108]	; (32f4 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3288:	2301      	movs	r3, #1
    328a:	4083      	lsls	r3, r0
    328c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3290:	2308      	movs	r3, #8
    3292:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3296:	f898 3008 	ldrb.w	r3, [r8, #8]
    329a:	b95b      	cbnz	r3, 32b4 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    329c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    32a0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    32a4:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    32a8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    32ac:	2301      	movs	r3, #1
    32ae:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32b2:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    32b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    32b8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    32ba:	bf5c      	itt	pl
    32bc:	f44f 7280 	movpl.w	r2, #256	; 0x100
    32c0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    32c4:	06db      	lsls	r3, r3, #27
    32c6:	bf44      	itt	mi
    32c8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    32cc:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    32d0:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    32d2:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    32d4:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    32d8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32dc:	2301      	movs	r3, #1
    32de:	60a3      	str	r3, [r4, #8]
    32e0:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    32e2:	4628      	mov	r0, r5
    32e4:	b003      	add	sp, #12
    32e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    32ea:	f06f 0504 	mvn.w	r5, #4
    32ee:	e7f8      	b.n	32e2 <uarte_instance_init.isra.0+0x182>
    32f0:	0bad0000 	.word	0x0bad0000
    32f4:	4001f000 	.word	0x4001f000

000032f8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32f8:	4919      	ldr	r1, [pc, #100]	; (3360 <sys_clock_timeout_handler+0x68>)
{
    32fa:	b570      	push	{r4, r5, r6, lr}
    32fc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    32fe:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3302:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3304:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3308:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    330c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    330e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3312:	f04f 0500 	mov.w	r5, #0
    3316:	d20a      	bcs.n	332e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3318:	4b12      	ldr	r3, [pc, #72]	; (3364 <sys_clock_timeout_handler+0x6c>)
    331a:	6819      	ldr	r1, [r3, #0]
    331c:	060a      	lsls	r2, r1, #24
    331e:	0a0b      	lsrs	r3, r1, #8
    3320:	1992      	adds	r2, r2, r6
    3322:	4911      	ldr	r1, [pc, #68]	; (3368 <sys_clock_timeout_handler+0x70>)
    3324:	f143 0300 	adc.w	r3, r3, #0
    3328:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    332c:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    332e:	f003 fa03 	bl	6738 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3332:	00a3      	lsls	r3, r4, #2
    3334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3338:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    333c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3340:	42b2      	cmp	r2, r6
    3342:	d10b      	bne.n	335c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3344:	b91d      	cbnz	r5, 334e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3346:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    334a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    334e:	4b07      	ldr	r3, [pc, #28]	; (336c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3350:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3354:	fa00 f404 	lsl.w	r4, r0, r4
    3358:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    335c:	bd70      	pop	{r4, r5, r6, pc}
    335e:	bf00      	nop
    3360:	200001c0 	.word	0x200001c0
    3364:	2000093c 	.word	0x2000093c
    3368:	200001a8 	.word	0x200001a8
    336c:	40011000 	.word	0x40011000

00003370 <compare_int_lock>:
{
    3370:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3372:	2301      	movs	r3, #1
    3374:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3376:	4a11      	ldr	r2, [pc, #68]	; (33bc <compare_int_lock+0x4c>)
    3378:	f3bf 8f5b 	dmb	ish
    337c:	43dc      	mvns	r4, r3
    337e:	e852 1f00 	ldrex	r1, [r2]
    3382:	ea01 0c04 	and.w	ip, r1, r4
    3386:	e842 ce00 	strex	lr, ip, [r2]
    338a:	f1be 0f00 	cmp.w	lr, #0
    338e:	d1f6      	bne.n	337e <compare_int_lock+0xe>
    3390:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3394:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3398:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    339c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    33a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    33a4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    33a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33ac:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    33b0:	420b      	tst	r3, r1
}
    33b2:	bf14      	ite	ne
    33b4:	2001      	movne	r0, #1
    33b6:	2000      	moveq	r0, #0
    33b8:	bd10      	pop	{r4, pc}
    33ba:	bf00      	nop
    33bc:	20000938 	.word	0x20000938

000033c0 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    33c0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    33c2:	4a12      	ldr	r2, [pc, #72]	; (340c <compare_int_unlock.part.0+0x4c>)
    33c4:	f3bf 8f5b 	dmb	ish
    33c8:	4083      	lsls	r3, r0
    33ca:	e852 1f00 	ldrex	r1, [r2]
    33ce:	4319      	orrs	r1, r3
    33d0:	e842 1c00 	strex	ip, r1, [r2]
    33d4:	f1bc 0f00 	cmp.w	ip, #0
    33d8:	d1f7      	bne.n	33ca <compare_int_unlock.part.0+0xa>
    33da:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    33de:	4a0c      	ldr	r2, [pc, #48]	; (3410 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    33e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    33e4:	4083      	lsls	r3, r0
    33e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    33ea:	4b0a      	ldr	r3, [pc, #40]	; (3414 <compare_int_unlock.part.0+0x54>)
    33ec:	f3bf 8f5b 	dmb	ish
    33f0:	681b      	ldr	r3, [r3, #0]
    33f2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    33f6:	fa23 f000 	lsr.w	r0, r3, r0
    33fa:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33fc:	bf42      	ittt	mi
    33fe:	4b06      	ldrmi	r3, [pc, #24]	; (3418 <compare_int_unlock.part.0+0x58>)
    3400:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3404:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3408:	4770      	bx	lr
    340a:	bf00      	nop
    340c:	20000938 	.word	0x20000938
    3410:	40011000 	.word	0x40011000
    3414:	20000934 	.word	0x20000934
    3418:	e000e100 	.word	0xe000e100

0000341c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    341c:	4b0d      	ldr	r3, [pc, #52]	; (3454 <z_nrf_rtc_timer_read+0x38>)
    341e:	681b      	ldr	r3, [r3, #0]
    3420:	0a19      	lsrs	r1, r3, #8
    3422:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3424:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3428:	4b0b      	ldr	r3, [pc, #44]	; (3458 <z_nrf_rtc_timer_read+0x3c>)
    342a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    342e:	18c0      	adds	r0, r0, r3
    3430:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3438:	d20a      	bcs.n	3450 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    343a:	4b08      	ldr	r3, [pc, #32]	; (345c <z_nrf_rtc_timer_read+0x40>)
    343c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3440:	4299      	cmp	r1, r3
    3442:	bf08      	it	eq
    3444:	4290      	cmpeq	r0, r2
    3446:	d203      	bcs.n	3450 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3448:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    344c:	f141 0100 	adc.w	r1, r1, #0
}
    3450:	4770      	bx	lr
    3452:	bf00      	nop
    3454:	2000093c 	.word	0x2000093c
    3458:	40011000 	.word	0x40011000
    345c:	200001a8 	.word	0x200001a8

00003460 <compare_set>:
{
    3460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3464:	b085      	sub	sp, #20
    3466:	4616      	mov	r6, r2
    3468:	461f      	mov	r7, r3
    346a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    346c:	f7ff ff80 	bl	3370 <compare_int_lock>
    3470:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3472:	f7ff ffd3 	bl	341c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3476:	42b9      	cmp	r1, r7
    3478:	bf08      	it	eq
    347a:	42b0      	cmpeq	r0, r6
    347c:	d27f      	bcs.n	357e <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    347e:	ebb6 0800 	subs.w	r8, r6, r0
    3482:	eb67 0901 	sbc.w	r9, r7, r1
    3486:	2300      	movs	r3, #0
    3488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    348c:	454b      	cmp	r3, r9
    348e:	bf08      	it	eq
    3490:	4542      	cmpeq	r2, r8
    3492:	f0c0 8085 	bcc.w	35a0 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    3496:	4b44      	ldr	r3, [pc, #272]	; (35a8 <compare_set+0x148>)
    3498:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    349c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    34a0:	429f      	cmp	r7, r3
    34a2:	bf08      	it	eq
    34a4:	4296      	cmpeq	r6, r2
    34a6:	d054      	beq.n	3552 <compare_set+0xf2>
    34a8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34ac:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    34b0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    34b4:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34b8:	fa0b f205 	lsl.w	r2, fp, r5
    34bc:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    34c0:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34c4:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34c8:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    34ca:	4a38      	ldr	r2, [pc, #224]	; (35ac <compare_set+0x14c>)
    return p_reg->CC[ch];
    34cc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    34d0:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34d4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    34d8:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    34dc:	461c      	mov	r4, r3
    34de:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    34e0:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    34e4:	eba0 000a 	sub.w	r0, r0, sl
    34e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    34ec:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    34f0:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    34f2:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    34f6:	d105      	bne.n	3504 <compare_set+0xa4>
    34f8:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    34fa:	2013      	movs	r0, #19
    34fc:	f003 ff9d 	bl	743a <z_impl_k_busy_wait>
    3500:	4a2a      	ldr	r2, [pc, #168]	; (35ac <compare_set+0x14c>)
    3502:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3504:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3506:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    350a:	eba4 000c 	sub.w	r0, r4, ip
    350e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3512:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3516:	bf88      	it	hi
    3518:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    351a:	2000      	movs	r0, #0
    351c:	f8c8 0000 	str.w	r0, [r8]
    3520:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3524:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3528:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    352c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3530:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3534:	4582      	cmp	sl, r0
    3536:	d006      	beq.n	3546 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3538:	1a20      	subs	r0, r4, r0
    353a:	3802      	subs	r0, #2
    353c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3540:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3544:	d819      	bhi.n	357a <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3546:	1ae4      	subs	r4, r4, r3
    3548:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    354c:	1932      	adds	r2, r6, r4
    354e:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3552:	4c15      	ldr	r4, [pc, #84]	; (35a8 <compare_set+0x148>)
    3554:	0129      	lsls	r1, r5, #4
    3556:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    355a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    355e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3562:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3564:	6043      	str	r3, [r0, #4]
	return ret;
    3566:	2400      	movs	r4, #0
	if (key) {
    3568:	9b01      	ldr	r3, [sp, #4]
    356a:	b113      	cbz	r3, 3572 <compare_set+0x112>
    356c:	4628      	mov	r0, r5
    356e:	f7ff ff27 	bl	33c0 <compare_int_unlock.part.0>
}
    3572:	4620      	mov	r0, r4
    3574:	b005      	add	sp, #20
    3576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    357a:	4620      	mov	r0, r4
    357c:	e7b0      	b.n	34e0 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    357e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3580:	4a0b      	ldr	r2, [pc, #44]	; (35b0 <compare_set+0x150>)
    3582:	f3bf 8f5b 	dmb	ish
    3586:	40ab      	lsls	r3, r5
    3588:	e852 1f00 	ldrex	r1, [r2]
    358c:	4319      	orrs	r1, r3
    358e:	e842 1000 	strex	r0, r1, [r2]
    3592:	2800      	cmp	r0, #0
    3594:	d1f8      	bne.n	3588 <compare_set+0x128>
    3596:	f3bf 8f5b 	dmb	ish
    359a:	4632      	mov	r2, r6
    359c:	463b      	mov	r3, r7
    359e:	e7d8      	b.n	3552 <compare_set+0xf2>
			return -EINVAL;
    35a0:	f06f 0415 	mvn.w	r4, #21
    35a4:	e7e0      	b.n	3568 <compare_set+0x108>
    35a6:	bf00      	nop
    35a8:	200001b0 	.word	0x200001b0
    35ac:	40011000 	.word	0x40011000
    35b0:	20000934 	.word	0x20000934

000035b4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    35b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    35b6:	4b19      	ldr	r3, [pc, #100]	; (361c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    35b8:	4d19      	ldr	r5, [pc, #100]	; (3620 <sys_clock_driver_init+0x6c>)
    35ba:	2400      	movs	r4, #0
    35bc:	f04f 30ff 	mov.w	r0, #4294967295
    35c0:	f04f 31ff 	mov.w	r1, #4294967295
    35c4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    35c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    35cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    35d0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35d4:	4b13      	ldr	r3, [pc, #76]	; (3624 <sys_clock_driver_init+0x70>)
    35d6:	2602      	movs	r6, #2
    35d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    35dc:	2101      	movs	r1, #1
    35de:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    35e2:	2011      	movs	r0, #17
    35e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    35e8:	4622      	mov	r2, r4
    35ea:	f7fe fbf3 	bl	1dd4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    35ee:	2011      	movs	r0, #17
    35f0:	f7fe fbd2 	bl	1d98 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    35f4:	4a0c      	ldr	r2, [pc, #48]	; (3628 <sys_clock_driver_init+0x74>)
    35f6:	2301      	movs	r3, #1
    35f8:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    35fa:	4a0c      	ldr	r2, [pc, #48]	; (362c <sys_clock_driver_init+0x78>)
    35fc:	602b      	str	r3, [r5, #0]
    35fe:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3600:	4b0b      	ldr	r3, [pc, #44]	; (3630 <sys_clock_driver_init+0x7c>)
    3602:	4a0c      	ldr	r2, [pc, #48]	; (3634 <sys_clock_driver_init+0x80>)
    3604:	9300      	str	r3, [sp, #0]
    3606:	9401      	str	r4, [sp, #4]
    3608:	2300      	movs	r3, #0
    360a:	4620      	mov	r0, r4
    360c:	f7ff ff28 	bl	3460 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3610:	4630      	mov	r0, r6
    3612:	f7ff f973 	bl	28fc <z_nrf_clock_control_lf_on>

	return 0;
}
    3616:	4620      	mov	r0, r4
    3618:	b002      	add	sp, #8
    361a:	bd70      	pop	{r4, r5, r6, pc}
    361c:	200001b0 	.word	0x200001b0
    3620:	40011000 	.word	0x40011000
    3624:	e000e100 	.word	0xe000e100
    3628:	40011008 	.word	0x40011008
    362c:	20000938 	.word	0x20000938
    3630:	000032f9 	.word	0x000032f9
    3634:	007fffff 	.word	0x007fffff

00003638 <rtc_nrf_isr>:
{
    3638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    363c:	4c34      	ldr	r4, [pc, #208]	; (3710 <rtc_nrf_isr+0xd8>)
    363e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3642:	079a      	lsls	r2, r3, #30
    3644:	d509      	bpl.n	365a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3646:	4b33      	ldr	r3, [pc, #204]	; (3714 <rtc_nrf_isr+0xdc>)
    3648:	681a      	ldr	r2, [r3, #0]
    364a:	b132      	cbz	r2, 365a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    364c:	2200      	movs	r2, #0
    364e:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3650:	4a31      	ldr	r2, [pc, #196]	; (3718 <rtc_nrf_isr+0xe0>)
    3652:	681b      	ldr	r3, [r3, #0]
    3654:	6813      	ldr	r3, [r2, #0]
    3656:	3301      	adds	r3, #1
    3658:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    365a:	f04f 0320 	mov.w	r3, #32
    365e:	f3ef 8211 	mrs	r2, BASEPRI
    3662:	f383 8812 	msr	BASEPRI_MAX, r3
    3666:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    366a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    366e:	03db      	lsls	r3, r3, #15
    3670:	d512      	bpl.n	3698 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3672:	f3bf 8f5b 	dmb	ish
    3676:	4b29      	ldr	r3, [pc, #164]	; (371c <rtc_nrf_isr+0xe4>)
    3678:	e853 1f00 	ldrex	r1, [r3]
    367c:	f021 0001 	bic.w	r0, r1, #1
    3680:	e843 0600 	strex	r6, r0, [r3]
    3684:	2e00      	cmp	r6, #0
    3686:	d1f7      	bne.n	3678 <rtc_nrf_isr+0x40>
    3688:	f3bf 8f5b 	dmb	ish
    368c:	4b24      	ldr	r3, [pc, #144]	; (3720 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    368e:	2900      	cmp	r1, #0
    3690:	d136      	bne.n	3700 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3692:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3694:	2900      	cmp	r1, #0
    3696:	d133      	bne.n	3700 <rtc_nrf_isr+0xc8>
{
    3698:	2300      	movs	r3, #0
	__asm__ volatile(
    369a:	f382 8811 	msr	BASEPRI, r2
    369e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    36a2:	b353      	cbz	r3, 36fa <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    36a4:	f7ff feba 	bl	341c <z_nrf_rtc_timer_read>
    36a8:	4606      	mov	r6, r0
	__asm__ volatile(
    36aa:	f04f 0320 	mov.w	r3, #32
    36ae:	f3ef 8011 	mrs	r0, BASEPRI
    36b2:	f383 8812 	msr	BASEPRI_MAX, r3
    36b6:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    36ba:	4b1a      	ldr	r3, [pc, #104]	; (3724 <rtc_nrf_isr+0xec>)
    36bc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    36c0:	4549      	cmp	r1, r9
    36c2:	bf08      	it	eq
    36c4:	4546      	cmpeq	r6, r8
    36c6:	f04f 0200 	mov.w	r2, #0
    36ca:	d31e      	bcc.n	370a <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    36cc:	f04f 36ff 	mov.w	r6, #4294967295
    36d0:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    36d4:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    36d8:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    36dc:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    36de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    36e2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    36e6:	f380 8811 	msr	BASEPRI, r0
    36ea:	f3bf 8f6f 	isb	sy
		if (handler) {
    36ee:	b121      	cbz	r1, 36fa <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    36f0:	9500      	str	r5, [sp, #0]
    36f2:	4642      	mov	r2, r8
    36f4:	464b      	mov	r3, r9
    36f6:	2000      	movs	r0, #0
    36f8:	4788      	blx	r1
}
    36fa:	b003      	add	sp, #12
    36fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3700:	2100      	movs	r1, #0
    3702:	6019      	str	r1, [r3, #0]
    3704:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3706:	2301      	movs	r3, #1
}
    3708:	e7c7      	b.n	369a <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    370a:	4611      	mov	r1, r2
    370c:	e7eb      	b.n	36e6 <rtc_nrf_isr+0xae>
    370e:	bf00      	nop
    3710:	40011000 	.word	0x40011000
    3714:	40011104 	.word	0x40011104
    3718:	2000093c 	.word	0x2000093c
    371c:	20000934 	.word	0x20000934
    3720:	40011140 	.word	0x40011140
    3724:	200001b0 	.word	0x200001b0

00003728 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3728:	4b14      	ldr	r3, [pc, #80]	; (377c <sys_clock_set_timeout+0x54>)
{
    372a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    372c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3730:	bf08      	it	eq
    3732:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3734:	1e44      	subs	r4, r0, #1
    3736:	2c00      	cmp	r4, #0
    3738:	dd1e      	ble.n	3778 <sys_clock_set_timeout+0x50>
    373a:	429c      	cmp	r4, r3
    373c:	bfa8      	it	ge
    373e:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3740:	f7ff fe6c 	bl	341c <z_nrf_rtc_timer_read>
    3744:	4b0e      	ldr	r3, [pc, #56]	; (3780 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3746:	490f      	ldr	r1, [pc, #60]	; (3784 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3748:	e9d3 2300 	ldrd	r2, r3, [r3]
    374c:	1a80      	subs	r0, r0, r2
		ticks = 0;
    374e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3752:	bf28      	it	cs
    3754:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3756:	3001      	adds	r0, #1
    3758:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    375a:	4808      	ldr	r0, [pc, #32]	; (377c <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    375c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    375e:	4284      	cmp	r4, r0
    3760:	bf28      	it	cs
    3762:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3764:	1912      	adds	r2, r2, r4
    3766:	f04f 0000 	mov.w	r0, #0
    376a:	9001      	str	r0, [sp, #4]
    376c:	f143 0300 	adc.w	r3, r3, #0
    3770:	f7ff fe76 	bl	3460 <compare_set>
}
    3774:	b002      	add	sp, #8
    3776:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3778:	2400      	movs	r4, #0
    377a:	e7e1      	b.n	3740 <sys_clock_set_timeout+0x18>
    377c:	007fffff 	.word	0x007fffff
    3780:	200001c0 	.word	0x200001c0
    3784:	000032f9 	.word	0x000032f9

00003788 <sys_clock_elapsed>:
{
    3788:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    378a:	f7ff fe47 	bl	341c <z_nrf_rtc_timer_read>
    378e:	4b02      	ldr	r3, [pc, #8]	; (3798 <sys_clock_elapsed+0x10>)
    3790:	681b      	ldr	r3, [r3, #0]
}
    3792:	1ac0      	subs	r0, r0, r3
    3794:	bd08      	pop	{r3, pc}
    3796:	bf00      	nop
    3798:	200001c0 	.word	0x200001c0

0000379c <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    379c:	b508      	push	{r3, lr}
    switch (domain)
    379e:	b178      	cbz	r0, 37c0 <nrf_clock_is_running.constprop.0+0x24>
    37a0:	2801      	cmp	r0, #1
    37a2:	d01c      	beq.n	37de <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    37a4:	4a14      	ldr	r2, [pc, #80]	; (37f8 <nrf_clock_is_running.constprop.0+0x5c>)
    37a6:	4915      	ldr	r1, [pc, #84]	; (37fc <nrf_clock_is_running.constprop.0+0x60>)
    37a8:	4815      	ldr	r0, [pc, #84]	; (3800 <nrf_clock_is_running.constprop.0+0x64>)
    37aa:	f44f 734f 	mov.w	r3, #828	; 0x33c
    37ae:	f003 fbc1 	bl	6f34 <printk>
    37b2:	4811      	ldr	r0, [pc, #68]	; (37f8 <nrf_clock_is_running.constprop.0+0x5c>)
    37b4:	f44f 714f 	mov.w	r1, #828	; 0x33c
    37b8:	f003 fae8 	bl	6d8c <assert_post_action>
            return false;
    37bc:	2000      	movs	r0, #0
    37be:	e00d      	b.n	37dc <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    37c0:	b131      	cbz	r1, 37d0 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    37c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37c6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    37ca:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    37ce:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    37d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37d4:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    37d8:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    37dc:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    37de:	b131      	cbz	r1, 37ee <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    37e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    37e8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    37ec:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    37ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37f2:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    37f6:	e7ef      	b.n	37d8 <nrf_clock_is_running.constprop.0+0x3c>
    37f8:	000083ab 	.word	0x000083ab
    37fc:	00007e6f 	.word	0x00007e6f
    3800:	000079ac 	.word	0x000079ac

00003804 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3804:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3806:	4604      	mov	r4, r0
    3808:	b948      	cbnz	r0, 381e <nrfx_clock_init+0x1a>
    380a:	490a      	ldr	r1, [pc, #40]	; (3834 <nrfx_clock_init+0x30>)
    380c:	480a      	ldr	r0, [pc, #40]	; (3838 <nrfx_clock_init+0x34>)
    380e:	4a0b      	ldr	r2, [pc, #44]	; (383c <nrfx_clock_init+0x38>)
    3810:	23bd      	movs	r3, #189	; 0xbd
    3812:	f003 fb8f 	bl	6f34 <printk>
    3816:	4809      	ldr	r0, [pc, #36]	; (383c <nrfx_clock_init+0x38>)
    3818:	21bd      	movs	r1, #189	; 0xbd
    381a:	f003 fab7 	bl	6d8c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    381e:	4b08      	ldr	r3, [pc, #32]	; (3840 <nrfx_clock_init+0x3c>)
    3820:	791a      	ldrb	r2, [r3, #4]
    3822:	b922      	cbnz	r2, 382e <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3824:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3826:	4807      	ldr	r0, [pc, #28]	; (3844 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3828:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    382a:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    382c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    382e:	4806      	ldr	r0, [pc, #24]	; (3848 <nrfx_clock_init+0x44>)
    return err_code;
    3830:	e7fc      	b.n	382c <nrfx_clock_init+0x28>
    3832:	bf00      	nop
    3834:	0000841c 	.word	0x0000841c
    3838:	000079ac 	.word	0x000079ac
    383c:	000083df 	.word	0x000083df
    3840:	20000940 	.word	0x20000940
    3844:	0bad0000 	.word	0x0bad0000
    3848:	0bad000c 	.word	0x0bad000c

0000384c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    384c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    384e:	4b0b      	ldr	r3, [pc, #44]	; (387c <nrfx_clock_enable+0x30>)
    3850:	791b      	ldrb	r3, [r3, #4]
    3852:	b94b      	cbnz	r3, 3868 <nrfx_clock_enable+0x1c>
    3854:	490a      	ldr	r1, [pc, #40]	; (3880 <nrfx_clock_enable+0x34>)
    3856:	480b      	ldr	r0, [pc, #44]	; (3884 <nrfx_clock_enable+0x38>)
    3858:	4a0b      	ldr	r2, [pc, #44]	; (3888 <nrfx_clock_enable+0x3c>)
    385a:	23d6      	movs	r3, #214	; 0xd6
    385c:	f003 fb6a 	bl	6f34 <printk>
    3860:	4809      	ldr	r0, [pc, #36]	; (3888 <nrfx_clock_enable+0x3c>)
    3862:	21d6      	movs	r1, #214	; 0xd6
    3864:	f003 fa92 	bl	6d8c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3868:	2000      	movs	r0, #0
    386a:	f7fe faa5 	bl	1db8 <arch_irq_is_enabled>
    386e:	b918      	cbnz	r0, 3878 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3874:	f7fe ba90 	b.w	1d98 <arch_irq_enable>
    3878:	bd08      	pop	{r3, pc}
    387a:	bf00      	nop
    387c:	20000940 	.word	0x20000940
    3880:	0000842a 	.word	0x0000842a
    3884:	000079ac 	.word	0x000079ac
    3888:	000083df 	.word	0x000083df

0000388c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    388c:	4b22      	ldr	r3, [pc, #136]	; (3918 <nrfx_clock_start+0x8c>)
    388e:	791b      	ldrb	r3, [r3, #4]
{
    3890:	b513      	push	{r0, r1, r4, lr}
    3892:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3894:	b95b      	cbnz	r3, 38ae <nrfx_clock_start+0x22>
    3896:	4921      	ldr	r1, [pc, #132]	; (391c <nrfx_clock_start+0x90>)
    3898:	4821      	ldr	r0, [pc, #132]	; (3920 <nrfx_clock_start+0x94>)
    389a:	4a22      	ldr	r2, [pc, #136]	; (3924 <nrfx_clock_start+0x98>)
    389c:	f44f 7389 	mov.w	r3, #274	; 0x112
    38a0:	f003 fb48 	bl	6f34 <printk>
    38a4:	481f      	ldr	r0, [pc, #124]	; (3924 <nrfx_clock_start+0x98>)
    38a6:	f44f 7189 	mov.w	r1, #274	; 0x112
    38aa:	f003 fa6f 	bl	6d8c <assert_post_action>
    switch (domain)
    38ae:	b174      	cbz	r4, 38ce <nrfx_clock_start+0x42>
    38b0:	2c01      	cmp	r4, #1
    38b2:	d027      	beq.n	3904 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    38b4:	4a1b      	ldr	r2, [pc, #108]	; (3924 <nrfx_clock_start+0x98>)
    38b6:	491c      	ldr	r1, [pc, #112]	; (3928 <nrfx_clock_start+0x9c>)
    38b8:	4819      	ldr	r0, [pc, #100]	; (3920 <nrfx_clock_start+0x94>)
    38ba:	f44f 73a2 	mov.w	r3, #324	; 0x144
    38be:	f003 fb39 	bl	6f34 <printk>
    38c2:	4818      	ldr	r0, [pc, #96]	; (3924 <nrfx_clock_start+0x98>)
    38c4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    38c8:	f003 fa60 	bl	6d8c <assert_post_action>
            break;
    }
}
    38cc:	e016      	b.n	38fc <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    38ce:	a901      	add	r1, sp, #4
    38d0:	4620      	mov	r0, r4
    38d2:	f7ff ff63 	bl	379c <nrf_clock_is_running.constprop.0>
    38d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38da:	b188      	cbz	r0, 3900 <nrfx_clock_start+0x74>
    38dc:	9a01      	ldr	r2, [sp, #4]
    38de:	2a01      	cmp	r2, #1
    38e0:	d10e      	bne.n	3900 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    38e2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38e6:	4b11      	ldr	r3, [pc, #68]	; (392c <nrfx_clock_start+0xa0>)
    38e8:	2200      	movs	r2, #0
    38ea:	601a      	str	r2, [r3, #0]
    38ec:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    38ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38f2:	2202      	movs	r2, #2
    38f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38f8:	2201      	movs	r2, #1
    38fa:	609a      	str	r2, [r3, #8]
}
    38fc:	b002      	add	sp, #8
    38fe:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3900:	2200      	movs	r2, #0
    3902:	e7ee      	b.n	38e2 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3904:	4b0a      	ldr	r3, [pc, #40]	; (3930 <nrfx_clock_start+0xa4>)
    3906:	2200      	movs	r2, #0
    3908:	601a      	str	r2, [r3, #0]
    390a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    390c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3910:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3914:	601c      	str	r4, [r3, #0]
}
    3916:	e7f1      	b.n	38fc <nrfx_clock_start+0x70>
    3918:	20000940 	.word	0x20000940
    391c:	0000842a 	.word	0x0000842a
    3920:	000079ac 	.word	0x000079ac
    3924:	000083df 	.word	0x000083df
    3928:	00007e6f 	.word	0x00007e6f
    392c:	40000104 	.word	0x40000104
    3930:	40000100 	.word	0x40000100

00003934 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3934:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3936:	4d2f      	ldr	r5, [pc, #188]	; (39f4 <nrfx_clock_stop+0xc0>)
    3938:	792a      	ldrb	r2, [r5, #4]
{
    393a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    393c:	b95a      	cbnz	r2, 3956 <nrfx_clock_stop+0x22>
    393e:	492e      	ldr	r1, [pc, #184]	; (39f8 <nrfx_clock_stop+0xc4>)
    3940:	482e      	ldr	r0, [pc, #184]	; (39fc <nrfx_clock_stop+0xc8>)
    3942:	4a2f      	ldr	r2, [pc, #188]	; (3a00 <nrfx_clock_stop+0xcc>)
    3944:	f240 134b 	movw	r3, #331	; 0x14b
    3948:	f003 faf4 	bl	6f34 <printk>
    394c:	482c      	ldr	r0, [pc, #176]	; (3a00 <nrfx_clock_stop+0xcc>)
    394e:	f240 114b 	movw	r1, #331	; 0x14b
    3952:	f003 fa1b 	bl	6d8c <assert_post_action>
    switch (domain)
    3956:	b17c      	cbz	r4, 3978 <nrfx_clock_stop+0x44>
    3958:	2c01      	cmp	r4, #1
    395a:	d028      	beq.n	39ae <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    395c:	4929      	ldr	r1, [pc, #164]	; (3a04 <nrfx_clock_stop+0xd0>)
    395e:	4827      	ldr	r0, [pc, #156]	; (39fc <nrfx_clock_stop+0xc8>)
    3960:	4a27      	ldr	r2, [pc, #156]	; (3a00 <nrfx_clock_stop+0xcc>)
    3962:	f240 1367 	movw	r3, #359	; 0x167
    3966:	f003 fae5 	bl	6f34 <printk>
    396a:	4825      	ldr	r0, [pc, #148]	; (3a00 <nrfx_clock_stop+0xcc>)
    396c:	f240 1167 	movw	r1, #359	; 0x167
    3970:	f003 fa0c 	bl	6d8c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3974:	b003      	add	sp, #12
    3976:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    397c:	2202      	movs	r2, #2
    397e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3982:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    3986:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    398a:	2201      	movs	r2, #1
    398c:	681b      	ldr	r3, [r3, #0]
    398e:	4b1e      	ldr	r3, [pc, #120]	; (3a08 <nrfx_clock_stop+0xd4>)
    3990:	f242 7410 	movw	r4, #10000	; 0x2710
    3994:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    3996:	2100      	movs	r1, #0
    3998:	4608      	mov	r0, r1
    399a:	f7ff feff 	bl	379c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    399e:	2800      	cmp	r0, #0
    39a0:	d0e8      	beq.n	3974 <nrfx_clock_stop+0x40>
    39a2:	2001      	movs	r0, #1
    39a4:	f003 fc72 	bl	728c <nrfx_busy_wait>
    39a8:	3c01      	subs	r4, #1
    39aa:	d1f4      	bne.n	3996 <nrfx_clock_stop+0x62>
    39ac:	e7e2      	b.n	3974 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    39ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39b2:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    39b4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    39bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    39c0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39c2:	4b12      	ldr	r3, [pc, #72]	; (3a0c <nrfx_clock_stop+0xd8>)
    39c4:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    39c6:	f88d 4007 	strb.w	r4, [sp, #7]
    39ca:	f242 7410 	movw	r4, #10000	; 0x2710
    39ce:	f10d 0107 	add.w	r1, sp, #7
    39d2:	2001      	movs	r0, #1
    39d4:	f7ff fee2 	bl	379c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    39d8:	b910      	cbnz	r0, 39e0 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    39da:	2300      	movs	r3, #0
    39dc:	716b      	strb	r3, [r5, #5]
    39de:	e7c9      	b.n	3974 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    39e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    39e4:	2801      	cmp	r0, #1
    39e6:	d1f8      	bne.n	39da <nrfx_clock_stop+0xa6>
    39e8:	f003 fc50 	bl	728c <nrfx_busy_wait>
    39ec:	3c01      	subs	r4, #1
    39ee:	d1ee      	bne.n	39ce <nrfx_clock_stop+0x9a>
    39f0:	e7f3      	b.n	39da <nrfx_clock_stop+0xa6>
    39f2:	bf00      	nop
    39f4:	20000940 	.word	0x20000940
    39f8:	0000842a 	.word	0x0000842a
    39fc:	000079ac 	.word	0x000079ac
    3a00:	000083df 	.word	0x000083df
    3a04:	00007e6f 	.word	0x00007e6f
    3a08:	4000000c 	.word	0x4000000c
    3a0c:	40000004 	.word	0x40000004

00003a10 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a10:	4b16      	ldr	r3, [pc, #88]	; (3a6c <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3a12:	b507      	push	{r0, r1, r2, lr}
    3a14:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3a16:	b16a      	cbz	r2, 3a34 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a18:	2200      	movs	r2, #0
    3a1a:	601a      	str	r2, [r3, #0]
    3a1c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a22:	2201      	movs	r2, #1
    3a24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3a28:	4b11      	ldr	r3, [pc, #68]	; (3a70 <nrfx_power_clock_irq_handler+0x60>)
    3a2a:	7958      	ldrb	r0, [r3, #5]
    3a2c:	b910      	cbnz	r0, 3a34 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3a2e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3a30:	681b      	ldr	r3, [r3, #0]
    3a32:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a34:	4b0f      	ldr	r3, [pc, #60]	; (3a74 <nrfx_power_clock_irq_handler+0x64>)
    3a36:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3a38:	b16a      	cbz	r2, 3a56 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a3a:	2000      	movs	r0, #0
    3a3c:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3a3e:	a901      	add	r1, sp, #4
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	f7ff feab 	bl	379c <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3a46:	9a01      	ldr	r2, [sp, #4]
    3a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a4c:	b932      	cbnz	r2, 3a5c <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a4e:	2201      	movs	r2, #1
    3a50:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a54:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3a56:	b003      	add	sp, #12
    3a58:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3a5c:	2202      	movs	r2, #2
    3a5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a62:	4b03      	ldr	r3, [pc, #12]	; (3a70 <nrfx_power_clock_irq_handler+0x60>)
    3a64:	2001      	movs	r0, #1
    3a66:	681b      	ldr	r3, [r3, #0]
    3a68:	4798      	blx	r3
}
    3a6a:	e7f4      	b.n	3a56 <nrfx_power_clock_irq_handler+0x46>
    3a6c:	40000100 	.word	0x40000100
    3a70:	20000940 	.word	0x20000940
    3a74:	40000104 	.word	0x40000104

00003a78 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3a78:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3a7a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3a7c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3a7e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3a82:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3a84:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3a88:	d014      	beq.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a8a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3a8e:	fa05 f204 	lsl.w	r2, r5, r4
    3a92:	ea23 0202 	bic.w	r2, r3, r2
    3a96:	e850 6f00 	ldrex	r6, [r0]
    3a9a:	429e      	cmp	r6, r3
    3a9c:	d104      	bne.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3a9e:	e840 2c00 	strex	ip, r2, [r0]
    3aa2:	f1bc 0f00 	cmp.w	ip, #0
    3aa6:	d1f6      	bne.n	3a96 <nrfx_flag32_alloc+0x1e>
    3aa8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3aac:	d1e6      	bne.n	3a7c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3aae:	4802      	ldr	r0, [pc, #8]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    *p_flag = idx;
    3ab0:	700c      	strb	r4, [r1, #0]
}
    3ab2:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3ab4:	4801      	ldr	r0, [pc, #4]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3ab6:	e7fc      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3ab8:	0bad0000 	.word	0x0bad0000
    3abc:	0bad0002 	.word	0x0bad0002

00003ac0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3ac0:	6803      	ldr	r3, [r0, #0]
    3ac2:	40cb      	lsrs	r3, r1
    3ac4:	07db      	lsls	r3, r3, #31
{
    3ac6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3ac8:	d415      	bmi.n	3af6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3aca:	2301      	movs	r3, #1
    3acc:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3ad0:	6803      	ldr	r3, [r0, #0]
    3ad2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3ad6:	ea41 0203 	orr.w	r2, r1, r3
    3ada:	e850 4f00 	ldrex	r4, [r0]
    3ade:	429c      	cmp	r4, r3
    3ae0:	d104      	bne.n	3aec <nrfx_flag32_free+0x2c>
    3ae2:	e840 2c00 	strex	ip, r2, [r0]
    3ae6:	f1bc 0f00 	cmp.w	ip, #0
    3aea:	d1f6      	bne.n	3ada <nrfx_flag32_free+0x1a>
    3aec:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3af0:	d1ee      	bne.n	3ad0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3af2:	4802      	ldr	r0, [pc, #8]	; (3afc <nrfx_flag32_free+0x3c>)
}
    3af4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3af6:	4802      	ldr	r0, [pc, #8]	; (3b00 <nrfx_flag32_free+0x40>)
    3af8:	e7fc      	b.n	3af4 <nrfx_flag32_free+0x34>
    3afa:	bf00      	nop
    3afc:	0bad0000 	.word	0x0bad0000
    3b00:	0bad0004 	.word	0x0bad0004

00003b04 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3b04:	4b05      	ldr	r3, [pc, #20]	; (3b1c <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b06:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3b08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3b0c:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    3b10:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    3b14:	4258      	negs	r0, r3
    3b16:	4158      	adcs	r0, r3
    3b18:	4770      	bx	lr
    3b1a:	bf00      	nop
    3b1c:	20000054 	.word	0x20000054

00003b20 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3b20:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b22:	f100 0308 	add.w	r3, r0, #8
    3b26:	4c0c      	ldr	r4, [pc, #48]	; (3b58 <call_handler+0x38>)
    3b28:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3b2c:	05da      	lsls	r2, r3, #23
{
    3b2e:	4605      	mov	r5, r0
    3b30:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b32:	d507      	bpl.n	3b44 <call_handler+0x24>
    3b34:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3b38:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3b3c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3b40:	6852      	ldr	r2, [r2, #4]
    3b42:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3b44:	68a3      	ldr	r3, [r4, #8]
    3b46:	b12b      	cbz	r3, 3b54 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3b48:	68e2      	ldr	r2, [r4, #12]
    3b4a:	4631      	mov	r1, r6
    3b4c:	4628      	mov	r0, r5
    }
}
    3b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3b52:	4718      	bx	r3
}
    3b54:	bd70      	pop	{r4, r5, r6, pc}
    3b56:	bf00      	nop
    3b58:	20000054 	.word	0x20000054

00003b5c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b5c:	4b19      	ldr	r3, [pc, #100]	; (3bc4 <release_handler+0x68>)
    3b5e:	3008      	adds	r0, #8
{
    3b60:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b62:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3b66:	05d1      	lsls	r1, r2, #23
    3b68:	d51d      	bpl.n	3ba6 <release_handler+0x4a>
    3b6a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3b6e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3b72:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3b76:	f103 0410 	add.w	r4, r3, #16
    3b7a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3b7c:	f834 2b02 	ldrh.w	r2, [r4], #2
    3b80:	f412 7f80 	tst.w	r2, #256	; 0x100
    3b84:	d003      	beq.n	3b8e <release_handler+0x32>
    3b86:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3b8a:	4291      	cmp	r1, r2
    3b8c:	d00b      	beq.n	3ba6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3b8e:	3001      	adds	r0, #1
    3b90:	2830      	cmp	r0, #48	; 0x30
    3b92:	d1f3      	bne.n	3b7c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3b94:	2200      	movs	r2, #0
    3b96:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3b9a:	480b      	ldr	r0, [pc, #44]	; (3bc8 <release_handler+0x6c>)
    3b9c:	f7ff ff90 	bl	3ac0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3ba0:	4b0a      	ldr	r3, [pc, #40]	; (3bcc <release_handler+0x70>)
    3ba2:	4298      	cmp	r0, r3
    3ba4:	d100      	bne.n	3ba8 <release_handler+0x4c>
}
    3ba6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3ba8:	4909      	ldr	r1, [pc, #36]	; (3bd0 <release_handler+0x74>)
    3baa:	480a      	ldr	r0, [pc, #40]	; (3bd4 <release_handler+0x78>)
    3bac:	4a0a      	ldr	r2, [pc, #40]	; (3bd8 <release_handler+0x7c>)
    3bae:	f44f 7399 	mov.w	r3, #306	; 0x132
    3bb2:	f003 f9bf 	bl	6f34 <printk>
}
    3bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3bba:	4807      	ldr	r0, [pc, #28]	; (3bd8 <release_handler+0x7c>)
    3bbc:	f44f 7199 	mov.w	r1, #306	; 0x132
    3bc0:	f003 b8e4 	b.w	6d8c <assert_post_action>
    3bc4:	20000054 	.word	0x20000054
    3bc8:	200000c8 	.word	0x200000c8
    3bcc:	0bad0000 	.word	0x0bad0000
    3bd0:	000084ac 	.word	0x000084ac
    3bd4:	000079ac 	.word	0x000079ac
    3bd8:	00008448 	.word	0x00008448

00003bdc <pin_handler_trigger_uninit>:
{
    3bdc:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3bde:	4c0a      	ldr	r4, [pc, #40]	; (3c08 <pin_handler_trigger_uninit+0x2c>)
    3be0:	f100 0508 	add.w	r5, r0, #8
    3be4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3be8:	069a      	lsls	r2, r3, #26
    3bea:	d506      	bpl.n	3bfa <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3bec:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3bee:	4a07      	ldr	r2, [pc, #28]	; (3c0c <pin_handler_trigger_uninit+0x30>)
    3bf0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3bf4:	2100      	movs	r1, #0
    3bf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3bfa:	f7ff ffaf 	bl	3b5c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3bfe:	2300      	movs	r3, #0
    3c00:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3c04:	bd38      	pop	{r3, r4, r5, pc}
    3c06:	bf00      	nop
    3c08:	20000054 	.word	0x20000054
    3c0c:	40006000 	.word	0x40006000

00003c10 <nrf_gpio_pin_port_decode>:
{
    3c10:	b510      	push	{r4, lr}
    3c12:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3c14:	6800      	ldr	r0, [r0, #0]
    3c16:	f003 fb3b 	bl	7290 <nrf_gpio_pin_present_check>
    3c1a:	b958      	cbnz	r0, 3c34 <nrf_gpio_pin_port_decode+0x24>
    3c1c:	4912      	ldr	r1, [pc, #72]	; (3c68 <nrf_gpio_pin_port_decode+0x58>)
    3c1e:	4813      	ldr	r0, [pc, #76]	; (3c6c <nrf_gpio_pin_port_decode+0x5c>)
    3c20:	4a13      	ldr	r2, [pc, #76]	; (3c70 <nrf_gpio_pin_port_decode+0x60>)
    3c22:	f240 2329 	movw	r3, #553	; 0x229
    3c26:	f003 f985 	bl	6f34 <printk>
    3c2a:	4811      	ldr	r0, [pc, #68]	; (3c70 <nrf_gpio_pin_port_decode+0x60>)
    3c2c:	f240 2129 	movw	r1, #553	; 0x229
    3c30:	f003 f8ac 	bl	6d8c <assert_post_action>
    uint32_t pin_number = *p_pin;
    3c34:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3c36:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c3a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3c3c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c3e:	d00d      	beq.n	3c5c <nrf_gpio_pin_port_decode+0x4c>
    3c40:	2b01      	cmp	r3, #1
    3c42:	d00e      	beq.n	3c62 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    3c44:	490b      	ldr	r1, [pc, #44]	; (3c74 <nrf_gpio_pin_port_decode+0x64>)
    3c46:	4809      	ldr	r0, [pc, #36]	; (3c6c <nrf_gpio_pin_port_decode+0x5c>)
    3c48:	4a09      	ldr	r2, [pc, #36]	; (3c70 <nrf_gpio_pin_port_decode+0x60>)
    3c4a:	f240 232e 	movw	r3, #558	; 0x22e
    3c4e:	f003 f971 	bl	6f34 <printk>
    3c52:	4807      	ldr	r0, [pc, #28]	; (3c70 <nrf_gpio_pin_port_decode+0x60>)
    3c54:	f240 212e 	movw	r1, #558	; 0x22e
    3c58:	f003 f898 	bl	6d8c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3c60:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3c62:	4805      	ldr	r0, [pc, #20]	; (3c78 <nrf_gpio_pin_port_decode+0x68>)
    3c64:	e7fc      	b.n	3c60 <nrf_gpio_pin_port_decode+0x50>
    3c66:	bf00      	nop
    3c68:	00008373 	.word	0x00008373
    3c6c:	000079ac 	.word	0x000079ac
    3c70:	00008340 	.word	0x00008340
    3c74:	00007e6f 	.word	0x00007e6f
    3c78:	50000300 	.word	0x50000300

00003c7c <nrfx_gpiote_input_configure>:
{
    3c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c7e:	4604      	mov	r4, r0
    3c80:	b085      	sub	sp, #20
    3c82:	4617      	mov	r7, r2
    3c84:	461d      	mov	r5, r3
    if (p_input_config)
    3c86:	b1f1      	cbz	r1, 3cc6 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    3c88:	f7ff ff3c 	bl	3b04 <pin_is_task_output>
    3c8c:	b110      	cbz	r0, 3c94 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    3c8e:	484a      	ldr	r0, [pc, #296]	; (3db8 <nrfx_gpiote_input_configure+0x13c>)
}
    3c90:	b005      	add	sp, #20
    3c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3c94:	460b      	mov	r3, r1
    3c96:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3c9a:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3c9e:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3ca2:	f10d 020f 	add.w	r2, sp, #15
    3ca6:	f10d 010e 	add.w	r1, sp, #14
    3caa:	4620      	mov	r0, r4
    3cac:	f003 fb05 	bl	72ba <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3cb0:	4a42      	ldr	r2, [pc, #264]	; (3dbc <nrfx_gpiote_input_configure+0x140>)
    3cb2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3cb6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3cba:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3cbe:	f043 0301 	orr.w	r3, r3, #1
    3cc2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3cc6:	b197      	cbz	r7, 3cee <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cc8:	4b3c      	ldr	r3, [pc, #240]	; (3dbc <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3cca:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3ccc:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cce:	f104 0008 	add.w	r0, r4, #8
    3cd2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3cd6:	078f      	lsls	r7, r1, #30
    3cd8:	d50c      	bpl.n	3cf4 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    3cda:	2a00      	cmp	r2, #0
    3cdc:	d1d7      	bne.n	3c8e <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3cde:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3ce2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3ce6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3cea:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3cee:	bbcd      	cbnz	r5, 3d64 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    3cf0:	4833      	ldr	r0, [pc, #204]	; (3dc0 <nrfx_gpiote_input_configure+0x144>)
    3cf2:	e7cd      	b.n	3c90 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3cf4:	f021 0120 	bic.w	r1, r1, #32
    3cf8:	04c9      	lsls	r1, r1, #19
    3cfa:	0cc9      	lsrs	r1, r1, #19
    3cfc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3d00:	2a00      	cmp	r2, #0
    3d02:	d0ec      	beq.n	3cde <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    3d04:	2e03      	cmp	r6, #3
    3d06:	d8c2      	bhi.n	3c8e <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3d08:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3d0a:	b92e      	cbnz	r6, 3d18 <nrfx_gpiote_input_configure+0x9c>
    3d0c:	4a2d      	ldr	r2, [pc, #180]	; (3dc4 <nrfx_gpiote_input_configure+0x148>)
    3d0e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3d12:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3d16:	e7e2      	b.n	3cde <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3d18:	00ba      	lsls	r2, r7, #2
    3d1a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3d1e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d22:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3d26:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d2a:	f02c 0c03 	bic.w	ip, ip, #3
    3d2e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3d32:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d36:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3d3a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3d3e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d42:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3d46:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3d4a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3d4e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3d52:	ea4c 0c0e 	orr.w	ip, ip, lr
    3d56:	f041 0120 	orr.w	r1, r1, #32
    3d5a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3d5e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3d62:	e7bc      	b.n	3cde <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3d64:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3d68:	4620      	mov	r0, r4
    3d6a:	f7ff fef7 	bl	3b5c <release_handler>
    if (!handler)
    3d6e:	2e00      	cmp	r6, #0
    3d70:	d0be      	beq.n	3cf0 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3d72:	4d12      	ldr	r5, [pc, #72]	; (3dbc <nrfx_gpiote_input_configure+0x140>)
    3d74:	682b      	ldr	r3, [r5, #0]
    3d76:	429e      	cmp	r6, r3
    3d78:	d104      	bne.n	3d84 <nrfx_gpiote_input_configure+0x108>
    3d7a:	686b      	ldr	r3, [r5, #4]
    3d7c:	429f      	cmp	r7, r3
    3d7e:	d101      	bne.n	3d84 <nrfx_gpiote_input_configure+0x108>
    3d80:	2200      	movs	r2, #0
    3d82:	e00a      	b.n	3d9a <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3d84:	4810      	ldr	r0, [pc, #64]	; (3dc8 <nrfx_gpiote_input_configure+0x14c>)
    3d86:	f10d 010f 	add.w	r1, sp, #15
    3d8a:	f7ff fe75 	bl	3a78 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3d8e:	4b0c      	ldr	r3, [pc, #48]	; (3dc0 <nrfx_gpiote_input_configure+0x144>)
    3d90:	4298      	cmp	r0, r3
    3d92:	f47f af7d 	bne.w	3c90 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    3d96:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3d9a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3d9e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3da2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3da4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3da6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3daa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3db2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3db6:	e79b      	b.n	3cf0 <nrfx_gpiote_input_configure+0x74>
    3db8:	0bad0004 	.word	0x0bad0004
    3dbc:	20000054 	.word	0x20000054
    3dc0:	0bad0000 	.word	0x0bad0000
    3dc4:	40006000 	.word	0x40006000
    3dc8:	200000c8 	.word	0x200000c8

00003dcc <nrfx_gpiote_output_configure>:
{
    3dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dce:	4604      	mov	r4, r0
    3dd0:	b085      	sub	sp, #20
    3dd2:	4615      	mov	r5, r2
    if (p_config)
    3dd4:	b309      	cbz	r1, 3e1a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3dd6:	f100 0708 	add.w	r7, r0, #8
    3dda:	4e31      	ldr	r6, [pc, #196]	; (3ea0 <nrfx_gpiote_output_configure+0xd4>)
    3ddc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3de0:	0798      	lsls	r0, r3, #30
    3de2:	d401      	bmi.n	3de8 <nrfx_gpiote_output_configure+0x1c>
    3de4:	069a      	lsls	r2, r3, #26
    3de6:	d458      	bmi.n	3e9a <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3de8:	f013 0f1c 	tst.w	r3, #28
    3dec:	d002      	beq.n	3df4 <nrfx_gpiote_output_configure+0x28>
    3dee:	784b      	ldrb	r3, [r1, #1]
    3df0:	2b01      	cmp	r3, #1
    3df2:	d052      	beq.n	3e9a <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3df4:	2301      	movs	r3, #1
    3df6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3dfa:	2300      	movs	r3, #0
    3dfc:	e9cd 1300 	strd	r1, r3, [sp]
    3e00:	1c4a      	adds	r2, r1, #1
    3e02:	1c8b      	adds	r3, r1, #2
    3e04:	4620      	mov	r0, r4
    3e06:	f10d 010f 	add.w	r1, sp, #15
    3e0a:	f003 fa56 	bl	72ba <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3e0e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3e12:	f043 0303 	orr.w	r3, r3, #3
    3e16:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3e1a:	b915      	cbnz	r5, 3e22 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    3e1c:	4821      	ldr	r0, [pc, #132]	; (3ea4 <nrfx_gpiote_output_configure+0xd8>)
}
    3e1e:	b005      	add	sp, #20
    3e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e22:	4e1f      	ldr	r6, [pc, #124]	; (3ea0 <nrfx_gpiote_output_configure+0xd4>)
    3e24:	f104 0708 	add.w	r7, r4, #8
    3e28:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3e2c:	0783      	lsls	r3, r0, #30
    3e2e:	d534      	bpl.n	3e9a <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    3e30:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3e34:	4661      	mov	r1, ip
    3e36:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3e38:	f020 0020 	bic.w	r0, r0, #32
    3e3c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3e40:	04c0      	lsls	r0, r0, #19
    3e42:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3e46:	0cc0      	lsrs	r0, r0, #19
    3e48:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3e4c:	2300      	movs	r3, #0
    3e4e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3e52:	786a      	ldrb	r2, [r5, #1]
    3e54:	2a00      	cmp	r2, #0
    3e56:	d0e1      	beq.n	3e1c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3e58:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3e5c:	78ad      	ldrb	r5, [r5, #2]
    3e5e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3e62:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3e66:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e6a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3e6e:	0223      	lsls	r3, r4, #8
    3e70:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e74:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e76:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e7a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3e7e:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e80:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3e82:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3e86:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e8a:	432b      	orrs	r3, r5
    3e8c:	f040 0020 	orr.w	r0, r0, #32
    3e90:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3e94:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3e98:	e7c0      	b.n	3e1c <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    3e9a:	4803      	ldr	r0, [pc, #12]	; (3ea8 <nrfx_gpiote_output_configure+0xdc>)
    3e9c:	e7bf      	b.n	3e1e <nrfx_gpiote_output_configure+0x52>
    3e9e:	bf00      	nop
    3ea0:	20000054 	.word	0x20000054
    3ea4:	0bad0000 	.word	0x0bad0000
    3ea8:	0bad0004 	.word	0x0bad0004

00003eac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3eac:	4b01      	ldr	r3, [pc, #4]	; (3eb4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3eae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3eb2:	4770      	bx	lr
    3eb4:	20000054 	.word	0x20000054

00003eb8 <nrfx_gpiote_channel_get>:
{
    3eb8:	b538      	push	{r3, r4, r5, lr}
    3eba:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    3ebc:	460d      	mov	r5, r1
    3ebe:	b959      	cbnz	r1, 3ed8 <nrfx_gpiote_channel_get+0x20>
    3ec0:	490b      	ldr	r1, [pc, #44]	; (3ef0 <nrfx_gpiote_channel_get+0x38>)
    3ec2:	480c      	ldr	r0, [pc, #48]	; (3ef4 <nrfx_gpiote_channel_get+0x3c>)
    3ec4:	4a0c      	ldr	r2, [pc, #48]	; (3ef8 <nrfx_gpiote_channel_get+0x40>)
    3ec6:	f240 2335 	movw	r3, #565	; 0x235
    3eca:	f003 f833 	bl	6f34 <printk>
    3ece:	480a      	ldr	r0, [pc, #40]	; (3ef8 <nrfx_gpiote_channel_get+0x40>)
    3ed0:	f240 2135 	movw	r1, #565	; 0x235
    3ed4:	f002 ff5a 	bl	6d8c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ed8:	3408      	adds	r4, #8
    3eda:	4b08      	ldr	r3, [pc, #32]	; (3efc <nrfx_gpiote_channel_get+0x44>)
    3edc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    3ee0:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ee2:	bf43      	ittte	mi
    3ee4:	0b5b      	lsrmi	r3, r3, #13
    3ee6:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    3ee8:	4805      	ldrmi	r0, [pc, #20]	; (3f00 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    3eea:	4806      	ldrpl	r0, [pc, #24]	; (3f04 <nrfx_gpiote_channel_get+0x4c>)
}
    3eec:	bd38      	pop	{r3, r4, r5, pc}
    3eee:	bf00      	nop
    3ef0:	000084c0 	.word	0x000084c0
    3ef4:	000079ac 	.word	0x000079ac
    3ef8:	00008448 	.word	0x00008448
    3efc:	20000054 	.word	0x20000054
    3f00:	0bad0000 	.word	0x0bad0000
    3f04:	0bad0004 	.word	0x0bad0004

00003f08 <nrfx_gpiote_init>:
{
    3f08:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3f0a:	4c0e      	ldr	r4, [pc, #56]	; (3f44 <nrfx_gpiote_init+0x3c>)
    3f0c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3f10:	b9b5      	cbnz	r5, 3f40 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3f12:	2260      	movs	r2, #96	; 0x60
    3f14:	4629      	mov	r1, r5
    3f16:	f104 0010 	add.w	r0, r4, #16
    3f1a:	f003 f86c 	bl	6ff6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3f1e:	2006      	movs	r0, #6
    3f20:	f7fd ff3a 	bl	1d98 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f24:	4b08      	ldr	r3, [pc, #32]	; (3f48 <nrfx_gpiote_init+0x40>)
    return err_code;
    3f26:	4809      	ldr	r0, [pc, #36]	; (3f4c <nrfx_gpiote_init+0x44>)
    3f28:	601d      	str	r5, [r3, #0]
    3f2a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3f2c:	4b08      	ldr	r3, [pc, #32]	; (3f50 <nrfx_gpiote_init+0x48>)
    3f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3f32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3f36:	2301      	movs	r3, #1
    3f38:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3f3c:	6763      	str	r3, [r4, #116]	; 0x74
}
    3f3e:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3f40:	4804      	ldr	r0, [pc, #16]	; (3f54 <nrfx_gpiote_init+0x4c>)
    3f42:	e7fc      	b.n	3f3e <nrfx_gpiote_init+0x36>
    3f44:	20000054 	.word	0x20000054
    3f48:	4000617c 	.word	0x4000617c
    3f4c:	0bad0000 	.word	0x0bad0000
    3f50:	40006000 	.word	0x40006000
    3f54:	0bad0005 	.word	0x0bad0005

00003f58 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3f58:	4b03      	ldr	r3, [pc, #12]	; (3f68 <nrfx_gpiote_is_init+0x10>)
    3f5a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3f5e:	3800      	subs	r0, #0
    3f60:	bf18      	it	ne
    3f62:	2001      	movne	r0, #1
    3f64:	4770      	bx	lr
    3f66:	bf00      	nop
    3f68:	20000054 	.word	0x20000054

00003f6c <nrfx_gpiote_channel_free>:
{
    3f6c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3f6e:	4801      	ldr	r0, [pc, #4]	; (3f74 <nrfx_gpiote_channel_free+0x8>)
    3f70:	f7ff bda6 	b.w	3ac0 <nrfx_flag32_free>
    3f74:	200000c4 	.word	0x200000c4

00003f78 <nrfx_gpiote_channel_alloc>:
{
    3f78:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3f7a:	4801      	ldr	r0, [pc, #4]	; (3f80 <nrfx_gpiote_channel_alloc+0x8>)
    3f7c:	f7ff bd7c 	b.w	3a78 <nrfx_flag32_alloc>
    3f80:	200000c4 	.word	0x200000c4

00003f84 <nrfx_gpiote_trigger_enable>:
{
    3f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3f86:	4d31      	ldr	r5, [pc, #196]	; (404c <nrfx_gpiote_trigger_enable+0xc8>)
    3f88:	f100 0708 	add.w	r7, r0, #8
{
    3f8c:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3f8e:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    3f92:	f013 0f1c 	tst.w	r3, #28
{
    3f96:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    3f98:	d10b      	bne.n	3fb2 <nrfx_gpiote_trigger_enable+0x2e>
    3f9a:	492d      	ldr	r1, [pc, #180]	; (4050 <nrfx_gpiote_trigger_enable+0xcc>)
    3f9c:	482d      	ldr	r0, [pc, #180]	; (4054 <nrfx_gpiote_trigger_enable+0xd0>)
    3f9e:	4a2e      	ldr	r2, [pc, #184]	; (4058 <nrfx_gpiote_trigger_enable+0xd4>)
    3fa0:	f240 33df 	movw	r3, #991	; 0x3df
    3fa4:	f002 ffc6 	bl	6f34 <printk>
    3fa8:	482b      	ldr	r0, [pc, #172]	; (4058 <nrfx_gpiote_trigger_enable+0xd4>)
    3faa:	f240 31df 	movw	r1, #991	; 0x3df
    3fae:	f002 feed 	bl	6d8c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3fb2:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3fb6:	0683      	lsls	r3, r0, #26
    3fb8:	d51f      	bpl.n	3ffa <nrfx_gpiote_trigger_enable+0x76>
    3fba:	f010 0302 	ands.w	r3, r0, #2
    3fbe:	d11c      	bne.n	3ffa <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3fc0:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    3fc2:	4608      	mov	r0, r1
    3fc4:	f003 f975 	bl	72b2 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    3fc8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3fcc:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3fd0:	6003      	str	r3, [r0, #0]
    3fd2:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3fd4:	008b      	lsls	r3, r1, #2
    3fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3fda:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3fde:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3fe2:	f042 0201 	orr.w	r2, r2, #1
    3fe6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    3fea:	b126      	cbz	r6, 3ff6 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    3fec:	4a1b      	ldr	r2, [pc, #108]	; (405c <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3fee:	2301      	movs	r3, #1
    3ff0:	408b      	lsls	r3, r1
    3ff2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3ff6:	b003      	add	sp, #12
    3ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    3ffa:	b95e      	cbnz	r6, 4014 <nrfx_gpiote_trigger_enable+0x90>
    3ffc:	4918      	ldr	r1, [pc, #96]	; (4060 <nrfx_gpiote_trigger_enable+0xdc>)
    3ffe:	4815      	ldr	r0, [pc, #84]	; (4054 <nrfx_gpiote_trigger_enable+0xd0>)
    4000:	4a15      	ldr	r2, [pc, #84]	; (4058 <nrfx_gpiote_trigger_enable+0xd4>)
    4002:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4006:	f002 ff95 	bl	6f34 <printk>
    400a:	4813      	ldr	r0, [pc, #76]	; (4058 <nrfx_gpiote_trigger_enable+0xd4>)
    400c:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4010:	f002 febc 	bl	6d8c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4014:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    4018:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    401c:	2b04      	cmp	r3, #4
    401e:	d010      	beq.n	4042 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4020:	2b05      	cmp	r3, #5
    4022:	d010      	beq.n	4046 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4024:	a801      	add	r0, sp, #4
    4026:	9401      	str	r4, [sp, #4]
    4028:	f7ff fdf2 	bl	3c10 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    402c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    402e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4032:	40d9      	lsrs	r1, r3
    4034:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4038:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    403a:	4620      	mov	r0, r4
    403c:	f003 f988 	bl	7350 <nrf_gpio_cfg_sense_set>
}
    4040:	e7d9      	b.n	3ff6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4042:	2103      	movs	r1, #3
    4044:	e7f9      	b.n	403a <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4046:	2102      	movs	r1, #2
    4048:	e7f7      	b.n	403a <nrfx_gpiote_trigger_enable+0xb6>
    404a:	bf00      	nop
    404c:	20000054 	.word	0x20000054
    4050:	000084ca 	.word	0x000084ca
    4054:	000079ac 	.word	0x000079ac
    4058:	00008448 	.word	0x00008448
    405c:	40006000 	.word	0x40006000
    4060:	000084df 	.word	0x000084df

00004064 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4064:	4b0e      	ldr	r3, [pc, #56]	; (40a0 <nrfx_gpiote_trigger_disable+0x3c>)
    4066:	f100 0208 	add.w	r2, r0, #8
    406a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    406e:	0699      	lsls	r1, r3, #26
    4070:	d513      	bpl.n	409a <nrfx_gpiote_trigger_disable+0x36>
    4072:	079a      	lsls	r2, r3, #30
    4074:	d411      	bmi.n	409a <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4076:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4078:	2201      	movs	r2, #1
    407a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    407c:	009b      	lsls	r3, r3, #2
    407e:	4909      	ldr	r1, [pc, #36]	; (40a4 <nrfx_gpiote_trigger_disable+0x40>)
    4080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4084:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4088:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    408c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4090:	f022 0203 	bic.w	r2, r2, #3
    4094:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4098:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    409a:	2100      	movs	r1, #0
    409c:	f003 b958 	b.w	7350 <nrf_gpio_cfg_sense_set>
    40a0:	20000054 	.word	0x20000054
    40a4:	40006000 	.word	0x40006000

000040a8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    40a8:	4b0e      	ldr	r3, [pc, #56]	; (40e4 <nrfx_gpiote_pin_uninit+0x3c>)
    40aa:	f100 0208 	add.w	r2, r0, #8
{
    40ae:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    40b0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    40b4:	07db      	lsls	r3, r3, #31
{
    40b6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    40b8:	d511      	bpl.n	40de <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    40ba:	f7ff ffd3 	bl	4064 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    40be:	4620      	mov	r0, r4
    40c0:	f7ff fd8c 	bl	3bdc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40c4:	a801      	add	r0, sp, #4
    40c6:	9401      	str	r4, [sp, #4]
    40c8:	f7ff fda2 	bl	3c10 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    40cc:	9b01      	ldr	r3, [sp, #4]
    40ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    40d2:	2202      	movs	r2, #2
    40d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    40d8:	4803      	ldr	r0, [pc, #12]	; (40e8 <nrfx_gpiote_pin_uninit+0x40>)
}
    40da:	b002      	add	sp, #8
    40dc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    40de:	4803      	ldr	r0, [pc, #12]	; (40ec <nrfx_gpiote_pin_uninit+0x44>)
    40e0:	e7fb      	b.n	40da <nrfx_gpiote_pin_uninit+0x32>
    40e2:	bf00      	nop
    40e4:	20000054 	.word	0x20000054
    40e8:	0bad0000 	.word	0x0bad0000
    40ec:	0bad0004 	.word	0x0bad0004

000040f0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    40f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40f4:	4b65      	ldr	r3, [pc, #404]	; (428c <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    40f6:	4866      	ldr	r0, [pc, #408]	; (4290 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    40f8:	4966      	ldr	r1, [pc, #408]	; (4294 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    40fa:	2500      	movs	r5, #0
{
    40fc:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    40fe:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4100:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4102:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4104:	b136      	cbz	r6, 4114 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4106:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    410a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    410c:	bf1e      	ittt	ne
    410e:	601c      	strne	r4, [r3, #0]
    4110:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4112:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4114:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4116:	428b      	cmp	r3, r1
        mask <<= 1;
    4118:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    411c:	d1f1      	bne.n	4102 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    411e:	4f5e      	ldr	r7, [pc, #376]	; (4298 <nrfx_gpiote_irq_handler+0x1a8>)
    4120:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4122:	b37b      	cbz	r3, 4184 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4128:	4e5c      	ldr	r6, [pc, #368]	; (429c <nrfx_gpiote_irq_handler+0x1ac>)
    412a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    412e:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4130:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4134:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4138:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    413a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    413e:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4140:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4144:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4148:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    414c:	f8d9 3000 	ldr.w	r3, [r9]
    4150:	b9f3      	cbnz	r3, 4190 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4152:	f108 0820 	add.w	r8, r8, #32
    4156:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    415a:	f109 0904 	add.w	r9, r9, #4
    415e:	d1f5      	bne.n	414c <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4160:	603b      	str	r3, [r7, #0]
    4162:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    4164:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    4166:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    416a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    416e:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4170:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4174:	9b01      	ldr	r3, [sp, #4]
    4176:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    417a:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    417c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4180:	4313      	orrs	r3, r2
    4182:	d1dd      	bne.n	4140 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    4184:	2401      	movs	r4, #1
    while (mask)
    4186:	2d00      	cmp	r5, #0
    4188:	d168      	bne.n	425c <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    418a:	b009      	add	sp, #36	; 0x24
    418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4190:	fa93 f3a3 	rbit	r3, r3
    4194:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    4198:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    419c:	f106 0208 	add.w	r2, r6, #8
    41a0:	4b3f      	ldr	r3, [pc, #252]	; (42a0 <nrfx_gpiote_irq_handler+0x1b0>)
    41a2:	9605      	str	r6, [sp, #20]
    41a4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    41a8:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    41ac:	08f4      	lsrs	r4, r6, #3
    41ae:	9302      	str	r3, [sp, #8]
    41b0:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    41b2:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    41b4:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    41b8:	fa0b fc00 	lsl.w	ip, fp, r0
    41bc:	5d18      	ldrb	r0, [r3, r4]
    41be:	ea20 000c 	bic.w	r0, r0, ip
    41c2:	5518      	strb	r0, [r3, r4]
    41c4:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41c6:	a805      	add	r0, sp, #20
    41c8:	9103      	str	r1, [sp, #12]
    41ca:	f7ff fd21 	bl	3c10 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    41ce:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    41d0:	9903      	ldr	r1, [sp, #12]
    41d2:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    41d6:	074b      	lsls	r3, r1, #29
    41d8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    41dc:	f3c4 4401 	ubfx	r4, r4, #16, #2
    41e0:	d523      	bpl.n	422a <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    41e2:	4651      	mov	r1, sl
    41e4:	4630      	mov	r0, r6
    41e6:	f7ff fc9b 	bl	3b20 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41ea:	a805      	add	r0, sp, #20
    41ec:	9605      	str	r6, [sp, #20]
    41ee:	f7ff fd0f 	bl	3c10 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    41f2:	9a05      	ldr	r2, [sp, #20]
    41f4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    41f8:	b2e4      	uxtb	r4, r4
    41fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    41fe:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4202:	4294      	cmp	r4, r2
    4204:	d107      	bne.n	4216 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4206:	2100      	movs	r1, #0
    4208:	4630      	mov	r0, r6
    420a:	f003 f8a1 	bl	7350 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    420e:	4621      	mov	r1, r4
    4210:	4630      	mov	r0, r6
    4212:	f003 f89d 	bl	7350 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4216:	a805      	add	r0, sp, #20
    4218:	9605      	str	r6, [sp, #20]
    421a:	f7ff fcf9 	bl	3c10 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    421e:	9b05      	ldr	r3, [sp, #20]
    4220:	fa0b f303 	lsl.w	r3, fp, r3
    4224:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4228:	e790      	b.n	414c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    422a:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    422c:	bf0c      	ite	eq
    422e:	2103      	moveq	r1, #3
    4230:	2102      	movne	r1, #2
    4232:	4630      	mov	r0, r6
    4234:	f003 f88c 	bl	7350 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4238:	9b02      	ldr	r3, [sp, #8]
    423a:	2b03      	cmp	r3, #3
    423c:	d004      	beq.n	4248 <nrfx_gpiote_irq_handler+0x158>
    423e:	2c02      	cmp	r4, #2
    4240:	d107      	bne.n	4252 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4242:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4246:	d1e6      	bne.n	4216 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    4248:	4651      	mov	r1, sl
    424a:	4630      	mov	r0, r6
    424c:	f7ff fc68 	bl	3b20 <call_handler>
    4250:	e7e1      	b.n	4216 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4252:	2c03      	cmp	r4, #3
    4254:	d1df      	bne.n	4216 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4256:	f1ba 0f02 	cmp.w	sl, #2
    425a:	e7f4      	b.n	4246 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    425c:	fa95 f3a5 	rbit	r3, r5
    4260:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4264:	fa04 f203 	lsl.w	r2, r4, r3
    4268:	009b      	lsls	r3, r3, #2
    426a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    426e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4272:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4276:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    427a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    427e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4282:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4286:	f7ff fc4b 	bl	3b20 <call_handler>
    428a:	e77c      	b.n	4186 <nrfx_gpiote_irq_handler+0x96>
    428c:	40006100 	.word	0x40006100
    4290:	40006000 	.word	0x40006000
    4294:	40006120 	.word	0x40006120
    4298:	4000617c 	.word	0x4000617c
    429c:	50000300 	.word	0x50000300
    42a0:	20000054 	.word	0x20000054

000042a4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    42a4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    42a6:	4801      	ldr	r0, [pc, #4]	; (42ac <nrfx_ppi_channel_alloc+0x8>)
    42a8:	f7ff bbe6 	b.w	3a78 <nrfx_flag32_alloc>
    42ac:	200000d0 	.word	0x200000d0

000042b0 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    42b0:	4b03      	ldr	r3, [pc, #12]	; (42c0 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    42b2:	6818      	ldr	r0, [r3, #0]
}
    42b4:	f1a0 0308 	sub.w	r3, r0, #8
    42b8:	4258      	negs	r0, r3
    42ba:	4158      	adcs	r0, r3
    42bc:	4770      	bx	lr
    42be:	bf00      	nop
    42c0:	10000130 	.word	0x10000130

000042c4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    42c4:	4b06      	ldr	r3, [pc, #24]	; (42e0 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	2b08      	cmp	r3, #8
    42ca:	d106      	bne.n	42da <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    42cc:	4b05      	ldr	r3, [pc, #20]	; (42e4 <nrf52_errata_103+0x20>)
    42ce:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    42d0:	2b05      	cmp	r3, #5
    42d2:	d802      	bhi.n	42da <nrf52_errata_103+0x16>
    42d4:	4a04      	ldr	r2, [pc, #16]	; (42e8 <nrf52_errata_103+0x24>)
    42d6:	5cd0      	ldrb	r0, [r2, r3]
    42d8:	4770      	bx	lr
        return false;
    42da:	2000      	movs	r0, #0
}
    42dc:	4770      	bx	lr
    42de:	bf00      	nop
    42e0:	10000130 	.word	0x10000130
    42e4:	10000134 	.word	0x10000134
    42e8:	000084f0 	.word	0x000084f0

000042ec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    42ec:	4a02      	ldr	r2, [pc, #8]	; (42f8 <nvmc_wait+0xc>)
    42ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    42f2:	2b00      	cmp	r3, #0
    42f4:	d0fb      	beq.n	42ee <nvmc_wait+0x2>
}
    42f6:	4770      	bx	lr
    42f8:	4001e000 	.word	0x4001e000

000042fc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    42fc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    42fe:	f7ff ffd7 	bl	42b0 <nrf52_errata_136>
    4302:	b140      	cbz	r0, 4316 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4308:	2200      	movs	r2, #0
    430a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    430e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4312:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4316:	f7ff ffcb 	bl	42b0 <nrf52_errata_136>
    431a:	2800      	cmp	r0, #0
    431c:	d046      	beq.n	43ac <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    431e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4322:	4b5b      	ldr	r3, [pc, #364]	; (4490 <SystemInit+0x194>)
    4324:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4328:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    432c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4330:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4334:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4338:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    433c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4340:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4344:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4348:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    434c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4350:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4354:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4358:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    435c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4360:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4364:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4368:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    436c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4370:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4374:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4378:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    437c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4380:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4384:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4388:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    438c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4390:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4394:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4398:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    439c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    43a0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    43a4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    43a8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    43ac:	f7ff ff8a 	bl	42c4 <nrf52_errata_103>
    43b0:	b110      	cbz	r0, 43b8 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    43b2:	4b38      	ldr	r3, [pc, #224]	; (4494 <SystemInit+0x198>)
    43b4:	4a38      	ldr	r2, [pc, #224]	; (4498 <SystemInit+0x19c>)
    43b6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    43b8:	f7ff ff84 	bl	42c4 <nrf52_errata_103>
    43bc:	b118      	cbz	r0, 43c6 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    43be:	4b37      	ldr	r3, [pc, #220]	; (449c <SystemInit+0x1a0>)
    43c0:	22fb      	movs	r2, #251	; 0xfb
    43c2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    43c6:	f7ff ff7d 	bl	42c4 <nrf52_errata_103>
    43ca:	b148      	cbz	r0, 43e0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    43cc:	4934      	ldr	r1, [pc, #208]	; (44a0 <SystemInit+0x1a4>)
    43ce:	4b35      	ldr	r3, [pc, #212]	; (44a4 <SystemInit+0x1a8>)
    43d0:	680a      	ldr	r2, [r1, #0]
    43d2:	681b      	ldr	r3, [r3, #0]
    43d4:	f022 020f 	bic.w	r2, r2, #15
    43d8:	f003 030f 	and.w	r3, r3, #15
    43dc:	4313      	orrs	r3, r2
    43de:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    43e0:	f7ff ff70 	bl	42c4 <nrf52_errata_103>
    43e4:	b118      	cbz	r0, 43ee <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    43e6:	4b30      	ldr	r3, [pc, #192]	; (44a8 <SystemInit+0x1ac>)
    43e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    43ec:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    43ee:	f7ff ff5f 	bl	42b0 <nrf52_errata_136>
    43f2:	b148      	cbz	r0, 4408 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    43f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    43fc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    43fe:	bf44      	itt	mi
    4400:	f06f 0201 	mvnmi.w	r2, #1
    4404:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4408:	4b28      	ldr	r3, [pc, #160]	; (44ac <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    440a:	681b      	ldr	r3, [r3, #0]
    440c:	2b08      	cmp	r3, #8
    440e:	d10e      	bne.n	442e <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4410:	4b27      	ldr	r3, [pc, #156]	; (44b0 <SystemInit+0x1b4>)
    4412:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4414:	2b05      	cmp	r3, #5
    4416:	d802      	bhi.n	441e <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4418:	4a26      	ldr	r2, [pc, #152]	; (44b4 <SystemInit+0x1b8>)
    441a:	5cd3      	ldrb	r3, [r2, r3]
    441c:	b13b      	cbz	r3, 442e <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    441e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4422:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    442a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    442e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4432:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4436:	2a00      	cmp	r2, #0
    4438:	db03      	blt.n	4442 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    443a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    443e:	2b00      	cmp	r3, #0
    4440:	da22      	bge.n	4488 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4442:	491d      	ldr	r1, [pc, #116]	; (44b8 <SystemInit+0x1bc>)
    4444:	2301      	movs	r3, #1
    4446:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    444a:	f7ff ff4f 	bl	42ec <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    444e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4452:	2412      	movs	r4, #18
    4454:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4458:	f7ff ff48 	bl	42ec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    445c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4460:	f7ff ff44 	bl	42ec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4464:	2300      	movs	r3, #0
    4466:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    446a:	f7ff ff3f 	bl	42ec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    446e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4472:	4912      	ldr	r1, [pc, #72]	; (44bc <SystemInit+0x1c0>)
    4474:	4b12      	ldr	r3, [pc, #72]	; (44c0 <SystemInit+0x1c4>)
    4476:	68ca      	ldr	r2, [r1, #12]
    4478:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    447c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    447e:	60cb      	str	r3, [r1, #12]
    4480:	f3bf 8f4f 	dsb	sy
    __NOP();
    4484:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4486:	e7fd      	b.n	4484 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4488:	4b0e      	ldr	r3, [pc, #56]	; (44c4 <SystemInit+0x1c8>)
    448a:	4a0f      	ldr	r2, [pc, #60]	; (44c8 <SystemInit+0x1cc>)
    448c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    448e:	bd10      	pop	{r4, pc}
    4490:	4000c000 	.word	0x4000c000
    4494:	4000568c 	.word	0x4000568c
    4498:	00038148 	.word	0x00038148
    449c:	4000f000 	.word	0x4000f000
    44a0:	40000ee4 	.word	0x40000ee4
    44a4:	10000258 	.word	0x10000258
    44a8:	40029640 	.word	0x40029640
    44ac:	10000130 	.word	0x10000130
    44b0:	10000134 	.word	0x10000134
    44b4:	000084ea 	.word	0x000084ea
    44b8:	4001e000 	.word	0x4001e000
    44bc:	e000ed00 	.word	0xe000ed00
    44c0:	05fa0004 	.word	0x05fa0004
    44c4:	200000d4 	.word	0x200000d4
    44c8:	03d09000 	.word	0x03d09000

000044cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    44cc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    44ce:	4c14      	ldr	r4, [pc, #80]	; (4520 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    44d0:	4a14      	ldr	r2, [pc, #80]	; (4524 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    44d2:	4915      	ldr	r1, [pc, #84]	; (4528 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    44d4:	2303      	movs	r3, #3
    44d6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    44d8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    44da:	4b14      	ldr	r3, [pc, #80]	; (452c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    44dc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    44de:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    44e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    44e4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    44e6:	2300      	movs	r3, #0
    44e8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    44ea:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    44ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    44ee:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    44f0:	4a0f      	ldr	r2, [pc, #60]	; (4530 <_DoInit+0x64>)
    44f2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    44f4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    44f6:	2210      	movs	r2, #16
    44f8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    44fa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    44fc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    44fe:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4500:	f002 fd48 	bl	6f94 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4504:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4508:	490a      	ldr	r1, [pc, #40]	; (4534 <_DoInit+0x68>)
    450a:	4620      	mov	r0, r4
    450c:	f002 fd42 	bl	6f94 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4510:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4514:	2320      	movs	r3, #32
    4516:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4518:	f3bf 8f5f 	dmb	sy
}
    451c:	bd10      	pop	{r4, pc}
    451e:	bf00      	nop
    4520:	20000948 	.word	0x20000948
    4524:	000084f6 	.word	0x000084f6
    4528:	000084ff 	.word	0x000084ff
    452c:	20000a61 	.word	0x20000a61
    4530:	20000a51 	.word	0x20000a51
    4534:	00008503 	.word	0x00008503

00004538 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4538:	4b0e      	ldr	r3, [pc, #56]	; (4574 <z_sys_init_run_level+0x3c>)
{
    453a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    453c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4540:	3001      	adds	r0, #1
    4542:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4546:	42a6      	cmp	r6, r4
    4548:	d800      	bhi.n	454c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    454a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    454c:	e9d4 3500 	ldrd	r3, r5, [r4]
    4550:	4628      	mov	r0, r5
    4552:	4798      	blx	r3
		if (dev != NULL) {
    4554:	b165      	cbz	r5, 4570 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4556:	68eb      	ldr	r3, [r5, #12]
    4558:	b130      	cbz	r0, 4568 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    455a:	2800      	cmp	r0, #0
    455c:	bfb8      	it	lt
    455e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4560:	28ff      	cmp	r0, #255	; 0xff
    4562:	bfa8      	it	ge
    4564:	20ff      	movge	r0, #255	; 0xff
    4566:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4568:	785a      	ldrb	r2, [r3, #1]
    456a:	f042 0201 	orr.w	r2, r2, #1
    456e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4570:	3408      	adds	r4, #8
    4572:	e7e8      	b.n	4546 <z_sys_init_run_level+0xe>
    4574:	000077fc 	.word	0x000077fc

00004578 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4578:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    457a:	4605      	mov	r5, r0
    457c:	b910      	cbnz	r0, 4584 <z_impl_device_get_binding+0xc>
		return NULL;
    457e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4580:	4620      	mov	r0, r4
    4582:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4584:	7803      	ldrb	r3, [r0, #0]
    4586:	2b00      	cmp	r3, #0
    4588:	d0f9      	beq.n	457e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    458a:	4a0f      	ldr	r2, [pc, #60]	; (45c8 <z_impl_device_get_binding+0x50>)
    458c:	4c0f      	ldr	r4, [pc, #60]	; (45cc <z_impl_device_get_binding+0x54>)
    458e:	4616      	mov	r6, r2
    4590:	4294      	cmp	r4, r2
    4592:	d108      	bne.n	45a6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4594:	4c0d      	ldr	r4, [pc, #52]	; (45cc <z_impl_device_get_binding+0x54>)
    4596:	42b4      	cmp	r4, r6
    4598:	d0f1      	beq.n	457e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    459a:	4620      	mov	r0, r4
    459c:	f002 feef 	bl	737e <z_device_ready>
    45a0:	b950      	cbnz	r0, 45b8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    45a2:	3418      	adds	r4, #24
    45a4:	e7f7      	b.n	4596 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    45a6:	4620      	mov	r0, r4
    45a8:	f002 fee9 	bl	737e <z_device_ready>
    45ac:	b110      	cbz	r0, 45b4 <z_impl_device_get_binding+0x3c>
    45ae:	6823      	ldr	r3, [r4, #0]
    45b0:	42ab      	cmp	r3, r5
    45b2:	d0e5      	beq.n	4580 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    45b4:	3418      	adds	r4, #24
    45b6:	e7eb      	b.n	4590 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    45b8:	6821      	ldr	r1, [r4, #0]
    45ba:	4628      	mov	r0, r5
    45bc:	f002 fd04 	bl	6fc8 <strcmp>
    45c0:	2800      	cmp	r0, #0
    45c2:	d1ee      	bne.n	45a2 <z_impl_device_get_binding+0x2a>
    45c4:	e7dc      	b.n	4580 <z_impl_device_get_binding+0x8>
    45c6:	bf00      	nop
    45c8:	00007528 	.word	0x00007528
    45cc:	000074b0 	.word	0x000074b0

000045d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    45d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d2:	4604      	mov	r4, r0
    45d4:	460e      	mov	r6, r1
	__asm__ volatile(
    45d6:	f04f 0320 	mov.w	r3, #32
    45da:	f3ef 8711 	mrs	r7, BASEPRI
    45de:	f383 8812 	msr	BASEPRI_MAX, r3
    45e2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    45e6:	f001 fc01 	bl	5dec <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    45ea:	4631      	mov	r1, r6
    45ec:	4605      	mov	r5, r0
    45ee:	4620      	mov	r0, r4
    45f0:	f002 fe3c 	bl	726c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    45f4:	2c04      	cmp	r4, #4
    45f6:	d10c      	bne.n	4612 <z_fatal_error+0x42>
    45f8:	490a      	ldr	r1, [pc, #40]	; (4624 <z_fatal_error+0x54>)
    45fa:	4a0b      	ldr	r2, [pc, #44]	; (4628 <z_fatal_error+0x58>)
    45fc:	480b      	ldr	r0, [pc, #44]	; (462c <z_fatal_error+0x5c>)
    45fe:	238f      	movs	r3, #143	; 0x8f
    4600:	f002 fc98 	bl	6f34 <printk>
    4604:	480a      	ldr	r0, [pc, #40]	; (4630 <z_fatal_error+0x60>)
    4606:	f002 fc95 	bl	6f34 <printk>
    460a:	4807      	ldr	r0, [pc, #28]	; (4628 <z_fatal_error+0x58>)
    460c:	218f      	movs	r1, #143	; 0x8f
    460e:	f002 fbbd 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4612:	f387 8811 	msr	BASEPRI, r7
    4616:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    461a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    461c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4620:	f7fd be66 	b.w	22f0 <z_impl_k_thread_abort>
    4624:	0000852c 	.word	0x0000852c
    4628:	0000850a 	.word	0x0000850a
    462c:	000079ac 	.word	0x000079ac
    4630:	00008549 	.word	0x00008549

00004634 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4634:	4c11      	ldr	r4, [pc, #68]	; (467c <idle+0x48>)
    4636:	68a2      	ldr	r2, [r4, #8]
    4638:	f992 200e 	ldrsb.w	r2, [r2, #14]
    463c:	2a00      	cmp	r2, #0
{
    463e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4640:	da09      	bge.n	4656 <idle+0x22>
    4642:	490f      	ldr	r1, [pc, #60]	; (4680 <idle+0x4c>)
    4644:	480f      	ldr	r0, [pc, #60]	; (4684 <idle+0x50>)
    4646:	4a10      	ldr	r2, [pc, #64]	; (4688 <idle+0x54>)
    4648:	2327      	movs	r3, #39	; 0x27
    464a:	f002 fc73 	bl	6f34 <printk>
    464e:	480e      	ldr	r0, [pc, #56]	; (4688 <idle+0x54>)
    4650:	2127      	movs	r1, #39	; 0x27
    4652:	f002 fb9b 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4656:	f04f 0220 	mov.w	r2, #32
    465a:	f3ef 8311 	mrs	r3, BASEPRI
    465e:	f382 8812 	msr	BASEPRI_MAX, r2
    4662:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4666:	f001 ffcf 	bl	6608 <z_get_next_timeout_expiry>
    466a:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    466c:	f7fd fa68 	bl	1b40 <pm_system_suspend>
    4670:	2800      	cmp	r0, #0
    4672:	d1f0      	bne.n	4656 <idle+0x22>
	arch_cpu_idle();
    4674:	f7fd fb1a 	bl	1cac <arch_cpu_idle>
}
    4678:	e7ed      	b.n	4656 <idle+0x22>
    467a:	bf00      	nop
    467c:	200009f0 	.word	0x200009f0
    4680:	0000859f 	.word	0x0000859f
    4684:	000079ac 	.word	0x000079ac
    4688:	0000857e 	.word	0x0000857e

0000468c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    468c:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    468e:	2300      	movs	r3, #0
{
    4690:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4692:	2201      	movs	r2, #1
    4694:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4698:	220f      	movs	r2, #15
    469a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    469e:	4c0d      	ldr	r4, [pc, #52]	; (46d4 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    46a0:	4a0d      	ldr	r2, [pc, #52]	; (46d8 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    46a2:	9301      	str	r3, [sp, #4]
    46a4:	490d      	ldr	r1, [pc, #52]	; (46dc <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    46a6:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    46a8:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    46ac:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    46b0:	f44f 75b0 	mov.w	r5, #352	; 0x160
    46b4:	9300      	str	r3, [sp, #0]
    46b6:	fb05 1100 	mla	r1, r5, r0, r1
    46ba:	4b09      	ldr	r3, [pc, #36]	; (46e0 <init_idle_thread+0x54>)
    46bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    46c0:	4620      	mov	r0, r4
    46c2:	f001 fd15 	bl	60f0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    46c6:	7b63      	ldrb	r3, [r4, #13]
    46c8:	f023 0304 	bic.w	r3, r3, #4
    46cc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    46ce:	b007      	add	sp, #28
    46d0:	bd30      	pop	{r4, r5, pc}
    46d2:	bf00      	nop
    46d4:	200001c8 	.word	0x200001c8
    46d8:	200009f0 	.word	0x200009f0
    46dc:	20001440 	.word	0x20001440
    46e0:	00004635 	.word	0x00004635

000046e4 <bg_thread_main>:
{
    46e4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    46e6:	4b0a      	ldr	r3, [pc, #40]	; (4710 <bg_thread_main+0x2c>)
    46e8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    46ea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    46ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    46ee:	f7ff ff23 	bl	4538 <z_sys_init_run_level>
	boot_banner();
    46f2:	f002 f957 	bl	69a4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    46f6:	2003      	movs	r0, #3
    46f8:	f7ff ff1e 	bl	4538 <z_sys_init_run_level>
	z_init_static_threads();
    46fc:	f001 fd5c 	bl	61b8 <z_init_static_threads>
	main();
    4700:	f7fc f9cc 	bl	a9c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4704:	4a03      	ldr	r2, [pc, #12]	; (4714 <bg_thread_main+0x30>)
    4706:	7b13      	ldrb	r3, [r2, #12]
    4708:	f023 0301 	bic.w	r3, r3, #1
    470c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    470e:	bd08      	pop	{r3, pc}
    4710:	20000e61 	.word	0x20000e61
    4714:	20000248 	.word	0x20000248

00004718 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4718:	4802      	ldr	r0, [pc, #8]	; (4724 <z_bss_zero+0xc>)
    471a:	4a03      	ldr	r2, [pc, #12]	; (4728 <z_bss_zero+0x10>)
    471c:	2100      	movs	r1, #0
    471e:	1a12      	subs	r2, r2, r0
    4720:	f002 bc69 	b.w	6ff6 <memset>
    4724:	200001a8 	.word	0x200001a8
    4728:	20001020 	.word	0x20001020

0000472c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    472c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    472e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4808 <z_cstart+0xdc>
    4732:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4734:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4738:	4d2d      	ldr	r5, [pc, #180]	; (47f0 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    473a:	4e2e      	ldr	r6, [pc, #184]	; (47f4 <z_cstart+0xc8>)
    473c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    473e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 480c <z_cstart+0xe0>
    4742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4746:	2400      	movs	r4, #0
    4748:	616b      	str	r3, [r5, #20]
    474a:	23e0      	movs	r3, #224	; 0xe0
    474c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4750:	77ec      	strb	r4, [r5, #31]
    4752:	762c      	strb	r4, [r5, #24]
    4754:	766c      	strb	r4, [r5, #25]
    4756:	76ac      	strb	r4, [r5, #26]
    4758:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    475c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    475e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4762:	626b      	str	r3, [r5, #36]	; 0x24
    4764:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4768:	f7fd fd6c 	bl	2244 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    476c:	f7fd fa98 	bl	1ca0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4770:	f04f 33ff 	mov.w	r3, #4294967295
    4774:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4776:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4778:	f7fd fe94 	bl	24a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    477c:	f7fd fdca 	bl	2314 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4780:	f240 1301 	movw	r3, #257	; 0x101
    4784:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4788:	ab06      	add	r3, sp, #24
    478a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    478c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4790:	f002 fdf4 	bl	737c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4794:	4620      	mov	r0, r4
    4796:	f7ff fecf 	bl	4538 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    479a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    479c:	4d16      	ldr	r5, [pc, #88]	; (47f8 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    479e:	f7ff fecb 	bl	4538 <z_sys_init_run_level>
	z_sched_init();
    47a2:	f001 f98d 	bl	5ac0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    47a6:	4b15      	ldr	r3, [pc, #84]	; (47fc <z_cstart+0xd0>)
    47a8:	9305      	str	r3, [sp, #20]
    47aa:	2301      	movs	r3, #1
    47ac:	4914      	ldr	r1, [pc, #80]	; (4800 <z_cstart+0xd4>)
    47ae:	9400      	str	r4, [sp, #0]
    47b0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    47b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    47b8:	464b      	mov	r3, r9
    47ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
    47be:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    47c0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    47c2:	f001 fc95 	bl	60f0 <z_setup_new_thread>
    47c6:	7b6a      	ldrb	r2, [r5, #13]
    47c8:	f022 0204 	bic.w	r2, r2, #4
    47cc:	736a      	strb	r2, [r5, #13]
    47ce:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    47d0:	4628      	mov	r0, r5
    47d2:	f000 fdc1 	bl	5358 <z_ready_thread>
		init_idle_thread(i);
    47d6:	4620      	mov	r0, r4
    47d8:	f7ff ff58 	bl	468c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    47dc:	4b09      	ldr	r3, [pc, #36]	; (4804 <z_cstart+0xd8>)
    47de:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    47e0:	464a      	mov	r2, r9
    47e2:	4639      	mov	r1, r7
    47e4:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    47e6:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    47e8:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    47ec:	f7fd fb92 	bl	1f14 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    47f0:	e000ed00 	.word	0xe000ed00
    47f4:	200009f0 	.word	0x200009f0
    47f8:	20000248 	.word	0x20000248
    47fc:	000085c7 	.word	0x000085c7
    4800:	20001020 	.word	0x20001020
    4804:	200001c8 	.word	0x200001c8
    4808:	20001dc0 	.word	0x20001dc0
    480c:	000046e5 	.word	0x000046e5

00004810 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4814:	4d16      	ldr	r5, [pc, #88]	; (4870 <init_mem_slab_module+0x60>)
    4816:	4c17      	ldr	r4, [pc, #92]	; (4874 <init_mem_slab_module+0x64>)
    4818:	4e17      	ldr	r6, [pc, #92]	; (4878 <init_mem_slab_module+0x68>)
    481a:	46a8      	mov	r8, r5
    481c:	42ac      	cmp	r4, r5
    481e:	d90c      	bls.n	483a <init_mem_slab_module+0x2a>
    4820:	4916      	ldr	r1, [pc, #88]	; (487c <init_mem_slab_module+0x6c>)
    4822:	4817      	ldr	r0, [pc, #92]	; (4880 <init_mem_slab_module+0x70>)
    4824:	233c      	movs	r3, #60	; 0x3c
    4826:	4632      	mov	r2, r6
    4828:	f002 fb84 	bl	6f34 <printk>
    482c:	4815      	ldr	r0, [pc, #84]	; (4884 <init_mem_slab_module+0x74>)
    482e:	f002 fb81 	bl	6f34 <printk>
    4832:	213c      	movs	r1, #60	; 0x3c
    4834:	4630      	mov	r0, r6
    4836:	f002 faa9 	bl	6d8c <assert_post_action>
    483a:	4544      	cmp	r4, r8
    483c:	d302      	bcc.n	4844 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    483e:	2000      	movs	r0, #0
	return rc;
}
    4840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4844:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4848:	ea41 0302 	orr.w	r3, r1, r2
    484c:	f013 0303 	ands.w	r3, r3, #3
    4850:	d10b      	bne.n	486a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    4852:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    4854:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4856:	4283      	cmp	r3, r0
    4858:	d101      	bne.n	485e <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    485a:	3420      	adds	r4, #32
    485c:	e7de      	b.n	481c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    485e:	69a7      	ldr	r7, [r4, #24]
    4860:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4862:	3301      	adds	r3, #1
		slab->free_list = p;
    4864:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4866:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4868:	e7f5      	b.n	4856 <init_mem_slab_module+0x46>
		return -EINVAL;
    486a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    486e:	e7e7      	b.n	4840 <init_mem_slab_module+0x30>
    4870:	20000154 	.word	0x20000154
    4874:	20000154 	.word	0x20000154
    4878:	000085cc 	.word	0x000085cc
    487c:	000085f1 	.word	0x000085f1
    4880:	000079ac 	.word	0x000079ac
    4884:	0000860e 	.word	0x0000860e

00004888 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    488c:	4604      	mov	r4, r0
    488e:	460e      	mov	r6, r1
    4890:	4690      	mov	r8, r2
    4892:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4894:	f100 0508 	add.w	r5, r0, #8
    4898:	f04f 0320 	mov.w	r3, #32
    489c:	f3ef 8711 	mrs	r7, BASEPRI
    48a0:	f383 8812 	msr	BASEPRI_MAX, r3
    48a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    48a8:	4628      	mov	r0, r5
    48aa:	f001 fd15 	bl	62d8 <z_spin_lock_valid>
    48ae:	b968      	cbnz	r0, 48cc <k_mem_slab_alloc+0x44>
    48b0:	4a24      	ldr	r2, [pc, #144]	; (4944 <k_mem_slab_alloc+0xbc>)
    48b2:	4925      	ldr	r1, [pc, #148]	; (4948 <k_mem_slab_alloc+0xc0>)
    48b4:	4825      	ldr	r0, [pc, #148]	; (494c <k_mem_slab_alloc+0xc4>)
    48b6:	2381      	movs	r3, #129	; 0x81
    48b8:	f002 fb3c 	bl	6f34 <printk>
    48bc:	4824      	ldr	r0, [pc, #144]	; (4950 <k_mem_slab_alloc+0xc8>)
    48be:	4629      	mov	r1, r5
    48c0:	f002 fb38 	bl	6f34 <printk>
    48c4:	481f      	ldr	r0, [pc, #124]	; (4944 <k_mem_slab_alloc+0xbc>)
    48c6:	2181      	movs	r1, #129	; 0x81
    48c8:	f002 fa60 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    48cc:	4628      	mov	r0, r5
    48ce:	f001 fd21 	bl	6314 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    48d2:	69a3      	ldr	r3, [r4, #24]
    48d4:	b1eb      	cbz	r3, 4912 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    48d6:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    48dc:	69e3      	ldr	r3, [r4, #28]
    48de:	3301      	adds	r3, #1
    48e0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    48e2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48e4:	4628      	mov	r0, r5
    48e6:	f001 fd05 	bl	62f4 <z_spin_unlock_valid>
    48ea:	b968      	cbnz	r0, 4908 <k_mem_slab_alloc+0x80>
    48ec:	4a15      	ldr	r2, [pc, #84]	; (4944 <k_mem_slab_alloc+0xbc>)
    48ee:	4919      	ldr	r1, [pc, #100]	; (4954 <k_mem_slab_alloc+0xcc>)
    48f0:	4816      	ldr	r0, [pc, #88]	; (494c <k_mem_slab_alloc+0xc4>)
    48f2:	23ac      	movs	r3, #172	; 0xac
    48f4:	f002 fb1e 	bl	6f34 <printk>
    48f8:	4817      	ldr	r0, [pc, #92]	; (4958 <k_mem_slab_alloc+0xd0>)
    48fa:	4629      	mov	r1, r5
    48fc:	f002 fb1a 	bl	6f34 <printk>
    4900:	4810      	ldr	r0, [pc, #64]	; (4944 <k_mem_slab_alloc+0xbc>)
    4902:	21ac      	movs	r1, #172	; 0xac
    4904:	f002 fa42 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4908:	f387 8811 	msr	BASEPRI, r7
    490c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4910:	e013      	b.n	493a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4912:	ea58 0209 	orrs.w	r2, r8, r9
    4916:	d103      	bne.n	4920 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    4918:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    491a:	f06f 040b 	mvn.w	r4, #11
    491e:	e7e1      	b.n	48e4 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4920:	4622      	mov	r2, r4
    4922:	e9cd 8900 	strd	r8, r9, [sp]
    4926:	4639      	mov	r1, r7
    4928:	4628      	mov	r0, r5
    492a:	f000 fec7 	bl	56bc <z_pend_curr>
		if (result == 0) {
    492e:	4604      	mov	r4, r0
    4930:	b918      	cbnz	r0, 493a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    4932:	4b0a      	ldr	r3, [pc, #40]	; (495c <k_mem_slab_alloc+0xd4>)
    4934:	689b      	ldr	r3, [r3, #8]
    4936:	695b      	ldr	r3, [r3, #20]
    4938:	6033      	str	r3, [r6, #0]
}
    493a:	4620      	mov	r0, r4
    493c:	b003      	add	sp, #12
    493e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4942:	bf00      	nop
    4944:	00007e87 	.word	0x00007e87
    4948:	00007ed9 	.word	0x00007ed9
    494c:	000079ac 	.word	0x000079ac
    4950:	00007eee 	.word	0x00007eee
    4954:	00007ead 	.word	0x00007ead
    4958:	00007ec4 	.word	0x00007ec4
    495c:	200009f0 	.word	0x200009f0

00004960 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4964:	4604      	mov	r4, r0
    4966:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4968:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    496c:	f04f 0320 	mov.w	r3, #32
    4970:	f3ef 8711 	mrs	r7, BASEPRI
    4974:	f383 8812 	msr	BASEPRI_MAX, r3
    4978:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    497c:	4628      	mov	r0, r5
    497e:	f001 fcab 	bl	62d8 <z_spin_lock_valid>
    4982:	b968      	cbnz	r0, 49a0 <k_mem_slab_free+0x40>
    4984:	4a22      	ldr	r2, [pc, #136]	; (4a10 <k_mem_slab_free+0xb0>)
    4986:	4923      	ldr	r1, [pc, #140]	; (4a14 <k_mem_slab_free+0xb4>)
    4988:	4823      	ldr	r0, [pc, #140]	; (4a18 <k_mem_slab_free+0xb8>)
    498a:	2381      	movs	r3, #129	; 0x81
    498c:	f002 fad2 	bl	6f34 <printk>
    4990:	4822      	ldr	r0, [pc, #136]	; (4a1c <k_mem_slab_free+0xbc>)
    4992:	4629      	mov	r1, r5
    4994:	f002 face 	bl	6f34 <printk>
    4998:	481d      	ldr	r0, [pc, #116]	; (4a10 <k_mem_slab_free+0xb0>)
    499a:	2181      	movs	r1, #129	; 0x81
    499c:	f002 f9f6 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    49a0:	4628      	mov	r0, r5
    49a2:	f001 fcb7 	bl	6314 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    49a6:	f8d4 8018 	ldr.w	r8, [r4, #24]
    49aa:	f1b8 0f00 	cmp.w	r8, #0
    49ae:	d10f      	bne.n	49d0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    49b0:	4620      	mov	r0, r4
    49b2:	f001 f835 	bl	5a20 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    49b6:	b158      	cbz	r0, 49d0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    49b8:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    49ba:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    49bc:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    49c0:	f000 fcca 	bl	5358 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    49c4:	4639      	mov	r1, r7
    49c6:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    49c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    49cc:	f000 ba70 	b.w	4eb0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    49d0:	6833      	ldr	r3, [r6, #0]
    49d2:	69a2      	ldr	r2, [r4, #24]
    49d4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    49d6:	6833      	ldr	r3, [r6, #0]
    49d8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    49da:	69e3      	ldr	r3, [r4, #28]
    49dc:	3b01      	subs	r3, #1
    49de:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49e0:	4628      	mov	r0, r5
    49e2:	f001 fc87 	bl	62f4 <z_spin_unlock_valid>
    49e6:	b968      	cbnz	r0, 4a04 <k_mem_slab_free+0xa4>
    49e8:	4a09      	ldr	r2, [pc, #36]	; (4a10 <k_mem_slab_free+0xb0>)
    49ea:	490d      	ldr	r1, [pc, #52]	; (4a20 <k_mem_slab_free+0xc0>)
    49ec:	480a      	ldr	r0, [pc, #40]	; (4a18 <k_mem_slab_free+0xb8>)
    49ee:	23ac      	movs	r3, #172	; 0xac
    49f0:	f002 faa0 	bl	6f34 <printk>
    49f4:	480b      	ldr	r0, [pc, #44]	; (4a24 <k_mem_slab_free+0xc4>)
    49f6:	4629      	mov	r1, r5
    49f8:	f002 fa9c 	bl	6f34 <printk>
    49fc:	4804      	ldr	r0, [pc, #16]	; (4a10 <k_mem_slab_free+0xb0>)
    49fe:	21ac      	movs	r1, #172	; 0xac
    4a00:	f002 f9c4 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4a04:	f387 8811 	msr	BASEPRI, r7
    4a08:	f3bf 8f6f 	isb	sy
}
    4a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a10:	00007e87 	.word	0x00007e87
    4a14:	00007ed9 	.word	0x00007ed9
    4a18:	000079ac 	.word	0x000079ac
    4a1c:	00007eee 	.word	0x00007eee
    4a20:	00007ead 	.word	0x00007ead
    4a24:	00007ec4 	.word	0x00007ec4

00004a28 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4a2c:	4604      	mov	r4, r0
    4a2e:	4616      	mov	r6, r2
    4a30:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4a32:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4a36:	b163      	cbz	r3, 4a52 <z_impl_k_mutex_lock+0x2a>
    4a38:	4970      	ldr	r1, [pc, #448]	; (4bfc <z_impl_k_mutex_lock+0x1d4>)
    4a3a:	4a71      	ldr	r2, [pc, #452]	; (4c00 <z_impl_k_mutex_lock+0x1d8>)
    4a3c:	4871      	ldr	r0, [pc, #452]	; (4c04 <z_impl_k_mutex_lock+0x1dc>)
    4a3e:	2365      	movs	r3, #101	; 0x65
    4a40:	f002 fa78 	bl	6f34 <printk>
    4a44:	4870      	ldr	r0, [pc, #448]	; (4c08 <z_impl_k_mutex_lock+0x1e0>)
    4a46:	f002 fa75 	bl	6f34 <printk>
    4a4a:	486d      	ldr	r0, [pc, #436]	; (4c00 <z_impl_k_mutex_lock+0x1d8>)
    4a4c:	2165      	movs	r1, #101	; 0x65
    4a4e:	f002 f99d 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4a52:	f04f 0320 	mov.w	r3, #32
    4a56:	f3ef 8811 	mrs	r8, BASEPRI
    4a5a:	f383 8812 	msr	BASEPRI_MAX, r3
    4a5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a62:	486a      	ldr	r0, [pc, #424]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4a64:	f001 fc38 	bl	62d8 <z_spin_lock_valid>
    4a68:	b968      	cbnz	r0, 4a86 <z_impl_k_mutex_lock+0x5e>
    4a6a:	4a69      	ldr	r2, [pc, #420]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4a6c:	4969      	ldr	r1, [pc, #420]	; (4c14 <z_impl_k_mutex_lock+0x1ec>)
    4a6e:	4865      	ldr	r0, [pc, #404]	; (4c04 <z_impl_k_mutex_lock+0x1dc>)
    4a70:	2381      	movs	r3, #129	; 0x81
    4a72:	f002 fa5f 	bl	6f34 <printk>
    4a76:	4965      	ldr	r1, [pc, #404]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4a78:	4867      	ldr	r0, [pc, #412]	; (4c18 <z_impl_k_mutex_lock+0x1f0>)
    4a7a:	f002 fa5b 	bl	6f34 <printk>
    4a7e:	4864      	ldr	r0, [pc, #400]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4a80:	2181      	movs	r1, #129	; 0x81
    4a82:	f002 f983 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    4a86:	4861      	ldr	r0, [pc, #388]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4a88:	f001 fc44 	bl	6314 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4a8c:	68e3      	ldr	r3, [r4, #12]
    4a8e:	4a63      	ldr	r2, [pc, #396]	; (4c1c <z_impl_k_mutex_lock+0x1f4>)
    4a90:	b1fb      	cbz	r3, 4ad2 <z_impl_k_mutex_lock+0xaa>
    4a92:	68a0      	ldr	r0, [r4, #8]
    4a94:	6891      	ldr	r1, [r2, #8]
    4a96:	4288      	cmp	r0, r1
    4a98:	d03d      	beq.n	4b16 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4a9a:	ea56 0307 	orrs.w	r3, r6, r7
    4a9e:	d13c      	bne.n	4b1a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4aa0:	485a      	ldr	r0, [pc, #360]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4aa2:	f001 fc27 	bl	62f4 <z_spin_unlock_valid>
    4aa6:	b968      	cbnz	r0, 4ac4 <z_impl_k_mutex_lock+0x9c>
    4aa8:	4a59      	ldr	r2, [pc, #356]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4aaa:	495d      	ldr	r1, [pc, #372]	; (4c20 <z_impl_k_mutex_lock+0x1f8>)
    4aac:	4855      	ldr	r0, [pc, #340]	; (4c04 <z_impl_k_mutex_lock+0x1dc>)
    4aae:	23ac      	movs	r3, #172	; 0xac
    4ab0:	f002 fa40 	bl	6f34 <printk>
    4ab4:	4955      	ldr	r1, [pc, #340]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4ab6:	485b      	ldr	r0, [pc, #364]	; (4c24 <z_impl_k_mutex_lock+0x1fc>)
    4ab8:	f002 fa3c 	bl	6f34 <printk>
    4abc:	4854      	ldr	r0, [pc, #336]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4abe:	21ac      	movs	r1, #172	; 0xac
    4ac0:	f002 f964 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4ac4:	f388 8811 	msr	BASEPRI, r8
    4ac8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4acc:	f06f 000f 	mvn.w	r0, #15
    4ad0:	e01e      	b.n	4b10 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4ad2:	6891      	ldr	r1, [r2, #8]
    4ad4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4ad8:	484c      	ldr	r0, [pc, #304]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4ada:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4adc:	3301      	adds	r3, #1
    4ade:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4ae0:	6893      	ldr	r3, [r2, #8]
    4ae2:	60a3      	str	r3, [r4, #8]
    4ae4:	f001 fc06 	bl	62f4 <z_spin_unlock_valid>
    4ae8:	b968      	cbnz	r0, 4b06 <z_impl_k_mutex_lock+0xde>
    4aea:	4a49      	ldr	r2, [pc, #292]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4aec:	494c      	ldr	r1, [pc, #304]	; (4c20 <z_impl_k_mutex_lock+0x1f8>)
    4aee:	4845      	ldr	r0, [pc, #276]	; (4c04 <z_impl_k_mutex_lock+0x1dc>)
    4af0:	23ac      	movs	r3, #172	; 0xac
    4af2:	f002 fa1f 	bl	6f34 <printk>
    4af6:	4945      	ldr	r1, [pc, #276]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4af8:	484a      	ldr	r0, [pc, #296]	; (4c24 <z_impl_k_mutex_lock+0x1fc>)
    4afa:	f002 fa1b 	bl	6f34 <printk>
    4afe:	4844      	ldr	r0, [pc, #272]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4b00:	21ac      	movs	r1, #172	; 0xac
    4b02:	f002 f943 	bl	6d8c <assert_post_action>
    4b06:	f388 8811 	msr	BASEPRI, r8
    4b0a:	f3bf 8f6f 	isb	sy
		return 0;
    4b0e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4b10:	b002      	add	sp, #8
    4b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4b16:	6921      	ldr	r1, [r4, #16]
    4b18:	e7de      	b.n	4ad8 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4b1a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4b1e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4b22:	4299      	cmp	r1, r3
    4b24:	bfa8      	it	ge
    4b26:	4619      	movge	r1, r3
    4b28:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4b2c:	4291      	cmp	r1, r2
    4b2e:	bfb8      	it	lt
    4b30:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4b32:	428b      	cmp	r3, r1
    4b34:	dd44      	ble.n	4bc0 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    4b36:	f000 fdf1 	bl	571c <z_set_prio>
    4b3a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4b3c:	e9cd 6700 	strd	r6, r7, [sp]
    4b40:	4832      	ldr	r0, [pc, #200]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4b42:	4622      	mov	r2, r4
    4b44:	4641      	mov	r1, r8
    4b46:	f000 fdb9 	bl	56bc <z_pend_curr>
	if (got_mutex == 0) {
    4b4a:	2800      	cmp	r0, #0
    4b4c:	d0e0      	beq.n	4b10 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    4b4e:	f04f 0320 	mov.w	r3, #32
    4b52:	f3ef 8611 	mrs	r6, BASEPRI
    4b56:	f383 8812 	msr	BASEPRI_MAX, r3
    4b5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b5e:	482b      	ldr	r0, [pc, #172]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4b60:	f001 fbba 	bl	62d8 <z_spin_lock_valid>
    4b64:	b968      	cbnz	r0, 4b82 <z_impl_k_mutex_lock+0x15a>
    4b66:	4a2a      	ldr	r2, [pc, #168]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4b68:	492a      	ldr	r1, [pc, #168]	; (4c14 <z_impl_k_mutex_lock+0x1ec>)
    4b6a:	4826      	ldr	r0, [pc, #152]	; (4c04 <z_impl_k_mutex_lock+0x1dc>)
    4b6c:	2381      	movs	r3, #129	; 0x81
    4b6e:	f002 f9e1 	bl	6f34 <printk>
    4b72:	4926      	ldr	r1, [pc, #152]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4b74:	4828      	ldr	r0, [pc, #160]	; (4c18 <z_impl_k_mutex_lock+0x1f0>)
    4b76:	f002 f9dd 	bl	6f34 <printk>
    4b7a:	4825      	ldr	r0, [pc, #148]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4b7c:	2181      	movs	r1, #129	; 0x81
    4b7e:	f002 f905 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    4b82:	4822      	ldr	r0, [pc, #136]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4b84:	f001 fbc6 	bl	6314 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4b88:	6823      	ldr	r3, [r4, #0]
    4b8a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b8c:	429c      	cmp	r4, r3
    4b8e:	d00a      	beq.n	4ba6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4b90:	b14b      	cbz	r3, 4ba6 <z_impl_k_mutex_lock+0x17e>
    4b92:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4b96:	4299      	cmp	r1, r3
    4b98:	bfa8      	it	ge
    4b9a:	4619      	movge	r1, r3
    4b9c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4ba0:	4299      	cmp	r1, r3
    4ba2:	bfb8      	it	lt
    4ba4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4ba6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4ba8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4bac:	4299      	cmp	r1, r3
    4bae:	d109      	bne.n	4bc4 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    4bb0:	b16d      	cbz	r5, 4bce <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    4bb2:	4816      	ldr	r0, [pc, #88]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4bb4:	4631      	mov	r1, r6
    4bb6:	f000 f97b 	bl	4eb0 <z_reschedule>
	return -EAGAIN;
    4bba:	f06f 000a 	mvn.w	r0, #10
    4bbe:	e7a7      	b.n	4b10 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    4bc0:	2500      	movs	r5, #0
    4bc2:	e7bb      	b.n	4b3c <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    4bc4:	f000 fdaa 	bl	571c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4bc8:	2800      	cmp	r0, #0
    4bca:	d1f2      	bne.n	4bb2 <z_impl_k_mutex_lock+0x18a>
    4bcc:	e7f0      	b.n	4bb0 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bce:	480f      	ldr	r0, [pc, #60]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4bd0:	f001 fb90 	bl	62f4 <z_spin_unlock_valid>
    4bd4:	b968      	cbnz	r0, 4bf2 <z_impl_k_mutex_lock+0x1ca>
    4bd6:	4a0e      	ldr	r2, [pc, #56]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4bd8:	4911      	ldr	r1, [pc, #68]	; (4c20 <z_impl_k_mutex_lock+0x1f8>)
    4bda:	480a      	ldr	r0, [pc, #40]	; (4c04 <z_impl_k_mutex_lock+0x1dc>)
    4bdc:	23ac      	movs	r3, #172	; 0xac
    4bde:	f002 f9a9 	bl	6f34 <printk>
    4be2:	490a      	ldr	r1, [pc, #40]	; (4c0c <z_impl_k_mutex_lock+0x1e4>)
    4be4:	480f      	ldr	r0, [pc, #60]	; (4c24 <z_impl_k_mutex_lock+0x1fc>)
    4be6:	f002 f9a5 	bl	6f34 <printk>
    4bea:	4809      	ldr	r0, [pc, #36]	; (4c10 <z_impl_k_mutex_lock+0x1e8>)
    4bec:	21ac      	movs	r1, #172	; 0xac
    4bee:	f002 f8cd 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4bf2:	f386 8811 	msr	BASEPRI, r6
    4bf6:	f3bf 8f6f 	isb	sy
    4bfa:	e7de      	b.n	4bba <z_impl_k_mutex_lock+0x192>
    4bfc:	0000864f 	.word	0x0000864f
    4c00:	0000862d 	.word	0x0000862d
    4c04:	000079ac 	.word	0x000079ac
    4c08:	00008661 	.word	0x00008661
    4c0c:	20000a18 	.word	0x20000a18
    4c10:	00007e87 	.word	0x00007e87
    4c14:	00007ed9 	.word	0x00007ed9
    4c18:	00007eee 	.word	0x00007eee
    4c1c:	200009f0 	.word	0x200009f0
    4c20:	00007ead 	.word	0x00007ead
    4c24:	00007ec4 	.word	0x00007ec4

00004c28 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4c28:	b538      	push	{r3, r4, r5, lr}
    4c2a:	4604      	mov	r4, r0
    4c2c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4c30:	b163      	cbz	r3, 4c4c <z_impl_k_mutex_unlock+0x24>
    4c32:	4952      	ldr	r1, [pc, #328]	; (4d7c <z_impl_k_mutex_unlock+0x154>)
    4c34:	4a52      	ldr	r2, [pc, #328]	; (4d80 <z_impl_k_mutex_unlock+0x158>)
    4c36:	4853      	ldr	r0, [pc, #332]	; (4d84 <z_impl_k_mutex_unlock+0x15c>)
    4c38:	23c7      	movs	r3, #199	; 0xc7
    4c3a:	f002 f97b 	bl	6f34 <printk>
    4c3e:	4852      	ldr	r0, [pc, #328]	; (4d88 <z_impl_k_mutex_unlock+0x160>)
    4c40:	f002 f978 	bl	6f34 <printk>
    4c44:	484e      	ldr	r0, [pc, #312]	; (4d80 <z_impl_k_mutex_unlock+0x158>)
    4c46:	21c7      	movs	r1, #199	; 0xc7
    4c48:	f002 f8a0 	bl	6d8c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4c4c:	68a3      	ldr	r3, [r4, #8]
    4c4e:	2b00      	cmp	r3, #0
    4c50:	f000 808d 	beq.w	4d6e <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4c54:	4d4d      	ldr	r5, [pc, #308]	; (4d8c <z_impl_k_mutex_unlock+0x164>)
    4c56:	68aa      	ldr	r2, [r5, #8]
    4c58:	4293      	cmp	r3, r2
    4c5a:	f040 808b 	bne.w	4d74 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    4c5e:	68e3      	ldr	r3, [r4, #12]
    4c60:	b94b      	cbnz	r3, 4c76 <z_impl_k_mutex_unlock+0x4e>
    4c62:	494b      	ldr	r1, [pc, #300]	; (4d90 <z_impl_k_mutex_unlock+0x168>)
    4c64:	4847      	ldr	r0, [pc, #284]	; (4d84 <z_impl_k_mutex_unlock+0x15c>)
    4c66:	4a46      	ldr	r2, [pc, #280]	; (4d80 <z_impl_k_mutex_unlock+0x158>)
    4c68:	23df      	movs	r3, #223	; 0xdf
    4c6a:	f002 f963 	bl	6f34 <printk>
    4c6e:	4844      	ldr	r0, [pc, #272]	; (4d80 <z_impl_k_mutex_unlock+0x158>)
    4c70:	21df      	movs	r1, #223	; 0xdf
    4c72:	f002 f88b 	bl	6d8c <assert_post_action>
    4c76:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    4c7a:	b163      	cbz	r3, 4c96 <z_impl_k_mutex_unlock+0x6e>
    4c7c:	493f      	ldr	r1, [pc, #252]	; (4d7c <z_impl_k_mutex_unlock+0x154>)
    4c7e:	4a45      	ldr	r2, [pc, #276]	; (4d94 <z_impl_k_mutex_unlock+0x16c>)
    4c80:	4840      	ldr	r0, [pc, #256]	; (4d84 <z_impl_k_mutex_unlock+0x15c>)
    4c82:	23fd      	movs	r3, #253	; 0xfd
    4c84:	f002 f956 	bl	6f34 <printk>
    4c88:	4843      	ldr	r0, [pc, #268]	; (4d98 <z_impl_k_mutex_unlock+0x170>)
    4c8a:	f002 f953 	bl	6f34 <printk>
    4c8e:	4841      	ldr	r0, [pc, #260]	; (4d94 <z_impl_k_mutex_unlock+0x16c>)
    4c90:	21fd      	movs	r1, #253	; 0xfd
    4c92:	f002 f87b 	bl	6d8c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4c96:	68ab      	ldr	r3, [r5, #8]
    4c98:	7bdb      	ldrb	r3, [r3, #15]
    4c9a:	2b01      	cmp	r3, #1
    4c9c:	d10c      	bne.n	4cb8 <z_impl_k_mutex_unlock+0x90>
    4c9e:	493f      	ldr	r1, [pc, #252]	; (4d9c <z_impl_k_mutex_unlock+0x174>)
    4ca0:	4a3c      	ldr	r2, [pc, #240]	; (4d94 <z_impl_k_mutex_unlock+0x16c>)
    4ca2:	4838      	ldr	r0, [pc, #224]	; (4d84 <z_impl_k_mutex_unlock+0x15c>)
    4ca4:	23fe      	movs	r3, #254	; 0xfe
    4ca6:	f002 f945 	bl	6f34 <printk>
    4caa:	483b      	ldr	r0, [pc, #236]	; (4d98 <z_impl_k_mutex_unlock+0x170>)
    4cac:	f002 f942 	bl	6f34 <printk>
    4cb0:	4838      	ldr	r0, [pc, #224]	; (4d94 <z_impl_k_mutex_unlock+0x16c>)
    4cb2:	21fe      	movs	r1, #254	; 0xfe
    4cb4:	f002 f86a 	bl	6d8c <assert_post_action>

	--_current->base.sched_locked;
    4cb8:	68aa      	ldr	r2, [r5, #8]
    4cba:	7bd3      	ldrb	r3, [r2, #15]
    4cbc:	3b01      	subs	r3, #1
    4cbe:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4cc0:	68e3      	ldr	r3, [r4, #12]
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	d905      	bls.n	4cd2 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    4cc6:	3b01      	subs	r3, #1
    4cc8:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4cca:	f000 fe2d 	bl	5928 <k_sched_unlock>

	return 0;
    4cce:	2000      	movs	r0, #0
}
    4cd0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4cd2:	f04f 0320 	mov.w	r3, #32
    4cd6:	f3ef 8511 	mrs	r5, BASEPRI
    4cda:	f383 8812 	msr	BASEPRI_MAX, r3
    4cde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ce2:	482f      	ldr	r0, [pc, #188]	; (4da0 <z_impl_k_mutex_unlock+0x178>)
    4ce4:	f001 faf8 	bl	62d8 <z_spin_lock_valid>
    4ce8:	b968      	cbnz	r0, 4d06 <z_impl_k_mutex_unlock+0xde>
    4cea:	4a2e      	ldr	r2, [pc, #184]	; (4da4 <z_impl_k_mutex_unlock+0x17c>)
    4cec:	492e      	ldr	r1, [pc, #184]	; (4da8 <z_impl_k_mutex_unlock+0x180>)
    4cee:	4825      	ldr	r0, [pc, #148]	; (4d84 <z_impl_k_mutex_unlock+0x15c>)
    4cf0:	2381      	movs	r3, #129	; 0x81
    4cf2:	f002 f91f 	bl	6f34 <printk>
    4cf6:	492a      	ldr	r1, [pc, #168]	; (4da0 <z_impl_k_mutex_unlock+0x178>)
    4cf8:	482c      	ldr	r0, [pc, #176]	; (4dac <z_impl_k_mutex_unlock+0x184>)
    4cfa:	f002 f91b 	bl	6f34 <printk>
    4cfe:	4829      	ldr	r0, [pc, #164]	; (4da4 <z_impl_k_mutex_unlock+0x17c>)
    4d00:	2181      	movs	r1, #129	; 0x81
    4d02:	f002 f843 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    4d06:	4826      	ldr	r0, [pc, #152]	; (4da0 <z_impl_k_mutex_unlock+0x178>)
    4d08:	f001 fb04 	bl	6314 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4d0c:	68a0      	ldr	r0, [r4, #8]
    4d0e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    4d10:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4d14:	4299      	cmp	r1, r3
    4d16:	d001      	beq.n	4d1c <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    4d18:	f000 fd00 	bl	571c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4d1c:	4620      	mov	r0, r4
    4d1e:	f000 fe7f 	bl	5a20 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4d22:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4d24:	b158      	cbz	r0, 4d3e <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    4d26:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4d2a:	6122      	str	r2, [r4, #16]
    4d2c:	2200      	movs	r2, #0
    4d2e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4d30:	f000 fb12 	bl	5358 <z_ready_thread>
		z_reschedule(&lock, key);
    4d34:	481a      	ldr	r0, [pc, #104]	; (4da0 <z_impl_k_mutex_unlock+0x178>)
    4d36:	4629      	mov	r1, r5
    4d38:	f000 f8ba 	bl	4eb0 <z_reschedule>
    4d3c:	e7c5      	b.n	4cca <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    4d3e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d40:	4817      	ldr	r0, [pc, #92]	; (4da0 <z_impl_k_mutex_unlock+0x178>)
    4d42:	f001 fad7 	bl	62f4 <z_spin_unlock_valid>
    4d46:	b968      	cbnz	r0, 4d64 <z_impl_k_mutex_unlock+0x13c>
    4d48:	4a16      	ldr	r2, [pc, #88]	; (4da4 <z_impl_k_mutex_unlock+0x17c>)
    4d4a:	4919      	ldr	r1, [pc, #100]	; (4db0 <z_impl_k_mutex_unlock+0x188>)
    4d4c:	480d      	ldr	r0, [pc, #52]	; (4d84 <z_impl_k_mutex_unlock+0x15c>)
    4d4e:	23ac      	movs	r3, #172	; 0xac
    4d50:	f002 f8f0 	bl	6f34 <printk>
    4d54:	4912      	ldr	r1, [pc, #72]	; (4da0 <z_impl_k_mutex_unlock+0x178>)
    4d56:	4817      	ldr	r0, [pc, #92]	; (4db4 <z_impl_k_mutex_unlock+0x18c>)
    4d58:	f002 f8ec 	bl	6f34 <printk>
    4d5c:	4811      	ldr	r0, [pc, #68]	; (4da4 <z_impl_k_mutex_unlock+0x17c>)
    4d5e:	21ac      	movs	r1, #172	; 0xac
    4d60:	f002 f814 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4d64:	f385 8811 	msr	BASEPRI, r5
    4d68:	f3bf 8f6f 	isb	sy
    4d6c:	e7ad      	b.n	4cca <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    4d6e:	f06f 0015 	mvn.w	r0, #21
    4d72:	e7ad      	b.n	4cd0 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    4d74:	f04f 30ff 	mov.w	r0, #4294967295
    4d78:	e7aa      	b.n	4cd0 <z_impl_k_mutex_unlock+0xa8>
    4d7a:	bf00      	nop
    4d7c:	0000864f 	.word	0x0000864f
    4d80:	0000862d 	.word	0x0000862d
    4d84:	000079ac 	.word	0x000079ac
    4d88:	00008661 	.word	0x00008661
    4d8c:	200009f0 	.word	0x200009f0
    4d90:	00008686 	.word	0x00008686
    4d94:	0000869d 	.word	0x0000869d
    4d98:	000086c8 	.word	0x000086c8
    4d9c:	000086cb 	.word	0x000086cb
    4da0:	20000a18 	.word	0x20000a18
    4da4:	00007e87 	.word	0x00007e87
    4da8:	00007ed9 	.word	0x00007ed9
    4dac:	00007eee 	.word	0x00007eee
    4db0:	00007ead 	.word	0x00007ead
    4db4:	00007ec4 	.word	0x00007ec4

00004db8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4db8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4dba:	4c08      	ldr	r4, [pc, #32]	; (4ddc <z_reset_time_slice+0x24>)
    4dbc:	6823      	ldr	r3, [r4, #0]
    4dbe:	b15b      	cbz	r3, 4dd8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4dc0:	f7fe fce2 	bl	3788 <sys_clock_elapsed>
    4dc4:	4603      	mov	r3, r0
    4dc6:	6820      	ldr	r0, [r4, #0]
    4dc8:	4a05      	ldr	r2, [pc, #20]	; (4de0 <z_reset_time_slice+0x28>)
    4dca:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    4dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4dd0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4dd2:	2100      	movs	r1, #0
    4dd4:	f001 bc60 	b.w	6698 <z_set_timeout_expiry>
}
    4dd8:	bd10      	pop	{r4, pc}
    4dda:	bf00      	nop
    4ddc:	20000a28 	.word	0x20000a28
    4de0:	200009f0 	.word	0x200009f0

00004de4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4de6:	4604      	mov	r4, r0
    4de8:	460d      	mov	r5, r1
	__asm__ volatile(
    4dea:	f04f 0320 	mov.w	r3, #32
    4dee:	f3ef 8611 	mrs	r6, BASEPRI
    4df2:	f383 8812 	msr	BASEPRI_MAX, r3
    4df6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4dfa:	4823      	ldr	r0, [pc, #140]	; (4e88 <k_sched_time_slice_set+0xa4>)
    4dfc:	f001 fa6c 	bl	62d8 <z_spin_lock_valid>
    4e00:	b968      	cbnz	r0, 4e1e <k_sched_time_slice_set+0x3a>
    4e02:	4a22      	ldr	r2, [pc, #136]	; (4e8c <k_sched_time_slice_set+0xa8>)
    4e04:	4922      	ldr	r1, [pc, #136]	; (4e90 <k_sched_time_slice_set+0xac>)
    4e06:	4823      	ldr	r0, [pc, #140]	; (4e94 <k_sched_time_slice_set+0xb0>)
    4e08:	2381      	movs	r3, #129	; 0x81
    4e0a:	f002 f893 	bl	6f34 <printk>
    4e0e:	491e      	ldr	r1, [pc, #120]	; (4e88 <k_sched_time_slice_set+0xa4>)
    4e10:	4821      	ldr	r0, [pc, #132]	; (4e98 <k_sched_time_slice_set+0xb4>)
    4e12:	f002 f88f 	bl	6f34 <printk>
    4e16:	481d      	ldr	r0, [pc, #116]	; (4e8c <k_sched_time_slice_set+0xa8>)
    4e18:	2181      	movs	r1, #129	; 0x81
    4e1a:	f001 ffb7 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    4e1e:	481a      	ldr	r0, [pc, #104]	; (4e88 <k_sched_time_slice_set+0xa4>)
    4e20:	f001 fa78 	bl	6314 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4e24:	4b1d      	ldr	r3, [pc, #116]	; (4e9c <k_sched_time_slice_set+0xb8>)
    4e26:	2200      	movs	r2, #0
    4e28:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4e2c:	f240 30e7 	movw	r0, #999	; 0x3e7
    4e30:	2100      	movs	r1, #0
    4e32:	611a      	str	r2, [r3, #16]
    4e34:	fbe7 0104 	umlal	r0, r1, r7, r4
    4e38:	2300      	movs	r3, #0
    4e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e3e:	f7fb f95f 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4e42:	2c00      	cmp	r4, #0
    4e44:	4b16      	ldr	r3, [pc, #88]	; (4ea0 <k_sched_time_slice_set+0xbc>)
    4e46:	dc1b      	bgt.n	4e80 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4e48:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4e4a:	4b16      	ldr	r3, [pc, #88]	; (4ea4 <k_sched_time_slice_set+0xc0>)
    4e4c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4e4e:	f7ff ffb3 	bl	4db8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e52:	480d      	ldr	r0, [pc, #52]	; (4e88 <k_sched_time_slice_set+0xa4>)
    4e54:	f001 fa4e 	bl	62f4 <z_spin_unlock_valid>
    4e58:	b968      	cbnz	r0, 4e76 <k_sched_time_slice_set+0x92>
    4e5a:	4a0c      	ldr	r2, [pc, #48]	; (4e8c <k_sched_time_slice_set+0xa8>)
    4e5c:	4912      	ldr	r1, [pc, #72]	; (4ea8 <k_sched_time_slice_set+0xc4>)
    4e5e:	480d      	ldr	r0, [pc, #52]	; (4e94 <k_sched_time_slice_set+0xb0>)
    4e60:	23ac      	movs	r3, #172	; 0xac
    4e62:	f002 f867 	bl	6f34 <printk>
    4e66:	4908      	ldr	r1, [pc, #32]	; (4e88 <k_sched_time_slice_set+0xa4>)
    4e68:	4810      	ldr	r0, [pc, #64]	; (4eac <k_sched_time_slice_set+0xc8>)
    4e6a:	f002 f863 	bl	6f34 <printk>
    4e6e:	4807      	ldr	r0, [pc, #28]	; (4e8c <k_sched_time_slice_set+0xa8>)
    4e70:	21ac      	movs	r1, #172	; 0xac
    4e72:	f001 ff8b 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4e76:	f386 8811 	msr	BASEPRI, r6
    4e7a:	f3bf 8f6f 	isb	sy
	}
}
    4e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4e80:	2802      	cmp	r0, #2
    4e82:	bfb8      	it	lt
    4e84:	2002      	movlt	r0, #2
    4e86:	e7df      	b.n	4e48 <k_sched_time_slice_set+0x64>
    4e88:	20000a20 	.word	0x20000a20
    4e8c:	00007e87 	.word	0x00007e87
    4e90:	00007ed9 	.word	0x00007ed9
    4e94:	000079ac 	.word	0x000079ac
    4e98:	00007eee 	.word	0x00007eee
    4e9c:	200009f0 	.word	0x200009f0
    4ea0:	20000a28 	.word	0x20000a28
    4ea4:	20000a24 	.word	0x20000a24
    4ea8:	00007ead 	.word	0x00007ead
    4eac:	00007ec4 	.word	0x00007ec4

00004eb0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4eb0:	b538      	push	{r3, r4, r5, lr}
    4eb2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4eb4:	460d      	mov	r5, r1
    4eb6:	b9e9      	cbnz	r1, 4ef4 <z_reschedule+0x44>
    4eb8:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    4ebc:	b9d3      	cbnz	r3, 4ef4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    4ebe:	4b19      	ldr	r3, [pc, #100]	; (4f24 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    4ec0:	69da      	ldr	r2, [r3, #28]
    4ec2:	689b      	ldr	r3, [r3, #8]
    4ec4:	429a      	cmp	r2, r3
    4ec6:	d015      	beq.n	4ef4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ec8:	f001 fa14 	bl	62f4 <z_spin_unlock_valid>
    4ecc:	b968      	cbnz	r0, 4eea <z_reschedule+0x3a>
    4ece:	4a16      	ldr	r2, [pc, #88]	; (4f28 <z_reschedule+0x78>)
    4ed0:	4916      	ldr	r1, [pc, #88]	; (4f2c <z_reschedule+0x7c>)
    4ed2:	4817      	ldr	r0, [pc, #92]	; (4f30 <z_reschedule+0x80>)
    4ed4:	23c3      	movs	r3, #195	; 0xc3
    4ed6:	f002 f82d 	bl	6f34 <printk>
    4eda:	4816      	ldr	r0, [pc, #88]	; (4f34 <z_reschedule+0x84>)
    4edc:	4621      	mov	r1, r4
    4ede:	f002 f829 	bl	6f34 <printk>
    4ee2:	4811      	ldr	r0, [pc, #68]	; (4f28 <z_reschedule+0x78>)
    4ee4:	21c3      	movs	r1, #195	; 0xc3
    4ee6:	f001 ff51 	bl	6d8c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    4eee:	2000      	movs	r0, #0
    4ef0:	f7fc bfc0 	b.w	1e74 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ef4:	4620      	mov	r0, r4
    4ef6:	f001 f9fd 	bl	62f4 <z_spin_unlock_valid>
    4efa:	b968      	cbnz	r0, 4f18 <z_reschedule+0x68>
    4efc:	4a0a      	ldr	r2, [pc, #40]	; (4f28 <z_reschedule+0x78>)
    4efe:	490b      	ldr	r1, [pc, #44]	; (4f2c <z_reschedule+0x7c>)
    4f00:	480b      	ldr	r0, [pc, #44]	; (4f30 <z_reschedule+0x80>)
    4f02:	23ac      	movs	r3, #172	; 0xac
    4f04:	f002 f816 	bl	6f34 <printk>
    4f08:	480a      	ldr	r0, [pc, #40]	; (4f34 <z_reschedule+0x84>)
    4f0a:	4621      	mov	r1, r4
    4f0c:	f002 f812 	bl	6f34 <printk>
    4f10:	4805      	ldr	r0, [pc, #20]	; (4f28 <z_reschedule+0x78>)
    4f12:	21ac      	movs	r1, #172	; 0xac
    4f14:	f001 ff3a 	bl	6d8c <assert_post_action>
    4f18:	f385 8811 	msr	BASEPRI, r5
    4f1c:	f3bf 8f6f 	isb	sy
    4f20:	bd38      	pop	{r3, r4, r5, pc}
    4f22:	bf00      	nop
    4f24:	200009f0 	.word	0x200009f0
    4f28:	00007e87 	.word	0x00007e87
    4f2c:	00007ead 	.word	0x00007ead
    4f30:	000079ac 	.word	0x000079ac
    4f34:	00007ec4 	.word	0x00007ec4

00004f38 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4f38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4f3a:	f04f 0320 	mov.w	r3, #32
    4f3e:	f3ef 8511 	mrs	r5, BASEPRI
    4f42:	f383 8812 	msr	BASEPRI_MAX, r3
    4f46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f4a:	4829      	ldr	r0, [pc, #164]	; (4ff0 <k_sched_lock+0xb8>)
    4f4c:	f001 f9c4 	bl	62d8 <z_spin_lock_valid>
    4f50:	b968      	cbnz	r0, 4f6e <k_sched_lock+0x36>
    4f52:	4a28      	ldr	r2, [pc, #160]	; (4ff4 <k_sched_lock+0xbc>)
    4f54:	4928      	ldr	r1, [pc, #160]	; (4ff8 <k_sched_lock+0xc0>)
    4f56:	4829      	ldr	r0, [pc, #164]	; (4ffc <k_sched_lock+0xc4>)
    4f58:	2381      	movs	r3, #129	; 0x81
    4f5a:	f001 ffeb 	bl	6f34 <printk>
    4f5e:	4924      	ldr	r1, [pc, #144]	; (4ff0 <k_sched_lock+0xb8>)
    4f60:	4827      	ldr	r0, [pc, #156]	; (5000 <k_sched_lock+0xc8>)
    4f62:	f001 ffe7 	bl	6f34 <printk>
    4f66:	4823      	ldr	r0, [pc, #140]	; (4ff4 <k_sched_lock+0xbc>)
    4f68:	2181      	movs	r1, #129	; 0x81
    4f6a:	f001 ff0f 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    4f6e:	4820      	ldr	r0, [pc, #128]	; (4ff0 <k_sched_lock+0xb8>)
    4f70:	f001 f9d0 	bl	6314 <z_spin_lock_set_owner>
    4f74:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4f78:	b163      	cbz	r3, 4f94 <k_sched_lock+0x5c>
    4f7a:	4922      	ldr	r1, [pc, #136]	; (5004 <k_sched_lock+0xcc>)
    4f7c:	4a22      	ldr	r2, [pc, #136]	; (5008 <k_sched_lock+0xd0>)
    4f7e:	481f      	ldr	r0, [pc, #124]	; (4ffc <k_sched_lock+0xc4>)
    4f80:	23fd      	movs	r3, #253	; 0xfd
    4f82:	f001 ffd7 	bl	6f34 <printk>
    4f86:	4821      	ldr	r0, [pc, #132]	; (500c <k_sched_lock+0xd4>)
    4f88:	f001 ffd4 	bl	6f34 <printk>
    4f8c:	481e      	ldr	r0, [pc, #120]	; (5008 <k_sched_lock+0xd0>)
    4f8e:	21fd      	movs	r1, #253	; 0xfd
    4f90:	f001 fefc 	bl	6d8c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4f94:	4c1e      	ldr	r4, [pc, #120]	; (5010 <k_sched_lock+0xd8>)
    4f96:	68a2      	ldr	r2, [r4, #8]
    4f98:	7bd2      	ldrb	r2, [r2, #15]
    4f9a:	2a01      	cmp	r2, #1
    4f9c:	d10c      	bne.n	4fb8 <k_sched_lock+0x80>
    4f9e:	491d      	ldr	r1, [pc, #116]	; (5014 <k_sched_lock+0xdc>)
    4fa0:	4a19      	ldr	r2, [pc, #100]	; (5008 <k_sched_lock+0xd0>)
    4fa2:	4816      	ldr	r0, [pc, #88]	; (4ffc <k_sched_lock+0xc4>)
    4fa4:	23fe      	movs	r3, #254	; 0xfe
    4fa6:	f001 ffc5 	bl	6f34 <printk>
    4faa:	4818      	ldr	r0, [pc, #96]	; (500c <k_sched_lock+0xd4>)
    4fac:	f001 ffc2 	bl	6f34 <printk>
    4fb0:	4815      	ldr	r0, [pc, #84]	; (5008 <k_sched_lock+0xd0>)
    4fb2:	21fe      	movs	r1, #254	; 0xfe
    4fb4:	f001 feea 	bl	6d8c <assert_post_action>
	--_current->base.sched_locked;
    4fb8:	68a2      	ldr	r2, [r4, #8]
    4fba:	7bd3      	ldrb	r3, [r2, #15]
    4fbc:	3b01      	subs	r3, #1
    4fbe:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fc0:	480b      	ldr	r0, [pc, #44]	; (4ff0 <k_sched_lock+0xb8>)
    4fc2:	f001 f997 	bl	62f4 <z_spin_unlock_valid>
    4fc6:	b968      	cbnz	r0, 4fe4 <k_sched_lock+0xac>
    4fc8:	4a0a      	ldr	r2, [pc, #40]	; (4ff4 <k_sched_lock+0xbc>)
    4fca:	4913      	ldr	r1, [pc, #76]	; (5018 <k_sched_lock+0xe0>)
    4fcc:	480b      	ldr	r0, [pc, #44]	; (4ffc <k_sched_lock+0xc4>)
    4fce:	23ac      	movs	r3, #172	; 0xac
    4fd0:	f001 ffb0 	bl	6f34 <printk>
    4fd4:	4906      	ldr	r1, [pc, #24]	; (4ff0 <k_sched_lock+0xb8>)
    4fd6:	4811      	ldr	r0, [pc, #68]	; (501c <k_sched_lock+0xe4>)
    4fd8:	f001 ffac 	bl	6f34 <printk>
    4fdc:	4805      	ldr	r0, [pc, #20]	; (4ff4 <k_sched_lock+0xbc>)
    4fde:	21ac      	movs	r1, #172	; 0xac
    4fe0:	f001 fed4 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    4fe4:	f385 8811 	msr	BASEPRI, r5
    4fe8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4fec:	bd38      	pop	{r3, r4, r5, pc}
    4fee:	bf00      	nop
    4ff0:	20000a20 	.word	0x20000a20
    4ff4:	00007e87 	.word	0x00007e87
    4ff8:	00007ed9 	.word	0x00007ed9
    4ffc:	000079ac 	.word	0x000079ac
    5000:	00007eee 	.word	0x00007eee
    5004:	0000864f 	.word	0x0000864f
    5008:	0000869d 	.word	0x0000869d
    500c:	000086c8 	.word	0x000086c8
    5010:	200009f0 	.word	0x200009f0
    5014:	000086cb 	.word	0x000086cb
    5018:	00007ead 	.word	0x00007ead
    501c:	00007ec4 	.word	0x00007ec4

00005020 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5020:	4b0c      	ldr	r3, [pc, #48]	; (5054 <z_priq_dumb_remove+0x34>)
    5022:	4299      	cmp	r1, r3
{
    5024:	b510      	push	{r4, lr}
    5026:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5028:	d10b      	bne.n	5042 <z_priq_dumb_remove+0x22>
    502a:	490b      	ldr	r1, [pc, #44]	; (5058 <z_priq_dumb_remove+0x38>)
    502c:	480b      	ldr	r0, [pc, #44]	; (505c <z_priq_dumb_remove+0x3c>)
    502e:	4a0c      	ldr	r2, [pc, #48]	; (5060 <z_priq_dumb_remove+0x40>)
    5030:	f240 33e7 	movw	r3, #999	; 0x3e7
    5034:	f001 ff7e 	bl	6f34 <printk>
    5038:	4809      	ldr	r0, [pc, #36]	; (5060 <z_priq_dumb_remove+0x40>)
    503a:	f240 31e7 	movw	r1, #999	; 0x3e7
    503e:	f001 fea5 	bl	6d8c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5042:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    5046:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5048:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    504a:	2300      	movs	r3, #0
	node->prev = NULL;
    504c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5050:	bd10      	pop	{r4, pc}
    5052:	bf00      	nop
    5054:	200001c8 	.word	0x200001c8
    5058:	0000871e 	.word	0x0000871e
    505c:	000079ac 	.word	0x000079ac
    5060:	000086fc 	.word	0x000086fc

00005064 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5064:	6883      	ldr	r3, [r0, #8]
{
    5066:	b510      	push	{r4, lr}
    5068:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    506a:	b95b      	cbnz	r3, 5084 <unpend_thread_no_timeout+0x20>
    506c:	490b      	ldr	r1, [pc, #44]	; (509c <unpend_thread_no_timeout+0x38>)
    506e:	480c      	ldr	r0, [pc, #48]	; (50a0 <unpend_thread_no_timeout+0x3c>)
    5070:	4a0c      	ldr	r2, [pc, #48]	; (50a4 <unpend_thread_no_timeout+0x40>)
    5072:	f240 2383 	movw	r3, #643	; 0x283
    5076:	f001 ff5d 	bl	6f34 <printk>
    507a:	480a      	ldr	r0, [pc, #40]	; (50a4 <unpend_thread_no_timeout+0x40>)
    507c:	f240 2183 	movw	r1, #643	; 0x283
    5080:	f001 fe84 	bl	6d8c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5084:	68a0      	ldr	r0, [r4, #8]
    5086:	4621      	mov	r1, r4
    5088:	f7ff ffca 	bl	5020 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    508c:	7b63      	ldrb	r3, [r4, #13]
    508e:	f023 0302 	bic.w	r3, r3, #2
    5092:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5094:	2300      	movs	r3, #0
    5096:	60a3      	str	r3, [r4, #8]
}
    5098:	bd10      	pop	{r4, pc}
    509a:	bf00      	nop
    509c:	0000873f 	.word	0x0000873f
    50a0:	000079ac 	.word	0x000079ac
    50a4:	000086fc 	.word	0x000086fc

000050a8 <update_cache>:
{
    50a8:	b538      	push	{r3, r4, r5, lr}
    50aa:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    50ac:	4814      	ldr	r0, [pc, #80]	; (5100 <update_cache+0x58>)
    50ae:	4d15      	ldr	r5, [pc, #84]	; (5104 <update_cache+0x5c>)
    50b0:	f002 f9af 	bl	7412 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    50b4:	4604      	mov	r4, r0
    50b6:	b900      	cbnz	r0, 50ba <update_cache+0x12>
    50b8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    50ba:	b9ca      	cbnz	r2, 50f0 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    50bc:	68ab      	ldr	r3, [r5, #8]
    50be:	b963      	cbnz	r3, 50da <update_cache+0x32>
    50c0:	4911      	ldr	r1, [pc, #68]	; (5108 <update_cache+0x60>)
    50c2:	4a12      	ldr	r2, [pc, #72]	; (510c <update_cache+0x64>)
    50c4:	4812      	ldr	r0, [pc, #72]	; (5110 <update_cache+0x68>)
    50c6:	2389      	movs	r3, #137	; 0x89
    50c8:	f001 ff34 	bl	6f34 <printk>
    50cc:	4811      	ldr	r0, [pc, #68]	; (5114 <update_cache+0x6c>)
    50ce:	f001 ff31 	bl	6f34 <printk>
    50d2:	480e      	ldr	r0, [pc, #56]	; (510c <update_cache+0x64>)
    50d4:	2189      	movs	r1, #137	; 0x89
    50d6:	f001 fe59 	bl	6d8c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    50da:	68ab      	ldr	r3, [r5, #8]
    50dc:	7b5a      	ldrb	r2, [r3, #13]
    50de:	06d2      	lsls	r2, r2, #27
    50e0:	d106      	bne.n	50f0 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    50e2:	69a2      	ldr	r2, [r4, #24]
    50e4:	b922      	cbnz	r2, 50f0 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    50e6:	89da      	ldrh	r2, [r3, #14]
    50e8:	2a7f      	cmp	r2, #127	; 0x7f
    50ea:	d901      	bls.n	50f0 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    50ec:	61eb      	str	r3, [r5, #28]
}
    50ee:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    50f0:	68ab      	ldr	r3, [r5, #8]
    50f2:	42a3      	cmp	r3, r4
    50f4:	d001      	beq.n	50fa <update_cache+0x52>
			z_reset_time_slice();
    50f6:	f7ff fe5f 	bl	4db8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    50fa:	61ec      	str	r4, [r5, #28]
}
    50fc:	e7f7      	b.n	50ee <update_cache+0x46>
    50fe:	bf00      	nop
    5100:	20000a10 	.word	0x20000a10
    5104:	200009f0 	.word	0x200009f0
    5108:	00008756 	.word	0x00008756
    510c:	000086fc 	.word	0x000086fc
    5110:	000079ac 	.word	0x000079ac
    5114:	000086c8 	.word	0x000086c8

00005118 <move_thread_to_end_of_prio_q>:
{
    5118:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    511a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    511e:	7b43      	ldrb	r3, [r0, #13]
    5120:	2a00      	cmp	r2, #0
{
    5122:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5124:	da06      	bge.n	5134 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    512a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    512c:	4601      	mov	r1, r0
    512e:	481f      	ldr	r0, [pc, #124]	; (51ac <move_thread_to_end_of_prio_q+0x94>)
    5130:	f7ff ff76 	bl	5020 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5134:	7b63      	ldrb	r3, [r4, #13]
    5136:	f063 037f 	orn	r3, r3, #127	; 0x7f
    513a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    513c:	4b1c      	ldr	r3, [pc, #112]	; (51b0 <move_thread_to_end_of_prio_q+0x98>)
    513e:	429c      	cmp	r4, r3
    5140:	d109      	bne.n	5156 <move_thread_to_end_of_prio_q+0x3e>
    5142:	491c      	ldr	r1, [pc, #112]	; (51b4 <move_thread_to_end_of_prio_q+0x9c>)
    5144:	481c      	ldr	r0, [pc, #112]	; (51b8 <move_thread_to_end_of_prio_q+0xa0>)
    5146:	4a1d      	ldr	r2, [pc, #116]	; (51bc <move_thread_to_end_of_prio_q+0xa4>)
    5148:	23ba      	movs	r3, #186	; 0xba
    514a:	f001 fef3 	bl	6f34 <printk>
    514e:	481b      	ldr	r0, [pc, #108]	; (51bc <move_thread_to_end_of_prio_q+0xa4>)
    5150:	21ba      	movs	r1, #186	; 0xba
    5152:	f001 fe1b 	bl	6d8c <assert_post_action>
	return list->head == list;
    5156:	4a1a      	ldr	r2, [pc, #104]	; (51c0 <move_thread_to_end_of_prio_q+0xa8>)
    5158:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    515a:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    515c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5160:	428b      	cmp	r3, r1
    5162:	bf08      	it	eq
    5164:	2300      	moveq	r3, #0
    5166:	2b00      	cmp	r3, #0
    5168:	bf38      	it	cc
    516a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    516c:	b1cb      	cbz	r3, 51a2 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    516e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5172:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5176:	4286      	cmp	r6, r0
    5178:	d00f      	beq.n	519a <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    517a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    517c:	2800      	cmp	r0, #0
    517e:	dd0c      	ble.n	519a <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    5180:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5182:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5186:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5188:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    518a:	6890      	ldr	r0, [r2, #8]
    518c:	1b03      	subs	r3, r0, r4
    518e:	4258      	negs	r0, r3
}
    5190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5194:	4158      	adcs	r0, r3
    5196:	f7ff bf87 	b.w	50a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    519a:	42ab      	cmp	r3, r5
    519c:	d001      	beq.n	51a2 <move_thread_to_end_of_prio_q+0x8a>
    519e:	681b      	ldr	r3, [r3, #0]
    51a0:	e7e4      	b.n	516c <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    51a2:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    51a6:	602c      	str	r4, [r5, #0]
	list->tail = node;
    51a8:	6254      	str	r4, [r2, #36]	; 0x24
}
    51aa:	e7ee      	b.n	518a <move_thread_to_end_of_prio_q+0x72>
    51ac:	20000a10 	.word	0x20000a10
    51b0:	200001c8 	.word	0x200001c8
    51b4:	0000871e 	.word	0x0000871e
    51b8:	000079ac 	.word	0x000079ac
    51bc:	000086fc 	.word	0x000086fc
    51c0:	200009f0 	.word	0x200009f0

000051c4 <z_time_slice>:
{
    51c4:	b570      	push	{r4, r5, r6, lr}
    51c6:	4604      	mov	r4, r0
	__asm__ volatile(
    51c8:	f04f 0320 	mov.w	r3, #32
    51cc:	f3ef 8511 	mrs	r5, BASEPRI
    51d0:	f383 8812 	msr	BASEPRI_MAX, r3
    51d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51d8:	482a      	ldr	r0, [pc, #168]	; (5284 <z_time_slice+0xc0>)
    51da:	f001 f87d 	bl	62d8 <z_spin_lock_valid>
    51de:	b968      	cbnz	r0, 51fc <z_time_slice+0x38>
    51e0:	4a29      	ldr	r2, [pc, #164]	; (5288 <z_time_slice+0xc4>)
    51e2:	492a      	ldr	r1, [pc, #168]	; (528c <z_time_slice+0xc8>)
    51e4:	482a      	ldr	r0, [pc, #168]	; (5290 <z_time_slice+0xcc>)
    51e6:	2381      	movs	r3, #129	; 0x81
    51e8:	f001 fea4 	bl	6f34 <printk>
    51ec:	4925      	ldr	r1, [pc, #148]	; (5284 <z_time_slice+0xc0>)
    51ee:	4829      	ldr	r0, [pc, #164]	; (5294 <z_time_slice+0xd0>)
    51f0:	f001 fea0 	bl	6f34 <printk>
    51f4:	4824      	ldr	r0, [pc, #144]	; (5288 <z_time_slice+0xc4>)
    51f6:	2181      	movs	r1, #129	; 0x81
    51f8:	f001 fdc8 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    51fc:	4821      	ldr	r0, [pc, #132]	; (5284 <z_time_slice+0xc0>)
    51fe:	f001 f889 	bl	6314 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5202:	4b25      	ldr	r3, [pc, #148]	; (5298 <z_time_slice+0xd4>)
    5204:	4a25      	ldr	r2, [pc, #148]	; (529c <z_time_slice+0xd8>)
    5206:	6898      	ldr	r0, [r3, #8]
    5208:	6811      	ldr	r1, [r2, #0]
    520a:	4288      	cmp	r0, r1
    520c:	4619      	mov	r1, r3
    520e:	d118      	bne.n	5242 <z_time_slice+0x7e>
			z_reset_time_slice();
    5210:	f7ff fdd2 	bl	4db8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5214:	481b      	ldr	r0, [pc, #108]	; (5284 <z_time_slice+0xc0>)
    5216:	f001 f86d 	bl	62f4 <z_spin_unlock_valid>
    521a:	b968      	cbnz	r0, 5238 <z_time_slice+0x74>
    521c:	4a1a      	ldr	r2, [pc, #104]	; (5288 <z_time_slice+0xc4>)
    521e:	4920      	ldr	r1, [pc, #128]	; (52a0 <z_time_slice+0xdc>)
    5220:	481b      	ldr	r0, [pc, #108]	; (5290 <z_time_slice+0xcc>)
    5222:	23ac      	movs	r3, #172	; 0xac
    5224:	f001 fe86 	bl	6f34 <printk>
    5228:	4916      	ldr	r1, [pc, #88]	; (5284 <z_time_slice+0xc0>)
    522a:	481e      	ldr	r0, [pc, #120]	; (52a4 <z_time_slice+0xe0>)
    522c:	f001 fe82 	bl	6f34 <printk>
    5230:	4815      	ldr	r0, [pc, #84]	; (5288 <z_time_slice+0xc4>)
    5232:	21ac      	movs	r1, #172	; 0xac
    5234:	f001 fdaa 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    5238:	f385 8811 	msr	BASEPRI, r5
    523c:	f3bf 8f6f 	isb	sy
}
    5240:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5242:	2600      	movs	r6, #0
    5244:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5246:	4a18      	ldr	r2, [pc, #96]	; (52a8 <z_time_slice+0xe4>)
    5248:	6812      	ldr	r2, [r2, #0]
    524a:	b1ba      	cbz	r2, 527c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    524c:	89c2      	ldrh	r2, [r0, #14]
    524e:	2a7f      	cmp	r2, #127	; 0x7f
    5250:	d814      	bhi.n	527c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    5252:	7b42      	ldrb	r2, [r0, #13]
    5254:	06d2      	lsls	r2, r2, #27
    5256:	d111      	bne.n	527c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5258:	4a14      	ldr	r2, [pc, #80]	; (52ac <z_time_slice+0xe8>)
    525a:	f990 600e 	ldrsb.w	r6, [r0, #14]
    525e:	6812      	ldr	r2, [r2, #0]
    5260:	4296      	cmp	r6, r2
    5262:	db0b      	blt.n	527c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5264:	4a12      	ldr	r2, [pc, #72]	; (52b0 <z_time_slice+0xec>)
    5266:	4290      	cmp	r0, r2
    5268:	d008      	beq.n	527c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    526a:	691a      	ldr	r2, [r3, #16]
    526c:	42a2      	cmp	r2, r4
    526e:	dc02      	bgt.n	5276 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    5270:	f7ff ff52 	bl	5118 <move_thread_to_end_of_prio_q>
    5274:	e7cc      	b.n	5210 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    5276:	1b12      	subs	r2, r2, r4
    5278:	611a      	str	r2, [r3, #16]
    527a:	e7cb      	b.n	5214 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    527c:	2300      	movs	r3, #0
    527e:	610b      	str	r3, [r1, #16]
    5280:	e7c8      	b.n	5214 <z_time_slice+0x50>
    5282:	bf00      	nop
    5284:	20000a20 	.word	0x20000a20
    5288:	00007e87 	.word	0x00007e87
    528c:	00007ed9 	.word	0x00007ed9
    5290:	000079ac 	.word	0x000079ac
    5294:	00007eee 	.word	0x00007eee
    5298:	200009f0 	.word	0x200009f0
    529c:	20000a1c 	.word	0x20000a1c
    52a0:	00007ead 	.word	0x00007ead
    52a4:	00007ec4 	.word	0x00007ec4
    52a8:	20000a28 	.word	0x20000a28
    52ac:	20000a24 	.word	0x20000a24
    52b0:	200001c8 	.word	0x200001c8

000052b4 <ready_thread>:
{
    52b4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    52b6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    52ba:	7b43      	ldrb	r3, [r0, #13]
    52bc:	2a00      	cmp	r2, #0
{
    52be:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    52c0:	db3e      	blt.n	5340 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    52c2:	06da      	lsls	r2, r3, #27
    52c4:	d13c      	bne.n	5340 <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    52c6:	6985      	ldr	r5, [r0, #24]
    52c8:	2d00      	cmp	r5, #0
    52ca:	d139      	bne.n	5340 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    52cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    52d0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    52d2:	4b1c      	ldr	r3, [pc, #112]	; (5344 <ready_thread+0x90>)
    52d4:	4298      	cmp	r0, r3
    52d6:	d109      	bne.n	52ec <ready_thread+0x38>
    52d8:	491b      	ldr	r1, [pc, #108]	; (5348 <ready_thread+0x94>)
    52da:	481c      	ldr	r0, [pc, #112]	; (534c <ready_thread+0x98>)
    52dc:	4a1c      	ldr	r2, [pc, #112]	; (5350 <ready_thread+0x9c>)
    52de:	23ba      	movs	r3, #186	; 0xba
    52e0:	f001 fe28 	bl	6f34 <printk>
    52e4:	481a      	ldr	r0, [pc, #104]	; (5350 <ready_thread+0x9c>)
    52e6:	21ba      	movs	r1, #186	; 0xba
    52e8:	f001 fd50 	bl	6d8c <assert_post_action>
	return list->head == list;
    52ec:	4919      	ldr	r1, [pc, #100]	; (5354 <ready_thread+0xa0>)
    52ee:	460b      	mov	r3, r1
    52f0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52f4:	4298      	cmp	r0, r3
    52f6:	bf18      	it	ne
    52f8:	4605      	movne	r5, r0
    52fa:	2d00      	cmp	r5, #0
    52fc:	461a      	mov	r2, r3
    52fe:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5300:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5302:	bf38      	it	cc
    5304:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5306:	b1b3      	cbz	r3, 5336 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    5308:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    530c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5310:	4286      	cmp	r6, r0
    5312:	d00c      	beq.n	532e <ready_thread+0x7a>
		return b2 - b1;
    5314:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5316:	2800      	cmp	r0, #0
    5318:	dd09      	ble.n	532e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    531a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    531c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5320:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5322:	605c      	str	r4, [r3, #4]
}
    5324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5328:	2000      	movs	r0, #0
    532a:	f7ff bebd 	b.w	50a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    532e:	42ab      	cmp	r3, r5
    5330:	d001      	beq.n	5336 <ready_thread+0x82>
    5332:	681b      	ldr	r3, [r3, #0]
    5334:	e7e7      	b.n	5306 <ready_thread+0x52>
	node->prev = tail;
    5336:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    533a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    533c:	624c      	str	r4, [r1, #36]	; 0x24
}
    533e:	e7f1      	b.n	5324 <ready_thread+0x70>
}
    5340:	bd70      	pop	{r4, r5, r6, pc}
    5342:	bf00      	nop
    5344:	200001c8 	.word	0x200001c8
    5348:	0000871e 	.word	0x0000871e
    534c:	000079ac 	.word	0x000079ac
    5350:	000086fc 	.word	0x000086fc
    5354:	200009f0 	.word	0x200009f0

00005358 <z_ready_thread>:
{
    5358:	b538      	push	{r3, r4, r5, lr}
    535a:	4604      	mov	r4, r0
	__asm__ volatile(
    535c:	f04f 0320 	mov.w	r3, #32
    5360:	f3ef 8511 	mrs	r5, BASEPRI
    5364:	f383 8812 	msr	BASEPRI_MAX, r3
    5368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    536c:	4817      	ldr	r0, [pc, #92]	; (53cc <z_ready_thread+0x74>)
    536e:	f000 ffb3 	bl	62d8 <z_spin_lock_valid>
    5372:	b968      	cbnz	r0, 5390 <z_ready_thread+0x38>
    5374:	4a16      	ldr	r2, [pc, #88]	; (53d0 <z_ready_thread+0x78>)
    5376:	4917      	ldr	r1, [pc, #92]	; (53d4 <z_ready_thread+0x7c>)
    5378:	4817      	ldr	r0, [pc, #92]	; (53d8 <z_ready_thread+0x80>)
    537a:	2381      	movs	r3, #129	; 0x81
    537c:	f001 fdda 	bl	6f34 <printk>
    5380:	4912      	ldr	r1, [pc, #72]	; (53cc <z_ready_thread+0x74>)
    5382:	4816      	ldr	r0, [pc, #88]	; (53dc <z_ready_thread+0x84>)
    5384:	f001 fdd6 	bl	6f34 <printk>
    5388:	4811      	ldr	r0, [pc, #68]	; (53d0 <z_ready_thread+0x78>)
    538a:	2181      	movs	r1, #129	; 0x81
    538c:	f001 fcfe 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5390:	480e      	ldr	r0, [pc, #56]	; (53cc <z_ready_thread+0x74>)
    5392:	f000 ffbf 	bl	6314 <z_spin_lock_set_owner>
			ready_thread(thread);
    5396:	4620      	mov	r0, r4
    5398:	f7ff ff8c 	bl	52b4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    539c:	480b      	ldr	r0, [pc, #44]	; (53cc <z_ready_thread+0x74>)
    539e:	f000 ffa9 	bl	62f4 <z_spin_unlock_valid>
    53a2:	b968      	cbnz	r0, 53c0 <z_ready_thread+0x68>
    53a4:	4a0a      	ldr	r2, [pc, #40]	; (53d0 <z_ready_thread+0x78>)
    53a6:	490e      	ldr	r1, [pc, #56]	; (53e0 <z_ready_thread+0x88>)
    53a8:	480b      	ldr	r0, [pc, #44]	; (53d8 <z_ready_thread+0x80>)
    53aa:	23ac      	movs	r3, #172	; 0xac
    53ac:	f001 fdc2 	bl	6f34 <printk>
    53b0:	4906      	ldr	r1, [pc, #24]	; (53cc <z_ready_thread+0x74>)
    53b2:	480c      	ldr	r0, [pc, #48]	; (53e4 <z_ready_thread+0x8c>)
    53b4:	f001 fdbe 	bl	6f34 <printk>
    53b8:	4805      	ldr	r0, [pc, #20]	; (53d0 <z_ready_thread+0x78>)
    53ba:	21ac      	movs	r1, #172	; 0xac
    53bc:	f001 fce6 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    53c0:	f385 8811 	msr	BASEPRI, r5
    53c4:	f3bf 8f6f 	isb	sy
}
    53c8:	bd38      	pop	{r3, r4, r5, pc}
    53ca:	bf00      	nop
    53cc:	20000a20 	.word	0x20000a20
    53d0:	00007e87 	.word	0x00007e87
    53d4:	00007ed9 	.word	0x00007ed9
    53d8:	000079ac 	.word	0x000079ac
    53dc:	00007eee 	.word	0x00007eee
    53e0:	00007ead 	.word	0x00007ead
    53e4:	00007ec4 	.word	0x00007ec4

000053e8 <z_sched_start>:
{
    53e8:	b538      	push	{r3, r4, r5, lr}
    53ea:	4604      	mov	r4, r0
	__asm__ volatile(
    53ec:	f04f 0320 	mov.w	r3, #32
    53f0:	f3ef 8511 	mrs	r5, BASEPRI
    53f4:	f383 8812 	msr	BASEPRI_MAX, r3
    53f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53fc:	481d      	ldr	r0, [pc, #116]	; (5474 <z_sched_start+0x8c>)
    53fe:	f000 ff6b 	bl	62d8 <z_spin_lock_valid>
    5402:	b968      	cbnz	r0, 5420 <z_sched_start+0x38>
    5404:	4a1c      	ldr	r2, [pc, #112]	; (5478 <z_sched_start+0x90>)
    5406:	491d      	ldr	r1, [pc, #116]	; (547c <z_sched_start+0x94>)
    5408:	481d      	ldr	r0, [pc, #116]	; (5480 <z_sched_start+0x98>)
    540a:	2381      	movs	r3, #129	; 0x81
    540c:	f001 fd92 	bl	6f34 <printk>
    5410:	4918      	ldr	r1, [pc, #96]	; (5474 <z_sched_start+0x8c>)
    5412:	481c      	ldr	r0, [pc, #112]	; (5484 <z_sched_start+0x9c>)
    5414:	f001 fd8e 	bl	6f34 <printk>
    5418:	4817      	ldr	r0, [pc, #92]	; (5478 <z_sched_start+0x90>)
    541a:	2181      	movs	r1, #129	; 0x81
    541c:	f001 fcb6 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5420:	4814      	ldr	r0, [pc, #80]	; (5474 <z_sched_start+0x8c>)
    5422:	f000 ff77 	bl	6314 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    5426:	7b63      	ldrb	r3, [r4, #13]
    5428:	075a      	lsls	r2, r3, #29
    542a:	d416      	bmi.n	545a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    542c:	4811      	ldr	r0, [pc, #68]	; (5474 <z_sched_start+0x8c>)
    542e:	f000 ff61 	bl	62f4 <z_spin_unlock_valid>
    5432:	b968      	cbnz	r0, 5450 <z_sched_start+0x68>
    5434:	4a10      	ldr	r2, [pc, #64]	; (5478 <z_sched_start+0x90>)
    5436:	4914      	ldr	r1, [pc, #80]	; (5488 <z_sched_start+0xa0>)
    5438:	4811      	ldr	r0, [pc, #68]	; (5480 <z_sched_start+0x98>)
    543a:	23ac      	movs	r3, #172	; 0xac
    543c:	f001 fd7a 	bl	6f34 <printk>
    5440:	490c      	ldr	r1, [pc, #48]	; (5474 <z_sched_start+0x8c>)
    5442:	4812      	ldr	r0, [pc, #72]	; (548c <z_sched_start+0xa4>)
    5444:	f001 fd76 	bl	6f34 <printk>
    5448:	480b      	ldr	r0, [pc, #44]	; (5478 <z_sched_start+0x90>)
    544a:	21ac      	movs	r1, #172	; 0xac
    544c:	f001 fc9e 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    5450:	f385 8811 	msr	BASEPRI, r5
    5454:	f3bf 8f6f 	isb	sy
}
    5458:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    545a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    545e:	4620      	mov	r0, r4
    5460:	7363      	strb	r3, [r4, #13]
    5462:	f7ff ff27 	bl	52b4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5466:	4629      	mov	r1, r5
    5468:	4802      	ldr	r0, [pc, #8]	; (5474 <z_sched_start+0x8c>)
}
    546a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    546e:	f7ff bd1f 	b.w	4eb0 <z_reschedule>
    5472:	bf00      	nop
    5474:	20000a20 	.word	0x20000a20
    5478:	00007e87 	.word	0x00007e87
    547c:	00007ed9 	.word	0x00007ed9
    5480:	000079ac 	.word	0x000079ac
    5484:	00007eee 	.word	0x00007eee
    5488:	00007ead 	.word	0x00007ead
    548c:	00007ec4 	.word	0x00007ec4

00005490 <z_thread_timeout>:
{
    5490:	b570      	push	{r4, r5, r6, lr}
    5492:	4604      	mov	r4, r0
	__asm__ volatile(
    5494:	f04f 0320 	mov.w	r3, #32
    5498:	f3ef 8611 	mrs	r6, BASEPRI
    549c:	f383 8812 	msr	BASEPRI_MAX, r3
    54a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54a4:	4820      	ldr	r0, [pc, #128]	; (5528 <z_thread_timeout+0x98>)
    54a6:	f000 ff17 	bl	62d8 <z_spin_lock_valid>
    54aa:	b968      	cbnz	r0, 54c8 <z_thread_timeout+0x38>
    54ac:	4a1f      	ldr	r2, [pc, #124]	; (552c <z_thread_timeout+0x9c>)
    54ae:	4920      	ldr	r1, [pc, #128]	; (5530 <z_thread_timeout+0xa0>)
    54b0:	4820      	ldr	r0, [pc, #128]	; (5534 <z_thread_timeout+0xa4>)
    54b2:	2381      	movs	r3, #129	; 0x81
    54b4:	f001 fd3e 	bl	6f34 <printk>
    54b8:	491b      	ldr	r1, [pc, #108]	; (5528 <z_thread_timeout+0x98>)
    54ba:	481f      	ldr	r0, [pc, #124]	; (5538 <z_thread_timeout+0xa8>)
    54bc:	f001 fd3a 	bl	6f34 <printk>
    54c0:	481a      	ldr	r0, [pc, #104]	; (552c <z_thread_timeout+0x9c>)
    54c2:	2181      	movs	r1, #129	; 0x81
    54c4:	f001 fc62 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    54c8:	4817      	ldr	r0, [pc, #92]	; (5528 <z_thread_timeout+0x98>)
    54ca:	f000 ff23 	bl	6314 <z_spin_lock_set_owner>
		if (!killed) {
    54ce:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    54d2:	f013 0f28 	tst.w	r3, #40	; 0x28
    54d6:	d110      	bne.n	54fa <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    54d8:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    54dc:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    54e0:	b113      	cbz	r3, 54e8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    54e2:	4628      	mov	r0, r5
    54e4:	f7ff fdbe 	bl	5064 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    54e8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    54ec:	f023 0314 	bic.w	r3, r3, #20
    54f0:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    54f4:	4628      	mov	r0, r5
    54f6:	f7ff fedd 	bl	52b4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54fa:	480b      	ldr	r0, [pc, #44]	; (5528 <z_thread_timeout+0x98>)
    54fc:	f000 fefa 	bl	62f4 <z_spin_unlock_valid>
    5500:	b968      	cbnz	r0, 551e <z_thread_timeout+0x8e>
    5502:	4a0a      	ldr	r2, [pc, #40]	; (552c <z_thread_timeout+0x9c>)
    5504:	490d      	ldr	r1, [pc, #52]	; (553c <z_thread_timeout+0xac>)
    5506:	480b      	ldr	r0, [pc, #44]	; (5534 <z_thread_timeout+0xa4>)
    5508:	23ac      	movs	r3, #172	; 0xac
    550a:	f001 fd13 	bl	6f34 <printk>
    550e:	4906      	ldr	r1, [pc, #24]	; (5528 <z_thread_timeout+0x98>)
    5510:	480b      	ldr	r0, [pc, #44]	; (5540 <z_thread_timeout+0xb0>)
    5512:	f001 fd0f 	bl	6f34 <printk>
    5516:	4805      	ldr	r0, [pc, #20]	; (552c <z_thread_timeout+0x9c>)
    5518:	21ac      	movs	r1, #172	; 0xac
    551a:	f001 fc37 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    551e:	f386 8811 	msr	BASEPRI, r6
    5522:	f3bf 8f6f 	isb	sy
}
    5526:	bd70      	pop	{r4, r5, r6, pc}
    5528:	20000a20 	.word	0x20000a20
    552c:	00007e87 	.word	0x00007e87
    5530:	00007ed9 	.word	0x00007ed9
    5534:	000079ac 	.word	0x000079ac
    5538:	00007eee 	.word	0x00007eee
    553c:	00007ead 	.word	0x00007ead
    5540:	00007ec4 	.word	0x00007ec4

00005544 <unready_thread>:
{
    5544:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5546:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    554a:	7b43      	ldrb	r3, [r0, #13]
    554c:	2a00      	cmp	r2, #0
{
    554e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5550:	da06      	bge.n	5560 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5556:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5558:	4601      	mov	r1, r0
    555a:	4806      	ldr	r0, [pc, #24]	; (5574 <unready_thread+0x30>)
    555c:	f7ff fd60 	bl	5020 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5560:	4b05      	ldr	r3, [pc, #20]	; (5578 <unready_thread+0x34>)
    5562:	6898      	ldr	r0, [r3, #8]
    5564:	1b03      	subs	r3, r0, r4
    5566:	4258      	negs	r0, r3
}
    5568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    556c:	4158      	adcs	r0, r3
    556e:	f7ff bd9b 	b.w	50a8 <update_cache>
    5572:	bf00      	nop
    5574:	20000a10 	.word	0x20000a10
    5578:	200009f0 	.word	0x200009f0

0000557c <add_to_waitq_locked>:
{
    557c:	b538      	push	{r3, r4, r5, lr}
    557e:	4604      	mov	r4, r0
    5580:	460d      	mov	r5, r1
	unready_thread(thread);
    5582:	f7ff ffdf 	bl	5544 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5586:	7b63      	ldrb	r3, [r4, #13]
    5588:	f043 0302 	orr.w	r3, r3, #2
    558c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    558e:	b31d      	cbz	r5, 55d8 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5590:	4b17      	ldr	r3, [pc, #92]	; (55f0 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    5592:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5594:	429c      	cmp	r4, r3
    5596:	d109      	bne.n	55ac <add_to_waitq_locked+0x30>
    5598:	4916      	ldr	r1, [pc, #88]	; (55f4 <add_to_waitq_locked+0x78>)
    559a:	4817      	ldr	r0, [pc, #92]	; (55f8 <add_to_waitq_locked+0x7c>)
    559c:	4a17      	ldr	r2, [pc, #92]	; (55fc <add_to_waitq_locked+0x80>)
    559e:	23ba      	movs	r3, #186	; 0xba
    55a0:	f001 fcc8 	bl	6f34 <printk>
    55a4:	4815      	ldr	r0, [pc, #84]	; (55fc <add_to_waitq_locked+0x80>)
    55a6:	21ba      	movs	r1, #186	; 0xba
    55a8:	f001 fbf0 	bl	6d8c <assert_post_action>
	return list->head == list;
    55ac:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55ae:	429d      	cmp	r5, r3
    55b0:	bf08      	it	eq
    55b2:	2300      	moveq	r3, #0
    55b4:	2b00      	cmp	r3, #0
    55b6:	bf38      	it	cc
    55b8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    55ba:	b19b      	cbz	r3, 55e4 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    55bc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    55c0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    55c4:	4291      	cmp	r1, r2
    55c6:	d008      	beq.n	55da <add_to_waitq_locked+0x5e>
		return b2 - b1;
    55c8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    55ca:	2a00      	cmp	r2, #0
    55cc:	dd05      	ble.n	55da <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    55ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    55d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    55d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    55d6:	605c      	str	r4, [r3, #4]
}
    55d8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    55da:	686a      	ldr	r2, [r5, #4]
    55dc:	4293      	cmp	r3, r2
    55de:	d001      	beq.n	55e4 <add_to_waitq_locked+0x68>
    55e0:	681b      	ldr	r3, [r3, #0]
    55e2:	e7ea      	b.n	55ba <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    55e4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    55e6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    55ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
    55ec:	606c      	str	r4, [r5, #4]
    55ee:	e7f3      	b.n	55d8 <add_to_waitq_locked+0x5c>
    55f0:	200001c8 	.word	0x200001c8
    55f4:	0000871e 	.word	0x0000871e
    55f8:	000079ac 	.word	0x000079ac
    55fc:	000086fc 	.word	0x000086fc

00005600 <pend>:
{
    5600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5604:	4604      	mov	r4, r0
    5606:	460d      	mov	r5, r1
    5608:	4616      	mov	r6, r2
    560a:	461f      	mov	r7, r3
	__asm__ volatile(
    560c:	f04f 0320 	mov.w	r3, #32
    5610:	f3ef 8811 	mrs	r8, BASEPRI
    5614:	f383 8812 	msr	BASEPRI_MAX, r3
    5618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    561c:	481f      	ldr	r0, [pc, #124]	; (569c <pend+0x9c>)
    561e:	f000 fe5b 	bl	62d8 <z_spin_lock_valid>
    5622:	b968      	cbnz	r0, 5640 <pend+0x40>
    5624:	4a1e      	ldr	r2, [pc, #120]	; (56a0 <pend+0xa0>)
    5626:	491f      	ldr	r1, [pc, #124]	; (56a4 <pend+0xa4>)
    5628:	481f      	ldr	r0, [pc, #124]	; (56a8 <pend+0xa8>)
    562a:	2381      	movs	r3, #129	; 0x81
    562c:	f001 fc82 	bl	6f34 <printk>
    5630:	491a      	ldr	r1, [pc, #104]	; (569c <pend+0x9c>)
    5632:	481e      	ldr	r0, [pc, #120]	; (56ac <pend+0xac>)
    5634:	f001 fc7e 	bl	6f34 <printk>
    5638:	4819      	ldr	r0, [pc, #100]	; (56a0 <pend+0xa0>)
    563a:	2181      	movs	r1, #129	; 0x81
    563c:	f001 fba6 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5640:	4816      	ldr	r0, [pc, #88]	; (569c <pend+0x9c>)
    5642:	f000 fe67 	bl	6314 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5646:	4620      	mov	r0, r4
    5648:	4629      	mov	r1, r5
    564a:	f7ff ff97 	bl	557c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    564e:	4813      	ldr	r0, [pc, #76]	; (569c <pend+0x9c>)
    5650:	f000 fe50 	bl	62f4 <z_spin_unlock_valid>
    5654:	b968      	cbnz	r0, 5672 <pend+0x72>
    5656:	4a12      	ldr	r2, [pc, #72]	; (56a0 <pend+0xa0>)
    5658:	4915      	ldr	r1, [pc, #84]	; (56b0 <pend+0xb0>)
    565a:	4813      	ldr	r0, [pc, #76]	; (56a8 <pend+0xa8>)
    565c:	23ac      	movs	r3, #172	; 0xac
    565e:	f001 fc69 	bl	6f34 <printk>
    5662:	490e      	ldr	r1, [pc, #56]	; (569c <pend+0x9c>)
    5664:	4813      	ldr	r0, [pc, #76]	; (56b4 <pend+0xb4>)
    5666:	f001 fc65 	bl	6f34 <printk>
    566a:	480d      	ldr	r0, [pc, #52]	; (56a0 <pend+0xa0>)
    566c:	21ac      	movs	r1, #172	; 0xac
    566e:	f001 fb8d 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    5672:	f388 8811 	msr	BASEPRI, r8
    5676:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    567a:	1c7b      	adds	r3, r7, #1
    567c:	bf08      	it	eq
    567e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5682:	d008      	beq.n	5696 <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5684:	4632      	mov	r2, r6
    5686:	463b      	mov	r3, r7
    5688:	f104 0018 	add.w	r0, r4, #24
    568c:	490a      	ldr	r1, [pc, #40]	; (56b8 <pend+0xb8>)
}
    568e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5692:	f000 be97 	b.w	63c4 <z_add_timeout>
    5696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    569a:	bf00      	nop
    569c:	20000a20 	.word	0x20000a20
    56a0:	00007e87 	.word	0x00007e87
    56a4:	00007ed9 	.word	0x00007ed9
    56a8:	000079ac 	.word	0x000079ac
    56ac:	00007eee 	.word	0x00007eee
    56b0:	00007ead 	.word	0x00007ead
    56b4:	00007ec4 	.word	0x00007ec4
    56b8:	00005491 	.word	0x00005491

000056bc <z_pend_curr>:
{
    56bc:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    56be:	4b11      	ldr	r3, [pc, #68]	; (5704 <z_pend_curr+0x48>)
{
    56c0:	4604      	mov	r4, r0
	pending_current = _current;
    56c2:	6898      	ldr	r0, [r3, #8]
    56c4:	4b10      	ldr	r3, [pc, #64]	; (5708 <z_pend_curr+0x4c>)
{
    56c6:	460d      	mov	r5, r1
	pending_current = _current;
    56c8:	6018      	str	r0, [r3, #0]
{
    56ca:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    56cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    56d0:	f7ff ff96 	bl	5600 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    56d4:	4620      	mov	r0, r4
    56d6:	f000 fe0d 	bl	62f4 <z_spin_unlock_valid>
    56da:	b968      	cbnz	r0, 56f8 <z_pend_curr+0x3c>
    56dc:	4a0b      	ldr	r2, [pc, #44]	; (570c <z_pend_curr+0x50>)
    56de:	490c      	ldr	r1, [pc, #48]	; (5710 <z_pend_curr+0x54>)
    56e0:	480c      	ldr	r0, [pc, #48]	; (5714 <z_pend_curr+0x58>)
    56e2:	23c3      	movs	r3, #195	; 0xc3
    56e4:	f001 fc26 	bl	6f34 <printk>
    56e8:	480b      	ldr	r0, [pc, #44]	; (5718 <z_pend_curr+0x5c>)
    56ea:	4621      	mov	r1, r4
    56ec:	f001 fc22 	bl	6f34 <printk>
    56f0:	4806      	ldr	r0, [pc, #24]	; (570c <z_pend_curr+0x50>)
    56f2:	21c3      	movs	r1, #195	; 0xc3
    56f4:	f001 fb4a 	bl	6d8c <assert_post_action>
    56f8:	4628      	mov	r0, r5
}
    56fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    56fe:	f7fc bbb9 	b.w	1e74 <arch_swap>
    5702:	bf00      	nop
    5704:	200009f0 	.word	0x200009f0
    5708:	20000a1c 	.word	0x20000a1c
    570c:	00007e87 	.word	0x00007e87
    5710:	00007ead 	.word	0x00007ead
    5714:	000079ac 	.word	0x000079ac
    5718:	00007ec4 	.word	0x00007ec4

0000571c <z_set_prio>:
{
    571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    571e:	4604      	mov	r4, r0
    5720:	460e      	mov	r6, r1
	__asm__ volatile(
    5722:	f04f 0320 	mov.w	r3, #32
    5726:	f3ef 8711 	mrs	r7, BASEPRI
    572a:	f383 8812 	msr	BASEPRI_MAX, r3
    572e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5732:	483c      	ldr	r0, [pc, #240]	; (5824 <z_set_prio+0x108>)
    5734:	f000 fdd0 	bl	62d8 <z_spin_lock_valid>
    5738:	b968      	cbnz	r0, 5756 <z_set_prio+0x3a>
    573a:	4a3b      	ldr	r2, [pc, #236]	; (5828 <z_set_prio+0x10c>)
    573c:	493b      	ldr	r1, [pc, #236]	; (582c <z_set_prio+0x110>)
    573e:	483c      	ldr	r0, [pc, #240]	; (5830 <z_set_prio+0x114>)
    5740:	2381      	movs	r3, #129	; 0x81
    5742:	f001 fbf7 	bl	6f34 <printk>
    5746:	4937      	ldr	r1, [pc, #220]	; (5824 <z_set_prio+0x108>)
    5748:	483a      	ldr	r0, [pc, #232]	; (5834 <z_set_prio+0x118>)
    574a:	f001 fbf3 	bl	6f34 <printk>
    574e:	4836      	ldr	r0, [pc, #216]	; (5828 <z_set_prio+0x10c>)
    5750:	2181      	movs	r1, #129	; 0x81
    5752:	f001 fb1b 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5756:	4833      	ldr	r0, [pc, #204]	; (5824 <z_set_prio+0x108>)
    5758:	f000 fddc 	bl	6314 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    575c:	7b63      	ldrb	r3, [r4, #13]
    575e:	06da      	lsls	r2, r3, #27
    5760:	b276      	sxtb	r6, r6
    5762:	d15c      	bne.n	581e <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    5764:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    5766:	2d00      	cmp	r5, #0
    5768:	d159      	bne.n	581e <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    576a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    576e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5770:	4831      	ldr	r0, [pc, #196]	; (5838 <z_set_prio+0x11c>)
    5772:	4621      	mov	r1, r4
    5774:	f7ff fc54 	bl	5020 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5778:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    577a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    577c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5780:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5782:	4b2e      	ldr	r3, [pc, #184]	; (583c <z_set_prio+0x120>)
    5784:	429c      	cmp	r4, r3
    5786:	d109      	bne.n	579c <z_set_prio+0x80>
    5788:	492d      	ldr	r1, [pc, #180]	; (5840 <z_set_prio+0x124>)
    578a:	4829      	ldr	r0, [pc, #164]	; (5830 <z_set_prio+0x114>)
    578c:	4a2d      	ldr	r2, [pc, #180]	; (5844 <z_set_prio+0x128>)
    578e:	23ba      	movs	r3, #186	; 0xba
    5790:	f001 fbd0 	bl	6f34 <printk>
    5794:	482b      	ldr	r0, [pc, #172]	; (5844 <z_set_prio+0x128>)
    5796:	21ba      	movs	r1, #186	; 0xba
    5798:	f001 faf8 	bl	6d8c <assert_post_action>
	return list->head == list;
    579c:	492a      	ldr	r1, [pc, #168]	; (5848 <z_set_prio+0x12c>)
    579e:	460b      	mov	r3, r1
    57a0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57a4:	4298      	cmp	r0, r3
    57a6:	bf18      	it	ne
    57a8:	4605      	movne	r5, r0
    57aa:	2d00      	cmp	r5, #0
    57ac:	461a      	mov	r2, r3
    57ae:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    57b0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    57b2:	bf38      	it	cc
    57b4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    57b6:	b36b      	cbz	r3, 5814 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    57b8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    57bc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    57c0:	4286      	cmp	r6, r0
    57c2:	d023      	beq.n	580c <z_set_prio+0xf0>
		return b2 - b1;
    57c4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    57c6:	2800      	cmp	r0, #0
    57c8:	dd20      	ble.n	580c <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    57ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    57cc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    57d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    57d2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    57d4:	2001      	movs	r0, #1
    57d6:	f7ff fc67 	bl	50a8 <update_cache>
    57da:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57dc:	4811      	ldr	r0, [pc, #68]	; (5824 <z_set_prio+0x108>)
    57de:	f000 fd89 	bl	62f4 <z_spin_unlock_valid>
    57e2:	b968      	cbnz	r0, 5800 <z_set_prio+0xe4>
    57e4:	4a10      	ldr	r2, [pc, #64]	; (5828 <z_set_prio+0x10c>)
    57e6:	4919      	ldr	r1, [pc, #100]	; (584c <z_set_prio+0x130>)
    57e8:	4811      	ldr	r0, [pc, #68]	; (5830 <z_set_prio+0x114>)
    57ea:	23ac      	movs	r3, #172	; 0xac
    57ec:	f001 fba2 	bl	6f34 <printk>
    57f0:	490c      	ldr	r1, [pc, #48]	; (5824 <z_set_prio+0x108>)
    57f2:	4817      	ldr	r0, [pc, #92]	; (5850 <z_set_prio+0x134>)
    57f4:	f001 fb9e 	bl	6f34 <printk>
    57f8:	480b      	ldr	r0, [pc, #44]	; (5828 <z_set_prio+0x10c>)
    57fa:	21ac      	movs	r1, #172	; 0xac
    57fc:	f001 fac6 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    5800:	f387 8811 	msr	BASEPRI, r7
    5804:	f3bf 8f6f 	isb	sy
}
    5808:	4620      	mov	r0, r4
    580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    580c:	42ab      	cmp	r3, r5
    580e:	d001      	beq.n	5814 <z_set_prio+0xf8>
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	e7d0      	b.n	57b6 <z_set_prio+0x9a>
	node->prev = tail;
    5814:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5818:	602c      	str	r4, [r5, #0]
	list->tail = node;
    581a:	624c      	str	r4, [r1, #36]	; 0x24
}
    581c:	e7da      	b.n	57d4 <z_set_prio+0xb8>
			thread->base.prio = prio;
    581e:	73a6      	strb	r6, [r4, #14]
    5820:	2400      	movs	r4, #0
    5822:	e7db      	b.n	57dc <z_set_prio+0xc0>
    5824:	20000a20 	.word	0x20000a20
    5828:	00007e87 	.word	0x00007e87
    582c:	00007ed9 	.word	0x00007ed9
    5830:	000079ac 	.word	0x000079ac
    5834:	00007eee 	.word	0x00007eee
    5838:	20000a10 	.word	0x20000a10
    583c:	200001c8 	.word	0x200001c8
    5840:	0000871e 	.word	0x0000871e
    5844:	000086fc 	.word	0x000086fc
    5848:	200009f0 	.word	0x200009f0
    584c:	00007ead 	.word	0x00007ead
    5850:	00007ec4 	.word	0x00007ec4

00005854 <z_impl_k_thread_suspend>:
{
    5854:	b570      	push	{r4, r5, r6, lr}
    5856:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5858:	3018      	adds	r0, #24
    585a:	f000 fe87 	bl	656c <z_abort_timeout>
	__asm__ volatile(
    585e:	f04f 0320 	mov.w	r3, #32
    5862:	f3ef 8611 	mrs	r6, BASEPRI
    5866:	f383 8812 	msr	BASEPRI_MAX, r3
    586a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    586e:	4825      	ldr	r0, [pc, #148]	; (5904 <z_impl_k_thread_suspend+0xb0>)
    5870:	f000 fd32 	bl	62d8 <z_spin_lock_valid>
    5874:	b968      	cbnz	r0, 5892 <z_impl_k_thread_suspend+0x3e>
    5876:	4a24      	ldr	r2, [pc, #144]	; (5908 <z_impl_k_thread_suspend+0xb4>)
    5878:	4924      	ldr	r1, [pc, #144]	; (590c <z_impl_k_thread_suspend+0xb8>)
    587a:	4825      	ldr	r0, [pc, #148]	; (5910 <z_impl_k_thread_suspend+0xbc>)
    587c:	2381      	movs	r3, #129	; 0x81
    587e:	f001 fb59 	bl	6f34 <printk>
    5882:	4920      	ldr	r1, [pc, #128]	; (5904 <z_impl_k_thread_suspend+0xb0>)
    5884:	4823      	ldr	r0, [pc, #140]	; (5914 <z_impl_k_thread_suspend+0xc0>)
    5886:	f001 fb55 	bl	6f34 <printk>
    588a:	481f      	ldr	r0, [pc, #124]	; (5908 <z_impl_k_thread_suspend+0xb4>)
    588c:	2181      	movs	r1, #129	; 0x81
    588e:	f001 fa7d 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5892:	481c      	ldr	r0, [pc, #112]	; (5904 <z_impl_k_thread_suspend+0xb0>)
    5894:	f000 fd3e 	bl	6314 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5898:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    589c:	7b63      	ldrb	r3, [r4, #13]
    589e:	2a00      	cmp	r2, #0
    58a0:	da06      	bge.n	58b0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    58a6:	481c      	ldr	r0, [pc, #112]	; (5918 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58a8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    58aa:	4621      	mov	r1, r4
    58ac:	f7ff fbb8 	bl	5020 <z_priq_dumb_remove>
		update_cache(thread == _current);
    58b0:	4d1a      	ldr	r5, [pc, #104]	; (591c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    58b2:	7b63      	ldrb	r3, [r4, #13]
    58b4:	68a8      	ldr	r0, [r5, #8]
    58b6:	f043 0310 	orr.w	r3, r3, #16
    58ba:	7363      	strb	r3, [r4, #13]
    58bc:	1b03      	subs	r3, r0, r4
    58be:	4258      	negs	r0, r3
    58c0:	4158      	adcs	r0, r3
    58c2:	f7ff fbf1 	bl	50a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58c6:	480f      	ldr	r0, [pc, #60]	; (5904 <z_impl_k_thread_suspend+0xb0>)
    58c8:	f000 fd14 	bl	62f4 <z_spin_unlock_valid>
    58cc:	b968      	cbnz	r0, 58ea <z_impl_k_thread_suspend+0x96>
    58ce:	4a0e      	ldr	r2, [pc, #56]	; (5908 <z_impl_k_thread_suspend+0xb4>)
    58d0:	4913      	ldr	r1, [pc, #76]	; (5920 <z_impl_k_thread_suspend+0xcc>)
    58d2:	480f      	ldr	r0, [pc, #60]	; (5910 <z_impl_k_thread_suspend+0xbc>)
    58d4:	23ac      	movs	r3, #172	; 0xac
    58d6:	f001 fb2d 	bl	6f34 <printk>
    58da:	490a      	ldr	r1, [pc, #40]	; (5904 <z_impl_k_thread_suspend+0xb0>)
    58dc:	4811      	ldr	r0, [pc, #68]	; (5924 <z_impl_k_thread_suspend+0xd0>)
    58de:	f001 fb29 	bl	6f34 <printk>
    58e2:	4809      	ldr	r0, [pc, #36]	; (5908 <z_impl_k_thread_suspend+0xb4>)
    58e4:	21ac      	movs	r1, #172	; 0xac
    58e6:	f001 fa51 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    58ea:	f386 8811 	msr	BASEPRI, r6
    58ee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    58f2:	68ab      	ldr	r3, [r5, #8]
    58f4:	42a3      	cmp	r3, r4
    58f6:	d103      	bne.n	5900 <z_impl_k_thread_suspend+0xac>
}
    58f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    58fc:	f001 bd7f 	b.w	73fe <z_reschedule_unlocked>
}
    5900:	bd70      	pop	{r4, r5, r6, pc}
    5902:	bf00      	nop
    5904:	20000a20 	.word	0x20000a20
    5908:	00007e87 	.word	0x00007e87
    590c:	00007ed9 	.word	0x00007ed9
    5910:	000079ac 	.word	0x000079ac
    5914:	00007eee 	.word	0x00007eee
    5918:	20000a10 	.word	0x20000a10
    591c:	200009f0 	.word	0x200009f0
    5920:	00007ead 	.word	0x00007ead
    5924:	00007ec4 	.word	0x00007ec4

00005928 <k_sched_unlock>:
{
    5928:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    592a:	f04f 0320 	mov.w	r3, #32
    592e:	f3ef 8511 	mrs	r5, BASEPRI
    5932:	f383 8812 	msr	BASEPRI_MAX, r3
    5936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    593a:	482d      	ldr	r0, [pc, #180]	; (59f0 <k_sched_unlock+0xc8>)
    593c:	f000 fccc 	bl	62d8 <z_spin_lock_valid>
    5940:	b968      	cbnz	r0, 595e <k_sched_unlock+0x36>
    5942:	4a2c      	ldr	r2, [pc, #176]	; (59f4 <k_sched_unlock+0xcc>)
    5944:	492c      	ldr	r1, [pc, #176]	; (59f8 <k_sched_unlock+0xd0>)
    5946:	482d      	ldr	r0, [pc, #180]	; (59fc <k_sched_unlock+0xd4>)
    5948:	2381      	movs	r3, #129	; 0x81
    594a:	f001 faf3 	bl	6f34 <printk>
    594e:	4928      	ldr	r1, [pc, #160]	; (59f0 <k_sched_unlock+0xc8>)
    5950:	482b      	ldr	r0, [pc, #172]	; (5a00 <k_sched_unlock+0xd8>)
    5952:	f001 faef 	bl	6f34 <printk>
    5956:	4827      	ldr	r0, [pc, #156]	; (59f4 <k_sched_unlock+0xcc>)
    5958:	2181      	movs	r1, #129	; 0x81
    595a:	f001 fa17 	bl	6d8c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    595e:	4c29      	ldr	r4, [pc, #164]	; (5a04 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    5960:	4823      	ldr	r0, [pc, #140]	; (59f0 <k_sched_unlock+0xc8>)
    5962:	f000 fcd7 	bl	6314 <z_spin_lock_set_owner>
    5966:	68a2      	ldr	r2, [r4, #8]
    5968:	7bd2      	ldrb	r2, [r2, #15]
    596a:	b972      	cbnz	r2, 598a <k_sched_unlock+0x62>
    596c:	4926      	ldr	r1, [pc, #152]	; (5a08 <k_sched_unlock+0xe0>)
    596e:	4a27      	ldr	r2, [pc, #156]	; (5a0c <k_sched_unlock+0xe4>)
    5970:	4822      	ldr	r0, [pc, #136]	; (59fc <k_sched_unlock+0xd4>)
    5972:	f240 3385 	movw	r3, #901	; 0x385
    5976:	f001 fadd 	bl	6f34 <printk>
    597a:	4825      	ldr	r0, [pc, #148]	; (5a10 <k_sched_unlock+0xe8>)
    597c:	f001 fada 	bl	6f34 <printk>
    5980:	4822      	ldr	r0, [pc, #136]	; (5a0c <k_sched_unlock+0xe4>)
    5982:	f240 3185 	movw	r1, #901	; 0x385
    5986:	f001 fa01 	bl	6d8c <assert_post_action>
    598a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    598e:	b173      	cbz	r3, 59ae <k_sched_unlock+0x86>
    5990:	4920      	ldr	r1, [pc, #128]	; (5a14 <k_sched_unlock+0xec>)
    5992:	4a1e      	ldr	r2, [pc, #120]	; (5a0c <k_sched_unlock+0xe4>)
    5994:	4819      	ldr	r0, [pc, #100]	; (59fc <k_sched_unlock+0xd4>)
    5996:	f240 3386 	movw	r3, #902	; 0x386
    599a:	f001 facb 	bl	6f34 <printk>
    599e:	481c      	ldr	r0, [pc, #112]	; (5a10 <k_sched_unlock+0xe8>)
    59a0:	f001 fac8 	bl	6f34 <printk>
    59a4:	4819      	ldr	r0, [pc, #100]	; (5a0c <k_sched_unlock+0xe4>)
    59a6:	f240 3186 	movw	r1, #902	; 0x386
    59aa:	f001 f9ef 	bl	6d8c <assert_post_action>
		++_current->base.sched_locked;
    59ae:	68a2      	ldr	r2, [r4, #8]
    59b0:	7bd3      	ldrb	r3, [r2, #15]
    59b2:	3301      	adds	r3, #1
		update_cache(0);
    59b4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    59b6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    59b8:	f7ff fb76 	bl	50a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59bc:	480c      	ldr	r0, [pc, #48]	; (59f0 <k_sched_unlock+0xc8>)
    59be:	f000 fc99 	bl	62f4 <z_spin_unlock_valid>
    59c2:	b968      	cbnz	r0, 59e0 <k_sched_unlock+0xb8>
    59c4:	4a0b      	ldr	r2, [pc, #44]	; (59f4 <k_sched_unlock+0xcc>)
    59c6:	4914      	ldr	r1, [pc, #80]	; (5a18 <k_sched_unlock+0xf0>)
    59c8:	480c      	ldr	r0, [pc, #48]	; (59fc <k_sched_unlock+0xd4>)
    59ca:	23ac      	movs	r3, #172	; 0xac
    59cc:	f001 fab2 	bl	6f34 <printk>
    59d0:	4907      	ldr	r1, [pc, #28]	; (59f0 <k_sched_unlock+0xc8>)
    59d2:	4812      	ldr	r0, [pc, #72]	; (5a1c <k_sched_unlock+0xf4>)
    59d4:	f001 faae 	bl	6f34 <printk>
    59d8:	4806      	ldr	r0, [pc, #24]	; (59f4 <k_sched_unlock+0xcc>)
    59da:	21ac      	movs	r1, #172	; 0xac
    59dc:	f001 f9d6 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    59e0:	f385 8811 	msr	BASEPRI, r5
    59e4:	f3bf 8f6f 	isb	sy
}
    59e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    59ec:	f001 bd07 	b.w	73fe <z_reschedule_unlocked>
    59f0:	20000a20 	.word	0x20000a20
    59f4:	00007e87 	.word	0x00007e87
    59f8:	00007ed9 	.word	0x00007ed9
    59fc:	000079ac 	.word	0x000079ac
    5a00:	00007eee 	.word	0x00007eee
    5a04:	200009f0 	.word	0x200009f0
    5a08:	0000877d 	.word	0x0000877d
    5a0c:	000086fc 	.word	0x000086fc
    5a10:	000086c8 	.word	0x000086c8
    5a14:	0000864f 	.word	0x0000864f
    5a18:	00007ead 	.word	0x00007ead
    5a1c:	00007ec4 	.word	0x00007ec4

00005a20 <z_unpend_first_thread>:
{
    5a20:	b538      	push	{r3, r4, r5, lr}
    5a22:	4604      	mov	r4, r0
	__asm__ volatile(
    5a24:	f04f 0320 	mov.w	r3, #32
    5a28:	f3ef 8511 	mrs	r5, BASEPRI
    5a2c:	f383 8812 	msr	BASEPRI_MAX, r3
    5a30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a34:	481b      	ldr	r0, [pc, #108]	; (5aa4 <z_unpend_first_thread+0x84>)
    5a36:	f000 fc4f 	bl	62d8 <z_spin_lock_valid>
    5a3a:	b968      	cbnz	r0, 5a58 <z_unpend_first_thread+0x38>
    5a3c:	4a1a      	ldr	r2, [pc, #104]	; (5aa8 <z_unpend_first_thread+0x88>)
    5a3e:	491b      	ldr	r1, [pc, #108]	; (5aac <z_unpend_first_thread+0x8c>)
    5a40:	481b      	ldr	r0, [pc, #108]	; (5ab0 <z_unpend_first_thread+0x90>)
    5a42:	2381      	movs	r3, #129	; 0x81
    5a44:	f001 fa76 	bl	6f34 <printk>
    5a48:	4916      	ldr	r1, [pc, #88]	; (5aa4 <z_unpend_first_thread+0x84>)
    5a4a:	481a      	ldr	r0, [pc, #104]	; (5ab4 <z_unpend_first_thread+0x94>)
    5a4c:	f001 fa72 	bl	6f34 <printk>
    5a50:	4815      	ldr	r0, [pc, #84]	; (5aa8 <z_unpend_first_thread+0x88>)
    5a52:	2181      	movs	r1, #129	; 0x81
    5a54:	f001 f99a 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5a58:	4812      	ldr	r0, [pc, #72]	; (5aa4 <z_unpend_first_thread+0x84>)
    5a5a:	f000 fc5b 	bl	6314 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    5a5e:	4620      	mov	r0, r4
    5a60:	f001 fcd7 	bl	7412 <z_priq_dumb_best>
		if (thread != NULL) {
    5a64:	4604      	mov	r4, r0
    5a66:	b128      	cbz	r0, 5a74 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    5a68:	f7ff fafc 	bl	5064 <unpend_thread_no_timeout>
    5a6c:	f104 0018 	add.w	r0, r4, #24
    5a70:	f000 fd7c 	bl	656c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a74:	480b      	ldr	r0, [pc, #44]	; (5aa4 <z_unpend_first_thread+0x84>)
    5a76:	f000 fc3d 	bl	62f4 <z_spin_unlock_valid>
    5a7a:	b968      	cbnz	r0, 5a98 <z_unpend_first_thread+0x78>
    5a7c:	4a0a      	ldr	r2, [pc, #40]	; (5aa8 <z_unpend_first_thread+0x88>)
    5a7e:	490e      	ldr	r1, [pc, #56]	; (5ab8 <z_unpend_first_thread+0x98>)
    5a80:	480b      	ldr	r0, [pc, #44]	; (5ab0 <z_unpend_first_thread+0x90>)
    5a82:	23ac      	movs	r3, #172	; 0xac
    5a84:	f001 fa56 	bl	6f34 <printk>
    5a88:	4906      	ldr	r1, [pc, #24]	; (5aa4 <z_unpend_first_thread+0x84>)
    5a8a:	480c      	ldr	r0, [pc, #48]	; (5abc <z_unpend_first_thread+0x9c>)
    5a8c:	f001 fa52 	bl	6f34 <printk>
    5a90:	4805      	ldr	r0, [pc, #20]	; (5aa8 <z_unpend_first_thread+0x88>)
    5a92:	21ac      	movs	r1, #172	; 0xac
    5a94:	f001 f97a 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    5a98:	f385 8811 	msr	BASEPRI, r5
    5a9c:	f3bf 8f6f 	isb	sy
}
    5aa0:	4620      	mov	r0, r4
    5aa2:	bd38      	pop	{r3, r4, r5, pc}
    5aa4:	20000a20 	.word	0x20000a20
    5aa8:	00007e87 	.word	0x00007e87
    5aac:	00007ed9 	.word	0x00007ed9
    5ab0:	000079ac 	.word	0x000079ac
    5ab4:	00007eee 	.word	0x00007eee
    5ab8:	00007ead 	.word	0x00007ead
    5abc:	00007ec4 	.word	0x00007ec4

00005ac0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5ac0:	4b04      	ldr	r3, [pc, #16]	; (5ad4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5ac2:	2100      	movs	r1, #0
    5ac4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5ac8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5acc:	4608      	mov	r0, r1
    5ace:	f7ff b989 	b.w	4de4 <k_sched_time_slice_set>
    5ad2:	bf00      	nop
    5ad4:	200009f0 	.word	0x200009f0

00005ad8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ada:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5ade:	b173      	cbz	r3, 5afe <z_impl_k_yield+0x26>
    5ae0:	4941      	ldr	r1, [pc, #260]	; (5be8 <z_impl_k_yield+0x110>)
    5ae2:	4a42      	ldr	r2, [pc, #264]	; (5bec <z_impl_k_yield+0x114>)
    5ae4:	4842      	ldr	r0, [pc, #264]	; (5bf0 <z_impl_k_yield+0x118>)
    5ae6:	f240 43dc 	movw	r3, #1244	; 0x4dc
    5aea:	f001 fa23 	bl	6f34 <printk>
    5aee:	4841      	ldr	r0, [pc, #260]	; (5bf4 <z_impl_k_yield+0x11c>)
    5af0:	f001 fa20 	bl	6f34 <printk>
    5af4:	483d      	ldr	r0, [pc, #244]	; (5bec <z_impl_k_yield+0x114>)
    5af6:	f240 41dc 	movw	r1, #1244	; 0x4dc
    5afa:	f001 f947 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    5afe:	f04f 0320 	mov.w	r3, #32
    5b02:	f3ef 8611 	mrs	r6, BASEPRI
    5b06:	f383 8812 	msr	BASEPRI_MAX, r3
    5b0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b0e:	483a      	ldr	r0, [pc, #232]	; (5bf8 <z_impl_k_yield+0x120>)
    5b10:	f000 fbe2 	bl	62d8 <z_spin_lock_valid>
    5b14:	b968      	cbnz	r0, 5b32 <z_impl_k_yield+0x5a>
    5b16:	4a39      	ldr	r2, [pc, #228]	; (5bfc <z_impl_k_yield+0x124>)
    5b18:	4939      	ldr	r1, [pc, #228]	; (5c00 <z_impl_k_yield+0x128>)
    5b1a:	4835      	ldr	r0, [pc, #212]	; (5bf0 <z_impl_k_yield+0x118>)
    5b1c:	2381      	movs	r3, #129	; 0x81
    5b1e:	f001 fa09 	bl	6f34 <printk>
    5b22:	4935      	ldr	r1, [pc, #212]	; (5bf8 <z_impl_k_yield+0x120>)
    5b24:	4837      	ldr	r0, [pc, #220]	; (5c04 <z_impl_k_yield+0x12c>)
    5b26:	f001 fa05 	bl	6f34 <printk>
    5b2a:	4834      	ldr	r0, [pc, #208]	; (5bfc <z_impl_k_yield+0x124>)
    5b2c:	2181      	movs	r1, #129	; 0x81
    5b2e:	f001 f92d 	bl	6d8c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5b32:	4d35      	ldr	r5, [pc, #212]	; (5c08 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    5b34:	4830      	ldr	r0, [pc, #192]	; (5bf8 <z_impl_k_yield+0x120>)
    5b36:	f000 fbed 	bl	6314 <z_spin_lock_set_owner>
    5b3a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b3c:	7b4b      	ldrb	r3, [r1, #13]
    5b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b42:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5b44:	f105 0020 	add.w	r0, r5, #32
    5b48:	f7ff fa6a 	bl	5020 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    5b4c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5b4e:	7b63      	ldrb	r3, [r4, #13]
    5b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b54:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5b56:	4b2d      	ldr	r3, [pc, #180]	; (5c0c <z_impl_k_yield+0x134>)
    5b58:	429c      	cmp	r4, r3
    5b5a:	d109      	bne.n	5b70 <z_impl_k_yield+0x98>
    5b5c:	492c      	ldr	r1, [pc, #176]	; (5c10 <z_impl_k_yield+0x138>)
    5b5e:	4824      	ldr	r0, [pc, #144]	; (5bf0 <z_impl_k_yield+0x118>)
    5b60:	4a22      	ldr	r2, [pc, #136]	; (5bec <z_impl_k_yield+0x114>)
    5b62:	23ba      	movs	r3, #186	; 0xba
    5b64:	f001 f9e6 	bl	6f34 <printk>
    5b68:	4820      	ldr	r0, [pc, #128]	; (5bec <z_impl_k_yield+0x114>)
    5b6a:	21ba      	movs	r1, #186	; 0xba
    5b6c:	f001 f90e 	bl	6d8c <assert_post_action>
	return list->head == list;
    5b70:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b72:	4828      	ldr	r0, [pc, #160]	; (5c14 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5b74:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b76:	4283      	cmp	r3, r0
    5b78:	bf08      	it	eq
    5b7a:	2300      	moveq	r3, #0
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	bf38      	it	cc
    5b80:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b82:	b35b      	cbz	r3, 5bdc <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    5b84:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5b88:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5b8c:	4297      	cmp	r7, r2
    5b8e:	d021      	beq.n	5bd4 <z_impl_k_yield+0xfc>
		return b2 - b1;
    5b90:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b92:	2a00      	cmp	r2, #0
    5b94:	dd1e      	ble.n	5bd4 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    5b96:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5b98:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5b9c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5b9e:	605c      	str	r4, [r3, #4]
	update_cache(1);
    5ba0:	2001      	movs	r0, #1
    5ba2:	f7ff fa81 	bl	50a8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ba6:	4814      	ldr	r0, [pc, #80]	; (5bf8 <z_impl_k_yield+0x120>)
    5ba8:	f000 fba4 	bl	62f4 <z_spin_unlock_valid>
    5bac:	b968      	cbnz	r0, 5bca <z_impl_k_yield+0xf2>
    5bae:	4a13      	ldr	r2, [pc, #76]	; (5bfc <z_impl_k_yield+0x124>)
    5bb0:	4919      	ldr	r1, [pc, #100]	; (5c18 <z_impl_k_yield+0x140>)
    5bb2:	480f      	ldr	r0, [pc, #60]	; (5bf0 <z_impl_k_yield+0x118>)
    5bb4:	23c3      	movs	r3, #195	; 0xc3
    5bb6:	f001 f9bd 	bl	6f34 <printk>
    5bba:	490f      	ldr	r1, [pc, #60]	; (5bf8 <z_impl_k_yield+0x120>)
    5bbc:	4817      	ldr	r0, [pc, #92]	; (5c1c <z_impl_k_yield+0x144>)
    5bbe:	f001 f9b9 	bl	6f34 <printk>
    5bc2:	480e      	ldr	r0, [pc, #56]	; (5bfc <z_impl_k_yield+0x124>)
    5bc4:	21c3      	movs	r1, #195	; 0xc3
    5bc6:	f001 f8e1 	bl	6d8c <assert_post_action>
    5bca:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    5bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5bd0:	f7fc b950 	b.w	1e74 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5bd4:	428b      	cmp	r3, r1
    5bd6:	d001      	beq.n	5bdc <z_impl_k_yield+0x104>
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	e7d2      	b.n	5b82 <z_impl_k_yield+0xaa>
	node->prev = tail;
    5bdc:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    5be0:	600c      	str	r4, [r1, #0]
	list->tail = node;
    5be2:	626c      	str	r4, [r5, #36]	; 0x24
}
    5be4:	e7dc      	b.n	5ba0 <z_impl_k_yield+0xc8>
    5be6:	bf00      	nop
    5be8:	0000864f 	.word	0x0000864f
    5bec:	000086fc 	.word	0x000086fc
    5bf0:	000079ac 	.word	0x000079ac
    5bf4:	000086c8 	.word	0x000086c8
    5bf8:	20000a20 	.word	0x20000a20
    5bfc:	00007e87 	.word	0x00007e87
    5c00:	00007ed9 	.word	0x00007ed9
    5c04:	00007eee 	.word	0x00007eee
    5c08:	200009f0 	.word	0x200009f0
    5c0c:	200001c8 	.word	0x200001c8
    5c10:	0000871e 	.word	0x0000871e
    5c14:	20000a10 	.word	0x20000a10
    5c18:	00007ead 	.word	0x00007ead
    5c1c:	00007ec4 	.word	0x00007ec4

00005c20 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    5c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c24:	4604      	mov	r4, r0
    5c26:	460d      	mov	r5, r1
    5c28:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5c2c:	b173      	cbz	r3, 5c4c <z_tick_sleep+0x2c>
    5c2e:	4945      	ldr	r1, [pc, #276]	; (5d44 <z_tick_sleep+0x124>)
    5c30:	4a45      	ldr	r2, [pc, #276]	; (5d48 <z_tick_sleep+0x128>)
    5c32:	4846      	ldr	r0, [pc, #280]	; (5d4c <z_tick_sleep+0x12c>)
    5c34:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    5c38:	f001 f97c 	bl	6f34 <printk>
    5c3c:	4844      	ldr	r0, [pc, #272]	; (5d50 <z_tick_sleep+0x130>)
    5c3e:	f001 f979 	bl	6f34 <printk>
    5c42:	4841      	ldr	r0, [pc, #260]	; (5d48 <z_tick_sleep+0x128>)
    5c44:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    5c48:	f001 f8a0 	bl	6d8c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5c4c:	ea54 0305 	orrs.w	r3, r4, r5
    5c50:	d104      	bne.n	5c5c <z_tick_sleep+0x3c>
	z_impl_k_yield();
    5c52:	f7ff ff41 	bl	5ad8 <z_impl_k_yield>
		k_yield();
		return 0;
    5c56:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    5c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    5c5c:	f06f 0301 	mvn.w	r3, #1
    5c60:	1b1e      	subs	r6, r3, r4
    5c62:	f04f 33ff 	mov.w	r3, #4294967295
    5c66:	eb63 0705 	sbc.w	r7, r3, r5
    5c6a:	2e01      	cmp	r6, #1
    5c6c:	f177 0300 	sbcs.w	r3, r7, #0
    5c70:	da64      	bge.n	5d3c <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5c72:	f001 fbde 	bl	7432 <sys_clock_tick_get_32>
    5c76:	1906      	adds	r6, r0, r4
    5c78:	f04f 0320 	mov.w	r3, #32
    5c7c:	f3ef 8811 	mrs	r8, BASEPRI
    5c80:	f383 8812 	msr	BASEPRI_MAX, r3
    5c84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c88:	4832      	ldr	r0, [pc, #200]	; (5d54 <z_tick_sleep+0x134>)
    5c8a:	f000 fb25 	bl	62d8 <z_spin_lock_valid>
    5c8e:	b968      	cbnz	r0, 5cac <z_tick_sleep+0x8c>
    5c90:	4a31      	ldr	r2, [pc, #196]	; (5d58 <z_tick_sleep+0x138>)
    5c92:	4932      	ldr	r1, [pc, #200]	; (5d5c <z_tick_sleep+0x13c>)
    5c94:	482d      	ldr	r0, [pc, #180]	; (5d4c <z_tick_sleep+0x12c>)
    5c96:	2381      	movs	r3, #129	; 0x81
    5c98:	f001 f94c 	bl	6f34 <printk>
    5c9c:	492d      	ldr	r1, [pc, #180]	; (5d54 <z_tick_sleep+0x134>)
    5c9e:	4830      	ldr	r0, [pc, #192]	; (5d60 <z_tick_sleep+0x140>)
    5ca0:	f001 f948 	bl	6f34 <printk>
    5ca4:	482c      	ldr	r0, [pc, #176]	; (5d58 <z_tick_sleep+0x138>)
    5ca6:	2181      	movs	r1, #129	; 0x81
    5ca8:	f001 f870 	bl	6d8c <assert_post_action>
	pending_current = _current;
    5cac:	4f2d      	ldr	r7, [pc, #180]	; (5d64 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    5cae:	4829      	ldr	r0, [pc, #164]	; (5d54 <z_tick_sleep+0x134>)
    5cb0:	f000 fb30 	bl	6314 <z_spin_lock_set_owner>
    5cb4:	4b2c      	ldr	r3, [pc, #176]	; (5d68 <z_tick_sleep+0x148>)
    5cb6:	68b8      	ldr	r0, [r7, #8]
    5cb8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5cba:	f7ff fc43 	bl	5544 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5cbe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5cc0:	492a      	ldr	r1, [pc, #168]	; (5d6c <z_tick_sleep+0x14c>)
    5cc2:	4622      	mov	r2, r4
    5cc4:	462b      	mov	r3, r5
    5cc6:	3018      	adds	r0, #24
    5cc8:	f000 fb7c 	bl	63c4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5ccc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5cce:	4821      	ldr	r0, [pc, #132]	; (5d54 <z_tick_sleep+0x134>)
    5cd0:	7b53      	ldrb	r3, [r2, #13]
    5cd2:	f043 0310 	orr.w	r3, r3, #16
    5cd6:	7353      	strb	r3, [r2, #13]
    5cd8:	f000 fb0c 	bl	62f4 <z_spin_unlock_valid>
    5cdc:	b968      	cbnz	r0, 5cfa <z_tick_sleep+0xda>
    5cde:	4a1e      	ldr	r2, [pc, #120]	; (5d58 <z_tick_sleep+0x138>)
    5ce0:	4923      	ldr	r1, [pc, #140]	; (5d70 <z_tick_sleep+0x150>)
    5ce2:	481a      	ldr	r0, [pc, #104]	; (5d4c <z_tick_sleep+0x12c>)
    5ce4:	23c3      	movs	r3, #195	; 0xc3
    5ce6:	f001 f925 	bl	6f34 <printk>
    5cea:	491a      	ldr	r1, [pc, #104]	; (5d54 <z_tick_sleep+0x134>)
    5cec:	4821      	ldr	r0, [pc, #132]	; (5d74 <z_tick_sleep+0x154>)
    5cee:	f001 f921 	bl	6f34 <printk>
    5cf2:	4819      	ldr	r0, [pc, #100]	; (5d58 <z_tick_sleep+0x138>)
    5cf4:	21c3      	movs	r1, #195	; 0xc3
    5cf6:	f001 f849 	bl	6d8c <assert_post_action>
    5cfa:	4640      	mov	r0, r8
    5cfc:	f7fc f8ba 	bl	1e74 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5d00:	68bb      	ldr	r3, [r7, #8]
    5d02:	7b5b      	ldrb	r3, [r3, #13]
    5d04:	06db      	lsls	r3, r3, #27
    5d06:	d50e      	bpl.n	5d26 <z_tick_sleep+0x106>
    5d08:	491b      	ldr	r1, [pc, #108]	; (5d78 <z_tick_sleep+0x158>)
    5d0a:	4a0f      	ldr	r2, [pc, #60]	; (5d48 <z_tick_sleep+0x128>)
    5d0c:	480f      	ldr	r0, [pc, #60]	; (5d4c <z_tick_sleep+0x12c>)
    5d0e:	f240 5319 	movw	r3, #1305	; 0x519
    5d12:	f001 f90f 	bl	6f34 <printk>
    5d16:	480e      	ldr	r0, [pc, #56]	; (5d50 <z_tick_sleep+0x130>)
    5d18:	f001 f90c 	bl	6f34 <printk>
    5d1c:	480a      	ldr	r0, [pc, #40]	; (5d48 <z_tick_sleep+0x128>)
    5d1e:	f240 5119 	movw	r1, #1305	; 0x519
    5d22:	f001 f833 	bl	6d8c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5d26:	f001 fb84 	bl	7432 <sys_clock_tick_get_32>
    5d2a:	1a30      	subs	r0, r6, r0
    5d2c:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    5d30:	2801      	cmp	r0, #1
    5d32:	f171 0300 	sbcs.w	r3, r1, #0
    5d36:	bfb8      	it	lt
    5d38:	2000      	movlt	r0, #0
    5d3a:	e78d      	b.n	5c58 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5d3c:	f06f 0601 	mvn.w	r6, #1
    5d40:	1b36      	subs	r6, r6, r4
    5d42:	e799      	b.n	5c78 <z_tick_sleep+0x58>
    5d44:	0000864f 	.word	0x0000864f
    5d48:	000086fc 	.word	0x000086fc
    5d4c:	000079ac 	.word	0x000079ac
    5d50:	000086c8 	.word	0x000086c8
    5d54:	20000a20 	.word	0x20000a20
    5d58:	00007e87 	.word	0x00007e87
    5d5c:	00007ed9 	.word	0x00007ed9
    5d60:	00007eee 	.word	0x00007eee
    5d64:	200009f0 	.word	0x200009f0
    5d68:	20000a1c 	.word	0x20000a1c
    5d6c:	00005491 	.word	0x00005491
    5d70:	00007ead 	.word	0x00007ead
    5d74:	00007ec4 	.word	0x00007ec4
    5d78:	000087ae 	.word	0x000087ae

00005d7c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5d7c:	b538      	push	{r3, r4, r5, lr}
    5d7e:	4604      	mov	r4, r0
    5d80:	460d      	mov	r5, r1
    5d82:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5d86:	b173      	cbz	r3, 5da6 <z_impl_k_sleep+0x2a>
    5d88:	4913      	ldr	r1, [pc, #76]	; (5dd8 <z_impl_k_sleep+0x5c>)
    5d8a:	4a14      	ldr	r2, [pc, #80]	; (5ddc <z_impl_k_sleep+0x60>)
    5d8c:	4814      	ldr	r0, [pc, #80]	; (5de0 <z_impl_k_sleep+0x64>)
    5d8e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    5d92:	f001 f8cf 	bl	6f34 <printk>
    5d96:	4813      	ldr	r0, [pc, #76]	; (5de4 <z_impl_k_sleep+0x68>)
    5d98:	f001 f8cc 	bl	6f34 <printk>
    5d9c:	480f      	ldr	r0, [pc, #60]	; (5ddc <z_impl_k_sleep+0x60>)
    5d9e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    5da2:	f000 fff3 	bl	6d8c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5da6:	1c6b      	adds	r3, r5, #1
    5da8:	bf08      	it	eq
    5daa:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    5dae:	d106      	bne.n	5dbe <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    5db0:	4b0d      	ldr	r3, [pc, #52]	; (5de8 <z_impl_k_sleep+0x6c>)
    5db2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5db4:	f7ff fd4e 	bl	5854 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5db8:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5dbc:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    5dbe:	4620      	mov	r0, r4
    5dc0:	4629      	mov	r1, r5
    5dc2:	f7ff ff2d 	bl	5c20 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    5dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5dca:	fb80 3403 	smull	r3, r4, r0, r3
    5dce:	0bd8      	lsrs	r0, r3, #15
    5dd0:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    5dd4:	e7f2      	b.n	5dbc <z_impl_k_sleep+0x40>
    5dd6:	bf00      	nop
    5dd8:	0000864f 	.word	0x0000864f
    5ddc:	000086fc 	.word	0x000086fc
    5de0:	000079ac 	.word	0x000079ac
    5de4:	000086c8 	.word	0x000086c8
    5de8:	200009f0 	.word	0x200009f0

00005dec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5dec:	4b01      	ldr	r3, [pc, #4]	; (5df4 <z_impl_z_current_get+0x8>)
    5dee:	6898      	ldr	r0, [r3, #8]
    5df0:	4770      	bx	lr
    5df2:	bf00      	nop
    5df4:	200009f0 	.word	0x200009f0

00005df8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dfc:	4604      	mov	r4, r0
    5dfe:	f04f 0320 	mov.w	r3, #32
    5e02:	f3ef 8611 	mrs	r6, BASEPRI
    5e06:	f383 8812 	msr	BASEPRI_MAX, r3
    5e0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e0e:	4848      	ldr	r0, [pc, #288]	; (5f30 <z_thread_abort+0x138>)
    5e10:	f000 fa62 	bl	62d8 <z_spin_lock_valid>
    5e14:	b968      	cbnz	r0, 5e32 <z_thread_abort+0x3a>
    5e16:	4a47      	ldr	r2, [pc, #284]	; (5f34 <z_thread_abort+0x13c>)
    5e18:	4947      	ldr	r1, [pc, #284]	; (5f38 <z_thread_abort+0x140>)
    5e1a:	4848      	ldr	r0, [pc, #288]	; (5f3c <z_thread_abort+0x144>)
    5e1c:	2381      	movs	r3, #129	; 0x81
    5e1e:	f001 f889 	bl	6f34 <printk>
    5e22:	4943      	ldr	r1, [pc, #268]	; (5f30 <z_thread_abort+0x138>)
    5e24:	4846      	ldr	r0, [pc, #280]	; (5f40 <z_thread_abort+0x148>)
    5e26:	f001 f885 	bl	6f34 <printk>
    5e2a:	4842      	ldr	r0, [pc, #264]	; (5f34 <z_thread_abort+0x13c>)
    5e2c:	2181      	movs	r1, #129	; 0x81
    5e2e:	f000 ffad 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5e32:	483f      	ldr	r0, [pc, #252]	; (5f30 <z_thread_abort+0x138>)
    5e34:	f000 fa6e 	bl	6314 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5e38:	7b63      	ldrb	r3, [r4, #13]
    5e3a:	071a      	lsls	r2, r3, #28
    5e3c:	d517      	bpl.n	5e6e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e3e:	483c      	ldr	r0, [pc, #240]	; (5f30 <z_thread_abort+0x138>)
    5e40:	f000 fa58 	bl	62f4 <z_spin_unlock_valid>
    5e44:	b968      	cbnz	r0, 5e62 <z_thread_abort+0x6a>
    5e46:	4a3b      	ldr	r2, [pc, #236]	; (5f34 <z_thread_abort+0x13c>)
    5e48:	493e      	ldr	r1, [pc, #248]	; (5f44 <z_thread_abort+0x14c>)
    5e4a:	483c      	ldr	r0, [pc, #240]	; (5f3c <z_thread_abort+0x144>)
    5e4c:	23ac      	movs	r3, #172	; 0xac
    5e4e:	f001 f871 	bl	6f34 <printk>
    5e52:	4937      	ldr	r1, [pc, #220]	; (5f30 <z_thread_abort+0x138>)
    5e54:	483c      	ldr	r0, [pc, #240]	; (5f48 <z_thread_abort+0x150>)
    5e56:	f001 f86d 	bl	6f34 <printk>
    5e5a:	4836      	ldr	r0, [pc, #216]	; (5f34 <z_thread_abort+0x13c>)
    5e5c:	21ac      	movs	r1, #172	; 0xac
    5e5e:	f000 ff95 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    5e62:	f386 8811 	msr	BASEPRI, r6
    5e66:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e6e:	f023 0220 	bic.w	r2, r3, #32
    5e72:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5e76:	09d2      	lsrs	r2, r2, #7
    5e78:	d142      	bne.n	5f00 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e7a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    5e7c:	68a3      	ldr	r3, [r4, #8]
    5e7e:	b113      	cbz	r3, 5e86 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    5e80:	4620      	mov	r0, r4
    5e82:	f7ff f8ef 	bl	5064 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5e86:	f104 0018 	add.w	r0, r4, #24
    5e8a:	f000 fb6f 	bl	656c <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5e8e:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5e92:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5e96:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e98:	42bd      	cmp	r5, r7
    5e9a:	d001      	beq.n	5ea0 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5e9c:	2d00      	cmp	r5, #0
    5e9e:	d139      	bne.n	5f14 <z_thread_abort+0x11c>
		update_cache(1);
    5ea0:	2001      	movs	r0, #1
    5ea2:	f7ff f901 	bl	50a8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5ea6:	4b29      	ldr	r3, [pc, #164]	; (5f4c <z_thread_abort+0x154>)
    5ea8:	689b      	ldr	r3, [r3, #8]
    5eaa:	42a3      	cmp	r3, r4
    5eac:	d1c7      	bne.n	5e3e <z_thread_abort+0x46>
    5eae:	f3ef 8305 	mrs	r3, IPSR
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d1c3      	bne.n	5e3e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5eb6:	481e      	ldr	r0, [pc, #120]	; (5f30 <z_thread_abort+0x138>)
    5eb8:	f000 fa1c 	bl	62f4 <z_spin_unlock_valid>
    5ebc:	b968      	cbnz	r0, 5eda <z_thread_abort+0xe2>
    5ebe:	4a1d      	ldr	r2, [pc, #116]	; (5f34 <z_thread_abort+0x13c>)
    5ec0:	4920      	ldr	r1, [pc, #128]	; (5f44 <z_thread_abort+0x14c>)
    5ec2:	481e      	ldr	r0, [pc, #120]	; (5f3c <z_thread_abort+0x144>)
    5ec4:	23c3      	movs	r3, #195	; 0xc3
    5ec6:	f001 f835 	bl	6f34 <printk>
    5eca:	4919      	ldr	r1, [pc, #100]	; (5f30 <z_thread_abort+0x138>)
    5ecc:	481e      	ldr	r0, [pc, #120]	; (5f48 <z_thread_abort+0x150>)
    5ece:	f001 f831 	bl	6f34 <printk>
    5ed2:	4818      	ldr	r0, [pc, #96]	; (5f34 <z_thread_abort+0x13c>)
    5ed4:	21c3      	movs	r1, #195	; 0xc3
    5ed6:	f000 ff59 	bl	6d8c <assert_post_action>
    5eda:	4630      	mov	r0, r6
    5edc:	f7fb ffca 	bl	1e74 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    5ee0:	4a1b      	ldr	r2, [pc, #108]	; (5f50 <z_thread_abort+0x158>)
    5ee2:	491c      	ldr	r1, [pc, #112]	; (5f54 <z_thread_abort+0x15c>)
    5ee4:	4815      	ldr	r0, [pc, #84]	; (5f3c <z_thread_abort+0x144>)
    5ee6:	f240 634b 	movw	r3, #1611	; 0x64b
    5eea:	f001 f823 	bl	6f34 <printk>
    5eee:	481a      	ldr	r0, [pc, #104]	; (5f58 <z_thread_abort+0x160>)
    5ef0:	f001 f820 	bl	6f34 <printk>
    5ef4:	4816      	ldr	r0, [pc, #88]	; (5f50 <z_thread_abort+0x158>)
    5ef6:	f240 614b 	movw	r1, #1611	; 0x64b
    5efa:	f000 ff47 	bl	6d8c <assert_post_action>
    5efe:	e79e      	b.n	5e3e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f00:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5f04:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    5f08:	4814      	ldr	r0, [pc, #80]	; (5f5c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f0a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5f0c:	4621      	mov	r1, r4
    5f0e:	f7ff f887 	bl	5020 <z_priq_dumb_remove>
}
    5f12:	e7b3      	b.n	5e7c <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    5f14:	4628      	mov	r0, r5
    5f16:	f7ff f8a5 	bl	5064 <unpend_thread_no_timeout>
    5f1a:	f105 0018 	add.w	r0, r5, #24
    5f1e:	f000 fb25 	bl	656c <z_abort_timeout>
    5f22:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5f26:	4628      	mov	r0, r5
    5f28:	f7ff f9c4 	bl	52b4 <ready_thread>
    5f2c:	e7b3      	b.n	5e96 <z_thread_abort+0x9e>
    5f2e:	bf00      	nop
    5f30:	20000a20 	.word	0x20000a20
    5f34:	00007e87 	.word	0x00007e87
    5f38:	00007ed9 	.word	0x00007ed9
    5f3c:	000079ac 	.word	0x000079ac
    5f40:	00007eee 	.word	0x00007eee
    5f44:	00007ead 	.word	0x00007ead
    5f48:	00007ec4 	.word	0x00007ec4
    5f4c:	200009f0 	.word	0x200009f0
    5f50:	000086fc 	.word	0x000086fc
    5f54:	00007e6f 	.word	0x00007e6f
    5f58:	000087ee 	.word	0x000087ee
    5f5c:	20000a10 	.word	0x20000a10

00005f60 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5f60:	b538      	push	{r3, r4, r5, lr}
    5f62:	4604      	mov	r4, r0
	__asm__ volatile(
    5f64:	f04f 0320 	mov.w	r3, #32
    5f68:	f3ef 8511 	mrs	r5, BASEPRI
    5f6c:	f383 8812 	msr	BASEPRI_MAX, r3
    5f70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f74:	4814      	ldr	r0, [pc, #80]	; (5fc8 <z_impl_k_sem_give+0x68>)
    5f76:	f000 f9af 	bl	62d8 <z_spin_lock_valid>
    5f7a:	b968      	cbnz	r0, 5f98 <z_impl_k_sem_give+0x38>
    5f7c:	4a13      	ldr	r2, [pc, #76]	; (5fcc <z_impl_k_sem_give+0x6c>)
    5f7e:	4914      	ldr	r1, [pc, #80]	; (5fd0 <z_impl_k_sem_give+0x70>)
    5f80:	4814      	ldr	r0, [pc, #80]	; (5fd4 <z_impl_k_sem_give+0x74>)
    5f82:	2381      	movs	r3, #129	; 0x81
    5f84:	f000 ffd6 	bl	6f34 <printk>
    5f88:	490f      	ldr	r1, [pc, #60]	; (5fc8 <z_impl_k_sem_give+0x68>)
    5f8a:	4813      	ldr	r0, [pc, #76]	; (5fd8 <z_impl_k_sem_give+0x78>)
    5f8c:	f000 ffd2 	bl	6f34 <printk>
    5f90:	480e      	ldr	r0, [pc, #56]	; (5fcc <z_impl_k_sem_give+0x6c>)
    5f92:	2181      	movs	r1, #129	; 0x81
    5f94:	f000 fefa 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    5f98:	480b      	ldr	r0, [pc, #44]	; (5fc8 <z_impl_k_sem_give+0x68>)
    5f9a:	f000 f9bb 	bl	6314 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5f9e:	4620      	mov	r0, r4
    5fa0:	f7ff fd3e 	bl	5a20 <z_unpend_first_thread>

	if (thread != NULL) {
    5fa4:	b148      	cbz	r0, 5fba <z_impl_k_sem_give+0x5a>
    5fa6:	2200      	movs	r2, #0
    5fa8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5faa:	f7ff f9d5 	bl	5358 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5fae:	4629      	mov	r1, r5
    5fb0:	4805      	ldr	r0, [pc, #20]	; (5fc8 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5fb6:	f7fe bf7b 	b.w	4eb0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5fba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5fbe:	429a      	cmp	r2, r3
    5fc0:	bf18      	it	ne
    5fc2:	3301      	addne	r3, #1
    5fc4:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    5fc6:	e7f2      	b.n	5fae <z_impl_k_sem_give+0x4e>
    5fc8:	20000a2c 	.word	0x20000a2c
    5fcc:	00007e87 	.word	0x00007e87
    5fd0:	00007ed9 	.word	0x00007ed9
    5fd4:	000079ac 	.word	0x000079ac
    5fd8:	00007eee 	.word	0x00007eee

00005fdc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5fde:	4604      	mov	r4, r0
    5fe0:	4616      	mov	r6, r2
    5fe2:	461f      	mov	r7, r3
    5fe4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5fe8:	b17b      	cbz	r3, 600a <z_impl_k_sem_take+0x2e>
    5fea:	ea56 0307 	orrs.w	r3, r6, r7
    5fee:	d00c      	beq.n	600a <z_impl_k_sem_take+0x2e>
    5ff0:	4935      	ldr	r1, [pc, #212]	; (60c8 <z_impl_k_sem_take+0xec>)
    5ff2:	4a36      	ldr	r2, [pc, #216]	; (60cc <z_impl_k_sem_take+0xf0>)
    5ff4:	4836      	ldr	r0, [pc, #216]	; (60d0 <z_impl_k_sem_take+0xf4>)
    5ff6:	2379      	movs	r3, #121	; 0x79
    5ff8:	f000 ff9c 	bl	6f34 <printk>
    5ffc:	4835      	ldr	r0, [pc, #212]	; (60d4 <z_impl_k_sem_take+0xf8>)
    5ffe:	f000 ff99 	bl	6f34 <printk>
    6002:	4832      	ldr	r0, [pc, #200]	; (60cc <z_impl_k_sem_take+0xf0>)
    6004:	2179      	movs	r1, #121	; 0x79
    6006:	f000 fec1 	bl	6d8c <assert_post_action>
    600a:	f04f 0320 	mov.w	r3, #32
    600e:	f3ef 8511 	mrs	r5, BASEPRI
    6012:	f383 8812 	msr	BASEPRI_MAX, r3
    6016:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    601a:	482f      	ldr	r0, [pc, #188]	; (60d8 <z_impl_k_sem_take+0xfc>)
    601c:	f000 f95c 	bl	62d8 <z_spin_lock_valid>
    6020:	b968      	cbnz	r0, 603e <z_impl_k_sem_take+0x62>
    6022:	4a2e      	ldr	r2, [pc, #184]	; (60dc <z_impl_k_sem_take+0x100>)
    6024:	492e      	ldr	r1, [pc, #184]	; (60e0 <z_impl_k_sem_take+0x104>)
    6026:	482a      	ldr	r0, [pc, #168]	; (60d0 <z_impl_k_sem_take+0xf4>)
    6028:	2381      	movs	r3, #129	; 0x81
    602a:	f000 ff83 	bl	6f34 <printk>
    602e:	492a      	ldr	r1, [pc, #168]	; (60d8 <z_impl_k_sem_take+0xfc>)
    6030:	482c      	ldr	r0, [pc, #176]	; (60e4 <z_impl_k_sem_take+0x108>)
    6032:	f000 ff7f 	bl	6f34 <printk>
    6036:	4829      	ldr	r0, [pc, #164]	; (60dc <z_impl_k_sem_take+0x100>)
    6038:	2181      	movs	r1, #129	; 0x81
    603a:	f000 fea7 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    603e:	4826      	ldr	r0, [pc, #152]	; (60d8 <z_impl_k_sem_take+0xfc>)
    6040:	f000 f968 	bl	6314 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6044:	68a3      	ldr	r3, [r4, #8]
    6046:	b1d3      	cbz	r3, 607e <z_impl_k_sem_take+0xa2>
		sem->count--;
    6048:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    604a:	4823      	ldr	r0, [pc, #140]	; (60d8 <z_impl_k_sem_take+0xfc>)
    604c:	60a3      	str	r3, [r4, #8]
    604e:	f000 f951 	bl	62f4 <z_spin_unlock_valid>
    6052:	b968      	cbnz	r0, 6070 <z_impl_k_sem_take+0x94>
    6054:	4a21      	ldr	r2, [pc, #132]	; (60dc <z_impl_k_sem_take+0x100>)
    6056:	4924      	ldr	r1, [pc, #144]	; (60e8 <z_impl_k_sem_take+0x10c>)
    6058:	481d      	ldr	r0, [pc, #116]	; (60d0 <z_impl_k_sem_take+0xf4>)
    605a:	23ac      	movs	r3, #172	; 0xac
    605c:	f000 ff6a 	bl	6f34 <printk>
    6060:	491d      	ldr	r1, [pc, #116]	; (60d8 <z_impl_k_sem_take+0xfc>)
    6062:	4822      	ldr	r0, [pc, #136]	; (60ec <z_impl_k_sem_take+0x110>)
    6064:	f000 ff66 	bl	6f34 <printk>
    6068:	481c      	ldr	r0, [pc, #112]	; (60dc <z_impl_k_sem_take+0x100>)
    606a:	21ac      	movs	r1, #172	; 0xac
    606c:	f000 fe8e 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    6070:	f385 8811 	msr	BASEPRI, r5
    6074:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6078:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    607a:	b003      	add	sp, #12
    607c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    607e:	ea56 0307 	orrs.w	r3, r6, r7
    6082:	d118      	bne.n	60b6 <z_impl_k_sem_take+0xda>
    6084:	4814      	ldr	r0, [pc, #80]	; (60d8 <z_impl_k_sem_take+0xfc>)
    6086:	f000 f935 	bl	62f4 <z_spin_unlock_valid>
    608a:	b968      	cbnz	r0, 60a8 <z_impl_k_sem_take+0xcc>
    608c:	4a13      	ldr	r2, [pc, #76]	; (60dc <z_impl_k_sem_take+0x100>)
    608e:	4916      	ldr	r1, [pc, #88]	; (60e8 <z_impl_k_sem_take+0x10c>)
    6090:	480f      	ldr	r0, [pc, #60]	; (60d0 <z_impl_k_sem_take+0xf4>)
    6092:	23ac      	movs	r3, #172	; 0xac
    6094:	f000 ff4e 	bl	6f34 <printk>
    6098:	490f      	ldr	r1, [pc, #60]	; (60d8 <z_impl_k_sem_take+0xfc>)
    609a:	4814      	ldr	r0, [pc, #80]	; (60ec <z_impl_k_sem_take+0x110>)
    609c:	f000 ff4a 	bl	6f34 <printk>
    60a0:	480e      	ldr	r0, [pc, #56]	; (60dc <z_impl_k_sem_take+0x100>)
    60a2:	21ac      	movs	r1, #172	; 0xac
    60a4:	f000 fe72 	bl	6d8c <assert_post_action>
    60a8:	f385 8811 	msr	BASEPRI, r5
    60ac:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    60b0:	f06f 000f 	mvn.w	r0, #15
    60b4:	e7e1      	b.n	607a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    60b6:	e9cd 6700 	strd	r6, r7, [sp]
    60ba:	4622      	mov	r2, r4
    60bc:	4629      	mov	r1, r5
    60be:	4806      	ldr	r0, [pc, #24]	; (60d8 <z_impl_k_sem_take+0xfc>)
    60c0:	f7ff fafc 	bl	56bc <z_pend_curr>
	return ret;
    60c4:	e7d9      	b.n	607a <z_impl_k_sem_take+0x9e>
    60c6:	bf00      	nop
    60c8:	00008830 	.word	0x00008830
    60cc:	00008810 	.word	0x00008810
    60d0:	000079ac 	.word	0x000079ac
    60d4:	000086c8 	.word	0x000086c8
    60d8:	20000a2c 	.word	0x20000a2c
    60dc:	00007e87 	.word	0x00007e87
    60e0:	00007ed9 	.word	0x00007ed9
    60e4:	00007eee 	.word	0x00007eee
    60e8:	00007ead 	.word	0x00007ead
    60ec:	00007ec4 	.word	0x00007ec4

000060f0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    60f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    60f4:	b085      	sub	sp, #20
    60f6:	4604      	mov	r4, r0
    60f8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    60fc:	f1b8 0f0f 	cmp.w	r8, #15
{
    6100:	460f      	mov	r7, r1
    6102:	4615      	mov	r5, r2
    6104:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6106:	d132      	bne.n	616e <z_setup_new_thread+0x7e>
    6108:	4b25      	ldr	r3, [pc, #148]	; (61a0 <z_setup_new_thread+0xb0>)
    610a:	4599      	cmp	r9, r3
    610c:	d133      	bne.n	6176 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    610e:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    6112:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6116:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6118:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    611a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    611c:	2304      	movs	r3, #4
    611e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6120:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6124:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6128:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    612c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    612e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6132:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6134:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    613a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    613c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    613e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6140:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6142:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6144:	464b      	mov	r3, r9
	node->prev = NULL;
    6146:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    614a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    614c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    614e:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6150:	4642      	mov	r2, r8
    6152:	4639      	mov	r1, r7
    6154:	4620      	mov	r0, r4
    6156:	f7fb fea7 	bl	1ea8 <arch_new_thread>
	if (!_current) {
    615a:	4b12      	ldr	r3, [pc, #72]	; (61a4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    615c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    615e:	689b      	ldr	r3, [r3, #8]
    6160:	b103      	cbz	r3, 6164 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6164:	6723      	str	r3, [r4, #112]	; 0x70
}
    6166:	4640      	mov	r0, r8
    6168:	b005      	add	sp, #20
    616a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    616e:	f108 0310 	add.w	r3, r8, #16
    6172:	2b1e      	cmp	r3, #30
    6174:	d9cb      	bls.n	610e <z_setup_new_thread+0x1e>
    6176:	4a0c      	ldr	r2, [pc, #48]	; (61a8 <z_setup_new_thread+0xb8>)
    6178:	490c      	ldr	r1, [pc, #48]	; (61ac <z_setup_new_thread+0xbc>)
    617a:	480d      	ldr	r0, [pc, #52]	; (61b0 <z_setup_new_thread+0xc0>)
    617c:	f240 13ff 	movw	r3, #511	; 0x1ff
    6180:	f000 fed8 	bl	6f34 <printk>
    6184:	4641      	mov	r1, r8
    6186:	480b      	ldr	r0, [pc, #44]	; (61b4 <z_setup_new_thread+0xc4>)
    6188:	f06f 030f 	mvn.w	r3, #15
    618c:	220e      	movs	r2, #14
    618e:	f000 fed1 	bl	6f34 <printk>
    6192:	4805      	ldr	r0, [pc, #20]	; (61a8 <z_setup_new_thread+0xb8>)
    6194:	f240 11ff 	movw	r1, #511	; 0x1ff
    6198:	f000 fdf8 	bl	6d8c <assert_post_action>
    619c:	e7b7      	b.n	610e <z_setup_new_thread+0x1e>
    619e:	bf00      	nop
    61a0:	00004635 	.word	0x00004635
    61a4:	200009f0 	.word	0x200009f0
    61a8:	0000887d 	.word	0x0000887d
    61ac:	000088a0 	.word	0x000088a0
    61b0:	000079ac 	.word	0x000079ac
    61b4:	00008920 	.word	0x00008920

000061b8 <z_init_static_threads>:
{
    61b8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    61bc:	4f3f      	ldr	r7, [pc, #252]	; (62bc <z_init_static_threads+0x104>)
    61be:	4d40      	ldr	r5, [pc, #256]	; (62c0 <z_init_static_threads+0x108>)
    61c0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 62d0 <z_init_static_threads+0x118>
{
    61c4:	b086      	sub	sp, #24
    61c6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    61c8:	42bd      	cmp	r5, r7
    61ca:	d90e      	bls.n	61ea <z_init_static_threads+0x32>
    61cc:	493d      	ldr	r1, [pc, #244]	; (62c4 <z_init_static_threads+0x10c>)
    61ce:	483e      	ldr	r0, [pc, #248]	; (62c8 <z_init_static_threads+0x110>)
    61d0:	f240 23cf 	movw	r3, #719	; 0x2cf
    61d4:	4642      	mov	r2, r8
    61d6:	f000 fead 	bl	6f34 <printk>
    61da:	483c      	ldr	r0, [pc, #240]	; (62cc <z_init_static_threads+0x114>)
    61dc:	f000 feaa 	bl	6f34 <printk>
    61e0:	f240 21cf 	movw	r1, #719	; 0x2cf
    61e4:	4640      	mov	r0, r8
    61e6:	f000 fdd1 	bl	6d8c <assert_post_action>
    61ea:	42b5      	cmp	r5, r6
    61ec:	f105 0430 	add.w	r4, r5, #48	; 0x30
    61f0:	d31f      	bcc.n	6232 <z_init_static_threads+0x7a>
	k_sched_lock();
    61f2:	f7fe fea1 	bl	4f38 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    61f6:	4c32      	ldr	r4, [pc, #200]	; (62c0 <z_init_static_threads+0x108>)
    61f8:	4d35      	ldr	r5, [pc, #212]	; (62d0 <z_init_static_threads+0x118>)
    61fa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 62c4 <z_init_static_threads+0x10c>
    61fe:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 62c8 <z_init_static_threads+0x110>
    6202:	42b4      	cmp	r4, r6
    6204:	d90e      	bls.n	6224 <z_init_static_threads+0x6c>
    6206:	4641      	mov	r1, r8
    6208:	f240 23ee 	movw	r3, #750	; 0x2ee
    620c:	462a      	mov	r2, r5
    620e:	4648      	mov	r0, r9
    6210:	f000 fe90 	bl	6f34 <printk>
    6214:	482d      	ldr	r0, [pc, #180]	; (62cc <z_init_static_threads+0x114>)
    6216:	f000 fe8d 	bl	6f34 <printk>
    621a:	f240 21ee 	movw	r1, #750	; 0x2ee
    621e:	4628      	mov	r0, r5
    6220:	f000 fdb4 	bl	6d8c <assert_post_action>
    6224:	42b4      	cmp	r4, r6
    6226:	d321      	bcc.n	626c <z_init_static_threads+0xb4>
}
    6228:	b006      	add	sp, #24
    622a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    622e:	f7ff bb7b 	b.w	5928 <k_sched_unlock>
		z_setup_new_thread(
    6232:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6236:	9305      	str	r3, [sp, #20]
    6238:	f854 3c10 	ldr.w	r3, [r4, #-16]
    623c:	9304      	str	r3, [sp, #16]
    623e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6242:	9303      	str	r3, [sp, #12]
    6244:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6248:	9302      	str	r3, [sp, #8]
    624a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    624e:	9301      	str	r3, [sp, #4]
    6250:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6254:	9300      	str	r3, [sp, #0]
    6256:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    625a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    625e:	f7ff ff47 	bl	60f0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6262:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6266:	655d      	str	r5, [r3, #84]	; 0x54
    6268:	4625      	mov	r5, r4
    626a:	e7ad      	b.n	61c8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    626c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    626e:	1c4b      	adds	r3, r1, #1
    6270:	d014      	beq.n	629c <z_init_static_threads+0xe4>
    6272:	f240 32e7 	movw	r2, #999	; 0x3e7
    6276:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    6278:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    627c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6280:	4693      	mov	fp, r2
    6282:	469c      	mov	ip, r3
    6284:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6288:	459c      	cmp	ip, r3
    628a:	bf08      	it	eq
    628c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    628e:	6827      	ldr	r7, [r4, #0]
    6290:	4658      	mov	r0, fp
    6292:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6294:	d104      	bne.n	62a0 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    6296:	4638      	mov	r0, r7
    6298:	f7ff f8a6 	bl	53e8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    629c:	3430      	adds	r4, #48	; 0x30
    629e:	e7b0      	b.n	6202 <z_init_static_threads+0x4a>
    62a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    62a4:	2300      	movs	r3, #0
    62a6:	f7f9 ff2b 	bl	100 <__aeabi_uldivmod>
    62aa:	4602      	mov	r2, r0
    62ac:	460b      	mov	r3, r1
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    62ae:	f107 0018 	add.w	r0, r7, #24
    62b2:	4908      	ldr	r1, [pc, #32]	; (62d4 <z_init_static_threads+0x11c>)
    62b4:	f000 f886 	bl	63c4 <z_add_timeout>
    62b8:	e7f0      	b.n	629c <z_init_static_threads+0xe4>
    62ba:	bf00      	nop
    62bc:	20000154 	.word	0x20000154
    62c0:	20000154 	.word	0x20000154
    62c4:	00008951 	.word	0x00008951
    62c8:	000079ac 	.word	0x000079ac
    62cc:	0000860e 	.word	0x0000860e
    62d0:	0000887d 	.word	0x0000887d
    62d4:	00005491 	.word	0x00005491

000062d8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    62d8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    62da:	b138      	cbz	r0, 62ec <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    62dc:	4b04      	ldr	r3, [pc, #16]	; (62f0 <z_spin_lock_valid+0x18>)
    62de:	7d1b      	ldrb	r3, [r3, #20]
    62e0:	f000 0003 	and.w	r0, r0, #3
    62e4:	1ac0      	subs	r0, r0, r3
    62e6:	bf18      	it	ne
    62e8:	2001      	movne	r0, #1
    62ea:	4770      	bx	lr
			return false;
		}
	}
	return true;
    62ec:	2001      	movs	r0, #1
}
    62ee:	4770      	bx	lr
    62f0:	200009f0 	.word	0x200009f0

000062f4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    62f4:	4906      	ldr	r1, [pc, #24]	; (6310 <z_spin_unlock_valid+0x1c>)
{
    62f6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    62f8:	688a      	ldr	r2, [r1, #8]
    62fa:	7d08      	ldrb	r0, [r1, #20]
    62fc:	6819      	ldr	r1, [r3, #0]
    62fe:	4302      	orrs	r2, r0
    6300:	4291      	cmp	r1, r2
    6302:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    6306:	bf04      	itt	eq
    6308:	6018      	streq	r0, [r3, #0]
	return true;
    630a:	2001      	moveq	r0, #1
}
    630c:	4770      	bx	lr
    630e:	bf00      	nop
    6310:	200009f0 	.word	0x200009f0

00006314 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    6314:	4a02      	ldr	r2, [pc, #8]	; (6320 <z_spin_lock_set_owner+0xc>)
    6316:	7d11      	ldrb	r1, [r2, #20]
    6318:	6893      	ldr	r3, [r2, #8]
    631a:	430b      	orrs	r3, r1
    631c:	6003      	str	r3, [r0, #0]
}
    631e:	4770      	bx	lr
    6320:	200009f0 	.word	0x200009f0

00006324 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6324:	4b03      	ldr	r3, [pc, #12]	; (6334 <elapsed+0x10>)
    6326:	681b      	ldr	r3, [r3, #0]
    6328:	b90b      	cbnz	r3, 632e <elapsed+0xa>
    632a:	f7fd ba2d 	b.w	3788 <sys_clock_elapsed>
}
    632e:	2000      	movs	r0, #0
    6330:	4770      	bx	lr
    6332:	bf00      	nop
    6334:	20000a30 	.word	0x20000a30

00006338 <next_timeout>:

static int32_t next_timeout(void)
{
    6338:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    633a:	4b13      	ldr	r3, [pc, #76]	; (6388 <next_timeout+0x50>)
    633c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    633e:	429c      	cmp	r4, r3
    6340:	bf08      	it	eq
    6342:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6344:	f7ff ffee 	bl	6324 <elapsed>
    6348:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    634a:	b1bc      	cbz	r4, 637c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    634c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6350:	1b40      	subs	r0, r0, r5
    6352:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    6356:	2801      	cmp	r0, #1
    6358:	f171 0300 	sbcs.w	r3, r1, #0
    635c:	db11      	blt.n	6382 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    635e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6362:	2300      	movs	r3, #0
    6364:	4282      	cmp	r2, r0
    6366:	eb73 0401 	sbcs.w	r4, r3, r1
    636a:	da00      	bge.n	636e <next_timeout+0x36>
    636c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    636e:	4b07      	ldr	r3, [pc, #28]	; (638c <next_timeout+0x54>)
    6370:	691b      	ldr	r3, [r3, #16]
    6372:	b113      	cbz	r3, 637a <next_timeout+0x42>
    6374:	4298      	cmp	r0, r3
    6376:	bfa8      	it	ge
    6378:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    637a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    637c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6380:	e7f5      	b.n	636e <next_timeout+0x36>
    6382:	2000      	movs	r0, #0
    6384:	e7f3      	b.n	636e <next_timeout+0x36>
    6386:	bf00      	nop
    6388:	200000d8 	.word	0x200000d8
    638c:	200009f0 	.word	0x200009f0

00006390 <remove_timeout>:
{
    6390:	b530      	push	{r4, r5, lr}
    6392:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6394:	b168      	cbz	r0, 63b2 <remove_timeout+0x22>
    6396:	4a0a      	ldr	r2, [pc, #40]	; (63c0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    6398:	6852      	ldr	r2, [r2, #4]
    639a:	4290      	cmp	r0, r2
    639c:	d009      	beq.n	63b2 <remove_timeout+0x22>
	if (next(t) != NULL) {
    639e:	b143      	cbz	r3, 63b2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    63a0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    63a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    63a8:	1912      	adds	r2, r2, r4
    63aa:	eb45 0101 	adc.w	r1, r5, r1
    63ae:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    63b2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    63b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    63b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    63b8:	2300      	movs	r3, #0
	node->prev = NULL;
    63ba:	e9c0 3300 	strd	r3, r3, [r0]
}
    63be:	bd30      	pop	{r4, r5, pc}
    63c0:	200000d8 	.word	0x200000d8

000063c4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    63c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63c8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    63ca:	1c6b      	adds	r3, r5, #1
    63cc:	bf08      	it	eq
    63ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    63d2:	4682      	mov	sl, r0
    63d4:	468b      	mov	fp, r1
    63d6:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    63d8:	f000 80aa 	beq.w	6530 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    63dc:	6803      	ldr	r3, [r0, #0]
    63de:	b163      	cbz	r3, 63fa <z_add_timeout+0x36>
    63e0:	4955      	ldr	r1, [pc, #340]	; (6538 <z_add_timeout+0x174>)
    63e2:	4a56      	ldr	r2, [pc, #344]	; (653c <z_add_timeout+0x178>)
    63e4:	4856      	ldr	r0, [pc, #344]	; (6540 <z_add_timeout+0x17c>)
    63e6:	235d      	movs	r3, #93	; 0x5d
    63e8:	f000 fda4 	bl	6f34 <printk>
    63ec:	4855      	ldr	r0, [pc, #340]	; (6544 <z_add_timeout+0x180>)
    63ee:	f000 fda1 	bl	6f34 <printk>
    63f2:	4852      	ldr	r0, [pc, #328]	; (653c <z_add_timeout+0x178>)
    63f4:	215d      	movs	r1, #93	; 0x5d
    63f6:	f000 fcc9 	bl	6d8c <assert_post_action>
	to->fn = fn;
    63fa:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    63fe:	f04f 0320 	mov.w	r3, #32
    6402:	f3ef 8b11 	mrs	fp, BASEPRI
    6406:	f383 8812 	msr	BASEPRI_MAX, r3
    640a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    640e:	484e      	ldr	r0, [pc, #312]	; (6548 <z_add_timeout+0x184>)
    6410:	f7ff ff62 	bl	62d8 <z_spin_lock_valid>
    6414:	b968      	cbnz	r0, 6432 <z_add_timeout+0x6e>
    6416:	4a4d      	ldr	r2, [pc, #308]	; (654c <z_add_timeout+0x188>)
    6418:	494d      	ldr	r1, [pc, #308]	; (6550 <z_add_timeout+0x18c>)
    641a:	4849      	ldr	r0, [pc, #292]	; (6540 <z_add_timeout+0x17c>)
    641c:	2381      	movs	r3, #129	; 0x81
    641e:	f000 fd89 	bl	6f34 <printk>
    6422:	4949      	ldr	r1, [pc, #292]	; (6548 <z_add_timeout+0x184>)
    6424:	484b      	ldr	r0, [pc, #300]	; (6554 <z_add_timeout+0x190>)
    6426:	f000 fd85 	bl	6f34 <printk>
    642a:	4848      	ldr	r0, [pc, #288]	; (654c <z_add_timeout+0x188>)
    642c:	2181      	movs	r1, #129	; 0x81
    642e:	f000 fcad 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    6432:	4845      	ldr	r0, [pc, #276]	; (6548 <z_add_timeout+0x184>)
    6434:	f7ff ff6e 	bl	6314 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6438:	f06f 0301 	mvn.w	r3, #1
    643c:	ebb3 0804 	subs.w	r8, r3, r4
    6440:	f04f 32ff 	mov.w	r2, #4294967295
    6444:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6448:	f1b8 0f00 	cmp.w	r8, #0
    644c:	f179 0100 	sbcs.w	r1, r9, #0
    6450:	db1c      	blt.n	648c <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6452:	4841      	ldr	r0, [pc, #260]	; (6558 <z_add_timeout+0x194>)
    6454:	e9d0 1000 	ldrd	r1, r0, [r0]
    6458:	1a5b      	subs	r3, r3, r1
    645a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    645e:	1b1e      	subs	r6, r3, r4
    6460:	eb62 0705 	sbc.w	r7, r2, r5
    6464:	2e01      	cmp	r6, #1
    6466:	f177 0300 	sbcs.w	r3, r7, #0
    646a:	bfbc      	itt	lt
    646c:	2601      	movlt	r6, #1
    646e:	2700      	movlt	r7, #0
    6470:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    6474:	4a39      	ldr	r2, [pc, #228]	; (655c <z_add_timeout+0x198>)
    6476:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    647a:	4293      	cmp	r3, r2
    647c:	d11d      	bne.n	64ba <z_add_timeout+0xf6>
	node->prev = tail;
    647e:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    6482:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    6486:	f8c2 a004 	str.w	sl, [r2, #4]
}
    648a:	e02c      	b.n	64e6 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    648c:	f7ff ff4a 	bl	6324 <elapsed>
    6490:	1c63      	adds	r3, r4, #1
    6492:	9300      	str	r3, [sp, #0]
    6494:	f145 0300 	adc.w	r3, r5, #0
    6498:	9301      	str	r3, [sp, #4]
    649a:	e9dd 2300 	ldrd	r2, r3, [sp]
    649e:	1812      	adds	r2, r2, r0
    64a0:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    64a4:	e9ca 2304 	strd	r2, r3, [sl, #16]
    64a8:	e7e4      	b.n	6474 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    64aa:	1be0      	subs	r0, r4, r7
    64ac:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    64b0:	42b3      	cmp	r3, r6
    64b2:	e9ca 0104 	strd	r0, r1, [sl, #16]
    64b6:	d0e2      	beq.n	647e <z_add_timeout+0xba>
    64b8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    64ba:	2b00      	cmp	r3, #0
    64bc:	d0df      	beq.n	647e <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    64be:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    64c2:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    64c6:	42bc      	cmp	r4, r7
    64c8:	eb75 0108 	sbcs.w	r1, r5, r8
    64cc:	daed      	bge.n	64aa <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    64ce:	1b38      	subs	r0, r7, r4
    64d0:	eb68 0105 	sbc.w	r1, r8, r5
    64d4:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    64d8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    64da:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    64de:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    64e2:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    64e6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64e8:	4293      	cmp	r3, r2
    64ea:	d00b      	beq.n	6504 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    64ec:	459a      	cmp	sl, r3
    64ee:	d109      	bne.n	6504 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    64f0:	f7ff ff22 	bl	6338 <next_timeout>

			if (next_time == 0 ||
    64f4:	b118      	cbz	r0, 64fe <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    64f6:	4b1a      	ldr	r3, [pc, #104]	; (6560 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    64f8:	691b      	ldr	r3, [r3, #16]
    64fa:	4283      	cmp	r3, r0
    64fc:	d002      	beq.n	6504 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    64fe:	2100      	movs	r1, #0
    6500:	f7fd f912 	bl	3728 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6504:	4810      	ldr	r0, [pc, #64]	; (6548 <z_add_timeout+0x184>)
    6506:	f7ff fef5 	bl	62f4 <z_spin_unlock_valid>
    650a:	b968      	cbnz	r0, 6528 <z_add_timeout+0x164>
    650c:	4a0f      	ldr	r2, [pc, #60]	; (654c <z_add_timeout+0x188>)
    650e:	4915      	ldr	r1, [pc, #84]	; (6564 <z_add_timeout+0x1a0>)
    6510:	480b      	ldr	r0, [pc, #44]	; (6540 <z_add_timeout+0x17c>)
    6512:	23ac      	movs	r3, #172	; 0xac
    6514:	f000 fd0e 	bl	6f34 <printk>
    6518:	490b      	ldr	r1, [pc, #44]	; (6548 <z_add_timeout+0x184>)
    651a:	4813      	ldr	r0, [pc, #76]	; (6568 <z_add_timeout+0x1a4>)
    651c:	f000 fd0a 	bl	6f34 <printk>
    6520:	480a      	ldr	r0, [pc, #40]	; (654c <z_add_timeout+0x188>)
    6522:	21ac      	movs	r1, #172	; 0xac
    6524:	f000 fc32 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    6528:	f38b 8811 	msr	BASEPRI, fp
    652c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6530:	b003      	add	sp, #12
    6532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6536:	bf00      	nop
    6538:	000089a2 	.word	0x000089a2
    653c:	0000897e 	.word	0x0000897e
    6540:	000079ac 	.word	0x000079ac
    6544:	000086c8 	.word	0x000086c8
    6548:	20000a34 	.word	0x20000a34
    654c:	00007e87 	.word	0x00007e87
    6550:	00007ed9 	.word	0x00007ed9
    6554:	00007eee 	.word	0x00007eee
    6558:	200002c8 	.word	0x200002c8
    655c:	200000d8 	.word	0x200000d8
    6560:	200009f0 	.word	0x200009f0
    6564:	00007ead 	.word	0x00007ead
    6568:	00007ec4 	.word	0x00007ec4

0000656c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    656c:	b538      	push	{r3, r4, r5, lr}
    656e:	4604      	mov	r4, r0
	__asm__ volatile(
    6570:	f04f 0320 	mov.w	r3, #32
    6574:	f3ef 8511 	mrs	r5, BASEPRI
    6578:	f383 8812 	msr	BASEPRI_MAX, r3
    657c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6580:	481a      	ldr	r0, [pc, #104]	; (65ec <z_abort_timeout+0x80>)
    6582:	f7ff fea9 	bl	62d8 <z_spin_lock_valid>
    6586:	b968      	cbnz	r0, 65a4 <z_abort_timeout+0x38>
    6588:	4a19      	ldr	r2, [pc, #100]	; (65f0 <z_abort_timeout+0x84>)
    658a:	491a      	ldr	r1, [pc, #104]	; (65f4 <z_abort_timeout+0x88>)
    658c:	481a      	ldr	r0, [pc, #104]	; (65f8 <z_abort_timeout+0x8c>)
    658e:	2381      	movs	r3, #129	; 0x81
    6590:	f000 fcd0 	bl	6f34 <printk>
    6594:	4915      	ldr	r1, [pc, #84]	; (65ec <z_abort_timeout+0x80>)
    6596:	4819      	ldr	r0, [pc, #100]	; (65fc <z_abort_timeout+0x90>)
    6598:	f000 fccc 	bl	6f34 <printk>
    659c:	4814      	ldr	r0, [pc, #80]	; (65f0 <z_abort_timeout+0x84>)
    659e:	2181      	movs	r1, #129	; 0x81
    65a0:	f000 fbf4 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    65a4:	4811      	ldr	r0, [pc, #68]	; (65ec <z_abort_timeout+0x80>)
    65a6:	f7ff feb5 	bl	6314 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    65aa:	6823      	ldr	r3, [r4, #0]
    65ac:	b1db      	cbz	r3, 65e6 <z_abort_timeout+0x7a>
			remove_timeout(to);
    65ae:	4620      	mov	r0, r4
    65b0:	f7ff feee 	bl	6390 <remove_timeout>
			ret = 0;
    65b4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65b6:	480d      	ldr	r0, [pc, #52]	; (65ec <z_abort_timeout+0x80>)
    65b8:	f7ff fe9c 	bl	62f4 <z_spin_unlock_valid>
    65bc:	b968      	cbnz	r0, 65da <z_abort_timeout+0x6e>
    65be:	4a0c      	ldr	r2, [pc, #48]	; (65f0 <z_abort_timeout+0x84>)
    65c0:	490f      	ldr	r1, [pc, #60]	; (6600 <z_abort_timeout+0x94>)
    65c2:	480d      	ldr	r0, [pc, #52]	; (65f8 <z_abort_timeout+0x8c>)
    65c4:	23ac      	movs	r3, #172	; 0xac
    65c6:	f000 fcb5 	bl	6f34 <printk>
    65ca:	4908      	ldr	r1, [pc, #32]	; (65ec <z_abort_timeout+0x80>)
    65cc:	480d      	ldr	r0, [pc, #52]	; (6604 <z_abort_timeout+0x98>)
    65ce:	f000 fcb1 	bl	6f34 <printk>
    65d2:	4807      	ldr	r0, [pc, #28]	; (65f0 <z_abort_timeout+0x84>)
    65d4:	21ac      	movs	r1, #172	; 0xac
    65d6:	f000 fbd9 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    65da:	f385 8811 	msr	BASEPRI, r5
    65de:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    65e2:	4620      	mov	r0, r4
    65e4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    65e6:	f06f 0415 	mvn.w	r4, #21
    65ea:	e7e4      	b.n	65b6 <z_abort_timeout+0x4a>
    65ec:	20000a34 	.word	0x20000a34
    65f0:	00007e87 	.word	0x00007e87
    65f4:	00007ed9 	.word	0x00007ed9
    65f8:	000079ac 	.word	0x000079ac
    65fc:	00007eee 	.word	0x00007eee
    6600:	00007ead 	.word	0x00007ead
    6604:	00007ec4 	.word	0x00007ec4

00006608 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    6608:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    660a:	f04f 0320 	mov.w	r3, #32
    660e:	f3ef 8511 	mrs	r5, BASEPRI
    6612:	f383 8812 	msr	BASEPRI_MAX, r3
    6616:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    661a:	4818      	ldr	r0, [pc, #96]	; (667c <z_get_next_timeout_expiry+0x74>)
    661c:	f7ff fe5c 	bl	62d8 <z_spin_lock_valid>
    6620:	b968      	cbnz	r0, 663e <z_get_next_timeout_expiry+0x36>
    6622:	4a17      	ldr	r2, [pc, #92]	; (6680 <z_get_next_timeout_expiry+0x78>)
    6624:	4917      	ldr	r1, [pc, #92]	; (6684 <z_get_next_timeout_expiry+0x7c>)
    6626:	4818      	ldr	r0, [pc, #96]	; (6688 <z_get_next_timeout_expiry+0x80>)
    6628:	2381      	movs	r3, #129	; 0x81
    662a:	f000 fc83 	bl	6f34 <printk>
    662e:	4913      	ldr	r1, [pc, #76]	; (667c <z_get_next_timeout_expiry+0x74>)
    6630:	4816      	ldr	r0, [pc, #88]	; (668c <z_get_next_timeout_expiry+0x84>)
    6632:	f000 fc7f 	bl	6f34 <printk>
    6636:	4812      	ldr	r0, [pc, #72]	; (6680 <z_get_next_timeout_expiry+0x78>)
    6638:	2181      	movs	r1, #129	; 0x81
    663a:	f000 fba7 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    663e:	480f      	ldr	r0, [pc, #60]	; (667c <z_get_next_timeout_expiry+0x74>)
    6640:	f7ff fe68 	bl	6314 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6644:	f7ff fe78 	bl	6338 <next_timeout>
    6648:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    664a:	480c      	ldr	r0, [pc, #48]	; (667c <z_get_next_timeout_expiry+0x74>)
    664c:	f7ff fe52 	bl	62f4 <z_spin_unlock_valid>
    6650:	b968      	cbnz	r0, 666e <z_get_next_timeout_expiry+0x66>
    6652:	4a0b      	ldr	r2, [pc, #44]	; (6680 <z_get_next_timeout_expiry+0x78>)
    6654:	490e      	ldr	r1, [pc, #56]	; (6690 <z_get_next_timeout_expiry+0x88>)
    6656:	480c      	ldr	r0, [pc, #48]	; (6688 <z_get_next_timeout_expiry+0x80>)
    6658:	23ac      	movs	r3, #172	; 0xac
    665a:	f000 fc6b 	bl	6f34 <printk>
    665e:	4907      	ldr	r1, [pc, #28]	; (667c <z_get_next_timeout_expiry+0x74>)
    6660:	480c      	ldr	r0, [pc, #48]	; (6694 <z_get_next_timeout_expiry+0x8c>)
    6662:	f000 fc67 	bl	6f34 <printk>
    6666:	4806      	ldr	r0, [pc, #24]	; (6680 <z_get_next_timeout_expiry+0x78>)
    6668:	21ac      	movs	r1, #172	; 0xac
    666a:	f000 fb8f 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    666e:	f385 8811 	msr	BASEPRI, r5
    6672:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6676:	4620      	mov	r0, r4
    6678:	bd38      	pop	{r3, r4, r5, pc}
    667a:	bf00      	nop
    667c:	20000a34 	.word	0x20000a34
    6680:	00007e87 	.word	0x00007e87
    6684:	00007ed9 	.word	0x00007ed9
    6688:	000079ac 	.word	0x000079ac
    668c:	00007eee 	.word	0x00007eee
    6690:	00007ead 	.word	0x00007ead
    6694:	00007ec4 	.word	0x00007ec4

00006698 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6698:	b570      	push	{r4, r5, r6, lr}
    669a:	4604      	mov	r4, r0
    669c:	460d      	mov	r5, r1
	__asm__ volatile(
    669e:	f04f 0320 	mov.w	r3, #32
    66a2:	f3ef 8611 	mrs	r6, BASEPRI
    66a6:	f383 8812 	msr	BASEPRI_MAX, r3
    66aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66ae:	481b      	ldr	r0, [pc, #108]	; (671c <z_set_timeout_expiry+0x84>)
    66b0:	f7ff fe12 	bl	62d8 <z_spin_lock_valid>
    66b4:	b968      	cbnz	r0, 66d2 <z_set_timeout_expiry+0x3a>
    66b6:	4a1a      	ldr	r2, [pc, #104]	; (6720 <z_set_timeout_expiry+0x88>)
    66b8:	491a      	ldr	r1, [pc, #104]	; (6724 <z_set_timeout_expiry+0x8c>)
    66ba:	481b      	ldr	r0, [pc, #108]	; (6728 <z_set_timeout_expiry+0x90>)
    66bc:	2381      	movs	r3, #129	; 0x81
    66be:	f000 fc39 	bl	6f34 <printk>
    66c2:	4916      	ldr	r1, [pc, #88]	; (671c <z_set_timeout_expiry+0x84>)
    66c4:	4819      	ldr	r0, [pc, #100]	; (672c <z_set_timeout_expiry+0x94>)
    66c6:	f000 fc35 	bl	6f34 <printk>
    66ca:	4815      	ldr	r0, [pc, #84]	; (6720 <z_set_timeout_expiry+0x88>)
    66cc:	2181      	movs	r1, #129	; 0x81
    66ce:	f000 fb5d 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    66d2:	4812      	ldr	r0, [pc, #72]	; (671c <z_set_timeout_expiry+0x84>)
    66d4:	f7ff fe1e 	bl	6314 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    66d8:	f7ff fe2e 	bl	6338 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    66dc:	2801      	cmp	r0, #1
    66de:	dd05      	ble.n	66ec <z_set_timeout_expiry+0x54>
    66e0:	42a0      	cmp	r0, r4
    66e2:	db03      	blt.n	66ec <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    66e4:	4629      	mov	r1, r5
    66e6:	4620      	mov	r0, r4
    66e8:	f7fd f81e 	bl	3728 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66ec:	480b      	ldr	r0, [pc, #44]	; (671c <z_set_timeout_expiry+0x84>)
    66ee:	f7ff fe01 	bl	62f4 <z_spin_unlock_valid>
    66f2:	b968      	cbnz	r0, 6710 <z_set_timeout_expiry+0x78>
    66f4:	4a0a      	ldr	r2, [pc, #40]	; (6720 <z_set_timeout_expiry+0x88>)
    66f6:	490e      	ldr	r1, [pc, #56]	; (6730 <z_set_timeout_expiry+0x98>)
    66f8:	480b      	ldr	r0, [pc, #44]	; (6728 <z_set_timeout_expiry+0x90>)
    66fa:	23ac      	movs	r3, #172	; 0xac
    66fc:	f000 fc1a 	bl	6f34 <printk>
    6700:	4906      	ldr	r1, [pc, #24]	; (671c <z_set_timeout_expiry+0x84>)
    6702:	480c      	ldr	r0, [pc, #48]	; (6734 <z_set_timeout_expiry+0x9c>)
    6704:	f000 fc16 	bl	6f34 <printk>
    6708:	4805      	ldr	r0, [pc, #20]	; (6720 <z_set_timeout_expiry+0x88>)
    670a:	21ac      	movs	r1, #172	; 0xac
    670c:	f000 fb3e 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    6710:	f386 8811 	msr	BASEPRI, r6
    6714:	f3bf 8f6f 	isb	sy
		}
	}
}
    6718:	bd70      	pop	{r4, r5, r6, pc}
    671a:	bf00      	nop
    671c:	20000a34 	.word	0x20000a34
    6720:	00007e87 	.word	0x00007e87
    6724:	00007ed9 	.word	0x00007ed9
    6728:	000079ac 	.word	0x000079ac
    672c:	00007eee 	.word	0x00007eee
    6730:	00007ead 	.word	0x00007ead
    6734:	00007ec4 	.word	0x00007ec4

00006738 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    6738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    673c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    673e:	f7fe fd41 	bl	51c4 <z_time_slice>
	__asm__ volatile(
    6742:	f04f 0320 	mov.w	r3, #32
    6746:	f3ef 8711 	mrs	r7, BASEPRI
    674a:	f383 8812 	msr	BASEPRI_MAX, r3
    674e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6752:	4855      	ldr	r0, [pc, #340]	; (68a8 <sys_clock_announce+0x170>)
    6754:	f7ff fdc0 	bl	62d8 <z_spin_lock_valid>
    6758:	b968      	cbnz	r0, 6776 <sys_clock_announce+0x3e>
    675a:	4a54      	ldr	r2, [pc, #336]	; (68ac <sys_clock_announce+0x174>)
    675c:	4954      	ldr	r1, [pc, #336]	; (68b0 <sys_clock_announce+0x178>)
    675e:	4855      	ldr	r0, [pc, #340]	; (68b4 <sys_clock_announce+0x17c>)
    6760:	2381      	movs	r3, #129	; 0x81
    6762:	f000 fbe7 	bl	6f34 <printk>
    6766:	4950      	ldr	r1, [pc, #320]	; (68a8 <sys_clock_announce+0x170>)
    6768:	4853      	ldr	r0, [pc, #332]	; (68b8 <sys_clock_announce+0x180>)
    676a:	f000 fbe3 	bl	6f34 <printk>
    676e:	484f      	ldr	r0, [pc, #316]	; (68ac <sys_clock_announce+0x174>)
    6770:	2181      	movs	r1, #129	; 0x81
    6772:	f000 fb0b 	bl	6d8c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6776:	4d51      	ldr	r5, [pc, #324]	; (68bc <sys_clock_announce+0x184>)
    6778:	4e51      	ldr	r6, [pc, #324]	; (68c0 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    677a:	484b      	ldr	r0, [pc, #300]	; (68a8 <sys_clock_announce+0x170>)
	return list->head == list;
    677c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 68cc <sys_clock_announce+0x194>
    6780:	f7ff fdc8 	bl	6314 <z_spin_lock_set_owner>
    6784:	46b3      	mov	fp, r6
    6786:	602c      	str	r4, [r5, #0]
    6788:	e9d6 2300 	ldrd	r2, r3, [r6]
    678c:	f8d5 c000 	ldr.w	ip, [r5]
    6790:	f8da 4000 	ldr.w	r4, [sl]
    6794:	e9cd 2300 	strd	r2, r3, [sp]
    6798:	4662      	mov	r2, ip
    679a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    679c:	4554      	cmp	r4, sl
    679e:	46e0      	mov	r8, ip
    67a0:	4699      	mov	r9, r3
    67a2:	d00c      	beq.n	67be <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    67a4:	b15c      	cbz	r4, 67be <sys_clock_announce+0x86>
    67a6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    67aa:	458c      	cmp	ip, r1
    67ac:	eb79 0302 	sbcs.w	r3, r9, r2
    67b0:	da2e      	bge.n	6810 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    67b2:	ebb1 000c 	subs.w	r0, r1, ip
    67b6:	eb62 0109 	sbc.w	r1, r2, r9
    67ba:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    67be:	9a00      	ldr	r2, [sp, #0]
    67c0:	9901      	ldr	r1, [sp, #4]
    67c2:	eb18 0202 	adds.w	r2, r8, r2
    67c6:	464b      	mov	r3, r9
    67c8:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    67cc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    67ce:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    67d2:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    67d4:	f7ff fdb0 	bl	6338 <next_timeout>
    67d8:	4621      	mov	r1, r4
    67da:	f7fc ffa5 	bl	3728 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67de:	4832      	ldr	r0, [pc, #200]	; (68a8 <sys_clock_announce+0x170>)
    67e0:	f7ff fd88 	bl	62f4 <z_spin_unlock_valid>
    67e4:	b968      	cbnz	r0, 6802 <sys_clock_announce+0xca>
    67e6:	4a31      	ldr	r2, [pc, #196]	; (68ac <sys_clock_announce+0x174>)
    67e8:	4936      	ldr	r1, [pc, #216]	; (68c4 <sys_clock_announce+0x18c>)
    67ea:	4832      	ldr	r0, [pc, #200]	; (68b4 <sys_clock_announce+0x17c>)
    67ec:	23ac      	movs	r3, #172	; 0xac
    67ee:	f000 fba1 	bl	6f34 <printk>
    67f2:	492d      	ldr	r1, [pc, #180]	; (68a8 <sys_clock_announce+0x170>)
    67f4:	4834      	ldr	r0, [pc, #208]	; (68c8 <sys_clock_announce+0x190>)
    67f6:	f000 fb9d 	bl	6f34 <printk>
    67fa:	482c      	ldr	r0, [pc, #176]	; (68ac <sys_clock_announce+0x174>)
    67fc:	21ac      	movs	r1, #172	; 0xac
    67fe:	f000 fac5 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    6802:	f387 8811 	msr	BASEPRI, r7
    6806:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    680a:	b003      	add	sp, #12
    680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    6810:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    6814:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    6818:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    681c:	f04f 0200 	mov.w	r2, #0
    6820:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    6824:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    6828:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    682a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    682e:	4620      	mov	r0, r4
		curr_tick += dt;
    6830:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    6834:	f7ff fdac 	bl	6390 <remove_timeout>
    6838:	481b      	ldr	r0, [pc, #108]	; (68a8 <sys_clock_announce+0x170>)
    683a:	f7ff fd5b 	bl	62f4 <z_spin_unlock_valid>
    683e:	b968      	cbnz	r0, 685c <sys_clock_announce+0x124>
    6840:	4a1a      	ldr	r2, [pc, #104]	; (68ac <sys_clock_announce+0x174>)
    6842:	4920      	ldr	r1, [pc, #128]	; (68c4 <sys_clock_announce+0x18c>)
    6844:	481b      	ldr	r0, [pc, #108]	; (68b4 <sys_clock_announce+0x17c>)
    6846:	23ac      	movs	r3, #172	; 0xac
    6848:	f000 fb74 	bl	6f34 <printk>
    684c:	4916      	ldr	r1, [pc, #88]	; (68a8 <sys_clock_announce+0x170>)
    684e:	481e      	ldr	r0, [pc, #120]	; (68c8 <sys_clock_announce+0x190>)
    6850:	f000 fb70 	bl	6f34 <printk>
    6854:	4815      	ldr	r0, [pc, #84]	; (68ac <sys_clock_announce+0x174>)
    6856:	21ac      	movs	r1, #172	; 0xac
    6858:	f000 fa98 	bl	6d8c <assert_post_action>
    685c:	f387 8811 	msr	BASEPRI, r7
    6860:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6864:	68a3      	ldr	r3, [r4, #8]
    6866:	4620      	mov	r0, r4
    6868:	4798      	blx	r3
	__asm__ volatile(
    686a:	f04f 0320 	mov.w	r3, #32
    686e:	f3ef 8711 	mrs	r7, BASEPRI
    6872:	f383 8812 	msr	BASEPRI_MAX, r3
    6876:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    687a:	480b      	ldr	r0, [pc, #44]	; (68a8 <sys_clock_announce+0x170>)
    687c:	f7ff fd2c 	bl	62d8 <z_spin_lock_valid>
    6880:	b968      	cbnz	r0, 689e <sys_clock_announce+0x166>
    6882:	4a0a      	ldr	r2, [pc, #40]	; (68ac <sys_clock_announce+0x174>)
    6884:	490a      	ldr	r1, [pc, #40]	; (68b0 <sys_clock_announce+0x178>)
    6886:	480b      	ldr	r0, [pc, #44]	; (68b4 <sys_clock_announce+0x17c>)
    6888:	2381      	movs	r3, #129	; 0x81
    688a:	f000 fb53 	bl	6f34 <printk>
    688e:	4906      	ldr	r1, [pc, #24]	; (68a8 <sys_clock_announce+0x170>)
    6890:	4809      	ldr	r0, [pc, #36]	; (68b8 <sys_clock_announce+0x180>)
    6892:	f000 fb4f 	bl	6f34 <printk>
    6896:	4805      	ldr	r0, [pc, #20]	; (68ac <sys_clock_announce+0x174>)
    6898:	2181      	movs	r1, #129	; 0x81
    689a:	f000 fa77 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    689e:	4802      	ldr	r0, [pc, #8]	; (68a8 <sys_clock_announce+0x170>)
    68a0:	f7ff fd38 	bl	6314 <z_spin_lock_set_owner>
	return k;
    68a4:	e770      	b.n	6788 <sys_clock_announce+0x50>
    68a6:	bf00      	nop
    68a8:	20000a34 	.word	0x20000a34
    68ac:	00007e87 	.word	0x00007e87
    68b0:	00007ed9 	.word	0x00007ed9
    68b4:	000079ac 	.word	0x000079ac
    68b8:	00007eee 	.word	0x00007eee
    68bc:	20000a30 	.word	0x20000a30
    68c0:	200002c8 	.word	0x200002c8
    68c4:	00007ead 	.word	0x00007ead
    68c8:	00007ec4 	.word	0x00007ec4
    68cc:	200000d8 	.word	0x200000d8

000068d0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    68d0:	b570      	push	{r4, r5, r6, lr}
    68d2:	f04f 0320 	mov.w	r3, #32
    68d6:	f3ef 8611 	mrs	r6, BASEPRI
    68da:	f383 8812 	msr	BASEPRI_MAX, r3
    68de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    68e2:	481b      	ldr	r0, [pc, #108]	; (6950 <sys_clock_tick_get+0x80>)
    68e4:	f7ff fcf8 	bl	62d8 <z_spin_lock_valid>
    68e8:	b968      	cbnz	r0, 6906 <sys_clock_tick_get+0x36>
    68ea:	4a1a      	ldr	r2, [pc, #104]	; (6954 <sys_clock_tick_get+0x84>)
    68ec:	491a      	ldr	r1, [pc, #104]	; (6958 <sys_clock_tick_get+0x88>)
    68ee:	481b      	ldr	r0, [pc, #108]	; (695c <sys_clock_tick_get+0x8c>)
    68f0:	2381      	movs	r3, #129	; 0x81
    68f2:	f000 fb1f 	bl	6f34 <printk>
    68f6:	4916      	ldr	r1, [pc, #88]	; (6950 <sys_clock_tick_get+0x80>)
    68f8:	4819      	ldr	r0, [pc, #100]	; (6960 <sys_clock_tick_get+0x90>)
    68fa:	f000 fb1b 	bl	6f34 <printk>
    68fe:	4815      	ldr	r0, [pc, #84]	; (6954 <sys_clock_tick_get+0x84>)
    6900:	2181      	movs	r1, #129	; 0x81
    6902:	f000 fa43 	bl	6d8c <assert_post_action>
	z_spin_lock_set_owner(l);
    6906:	4812      	ldr	r0, [pc, #72]	; (6950 <sys_clock_tick_get+0x80>)
    6908:	f7ff fd04 	bl	6314 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    690c:	f7fc ff3c 	bl	3788 <sys_clock_elapsed>
    6910:	4b14      	ldr	r3, [pc, #80]	; (6964 <sys_clock_tick_get+0x94>)
    6912:	e9d3 4500 	ldrd	r4, r5, [r3]
    6916:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6918:	480d      	ldr	r0, [pc, #52]	; (6950 <sys_clock_tick_get+0x80>)
    691a:	f145 0500 	adc.w	r5, r5, #0
    691e:	f7ff fce9 	bl	62f4 <z_spin_unlock_valid>
    6922:	b968      	cbnz	r0, 6940 <sys_clock_tick_get+0x70>
    6924:	4a0b      	ldr	r2, [pc, #44]	; (6954 <sys_clock_tick_get+0x84>)
    6926:	4910      	ldr	r1, [pc, #64]	; (6968 <sys_clock_tick_get+0x98>)
    6928:	480c      	ldr	r0, [pc, #48]	; (695c <sys_clock_tick_get+0x8c>)
    692a:	23ac      	movs	r3, #172	; 0xac
    692c:	f000 fb02 	bl	6f34 <printk>
    6930:	4907      	ldr	r1, [pc, #28]	; (6950 <sys_clock_tick_get+0x80>)
    6932:	480e      	ldr	r0, [pc, #56]	; (696c <sys_clock_tick_get+0x9c>)
    6934:	f000 fafe 	bl	6f34 <printk>
    6938:	4806      	ldr	r0, [pc, #24]	; (6954 <sys_clock_tick_get+0x84>)
    693a:	21ac      	movs	r1, #172	; 0xac
    693c:	f000 fa26 	bl	6d8c <assert_post_action>
	__asm__ volatile(
    6940:	f386 8811 	msr	BASEPRI, r6
    6944:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6948:	4620      	mov	r0, r4
    694a:	4629      	mov	r1, r5
    694c:	bd70      	pop	{r4, r5, r6, pc}
    694e:	bf00      	nop
    6950:	20000a34 	.word	0x20000a34
    6954:	00007e87 	.word	0x00007e87
    6958:	00007ed9 	.word	0x00007ed9
    695c:	000079ac 	.word	0x000079ac
    6960:	00007eee 	.word	0x00007eee
    6964:	200002c8 	.word	0x200002c8
    6968:	00007ead 	.word	0x00007ead
    696c:	00007ec4 	.word	0x00007ec4

00006970 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6970:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    6972:	4806      	ldr	r0, [pc, #24]	; (698c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6974:	4a06      	ldr	r2, [pc, #24]	; (6990 <z_data_copy+0x20>)
    6976:	4907      	ldr	r1, [pc, #28]	; (6994 <z_data_copy+0x24>)
    6978:	1a12      	subs	r2, r2, r0
    697a:	f000 fb31 	bl	6fe0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    697e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6982:	4a05      	ldr	r2, [pc, #20]	; (6998 <z_data_copy+0x28>)
    6984:	4905      	ldr	r1, [pc, #20]	; (699c <z_data_copy+0x2c>)
    6986:	4806      	ldr	r0, [pc, #24]	; (69a0 <z_data_copy+0x30>)
    6988:	f000 bb2a 	b.w	6fe0 <memcpy>
    698c:	20000000 	.word	0x20000000
    6990:	200001a4 	.word	0x200001a4
    6994:	000089f8 	.word	0x000089f8
    6998:	00000000 	.word	0x00000000
    699c:	000089f8 	.word	0x000089f8
    69a0:	20000000 	.word	0x20000000

000069a4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    69a4:	4a02      	ldr	r2, [pc, #8]	; (69b0 <boot_banner+0xc>)
    69a6:	4903      	ldr	r1, [pc, #12]	; (69b4 <boot_banner+0x10>)
    69a8:	4803      	ldr	r0, [pc, #12]	; (69b8 <boot_banner+0x14>)
    69aa:	f000 bac3 	b.w	6f34 <printk>
    69ae:	bf00      	nop
    69b0:	000086ca 	.word	0x000086ca
    69b4:	000089c2 	.word	0x000089c2
    69b8:	000089d1 	.word	0x000089d1

000069bc <nrf_cc3xx_platform_init_no_rng>:
    69bc:	b510      	push	{r4, lr}
    69be:	4c0a      	ldr	r4, [pc, #40]	; (69e8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    69c0:	6823      	ldr	r3, [r4, #0]
    69c2:	b11b      	cbz	r3, 69cc <nrf_cc3xx_platform_init_no_rng+0x10>
    69c4:	2301      	movs	r3, #1
    69c6:	6023      	str	r3, [r4, #0]
    69c8:	2000      	movs	r0, #0
    69ca:	bd10      	pop	{r4, pc}
    69cc:	f000 f8d6 	bl	6b7c <CC_LibInitNoRng>
    69d0:	2800      	cmp	r0, #0
    69d2:	d0f7      	beq.n	69c4 <nrf_cc3xx_platform_init_no_rng+0x8>
    69d4:	3801      	subs	r0, #1
    69d6:	2806      	cmp	r0, #6
    69d8:	d803      	bhi.n	69e2 <nrf_cc3xx_platform_init_no_rng+0x26>
    69da:	4b04      	ldr	r3, [pc, #16]	; (69ec <nrf_cc3xx_platform_init_no_rng+0x30>)
    69dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    69e0:	bd10      	pop	{r4, pc}
    69e2:	4803      	ldr	r0, [pc, #12]	; (69f0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    69e4:	bd10      	pop	{r4, pc}
    69e6:	bf00      	nop
    69e8:	20000a38 	.word	0x20000a38
    69ec:	00007814 	.word	0x00007814
    69f0:	ffff8ffe 	.word	0xffff8ffe

000069f4 <nrf_cc3xx_platform_abort>:
    69f4:	f3bf 8f4f 	dsb	sy
    69f8:	4905      	ldr	r1, [pc, #20]	; (6a10 <nrf_cc3xx_platform_abort+0x1c>)
    69fa:	4b06      	ldr	r3, [pc, #24]	; (6a14 <nrf_cc3xx_platform_abort+0x20>)
    69fc:	68ca      	ldr	r2, [r1, #12]
    69fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6a02:	4313      	orrs	r3, r2
    6a04:	60cb      	str	r3, [r1, #12]
    6a06:	f3bf 8f4f 	dsb	sy
    6a0a:	bf00      	nop
    6a0c:	e7fd      	b.n	6a0a <nrf_cc3xx_platform_abort+0x16>
    6a0e:	bf00      	nop
    6a10:	e000ed00 	.word	0xe000ed00
    6a14:	05fa0004 	.word	0x05fa0004

00006a18 <CC_PalAbort>:
    6a18:	b4f0      	push	{r4, r5, r6, r7}
    6a1a:	4f09      	ldr	r7, [pc, #36]	; (6a40 <CC_PalAbort+0x28>)
    6a1c:	4e09      	ldr	r6, [pc, #36]	; (6a44 <CC_PalAbort+0x2c>)
    6a1e:	4c0a      	ldr	r4, [pc, #40]	; (6a48 <CC_PalAbort+0x30>)
    6a20:	4a0a      	ldr	r2, [pc, #40]	; (6a4c <CC_PalAbort+0x34>)
    6a22:	4d0b      	ldr	r5, [pc, #44]	; (6a50 <CC_PalAbort+0x38>)
    6a24:	490b      	ldr	r1, [pc, #44]	; (6a54 <CC_PalAbort+0x3c>)
    6a26:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    6a2a:	603b      	str	r3, [r7, #0]
    6a2c:	6852      	ldr	r2, [r2, #4]
    6a2e:	6033      	str	r3, [r6, #0]
    6a30:	6023      	str	r3, [r4, #0]
    6a32:	2400      	movs	r4, #0
    6a34:	602b      	str	r3, [r5, #0]
    6a36:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    6a3a:	bcf0      	pop	{r4, r5, r6, r7}
    6a3c:	4710      	bx	r2
    6a3e:	bf00      	nop
    6a40:	5002b400 	.word	0x5002b400
    6a44:	5002b404 	.word	0x5002b404
    6a48:	5002b408 	.word	0x5002b408
    6a4c:	200000e0 	.word	0x200000e0
    6a50:	5002b40c 	.word	0x5002b40c
    6a54:	5002a000 	.word	0x5002a000

00006a58 <nrf_cc3xx_platform_set_abort>:
    6a58:	e9d0 1200 	ldrd	r1, r2, [r0]
    6a5c:	4b01      	ldr	r3, [pc, #4]	; (6a64 <nrf_cc3xx_platform_set_abort+0xc>)
    6a5e:	e9c3 1200 	strd	r1, r2, [r3]
    6a62:	4770      	bx	lr
    6a64:	200000e0 	.word	0x200000e0

00006a68 <mutex_free>:
    6a68:	b510      	push	{r4, lr}
    6a6a:	4604      	mov	r4, r0
    6a6c:	b130      	cbz	r0, 6a7c <mutex_free+0x14>
    6a6e:	6863      	ldr	r3, [r4, #4]
    6a70:	06db      	lsls	r3, r3, #27
    6a72:	d502      	bpl.n	6a7a <mutex_free+0x12>
    6a74:	2300      	movs	r3, #0
    6a76:	6023      	str	r3, [r4, #0]
    6a78:	6063      	str	r3, [r4, #4]
    6a7a:	bd10      	pop	{r4, pc}
    6a7c:	4b02      	ldr	r3, [pc, #8]	; (6a88 <mutex_free+0x20>)
    6a7e:	4803      	ldr	r0, [pc, #12]	; (6a8c <mutex_free+0x24>)
    6a80:	685b      	ldr	r3, [r3, #4]
    6a82:	4798      	blx	r3
    6a84:	e7f3      	b.n	6a6e <mutex_free+0x6>
    6a86:	bf00      	nop
    6a88:	200000e0 	.word	0x200000e0
    6a8c:	00007830 	.word	0x00007830

00006a90 <mutex_unlock>:
    6a90:	b168      	cbz	r0, 6aae <mutex_unlock+0x1e>
    6a92:	6843      	ldr	r3, [r0, #4]
    6a94:	b13b      	cbz	r3, 6aa6 <mutex_unlock+0x16>
    6a96:	06db      	lsls	r3, r3, #27
    6a98:	d507      	bpl.n	6aaa <mutex_unlock+0x1a>
    6a9a:	f3bf 8f5f 	dmb	sy
    6a9e:	2300      	movs	r3, #0
    6aa0:	6003      	str	r3, [r0, #0]
    6aa2:	4618      	mov	r0, r3
    6aa4:	4770      	bx	lr
    6aa6:	4803      	ldr	r0, [pc, #12]	; (6ab4 <mutex_unlock+0x24>)
    6aa8:	4770      	bx	lr
    6aaa:	4803      	ldr	r0, [pc, #12]	; (6ab8 <mutex_unlock+0x28>)
    6aac:	4770      	bx	lr
    6aae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6ab2:	4770      	bx	lr
    6ab4:	ffff8fea 	.word	0xffff8fea
    6ab8:	ffff8fe9 	.word	0xffff8fe9

00006abc <mutex_init>:
    6abc:	b510      	push	{r4, lr}
    6abe:	4604      	mov	r4, r0
    6ac0:	b120      	cbz	r0, 6acc <mutex_init+0x10>
    6ac2:	2200      	movs	r2, #0
    6ac4:	2311      	movs	r3, #17
    6ac6:	6022      	str	r2, [r4, #0]
    6ac8:	6063      	str	r3, [r4, #4]
    6aca:	bd10      	pop	{r4, pc}
    6acc:	4801      	ldr	r0, [pc, #4]	; (6ad4 <mutex_init+0x18>)
    6ace:	f7ff ffa3 	bl	6a18 <CC_PalAbort>
    6ad2:	e7f6      	b.n	6ac2 <mutex_init+0x6>
    6ad4:	00007858 	.word	0x00007858

00006ad8 <mutex_lock>:
    6ad8:	b1c0      	cbz	r0, 6b0c <mutex_lock+0x34>
    6ada:	6843      	ldr	r3, [r0, #4]
    6adc:	b1a3      	cbz	r3, 6b08 <mutex_lock+0x30>
    6ade:	06db      	lsls	r3, r3, #27
    6ae0:	d510      	bpl.n	6b04 <mutex_lock+0x2c>
    6ae2:	2201      	movs	r2, #1
    6ae4:	f3bf 8f5b 	dmb	ish
    6ae8:	e850 3f00 	ldrex	r3, [r0]
    6aec:	e840 2100 	strex	r1, r2, [r0]
    6af0:	2900      	cmp	r1, #0
    6af2:	d1f9      	bne.n	6ae8 <mutex_lock+0x10>
    6af4:	f3bf 8f5b 	dmb	ish
    6af8:	2b01      	cmp	r3, #1
    6afa:	d0f3      	beq.n	6ae4 <mutex_lock+0xc>
    6afc:	f3bf 8f5f 	dmb	sy
    6b00:	2000      	movs	r0, #0
    6b02:	4770      	bx	lr
    6b04:	4803      	ldr	r0, [pc, #12]	; (6b14 <mutex_lock+0x3c>)
    6b06:	4770      	bx	lr
    6b08:	4803      	ldr	r0, [pc, #12]	; (6b18 <mutex_lock+0x40>)
    6b0a:	4770      	bx	lr
    6b0c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6b10:	4770      	bx	lr
    6b12:	bf00      	nop
    6b14:	ffff8fe9 	.word	0xffff8fe9
    6b18:	ffff8fea 	.word	0xffff8fea

00006b1c <nrf_cc3xx_platform_set_mutexes>:
    6b1c:	b570      	push	{r4, r5, r6, lr}
    6b1e:	e9d0 2300 	ldrd	r2, r3, [r0]
    6b22:	4c13      	ldr	r4, [pc, #76]	; (6b70 <nrf_cc3xx_platform_set_mutexes+0x54>)
    6b24:	4d13      	ldr	r5, [pc, #76]	; (6b74 <nrf_cc3xx_platform_set_mutexes+0x58>)
    6b26:	e9c4 2300 	strd	r2, r3, [r4]
    6b2a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    6b2e:	e9c4 6302 	strd	r6, r3, [r4, #8]
    6b32:	4b11      	ldr	r3, [pc, #68]	; (6b78 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6b34:	6808      	ldr	r0, [r1, #0]
    6b36:	6018      	str	r0, [r3, #0]
    6b38:	6848      	ldr	r0, [r1, #4]
    6b3a:	6058      	str	r0, [r3, #4]
    6b3c:	6888      	ldr	r0, [r1, #8]
    6b3e:	6098      	str	r0, [r3, #8]
    6b40:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    6b44:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    6b48:	60de      	str	r6, [r3, #12]
    6b4a:	6118      	str	r0, [r3, #16]
    6b4c:	06cb      	lsls	r3, r1, #27
    6b4e:	d50d      	bpl.n	6b6c <nrf_cc3xx_platform_set_mutexes+0x50>
    6b50:	2300      	movs	r3, #0
    6b52:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    6b56:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    6b5a:	f505 7088 	add.w	r0, r5, #272	; 0x110
    6b5e:	4790      	blx	r2
    6b60:	6823      	ldr	r3, [r4, #0]
    6b62:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    6b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b6a:	4718      	bx	r3
    6b6c:	bd70      	pop	{r4, r5, r6, pc}
    6b6e:	bf00      	nop
    6b70:	200000f0 	.word	0x200000f0
    6b74:	20000e64 	.word	0x20000e64
    6b78:	20000100 	.word	0x20000100

00006b7c <CC_LibInitNoRng>:
    6b7c:	b510      	push	{r4, lr}
    6b7e:	f000 f833 	bl	6be8 <CC_HalInit>
    6b82:	b120      	cbz	r0, 6b8e <CC_LibInitNoRng+0x12>
    6b84:	2403      	movs	r4, #3
    6b86:	f000 f867 	bl	6c58 <CC_PalTerminate>
    6b8a:	4620      	mov	r0, r4
    6b8c:	bd10      	pop	{r4, pc}
    6b8e:	f000 f835 	bl	6bfc <CC_PalInit>
    6b92:	b990      	cbnz	r0, 6bba <CC_LibInitNoRng+0x3e>
    6b94:	f000 f8b0 	bl	6cf8 <CC_PalPowerSaveModeSelect>
    6b98:	b990      	cbnz	r0, 6bc0 <CC_LibInitNoRng+0x44>
    6b9a:	4b0f      	ldr	r3, [pc, #60]	; (6bd8 <CC_LibInitNoRng+0x5c>)
    6b9c:	681b      	ldr	r3, [r3, #0]
    6b9e:	0e1b      	lsrs	r3, r3, #24
    6ba0:	2bf0      	cmp	r3, #240	; 0xf0
    6ba2:	d108      	bne.n	6bb6 <CC_LibInitNoRng+0x3a>
    6ba4:	4a0d      	ldr	r2, [pc, #52]	; (6bdc <CC_LibInitNoRng+0x60>)
    6ba6:	4b0e      	ldr	r3, [pc, #56]	; (6be0 <CC_LibInitNoRng+0x64>)
    6ba8:	6812      	ldr	r2, [r2, #0]
    6baa:	429a      	cmp	r2, r3
    6bac:	d00a      	beq.n	6bc4 <CC_LibInitNoRng+0x48>
    6bae:	2407      	movs	r4, #7
    6bb0:	f000 f81c 	bl	6bec <CC_HalTerminate>
    6bb4:	e7e7      	b.n	6b86 <CC_LibInitNoRng+0xa>
    6bb6:	2406      	movs	r4, #6
    6bb8:	e7fa      	b.n	6bb0 <CC_LibInitNoRng+0x34>
    6bba:	2404      	movs	r4, #4
    6bbc:	4620      	mov	r0, r4
    6bbe:	bd10      	pop	{r4, pc}
    6bc0:	2400      	movs	r4, #0
    6bc2:	e7f5      	b.n	6bb0 <CC_LibInitNoRng+0x34>
    6bc4:	2001      	movs	r0, #1
    6bc6:	f000 f897 	bl	6cf8 <CC_PalPowerSaveModeSelect>
    6bca:	4604      	mov	r4, r0
    6bcc:	2800      	cmp	r0, #0
    6bce:	d1f7      	bne.n	6bc0 <CC_LibInitNoRng+0x44>
    6bd0:	4b04      	ldr	r3, [pc, #16]	; (6be4 <CC_LibInitNoRng+0x68>)
    6bd2:	6018      	str	r0, [r3, #0]
    6bd4:	e7d9      	b.n	6b8a <CC_LibInitNoRng+0xe>
    6bd6:	bf00      	nop
    6bd8:	5002b928 	.word	0x5002b928
    6bdc:	5002ba24 	.word	0x5002ba24
    6be0:	20e00000 	.word	0x20e00000
    6be4:	5002ba0c 	.word	0x5002ba0c

00006be8 <CC_HalInit>:
    6be8:	2000      	movs	r0, #0
    6bea:	4770      	bx	lr

00006bec <CC_HalTerminate>:
    6bec:	2000      	movs	r0, #0
    6bee:	4770      	bx	lr

00006bf0 <CC_HalMaskInterrupt>:
    6bf0:	4b01      	ldr	r3, [pc, #4]	; (6bf8 <CC_HalMaskInterrupt+0x8>)
    6bf2:	6018      	str	r0, [r3, #0]
    6bf4:	4770      	bx	lr
    6bf6:	bf00      	nop
    6bf8:	5002ba04 	.word	0x5002ba04

00006bfc <CC_PalInit>:
    6bfc:	b510      	push	{r4, lr}
    6bfe:	4811      	ldr	r0, [pc, #68]	; (6c44 <CC_PalInit+0x48>)
    6c00:	f000 f848 	bl	6c94 <CC_PalMutexCreate>
    6c04:	b100      	cbz	r0, 6c08 <CC_PalInit+0xc>
    6c06:	bd10      	pop	{r4, pc}
    6c08:	480f      	ldr	r0, [pc, #60]	; (6c48 <CC_PalInit+0x4c>)
    6c0a:	f000 f843 	bl	6c94 <CC_PalMutexCreate>
    6c0e:	2800      	cmp	r0, #0
    6c10:	d1f9      	bne.n	6c06 <CC_PalInit+0xa>
    6c12:	4c0e      	ldr	r4, [pc, #56]	; (6c4c <CC_PalInit+0x50>)
    6c14:	4620      	mov	r0, r4
    6c16:	f000 f83d 	bl	6c94 <CC_PalMutexCreate>
    6c1a:	2800      	cmp	r0, #0
    6c1c:	d1f3      	bne.n	6c06 <CC_PalInit+0xa>
    6c1e:	4b0c      	ldr	r3, [pc, #48]	; (6c50 <CC_PalInit+0x54>)
    6c20:	480c      	ldr	r0, [pc, #48]	; (6c54 <CC_PalInit+0x58>)
    6c22:	601c      	str	r4, [r3, #0]
    6c24:	f000 f836 	bl	6c94 <CC_PalMutexCreate>
    6c28:	4601      	mov	r1, r0
    6c2a:	2800      	cmp	r0, #0
    6c2c:	d1eb      	bne.n	6c06 <CC_PalInit+0xa>
    6c2e:	f000 f82d 	bl	6c8c <CC_PalDmaInit>
    6c32:	4604      	mov	r4, r0
    6c34:	b108      	cbz	r0, 6c3a <CC_PalInit+0x3e>
    6c36:	4620      	mov	r0, r4
    6c38:	bd10      	pop	{r4, pc}
    6c3a:	f000 f83f 	bl	6cbc <CC_PalPowerSaveModeInit>
    6c3e:	4620      	mov	r0, r4
    6c40:	e7fa      	b.n	6c38 <CC_PalInit+0x3c>
    6c42:	bf00      	nop
    6c44:	20000138 	.word	0x20000138
    6c48:	2000012c 	.word	0x2000012c
    6c4c:	20000134 	.word	0x20000134
    6c50:	2000013c 	.word	0x2000013c
    6c54:	20000130 	.word	0x20000130

00006c58 <CC_PalTerminate>:
    6c58:	b508      	push	{r3, lr}
    6c5a:	4808      	ldr	r0, [pc, #32]	; (6c7c <CC_PalTerminate+0x24>)
    6c5c:	f000 f824 	bl	6ca8 <CC_PalMutexDestroy>
    6c60:	4807      	ldr	r0, [pc, #28]	; (6c80 <CC_PalTerminate+0x28>)
    6c62:	f000 f821 	bl	6ca8 <CC_PalMutexDestroy>
    6c66:	4807      	ldr	r0, [pc, #28]	; (6c84 <CC_PalTerminate+0x2c>)
    6c68:	f000 f81e 	bl	6ca8 <CC_PalMutexDestroy>
    6c6c:	4806      	ldr	r0, [pc, #24]	; (6c88 <CC_PalTerminate+0x30>)
    6c6e:	f000 f81b 	bl	6ca8 <CC_PalMutexDestroy>
    6c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6c76:	f000 b80b 	b.w	6c90 <CC_PalDmaTerminate>
    6c7a:	bf00      	nop
    6c7c:	20000138 	.word	0x20000138
    6c80:	2000012c 	.word	0x2000012c
    6c84:	20000134 	.word	0x20000134
    6c88:	20000130 	.word	0x20000130

00006c8c <CC_PalDmaInit>:
    6c8c:	2000      	movs	r0, #0
    6c8e:	4770      	bx	lr

00006c90 <CC_PalDmaTerminate>:
    6c90:	4770      	bx	lr
    6c92:	bf00      	nop

00006c94 <CC_PalMutexCreate>:
    6c94:	b508      	push	{r3, lr}
    6c96:	4b03      	ldr	r3, [pc, #12]	; (6ca4 <CC_PalMutexCreate+0x10>)
    6c98:	6802      	ldr	r2, [r0, #0]
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	6810      	ldr	r0, [r2, #0]
    6c9e:	4798      	blx	r3
    6ca0:	2000      	movs	r0, #0
    6ca2:	bd08      	pop	{r3, pc}
    6ca4:	200000f0 	.word	0x200000f0

00006ca8 <CC_PalMutexDestroy>:
    6ca8:	b508      	push	{r3, lr}
    6caa:	4b03      	ldr	r3, [pc, #12]	; (6cb8 <CC_PalMutexDestroy+0x10>)
    6cac:	6802      	ldr	r2, [r0, #0]
    6cae:	685b      	ldr	r3, [r3, #4]
    6cb0:	6810      	ldr	r0, [r2, #0]
    6cb2:	4798      	blx	r3
    6cb4:	2000      	movs	r0, #0
    6cb6:	bd08      	pop	{r3, pc}
    6cb8:	200000f0 	.word	0x200000f0

00006cbc <CC_PalPowerSaveModeInit>:
    6cbc:	b570      	push	{r4, r5, r6, lr}
    6cbe:	4c09      	ldr	r4, [pc, #36]	; (6ce4 <CC_PalPowerSaveModeInit+0x28>)
    6cc0:	4d09      	ldr	r5, [pc, #36]	; (6ce8 <CC_PalPowerSaveModeInit+0x2c>)
    6cc2:	6920      	ldr	r0, [r4, #16]
    6cc4:	68ab      	ldr	r3, [r5, #8]
    6cc6:	4798      	blx	r3
    6cc8:	b118      	cbz	r0, 6cd2 <CC_PalPowerSaveModeInit+0x16>
    6cca:	4b08      	ldr	r3, [pc, #32]	; (6cec <CC_PalPowerSaveModeInit+0x30>)
    6ccc:	4808      	ldr	r0, [pc, #32]	; (6cf0 <CC_PalPowerSaveModeInit+0x34>)
    6cce:	685b      	ldr	r3, [r3, #4]
    6cd0:	4798      	blx	r3
    6cd2:	4a08      	ldr	r2, [pc, #32]	; (6cf4 <CC_PalPowerSaveModeInit+0x38>)
    6cd4:	68eb      	ldr	r3, [r5, #12]
    6cd6:	6920      	ldr	r0, [r4, #16]
    6cd8:	2100      	movs	r1, #0
    6cda:	6011      	str	r1, [r2, #0]
    6cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ce0:	4718      	bx	r3
    6ce2:	bf00      	nop
    6ce4:	20000100 	.word	0x20000100
    6ce8:	200000f0 	.word	0x200000f0
    6cec:	200000e0 	.word	0x200000e0
    6cf0:	0000787c 	.word	0x0000787c
    6cf4:	20000a4c 	.word	0x20000a4c

00006cf8 <CC_PalPowerSaveModeSelect>:
    6cf8:	b570      	push	{r4, r5, r6, lr}
    6cfa:	4d1a      	ldr	r5, [pc, #104]	; (6d64 <CC_PalPowerSaveModeSelect+0x6c>)
    6cfc:	4e1a      	ldr	r6, [pc, #104]	; (6d68 <CC_PalPowerSaveModeSelect+0x70>)
    6cfe:	4604      	mov	r4, r0
    6d00:	68b2      	ldr	r2, [r6, #8]
    6d02:	6928      	ldr	r0, [r5, #16]
    6d04:	4790      	blx	r2
    6d06:	b9f0      	cbnz	r0, 6d46 <CC_PalPowerSaveModeSelect+0x4e>
    6d08:	b15c      	cbz	r4, 6d22 <CC_PalPowerSaveModeSelect+0x2a>
    6d0a:	4c18      	ldr	r4, [pc, #96]	; (6d6c <CC_PalPowerSaveModeSelect+0x74>)
    6d0c:	6823      	ldr	r3, [r4, #0]
    6d0e:	b1ab      	cbz	r3, 6d3c <CC_PalPowerSaveModeSelect+0x44>
    6d10:	2b01      	cmp	r3, #1
    6d12:	d01a      	beq.n	6d4a <CC_PalPowerSaveModeSelect+0x52>
    6d14:	3b01      	subs	r3, #1
    6d16:	6023      	str	r3, [r4, #0]
    6d18:	6928      	ldr	r0, [r5, #16]
    6d1a:	68f3      	ldr	r3, [r6, #12]
    6d1c:	4798      	blx	r3
    6d1e:	2000      	movs	r0, #0
    6d20:	bd70      	pop	{r4, r5, r6, pc}
    6d22:	4c12      	ldr	r4, [pc, #72]	; (6d6c <CC_PalPowerSaveModeSelect+0x74>)
    6d24:	6821      	ldr	r1, [r4, #0]
    6d26:	b939      	cbnz	r1, 6d38 <CC_PalPowerSaveModeSelect+0x40>
    6d28:	4b11      	ldr	r3, [pc, #68]	; (6d70 <CC_PalPowerSaveModeSelect+0x78>)
    6d2a:	4a12      	ldr	r2, [pc, #72]	; (6d74 <CC_PalPowerSaveModeSelect+0x7c>)
    6d2c:	2001      	movs	r0, #1
    6d2e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    6d32:	6813      	ldr	r3, [r2, #0]
    6d34:	2b00      	cmp	r3, #0
    6d36:	d1fc      	bne.n	6d32 <CC_PalPowerSaveModeSelect+0x3a>
    6d38:	3101      	adds	r1, #1
    6d3a:	6021      	str	r1, [r4, #0]
    6d3c:	68f3      	ldr	r3, [r6, #12]
    6d3e:	6928      	ldr	r0, [r5, #16]
    6d40:	4798      	blx	r3
    6d42:	2000      	movs	r0, #0
    6d44:	bd70      	pop	{r4, r5, r6, pc}
    6d46:	480c      	ldr	r0, [pc, #48]	; (6d78 <CC_PalPowerSaveModeSelect+0x80>)
    6d48:	bd70      	pop	{r4, r5, r6, pc}
    6d4a:	4a0a      	ldr	r2, [pc, #40]	; (6d74 <CC_PalPowerSaveModeSelect+0x7c>)
    6d4c:	6813      	ldr	r3, [r2, #0]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d1fc      	bne.n	6d4c <CC_PalPowerSaveModeSelect+0x54>
    6d52:	4a07      	ldr	r2, [pc, #28]	; (6d70 <CC_PalPowerSaveModeSelect+0x78>)
    6d54:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6d58:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6d5c:	f7ff ff48 	bl	6bf0 <CC_HalMaskInterrupt>
    6d60:	6823      	ldr	r3, [r4, #0]
    6d62:	e7d7      	b.n	6d14 <CC_PalPowerSaveModeSelect+0x1c>
    6d64:	20000100 	.word	0x20000100
    6d68:	200000f0 	.word	0x200000f0
    6d6c:	20000a4c 	.word	0x20000a4c
    6d70:	5002a000 	.word	0x5002a000
    6d74:	5002b910 	.word	0x5002b910
    6d78:	ffff8fe9 	.word	0xffff8fe9

00006d7c <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    6d7c:	6883      	ldr	r3, [r0, #8]
    6d7e:	69db      	ldr	r3, [r3, #28]
    6d80:	b10b      	cbz	r3, 6d86 <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    6d82:	2201      	movs	r2, #1
    6d84:	4718      	bx	r3
}
    6d86:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6d8a:	4770      	bx	lr

00006d8c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    6d8c:	4040      	eors	r0, r0
    6d8e:	f380 8811 	msr	BASEPRI, r0
    6d92:	f04f 0004 	mov.w	r0, #4
    6d96:	df02      	svc	2
}
    6d98:	4770      	bx	lr

00006d9a <encode_uint>:
{
    6d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d9e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    6da0:	78d3      	ldrb	r3, [r2, #3]
{
    6da2:	4614      	mov	r4, r2
	switch (specifier) {
    6da4:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6da6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    6daa:	4606      	mov	r6, r0
    6dac:	460f      	mov	r7, r1
    6dae:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    6db0:	d02d      	beq.n	6e0e <encode_uint+0x74>
    6db2:	d828      	bhi.n	6e06 <encode_uint+0x6c>
		return 16;
    6db4:	2b58      	cmp	r3, #88	; 0x58
    6db6:	bf14      	ite	ne
    6db8:	250a      	movne	r5, #10
    6dba:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    6dbc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    6dc0:	46aa      	mov	sl, r5
    6dc2:	f04f 0b00 	mov.w	fp, #0
    6dc6:	4652      	mov	r2, sl
    6dc8:	465b      	mov	r3, fp
    6dca:	4630      	mov	r0, r6
    6dcc:	4639      	mov	r1, r7
    6dce:	f7f9 f997 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6dd2:	2a09      	cmp	r2, #9
    6dd4:	b2d3      	uxtb	r3, r2
    6dd6:	d81f      	bhi.n	6e18 <encode_uint+0x7e>
    6dd8:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6dda:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6ddc:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    6dde:	bf08      	it	eq
    6de0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6de2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    6de6:	d301      	bcc.n	6dec <encode_uint+0x52>
    6de8:	45c8      	cmp	r8, r9
    6dea:	d812      	bhi.n	6e12 <encode_uint+0x78>
	if (conv->flag_hash) {
    6dec:	7823      	ldrb	r3, [r4, #0]
    6dee:	069b      	lsls	r3, r3, #26
    6df0:	d505      	bpl.n	6dfe <encode_uint+0x64>
		if (radix == 8) {
    6df2:	2d08      	cmp	r5, #8
    6df4:	d116      	bne.n	6e24 <encode_uint+0x8a>
			conv->altform_0 = true;
    6df6:	78a3      	ldrb	r3, [r4, #2]
    6df8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6dfc:	70a3      	strb	r3, [r4, #2]
}
    6dfe:	4640      	mov	r0, r8
    6e00:	b003      	add	sp, #12
    6e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6e06:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6e0a:	2b70      	cmp	r3, #112	; 0x70
    6e0c:	e7d3      	b.n	6db6 <encode_uint+0x1c>
	switch (specifier) {
    6e0e:	2508      	movs	r5, #8
    6e10:	e7d4      	b.n	6dbc <encode_uint+0x22>
		value /= radix;
    6e12:	4606      	mov	r6, r0
    6e14:	460f      	mov	r7, r1
    6e16:	e7d6      	b.n	6dc6 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6e18:	9a01      	ldr	r2, [sp, #4]
    6e1a:	2a19      	cmp	r2, #25
    6e1c:	bf94      	ite	ls
    6e1e:	3337      	addls	r3, #55	; 0x37
    6e20:	3357      	addhi	r3, #87	; 0x57
    6e22:	e7da      	b.n	6dda <encode_uint+0x40>
		} else if (radix == 16) {
    6e24:	2d10      	cmp	r5, #16
    6e26:	d1ea      	bne.n	6dfe <encode_uint+0x64>
			conv->altform_0c = true;
    6e28:	78a3      	ldrb	r3, [r4, #2]
    6e2a:	f043 0310 	orr.w	r3, r3, #16
    6e2e:	e7e5      	b.n	6dfc <encode_uint+0x62>

00006e30 <outs>:
{
    6e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e34:	4607      	mov	r7, r0
    6e36:	4688      	mov	r8, r1
    6e38:	4615      	mov	r5, r2
    6e3a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6e3c:	4614      	mov	r4, r2
    6e3e:	42b4      	cmp	r4, r6
    6e40:	eba4 0005 	sub.w	r0, r4, r5
    6e44:	d302      	bcc.n	6e4c <outs+0x1c>
    6e46:	b93e      	cbnz	r6, 6e58 <outs+0x28>
    6e48:	7823      	ldrb	r3, [r4, #0]
    6e4a:	b12b      	cbz	r3, 6e58 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6e4c:	f814 0b01 	ldrb.w	r0, [r4], #1
    6e50:	4641      	mov	r1, r8
    6e52:	47b8      	blx	r7
		if (rc < 0) {
    6e54:	2800      	cmp	r0, #0
    6e56:	daf2      	bge.n	6e3e <outs+0xe>
}
    6e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e5c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6e5c:	4770      	bx	lr

00006e5e <sys_notify_validate>:
	if (notify == NULL) {
    6e5e:	4603      	mov	r3, r0
    6e60:	b158      	cbz	r0, 6e7a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6e62:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6e64:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    6e68:	2a01      	cmp	r2, #1
    6e6a:	d003      	beq.n	6e74 <sys_notify_validate+0x16>
    6e6c:	2a03      	cmp	r2, #3
    6e6e:	d104      	bne.n	6e7a <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    6e70:	6802      	ldr	r2, [r0, #0]
    6e72:	b112      	cbz	r2, 6e7a <sys_notify_validate+0x1c>
		notify->result = 0;
    6e74:	2000      	movs	r0, #0
    6e76:	6098      	str	r0, [r3, #8]
    6e78:	4770      	bx	lr
		return -EINVAL;
    6e7a:	f06f 0015 	mvn.w	r0, #21
}
    6e7e:	4770      	bx	lr

00006e80 <abort_function>:
{
    6e80:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6e82:	2000      	movs	r0, #0
    6e84:	f7fa fef8 	bl	1c78 <sys_reboot>

00006e88 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6e88:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    6e8a:	f013 0307 	ands.w	r3, r3, #7
    6e8e:	d105      	bne.n	6e9c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6e90:	6803      	ldr	r3, [r0, #0]
    6e92:	2b00      	cmp	r3, #0
		evt = EVT_START;
    6e94:	bf0c      	ite	eq
    6e96:	2000      	moveq	r0, #0
    6e98:	2003      	movne	r0, #3
    6e9a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6e9c:	2b02      	cmp	r3, #2
    6e9e:	d105      	bne.n	6eac <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6ea0:	8bc3      	ldrh	r3, [r0, #30]
    6ea2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    6ea4:	bf14      	ite	ne
    6ea6:	2000      	movne	r0, #0
    6ea8:	2004      	moveq	r0, #4
    6eaa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6eac:	2b01      	cmp	r3, #1
    6eae:	d105      	bne.n	6ebc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6eb0:	6803      	ldr	r3, [r0, #0]
    6eb2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    6eb4:	bf0c      	ite	eq
    6eb6:	2000      	moveq	r0, #0
    6eb8:	2005      	movne	r0, #5
    6eba:	4770      	bx	lr
	int evt = EVT_NOP;
    6ebc:	2000      	movs	r0, #0
}
    6ebe:	4770      	bx	lr

00006ec0 <notify_one>:
{
    6ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ec4:	460d      	mov	r5, r1
    6ec6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6ec8:	4619      	mov	r1, r3
    6eca:	1d28      	adds	r0, r5, #4
{
    6ecc:	4690      	mov	r8, r2
    6ece:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6ed0:	f7fa f9c2 	bl	1258 <sys_notify_finalize>
	if (cb) {
    6ed4:	4604      	mov	r4, r0
    6ed6:	b138      	cbz	r0, 6ee8 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6ed8:	4633      	mov	r3, r6
    6eda:	4642      	mov	r2, r8
    6edc:	4629      	mov	r1, r5
    6ede:	4638      	mov	r0, r7
    6ee0:	46a4      	mov	ip, r4
}
    6ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6ee6:	4760      	bx	ip
}
    6ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006eec <validate_args>:
{
    6eec:	b510      	push	{r4, lr}
    6eee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6ef0:	b140      	cbz	r0, 6f04 <validate_args+0x18>
    6ef2:	b139      	cbz	r1, 6f04 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6ef4:	1d08      	adds	r0, r1, #4
    6ef6:	f7ff ffb2 	bl	6e5e <sys_notify_validate>
	if ((rv == 0)
    6efa:	b928      	cbnz	r0, 6f08 <validate_args+0x1c>
	    && ((cli->notify.flags
    6efc:	68a3      	ldr	r3, [r4, #8]
    6efe:	f033 0303 	bics.w	r3, r3, #3
    6f02:	d001      	beq.n	6f08 <validate_args+0x1c>
		rv = -EINVAL;
    6f04:	f06f 0015 	mvn.w	r0, #21
}
    6f08:	bd10      	pop	{r4, pc}

00006f0a <onoff_manager_init>:
{
    6f0a:	b538      	push	{r3, r4, r5, lr}
    6f0c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6f0e:	4605      	mov	r5, r0
    6f10:	b158      	cbz	r0, 6f2a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6f12:	b151      	cbz	r1, 6f2a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6f14:	680b      	ldr	r3, [r1, #0]
    6f16:	b143      	cbz	r3, 6f2a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6f18:	684b      	ldr	r3, [r1, #4]
    6f1a:	b133      	cbz	r3, 6f2a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6f1c:	2220      	movs	r2, #32
    6f1e:	2100      	movs	r1, #0
    6f20:	f000 f869 	bl	6ff6 <memset>
    6f24:	612c      	str	r4, [r5, #16]
	return 0;
    6f26:	2000      	movs	r0, #0
}
    6f28:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6f2a:	f06f 0015 	mvn.w	r0, #21
    6f2e:	e7fb      	b.n	6f28 <onoff_manager_init+0x1e>

00006f30 <arch_printk_char_out>:
}
    6f30:	2000      	movs	r0, #0
    6f32:	4770      	bx	lr

00006f34 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    6f34:	b40f      	push	{r0, r1, r2, r3}
    6f36:	b507      	push	{r0, r1, r2, lr}
    6f38:	a904      	add	r1, sp, #16
    6f3a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6f3e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    6f40:	f7fa fe8c 	bl	1c5c <vprintk>
	}
	va_end(ap);
}
    6f44:	b003      	add	sp, #12
    6f46:	f85d eb04 	ldr.w	lr, [sp], #4
    6f4a:	b004      	add	sp, #16
    6f4c:	4770      	bx	lr

00006f4e <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    6f4e:	2200      	movs	r2, #0
    6f50:	e9c0 2200 	strd	r2, r2, [r0]
    6f54:	6082      	str	r2, [r0, #8]
}
    6f56:	4770      	bx	lr

00006f58 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6f58:	4604      	mov	r4, r0
    6f5a:	b508      	push	{r3, lr}
    6f5c:	4608      	mov	r0, r1
    6f5e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6f60:	461a      	mov	r2, r3
    6f62:	47a0      	blx	r4
	return z_impl_z_current_get();
    6f64:	f7fe ff42 	bl	5dec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6f68:	f7fb f9c2 	bl	22f0 <z_impl_k_thread_abort>

00006f6c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6f6c:	f7fd bb30 	b.w	45d0 <z_fatal_error>

00006f70 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6f70:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6f72:	6800      	ldr	r0, [r0, #0]
    6f74:	f7fd bb2c 	b.w	45d0 <z_fatal_error>

00006f78 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6f78:	2100      	movs	r1, #0
    6f7a:	2001      	movs	r0, #1
    6f7c:	f7ff bff6 	b.w	6f6c <z_arm_fatal_error>

00006f80 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6f80:	b508      	push	{r3, lr}
	handler();
    6f82:	f7fa fecb 	bl	1d1c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6f8a:	f7fa bfd9 	b.w	1f40 <z_arm_exc_exit>

00006f8e <_stdout_hook_default>:
}
    6f8e:	f04f 30ff 	mov.w	r0, #4294967295
    6f92:	4770      	bx	lr

00006f94 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6f94:	3901      	subs	r1, #1
    6f96:	4603      	mov	r3, r0
    6f98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6f9c:	b90a      	cbnz	r2, 6fa2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6f9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6fa0:	4770      	bx	lr
		*d = *s;
    6fa2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6fa6:	e7f7      	b.n	6f98 <strcpy+0x4>

00006fa8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6fa8:	4603      	mov	r3, r0
	size_t n = 0;
    6faa:	2000      	movs	r0, #0

	while (*s != '\0') {
    6fac:	5c1a      	ldrb	r2, [r3, r0]
    6fae:	b902      	cbnz	r2, 6fb2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6fb0:	4770      	bx	lr
		n++;
    6fb2:	3001      	adds	r0, #1
    6fb4:	e7fa      	b.n	6fac <strlen+0x4>

00006fb6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6fb6:	4603      	mov	r3, r0
	size_t n = 0;
    6fb8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6fba:	5c1a      	ldrb	r2, [r3, r0]
    6fbc:	b10a      	cbz	r2, 6fc2 <strnlen+0xc>
    6fbe:	4288      	cmp	r0, r1
    6fc0:	d100      	bne.n	6fc4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6fc2:	4770      	bx	lr
		n++;
    6fc4:	3001      	adds	r0, #1
    6fc6:	e7f8      	b.n	6fba <strnlen+0x4>

00006fc8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6fc8:	1e43      	subs	r3, r0, #1
    6fca:	3901      	subs	r1, #1
    6fcc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6fd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    6fd4:	4282      	cmp	r2, r0
    6fd6:	d101      	bne.n	6fdc <strcmp+0x14>
    6fd8:	2a00      	cmp	r2, #0
    6fda:	d1f7      	bne.n	6fcc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6fdc:	1a10      	subs	r0, r2, r0
    6fde:	4770      	bx	lr

00006fe0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6fe0:	b510      	push	{r4, lr}
    6fe2:	1e43      	subs	r3, r0, #1
    6fe4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6fe6:	4291      	cmp	r1, r2
    6fe8:	d100      	bne.n	6fec <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6fea:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6fec:	f811 4b01 	ldrb.w	r4, [r1], #1
    6ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6ff4:	e7f7      	b.n	6fe6 <memcpy+0x6>

00006ff6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6ff6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6ff8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6ffa:	4603      	mov	r3, r0
	while (n > 0) {
    6ffc:	4293      	cmp	r3, r2
    6ffe:	d100      	bne.n	7002 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7000:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7002:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7006:	e7f9      	b.n	6ffc <memset+0x6>

00007008 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    7008:	b084      	sub	sp, #16
    700a:	ab04      	add	r3, sp, #16
    700c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    7010:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7014:	2b06      	cmp	r3, #6
    7016:	d108      	bne.n	702a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    7018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    701c:	2201      	movs	r2, #1
    701e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    7022:	f3bf 8f4f 	dsb	sy
        __WFE();
    7026:	bf20      	wfe
    while (true)
    7028:	e7fd      	b.n	7026 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    702a:	b004      	add	sp, #16
    702c:	4770      	bx	lr

0000702e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    702e:	b084      	sub	sp, #16
    7030:	ab04      	add	r3, sp, #16
    7032:	e903 0007 	stmdb	r3, {r0, r1, r2}
    7036:	2300      	movs	r3, #0
    7038:	f383 8811 	msr	BASEPRI, r3
    703c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7040:	b004      	add	sp, #16
    7042:	4770      	bx	lr

00007044 <set_starting_state>:
{
    7044:	b510      	push	{r4, lr}
	__asm__ volatile(
    7046:	f04f 0320 	mov.w	r3, #32
    704a:	f3ef 8211 	mrs	r2, BASEPRI
    704e:	f383 8812 	msr	BASEPRI_MAX, r3
    7052:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7056:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7058:	f003 0407 	and.w	r4, r3, #7
    705c:	2c01      	cmp	r4, #1
    705e:	d106      	bne.n	706e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7060:	6001      	str	r1, [r0, #0]
	int err = 0;
    7062:	2000      	movs	r0, #0
	__asm__ volatile(
    7064:	f382 8811 	msr	BASEPRI, r2
    7068:	f3bf 8f6f 	isb	sy
}
    706c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    706e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7072:	428b      	cmp	r3, r1
		err = -EALREADY;
    7074:	bf14      	ite	ne
    7076:	f04f 30ff 	movne.w	r0, #4294967295
    707a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    707e:	e7f1      	b.n	7064 <set_starting_state+0x20>

00007080 <set_on_state>:
	__asm__ volatile(
    7080:	f04f 0320 	mov.w	r3, #32
    7084:	f3ef 8211 	mrs	r2, BASEPRI
    7088:	f383 8812 	msr	BASEPRI_MAX, r3
    708c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7090:	6803      	ldr	r3, [r0, #0]
    7092:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7096:	f043 0302 	orr.w	r3, r3, #2
    709a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    709c:	f382 8811 	msr	BASEPRI, r2
    70a0:	f3bf 8f6f 	isb	sy
}
    70a4:	4770      	bx	lr

000070a6 <onoff_started_callback>:
	return &data->mgr[type];
    70a6:	6900      	ldr	r0, [r0, #16]
    70a8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    70aa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    70ae:	2100      	movs	r1, #0
    70b0:	4710      	bx	r2

000070b2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    70b2:	2000      	movs	r0, #0
    70b4:	f7fc bbea 	b.w	388c <nrfx_clock_start>

000070b8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    70b8:	2000      	movs	r0, #0
    70ba:	f7fc bc3b 	b.w	3934 <nrfx_clock_stop>

000070be <api_stop>:
	return stop(dev, subsys, CTX_API);
    70be:	2280      	movs	r2, #128	; 0x80
    70c0:	f7fb baee 	b.w	26a0 <stop>

000070c4 <blocking_start_callback>:
{
    70c4:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    70c6:	f7fe bf4b 	b.w	5f60 <z_impl_k_sem_give>

000070ca <api_start>:
{
    70ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    70ce:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    70d0:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    70d2:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    70d4:	436f      	muls	r7, r5
{
    70d6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    70d8:	f107 0048 	add.w	r0, r7, #72	; 0x48
    70dc:	2180      	movs	r1, #128	; 0x80
    70de:	4420      	add	r0, r4
{
    70e0:	4690      	mov	r8, r2
    70e2:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    70e4:	f7ff ffae 	bl	7044 <set_starting_state>
	if (err < 0) {
    70e8:	2800      	cmp	r0, #0
    70ea:	db07      	blt.n	70fc <api_start+0x32>
	subdata->cb = cb;
    70ec:	443c      	add	r4, r7
	subdata->user_data = user_data;
    70ee:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    70f2:	6873      	ldr	r3, [r6, #4]
    70f4:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    70f8:	4798      	blx	r3
	return 0;
    70fa:	2000      	movs	r0, #0
}
    70fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007100 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7100:	6843      	ldr	r3, [r0, #4]
    7102:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7104:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7108:	600b      	str	r3, [r1, #0]
}
    710a:	2000      	movs	r0, #0
    710c:	4770      	bx	lr

0000710e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    710e:	6843      	ldr	r3, [r0, #4]
    7110:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7112:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7116:	4042      	eors	r2, r0
    7118:	400a      	ands	r2, r1
    711a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    711c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    7120:	2000      	movs	r0, #0
    7122:	4770      	bx	lr

00007124 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7124:	6843      	ldr	r3, [r0, #4]
    7126:	685b      	ldr	r3, [r3, #4]
}
    7128:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    712a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    712e:	4770      	bx	lr

00007130 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7130:	6843      	ldr	r3, [r0, #4]
    7132:	685b      	ldr	r3, [r3, #4]
}
    7134:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7136:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    713a:	4770      	bx	lr

0000713c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    713c:	6843      	ldr	r3, [r0, #4]
    713e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7140:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7144:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7146:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    714a:	2000      	movs	r0, #0
    714c:	4770      	bx	lr

0000714e <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    714e:	6843      	ldr	r3, [r0, #4]
    7150:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    7152:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7156:	05d1      	lsls	r1, r2, #23
    7158:	d518      	bpl.n	718c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    715a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    715e:	b1aa      	cbz	r2, 718c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7160:	f04f 0120 	mov.w	r1, #32
    7164:	f3ef 8211 	mrs	r2, BASEPRI
    7168:	f381 8812 	msr	BASEPRI_MAX, r1
    716c:	f3bf 8f6f 	isb	sy
    7170:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7174:	b131      	cbz	r1, 7184 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7176:	2100      	movs	r1, #0
    7178:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    717c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7180:	2101      	movs	r1, #1
    7182:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7184:	f382 8811 	msr	BASEPRI, r2
    7188:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    718c:	6842      	ldr	r2, [r0, #4]
    718e:	6852      	ldr	r2, [r2, #4]
    7190:	06d2      	lsls	r2, r2, #27
    7192:	d515      	bpl.n	71c0 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    7194:	f04f 0120 	mov.w	r1, #32
    7198:	f3ef 8211 	mrs	r2, BASEPRI
    719c:	f381 8812 	msr	BASEPRI_MAX, r1
    71a0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71a4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    71a8:	b111      	cbz	r1, 71b0 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    71aa:	2100      	movs	r1, #0
    71ac:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    71b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    71b4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    71b8:	f382 8811 	msr	BASEPRI, r2
    71bc:	f3bf 8f6f 	isb	sy
}
    71c0:	4770      	bx	lr

000071c2 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    71c2:	6902      	ldr	r2, [r0, #16]
{
    71c4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    71c6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    71ca:	e883 0003 	stmia.w	r3, {r0, r1}
}
    71ce:	2000      	movs	r0, #0
    71d0:	4770      	bx	lr

000071d2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    71d2:	6843      	ldr	r3, [r0, #4]
    71d4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    71d6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    71da:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    71de:	4770      	bx	lr

000071e0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    71e0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    71e2:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71e4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    71e8:	b940      	cbnz	r0, 71fc <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    71ea:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    71ec:	0792      	lsls	r2, r2, #30
    71ee:	d406      	bmi.n	71fe <is_tx_ready+0x1e>
    71f0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    71f4:	3800      	subs	r0, #0
    71f6:	bf18      	it	ne
    71f8:	2001      	movne	r0, #1
    71fa:	4770      	bx	lr
    71fc:	2001      	movs	r0, #1
}
    71fe:	4770      	bx	lr

00007200 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7200:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    7202:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7204:	681b      	ldr	r3, [r3, #0]
    7206:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    720a:	b148      	cbz	r0, 7220 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    720c:	7c52      	ldrb	r2, [r2, #17]
    720e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7210:	2000      	movs	r0, #0
    7212:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7216:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    721a:	2201      	movs	r2, #1
    721c:	601a      	str	r2, [r3, #0]
	return 0;
    721e:	4770      	bx	lr
		return -1;
    7220:	f04f 30ff 	mov.w	r0, #4294967295
}
    7224:	4770      	bx	lr

00007226 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    7226:	b510      	push	{r4, lr}
    7228:	2200      	movs	r2, #0
    722a:	4604      	mov	r4, r0
    722c:	2101      	movs	r1, #1
    722e:	2002      	movs	r0, #2
    7230:	f7fa fdd0 	bl	1dd4 <z_arm_irq_priority_set>
    7234:	2002      	movs	r0, #2
    7236:	f7fa fdaf 	bl	1d98 <arch_irq_enable>
    723a:	4620      	mov	r0, r4
    723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7240:	f7fb bf8e 	b.w	3160 <uarte_instance_init.isra.0>

00007244 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    7244:	b510      	push	{r4, lr}
    7246:	2200      	movs	r2, #0
    7248:	4604      	mov	r4, r0
    724a:	2101      	movs	r1, #1
    724c:	2028      	movs	r0, #40	; 0x28
    724e:	f7fa fdc1 	bl	1dd4 <z_arm_irq_priority_set>
    7252:	2028      	movs	r0, #40	; 0x28
    7254:	f7fa fda0 	bl	1d98 <arch_irq_enable>
    7258:	4620      	mov	r0, r4
    725a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    725e:	f7fb bf7f 	b.w	3160 <uarte_instance_init.isra.0>

00007262 <sys_clock_cycle_get_32>:
{
    7262:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    7264:	f7fc f8da 	bl	341c <z_nrf_rtc_timer_read>
}
    7268:	bd08      	pop	{r3, pc}

0000726a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    726a:	4770      	bx	lr

0000726c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    726c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    726e:	2000      	movs	r0, #0
    7270:	f7fb f9ae 	bl	25d0 <sys_arch_reboot>

00007274 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7274:	f7ff bba2 	b.w	69bc <nrf_cc3xx_platform_init_no_rng>

00007278 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7278:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    727a:	f7fa f80d 	bl	1298 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    727e:	f7fa f8bf 	bl	1400 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7286:	f7ff bb99 	b.w	69bc <nrf_cc3xx_platform_init_no_rng>

0000728a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    728a:	4700      	bx	r0

0000728c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    728c:	f000 b8d5 	b.w	743a <z_impl_k_busy_wait>

00007290 <nrf_gpio_pin_present_check>:
    switch (port)
    7290:	0943      	lsrs	r3, r0, #5
    7292:	d00b      	beq.n	72ac <nrf_gpio_pin_present_check+0x1c>
    7294:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    7296:	f64f 73ff 	movw	r3, #65535	; 0xffff
    729a:	bf18      	it	ne
    729c:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    729e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    72a2:	fa23 f000 	lsr.w	r0, r3, r0
}
    72a6:	f000 0001 	and.w	r0, r0, #1
    72aa:	4770      	bx	lr
    switch (port)
    72ac:	f04f 33ff 	mov.w	r3, #4294967295
    72b0:	e7f5      	b.n	729e <nrf_gpio_pin_present_check+0xe>

000072b2 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    72b2:	0080      	lsls	r0, r0, #2
}
    72b4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    72b8:	4770      	bx	lr

000072ba <nrf_gpio_reconfigure>:
{
    72ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    72be:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    72c0:	a801      	add	r0, sp, #4
{
    72c2:	460e      	mov	r6, r1
    72c4:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    72c8:	4690      	mov	r8, r2
    72ca:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    72cc:	f7fc fca0 	bl	3c10 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    72d0:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    72d2:	f1b8 0f00 	cmp.w	r8, #0
    72d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    72da:	bf14      	ite	ne
    72dc:	2302      	movne	r3, #2
    72de:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    72e0:	2e00      	cmp	r6, #0
    72e2:	bf18      	it	ne
    72e4:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    72e8:	2d00      	cmp	r5, #0
    72ea:	bf14      	ite	ne
    72ec:	210c      	movne	r1, #12
    72ee:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    72f0:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    72f2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    72f6:	bf14      	ite	ne
    72f8:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    72fc:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    72fe:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7300:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7304:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7308:	bf14      	ite	ne
    730a:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    730e:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7310:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    7312:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7316:	b106      	cbz	r6, 731a <nrf_gpio_reconfigure+0x60>
    7318:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    731a:	f1b8 0f00 	cmp.w	r8, #0
    731e:	d003      	beq.n	7328 <nrf_gpio_reconfigure+0x6e>
    7320:	f898 8000 	ldrb.w	r8, [r8]
    7324:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7328:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    732a:	b10d      	cbz	r5, 7330 <nrf_gpio_reconfigure+0x76>
    732c:	782d      	ldrb	r5, [r5, #0]
    732e:	00ad      	lsls	r5, r5, #2
    7330:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7334:	b10c      	cbz	r4, 733a <nrf_gpio_reconfigure+0x80>
    7336:	7822      	ldrb	r2, [r4, #0]
    7338:	0214      	lsls	r4, r2, #8
    733a:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    733c:	b10f      	cbz	r7, 7342 <nrf_gpio_reconfigure+0x88>
    733e:	783f      	ldrb	r7, [r7, #0]
    7340:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7342:	432c      	orrs	r4, r5
    7344:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    7346:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    734a:	b002      	add	sp, #8
    734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007350 <nrf_gpio_cfg_sense_set>:
{
    7350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7352:	f10d 030f 	add.w	r3, sp, #15
    7356:	9301      	str	r3, [sp, #4]
    7358:	2300      	movs	r3, #0
{
    735a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    735e:	9300      	str	r3, [sp, #0]
    7360:	461a      	mov	r2, r3
    7362:	4619      	mov	r1, r3
    7364:	f7ff ffa9 	bl	72ba <nrf_gpio_reconfigure>
}
    7368:	b005      	add	sp, #20
    736a:	f85d fb04 	ldr.w	pc, [sp], #4

0000736e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    736e:	f7fd b8ad 	b.w	44cc <_DoInit>

00007372 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7372:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7374:	f7ff fffb 	bl	736e <SEGGER_RTT_Init>

	return 0;
}
    7378:	2000      	movs	r0, #0
    737a:	bd08      	pop	{r3, pc}

0000737c <z_device_state_init>:
}
    737c:	4770      	bx	lr

0000737e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    737e:	b138      	cbz	r0, 7390 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7380:	68c3      	ldr	r3, [r0, #12]
    7382:	8818      	ldrh	r0, [r3, #0]
    7384:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7388:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    738c:	4258      	negs	r0, r3
    738e:	4158      	adcs	r0, r3
}
    7390:	4770      	bx	lr

00007392 <z_pm_save_idle_exit>:
{
    7392:	b508      	push	{r3, lr}
	pm_system_resume();
    7394:	f7fa fb90 	bl	1ab8 <pm_system_resume>
}
    7398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    739c:	f7ff bf65 	b.w	726a <sys_clock_idle_exit>

000073a0 <k_mem_slab_init>:
{
    73a0:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    73a2:	2400      	movs	r4, #0
    73a4:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    73a6:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    73a8:	ea41 0402 	orr.w	r4, r1, r2
    73ac:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    73b0:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    73b4:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    73b6:	d10c      	bne.n	73d2 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    73b8:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    73ba:	42a3      	cmp	r3, r4
    73bc:	d103      	bne.n	73c6 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    73be:	e9c0 0000 	strd	r0, r0, [r0]
}
    73c2:	2000      	movs	r0, #0
}
    73c4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    73c6:	6985      	ldr	r5, [r0, #24]
    73c8:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    73ca:	3401      	adds	r4, #1
		slab->free_list = p;
    73cc:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    73ce:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    73d0:	e7f3      	b.n	73ba <k_mem_slab_init+0x1a>
		return -EINVAL;
    73d2:	f06f 0015 	mvn.w	r0, #21
	return rc;
    73d6:	e7f5      	b.n	73c4 <k_mem_slab_init+0x24>

000073d8 <z_impl_k_mutex_init>:
{
    73d8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    73da:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    73dc:	e9c3 0002 	strd	r0, r0, [r3, #8]
    73e0:	e9c3 3300 	strd	r3, r3, [r3]
}
    73e4:	4770      	bx	lr

000073e6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    73e6:	4603      	mov	r3, r0
    73e8:	b920      	cbnz	r0, 73f4 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    73ea:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    73ee:	b90a      	cbnz	r2, 73f4 <z_reschedule_irqlock+0xe>
    73f0:	f7fa bd40 	b.w	1e74 <arch_swap>
    73f4:	f383 8811 	msr	BASEPRI, r3
    73f8:	f3bf 8f6f 	isb	sy
}
    73fc:	4770      	bx	lr

000073fe <z_reschedule_unlocked>:
	__asm__ volatile(
    73fe:	f04f 0320 	mov.w	r3, #32
    7402:	f3ef 8011 	mrs	r0, BASEPRI
    7406:	f383 8812 	msr	BASEPRI_MAX, r3
    740a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    740e:	f7ff bfea 	b.w	73e6 <z_reschedule_irqlock>

00007412 <z_priq_dumb_best>:
{
    7412:	4603      	mov	r3, r0
	return list->head == list;
    7414:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7416:	4283      	cmp	r3, r0
    7418:	d003      	beq.n	7422 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    741a:	2800      	cmp	r0, #0
    741c:	bf38      	it	cc
    741e:	2000      	movcc	r0, #0
    7420:	4770      	bx	lr
	struct k_thread *thread = NULL;
    7422:	2000      	movs	r0, #0
}
    7424:	4770      	bx	lr

00007426 <k_is_in_isr>:
    7426:	f3ef 8005 	mrs	r0, IPSR
}
    742a:	3800      	subs	r0, #0
    742c:	bf18      	it	ne
    742e:	2001      	movne	r0, #1
    7430:	4770      	bx	lr

00007432 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7432:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7434:	f7ff fa4c 	bl	68d0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7438:	bd08      	pop	{r3, pc}

0000743a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    743a:	b108      	cbz	r0, 7440 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    743c:	f7fb b8de 	b.w	25fc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7440:	4770      	bx	lr

00007442 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7442:	4770      	bx	lr

00007444 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7444:	f7fc bf5a 	b.w	42fc <SystemInit>
