
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001420 	.word	0x20001420
}
   4:	00001f09 	.word	0x00001f09
   8:	00006f19 	.word	0x00006f19
   c:	00001ef5 	.word	0x00001ef5
  10:	00001ef5 	.word	0x00001ef5
  14:	00001ef5 	.word	0x00001ef5
  18:	00001ef5 	.word	0x00001ef5
	...
  2c:	00001d11 	.word	0x00001d11
  30:	00001ef5 	.word	0x00001ef5
  34:	00000000 	.word	0x00000000
  38:	00001cbd 	.word	0x00001cbd
  3c:	00001ef5 	.word	0x00001ef5

00000040 <_irq_vector_table>:
  40:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  50:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  60:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  70:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  80:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  90:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  a0:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  b0:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  c0:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  d0:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  e0:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...
  f0:	00001c75 00001c75 00001c75 00001c75     u...u...u...u...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <but1press_cbfunction>:
volatile int dcToggleFlag7 = 0; /* Flag to signal a BUT1 press */
volatile int dcToggleFlag8 = 0; /* Flag to signal a BUT1 press */


void but1press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     3f4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     3f6:	f006 ff00 	bl	71fa <sys_clock_cycle_get_32>
     3fa:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But1 pressed at %d\n\r", k_cycle_get_32());
     3fc:	4803      	ldr	r0, [pc, #12]	; (40c <CONFIG_FLASH_SIZE+0xc>)
     3fe:	f006 fd65 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag1 = 1;
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <CONFIG_FLASH_SIZE+0x10>)
     404:	2201      	movs	r2, #1
     406:	601a      	str	r2, [r3, #0]
}
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	0000782c 	.word	0x0000782c
     410:	20000334 	.word	0x20000334

00000414 <but2press_cbfunction>:

void but2press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     414:	b508      	push	{r3, lr}
     416:	f006 fef0 	bl	71fa <sys_clock_cycle_get_32>
     41a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But2 pressed at %d\n\r", k_cycle_get_32());
     41c:	4803      	ldr	r0, [pc, #12]	; (42c <but2press_cbfunction+0x18>)
     41e:	f006 fd55 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag2 = 1;
     422:	4b03      	ldr	r3, [pc, #12]	; (430 <but2press_cbfunction+0x1c>)
     424:	2201      	movs	r2, #1
     426:	601a      	str	r2, [r3, #0]
}
     428:	bd08      	pop	{r3, pc}
     42a:	bf00      	nop
     42c:	00007841 	.word	0x00007841
     430:	20000338 	.word	0x20000338

00000434 <but3press_cbfunction>:

void but3press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     434:	b508      	push	{r3, lr}
     436:	f006 fee0 	bl	71fa <sys_clock_cycle_get_32>
     43a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But3 pressed at %d\n\r", k_cycle_get_32());
     43c:	4803      	ldr	r0, [pc, #12]	; (44c <but3press_cbfunction+0x18>)
     43e:	f006 fd45 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag3 = 1;
     442:	4b03      	ldr	r3, [pc, #12]	; (450 <but3press_cbfunction+0x1c>)
     444:	2201      	movs	r2, #1
     446:	601a      	str	r2, [r3, #0]
}
     448:	bd08      	pop	{r3, pc}
     44a:	bf00      	nop
     44c:	00007856 	.word	0x00007856
     450:	2000033c 	.word	0x2000033c

00000454 <but4press_cbfunction>:

void but4press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     454:	b508      	push	{r3, lr}
     456:	f006 fed0 	bl	71fa <sys_clock_cycle_get_32>
     45a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But4 pressed at %d\n\r", k_cycle_get_32());
     45c:	4803      	ldr	r0, [pc, #12]	; (46c <but4press_cbfunction+0x18>)
     45e:	f006 fd35 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag4 = 1;
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <but4press_cbfunction+0x1c>)
     464:	2201      	movs	r2, #1
     466:	601a      	str	r2, [r3, #0]
}
     468:	bd08      	pop	{r3, pc}
     46a:	bf00      	nop
     46c:	0000786b 	.word	0x0000786b
     470:	20000340 	.word	0x20000340

00000474 <but5press_cbfunction>:

void but5press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     474:	b508      	push	{r3, lr}
     476:	f006 fec0 	bl	71fa <sys_clock_cycle_get_32>
     47a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But5 pressed at %d\n\r", k_cycle_get_32());
     47c:	4803      	ldr	r0, [pc, #12]	; (48c <but5press_cbfunction+0x18>)
     47e:	f006 fd25 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag5 = 1;
     482:	4b03      	ldr	r3, [pc, #12]	; (490 <but5press_cbfunction+0x1c>)
     484:	2201      	movs	r2, #1
     486:	601a      	str	r2, [r3, #0]
}
     488:	bd08      	pop	{r3, pc}
     48a:	bf00      	nop
     48c:	00007880 	.word	0x00007880
     490:	20000344 	.word	0x20000344

00000494 <but6press_cbfunction>:

void but6press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     494:	b508      	push	{r3, lr}
     496:	f006 feb0 	bl	71fa <sys_clock_cycle_get_32>
     49a:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But6 pressed at %d\n\r", k_cycle_get_32());
     49c:	4803      	ldr	r0, [pc, #12]	; (4ac <but6press_cbfunction+0x18>)
     49e:	f006 fd15 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag6 = 1;
     4a2:	4b03      	ldr	r3, [pc, #12]	; (4b0 <but6press_cbfunction+0x1c>)
     4a4:	2201      	movs	r2, #1
     4a6:	601a      	str	r2, [r3, #0]
}
     4a8:	bd08      	pop	{r3, pc}
     4aa:	bf00      	nop
     4ac:	00007895 	.word	0x00007895
     4b0:	20000348 	.word	0x20000348

000004b4 <but7press_cbfunction>:

void but7press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     4b4:	b508      	push	{r3, lr}
     4b6:	f006 fea0 	bl	71fa <sys_clock_cycle_get_32>
     4ba:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But7 pressed at %d\n\r", k_cycle_get_32());
     4bc:	4803      	ldr	r0, [pc, #12]	; (4cc <but7press_cbfunction+0x18>)
     4be:	f006 fd05 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag7 = 1;
     4c2:	4b03      	ldr	r3, [pc, #12]	; (4d0 <but7press_cbfunction+0x1c>)
     4c4:	2201      	movs	r2, #1
     4c6:	601a      	str	r2, [r3, #0]
}
     4c8:	bd08      	pop	{r3, pc}
     4ca:	bf00      	nop
     4cc:	000078aa 	.word	0x000078aa
     4d0:	2000034c 	.word	0x2000034c

000004d4 <but8press_cbfunction>:

void but8press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{    
     4d4:	b508      	push	{r3, lr}
     4d6:	f006 fe90 	bl	71fa <sys_clock_cycle_get_32>
     4da:	4601      	mov	r1, r0
    /* Inform that button was hit*/
    printk("But8 pressed at %d\n\r", k_cycle_get_32());
     4dc:	4803      	ldr	r0, [pc, #12]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4de:	f006 fcf5 	bl	6ecc <printk>
    
    /* Update Flag*/
    dcToggleFlag8 = 1;
     4e2:	4b03      	ldr	r3, [pc, #12]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     4e4:	2201      	movs	r2, #1
     4e6:	601a      	str	r2, [r3, #0]
}
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop
     4ec:	000078bf 	.word	0x000078bf
     4f0:	20000350 	.word	0x20000350

000004f4 <gpio_pin_configure.constprop.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
     4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4f8:	4604      	mov	r4, r0
     4fa:	460d      	mov	r5, r1
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4fc:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
     4fe:	f8d0 8008 	ldr.w	r8, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     502:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
     504:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     506:	2601      	movs	r6, #1
     508:	408e      	lsls	r6, r1
     50a:	421e      	tst	r6, r3
     50c:	d10e      	bne.n	52c <gpio_pin_configure.constprop.0+0x38>
     50e:	490e      	ldr	r1, [pc, #56]	; (548 <gpio_pin_configure.constprop.0+0x54>)
     510:	4a0e      	ldr	r2, [pc, #56]	; (54c <gpio_pin_configure.constprop.0+0x58>)
     512:	480f      	ldr	r0, [pc, #60]	; (550 <gpio_pin_configure.constprop.0+0x5c>)
     514:	f240 23fd 	movw	r3, #765	; 0x2fd
     518:	f006 fcd8 	bl	6ecc <printk>
     51c:	480d      	ldr	r0, [pc, #52]	; (554 <gpio_pin_configure.constprop.0+0x60>)
     51e:	f006 fcd5 	bl	6ecc <printk>
     522:	480a      	ldr	r0, [pc, #40]	; (54c <gpio_pin_configure.constprop.0+0x58>)
     524:	f240 21fd 	movw	r1, #765	; 0x2fd
     528:	f006 fbfc 	bl	6d24 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     52c:	683b      	ldr	r3, [r7, #0]
     52e:	ea23 0606 	bic.w	r6, r3, r6
     532:	603e      	str	r6, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
     534:	f8d8 3000 	ldr.w	r3, [r8]
     538:	4629      	mov	r1, r5
     53a:	4620      	mov	r0, r4
     53c:	f44f 7288 	mov.w	r2, #272	; 0x110
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
     540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     544:	4718      	bx	r3
     546:	bf00      	nop
     548:	000078fe 	.word	0x000078fe
     54c:	000078d4 	.word	0x000078d4
     550:	0000793c 	.word	0x0000793c
     554:	00007959 	.word	0x00007959

00000558 <gpio_pin_interrupt_configure.constprop.0>:
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
     558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     55c:	4604      	mov	r4, r0
     55e:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     560:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
     562:	6887      	ldr	r7, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     564:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
     566:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     56a:	2601      	movs	r6, #1
     56c:	408e      	lsls	r6, r1
     56e:	421e      	tst	r6, r3
     570:	d10e      	bne.n	590 <gpio_pin_interrupt_configure.constprop.0+0x38>
     572:	4910      	ldr	r1, [pc, #64]	; (5b4 <gpio_pin_interrupt_configure.constprop.0+0x5c>)
     574:	4a10      	ldr	r2, [pc, #64]	; (5b8 <gpio_pin_interrupt_configure.constprop.0+0x60>)
     576:	4811      	ldr	r0, [pc, #68]	; (5bc <gpio_pin_interrupt_configure.constprop.0+0x64>)
     578:	f240 239d 	movw	r3, #669	; 0x29d
     57c:	f006 fca6 	bl	6ecc <printk>
     580:	480f      	ldr	r0, [pc, #60]	; (5c0 <gpio_pin_interrupt_configure.constprop.0+0x68>)
     582:	f006 fca3 	bl	6ecc <printk>
     586:	480c      	ldr	r0, [pc, #48]	; (5b8 <gpio_pin_interrupt_configure.constprop.0+0x60>)
     588:	f240 219d 	movw	r1, #669	; 0x29d
     58c:	f006 fbca 	bl	6d24 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     590:	f8d8 3000 	ldr.w	r3, [r8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     594:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
     596:	69be      	ldr	r6, [r7, #24]
     598:	4629      	mov	r1, r5
     59a:	4620      	mov	r0, r4
     59c:	46b4      	mov	ip, r6
     59e:	bf18      	it	ne
     5a0:	f44f 3300 	movne.w	r3, #131072	; 0x20000
}
     5a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     5a8:	bf08      	it	eq
     5aa:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
     5ae:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
     5b2:	4760      	bx	ip
     5b4:	000078fe 	.word	0x000078fe
     5b8:	000078d4 	.word	0x000078d4
     5bc:	0000793c 	.word	0x0000793c
     5c0:	00007959 	.word	0x00007959

000005c4 <showSpace>:
    printk("Dinheiro Atual : %d Centimos\n\r", credit); 
  }
}

void showSpace()
{
     5c4:	b510      	push	{r4, lr}
  printk("\n\r");
     5c6:	4c06      	ldr	r4, [pc, #24]	; (5e0 <showSpace+0x1c>)
     5c8:	4620      	mov	r0, r4
     5ca:	f006 fc7f 	bl	6ecc <printk>
  printk("----------------------------------------------------\n\r");
     5ce:	4805      	ldr	r0, [pc, #20]	; (5e4 <showSpace+0x20>)
     5d0:	f006 fc7c 	bl	6ecc <printk>
  printk("\n\r");
     5d4:	4620      	mov	r0, r4
}
     5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printk("\n\r");
     5da:	f006 bc77 	b.w	6ecc <printk>
     5de:	bf00      	nop
     5e0:	000079e3 	.word	0x000079e3
     5e4:	0000796b 	.word	0x0000796b

000005e8 <showMenu>:
{
     5e8:	b510      	push	{r4, lr}
     5ea:	4604      	mov	r4, r0
  printk("\n\x1b[2J\r");
     5ec:	481a      	ldr	r0, [pc, #104]	; (658 <showMenu+0x70>)
     5ee:	f006 fc6d 	bl	6ecc <printk>
  if(choice == 1)
     5f2:	4b1a      	ldr	r3, [pc, #104]	; (65c <showMenu+0x74>)
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	2b01      	cmp	r3, #1
     5f8:	d116      	bne.n	628 <showMenu+0x40>
    printk("Products : \n\r");
     5fa:	4819      	ldr	r0, [pc, #100]	; (660 <showMenu+0x78>)
     5fc:	f006 fc66 	bl	6ecc <printk>
    printk("   - Beer : 150 Centimos              <---- \n\r");
     600:	4818      	ldr	r0, [pc, #96]	; (664 <showMenu+0x7c>)
     602:	f006 fc63 	bl	6ecc <printk>
    printk("   - Tuna Sandwich : 100 Centimos \n\r");
     606:	4818      	ldr	r0, [pc, #96]	; (668 <showMenu+0x80>)
    printk("   - Tuna Sandwich : 100 Centimos     <---- \n\r");
     608:	f006 fc60 	bl	6ecc <printk>
    printk("   - Coffee Sandwich : 50 Centimos \n\r");
     60c:	4817      	ldr	r0, [pc, #92]	; (66c <showMenu+0x84>)
    printk("   - Coffee Sandwich : 50 Centimos    <---- \n\r");
     60e:	f006 fc5d 	bl	6ecc <printk>
  if(flag == 1)
     612:	2c01      	cmp	r4, #1
     614:	d11f      	bne.n	656 <showMenu+0x6e>
    showSpace();
     616:	f7ff ffd5 	bl	5c4 <showSpace>
    printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     61a:	4b15      	ldr	r3, [pc, #84]	; (670 <showMenu+0x88>)
     61c:	4815      	ldr	r0, [pc, #84]	; (674 <showMenu+0x8c>)
     61e:	6819      	ldr	r1, [r3, #0]
}
     620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     624:	f006 bc52 	b.w	6ecc <printk>
  } else if(choice == 2)
     628:	2b02      	cmp	r3, #2
     62a:	d107      	bne.n	63c <showMenu+0x54>
    printk("Products : \n\r");
     62c:	480c      	ldr	r0, [pc, #48]	; (660 <showMenu+0x78>)
     62e:	f006 fc4d 	bl	6ecc <printk>
    printk("   - Beer : 150 Centimos \n\r");
     632:	4811      	ldr	r0, [pc, #68]	; (678 <showMenu+0x90>)
     634:	f006 fc4a 	bl	6ecc <printk>
    printk("   - Tuna Sandwich : 100 Centimos     <---- \n\r");
     638:	4810      	ldr	r0, [pc, #64]	; (67c <showMenu+0x94>)
     63a:	e7e5      	b.n	608 <showMenu+0x20>
  } else if(choice == 3)
     63c:	2b03      	cmp	r3, #3
     63e:	d1e8      	bne.n	612 <showMenu+0x2a>
    printk("Products : \n\r");
     640:	4807      	ldr	r0, [pc, #28]	; (660 <showMenu+0x78>)
     642:	f006 fc43 	bl	6ecc <printk>
    printk("   - Beer : 150 Centimos \n\r");
     646:	480c      	ldr	r0, [pc, #48]	; (678 <showMenu+0x90>)
     648:	f006 fc40 	bl	6ecc <printk>
    printk("   - Tuna Sandwich : 100 Centimos \n\r");
     64c:	4806      	ldr	r0, [pc, #24]	; (668 <showMenu+0x80>)
     64e:	f006 fc3d 	bl	6ecc <printk>
    printk("   - Coffee Sandwich : 50 Centimos    <---- \n\r");
     652:	480b      	ldr	r0, [pc, #44]	; (680 <showMenu+0x98>)
     654:	e7db      	b.n	60e <showMenu+0x26>
}
     656:	bd10      	pop	{r4, pc}
     658:	000079a2 	.word	0x000079a2
     65c:	20000000 	.word	0x20000000
     660:	000079a9 	.word	0x000079a9
     664:	000079b7 	.word	0x000079b7
     668:	000079e6 	.word	0x000079e6
     66c:	00007a0b 	.word	0x00007a0b
     670:	20000330 	.word	0x20000330
     674:	00007aab 	.word	0x00007aab
     678:	00007a31 	.word	0x00007a31
     67c:	00007a4d 	.word	0x00007a4d
     680:	00007a7c 	.word	0x00007a7c

00000684 <UpOrDown>:
  if(flag == 1)
     684:	2801      	cmp	r0, #1
     686:	d109      	bne.n	69c <UpOrDown+0x18>
    choice = choice + 1;
     688:	4a09      	ldr	r2, [pc, #36]	; (6b0 <UpOrDown+0x2c>)
     68a:	6813      	ldr	r3, [r2, #0]
     68c:	3301      	adds	r3, #1
     68e:	2b03      	cmp	r3, #3
     690:	bfc8      	it	gt
     692:	4603      	movgt	r3, r0
    if(choice <= 0) choice = 3;
     694:	6013      	str	r3, [r2, #0]
  showMenu(1);
     696:	2001      	movs	r0, #1
     698:	f7ff bfa6 	b.w	5e8 <showMenu>
  } else if (flag == 2)
     69c:	2802      	cmp	r0, #2
     69e:	d1fa      	bne.n	696 <UpOrDown+0x12>
    choice = choice - 1;
     6a0:	4a03      	ldr	r2, [pc, #12]	; (6b0 <UpOrDown+0x2c>)
     6a2:	6813      	ldr	r3, [r2, #0]
     6a4:	3b01      	subs	r3, #1
    if(choice <= 0) choice = 3;
     6a6:	2b00      	cmp	r3, #0
     6a8:	bfd8      	it	le
     6aa:	2303      	movle	r3, #3
     6ac:	e7f2      	b.n	694 <UpOrDown+0x10>
     6ae:	bf00      	nop
     6b0:	20000000 	.word	0x20000000

000006b4 <addMoney>:
{
     6b4:	b538      	push	{r3, r4, r5, lr}
  credit = credit + cach;
     6b6:	4d0a      	ldr	r5, [pc, #40]	; (6e0 <addMoney+0x2c>)
     6b8:	682b      	ldr	r3, [r5, #0]
{
     6ba:	4604      	mov	r4, r0
  credit = credit + cach;
     6bc:	4403      	add	r3, r0
  showMenu(0);
     6be:	2000      	movs	r0, #0
  credit = credit + cach;
     6c0:	602b      	str	r3, [r5, #0]
  showMenu(0);
     6c2:	f7ff ff91 	bl	5e8 <showMenu>
  showSpace();
     6c6:	f7ff ff7d 	bl	5c4 <showSpace>
  printk("Dinheiro adicionado : %d Centimos\n\r", cach);
     6ca:	4621      	mov	r1, r4
     6cc:	4805      	ldr	r0, [pc, #20]	; (6e4 <addMoney+0x30>)
     6ce:	f006 fbfd 	bl	6ecc <printk>
  printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     6d2:	6829      	ldr	r1, [r5, #0]
     6d4:	4804      	ldr	r0, [pc, #16]	; (6e8 <addMoney+0x34>)
}
     6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     6da:	f006 bbf7 	b.w	6ecc <printk>
     6de:	bf00      	nop
     6e0:	20000330 	.word	0x20000330
     6e4:	00007aca 	.word	0x00007aca
     6e8:	00007aab 	.word	0x00007aab

000006ec <resetMoney>:
{
     6ec:	b510      	push	{r4, lr}
  printk("Dinheiro devolvido : %d Centimos\n\r", credit);
     6ee:	4c08      	ldr	r4, [pc, #32]	; (710 <resetMoney+0x24>)
  showMenu(0);
     6f0:	2000      	movs	r0, #0
     6f2:	f7ff ff79 	bl	5e8 <showMenu>
  showSpace();
     6f6:	f7ff ff65 	bl	5c4 <showSpace>
  printk("Dinheiro devolvido : %d Centimos\n\r", credit);
     6fa:	6821      	ldr	r1, [r4, #0]
     6fc:	4805      	ldr	r0, [pc, #20]	; (714 <resetMoney+0x28>)
     6fe:	f006 fbe5 	bl	6ecc <printk>
  credit = 0;
     702:	2100      	movs	r1, #0
     704:	6021      	str	r1, [r4, #0]
  printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     706:	4804      	ldr	r0, [pc, #16]	; (718 <resetMoney+0x2c>)
}
     708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     70c:	f006 bbde 	b.w	6ecc <printk>
     710:	20000330 	.word	0x20000330
     714:	00007aee 	.word	0x00007aee
     718:	00007aab 	.word	0x00007aab

0000071c <Check>:
  if(choice == 1)
     71c:	4b30      	ldr	r3, [pc, #192]	; (7e0 <Check+0xc4>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	2b01      	cmp	r3, #1
{
     722:	b510      	push	{r4, lr}
  if(choice == 1)
     724:	d123      	bne.n	76e <Check+0x52>
    if(credit >= 150)
     726:	4c2f      	ldr	r4, [pc, #188]	; (7e4 <Check+0xc8>)
     728:	6823      	ldr	r3, [r4, #0]
     72a:	2b95      	cmp	r3, #149	; 0x95
     72c:	dd11      	ble.n	752 <Check+0x36>
      credit = credit - 150;
     72e:	3b96      	subs	r3, #150	; 0x96
     730:	6023      	str	r3, [r4, #0]
      showMenu();
     732:	f7ff ff59 	bl	5e8 <showMenu>
      showSpace();
     736:	f7ff ff45 	bl	5c4 <showSpace>
      printk("Produto Entregue (Beer)\n\r");
     73a:	482b      	ldr	r0, [pc, #172]	; (7e8 <Check+0xcc>)
     73c:	f006 fbc6 	bl	6ecc <printk>
      printk("Dinheiro Descontado: 150 Centimos\n\r");
     740:	482a      	ldr	r0, [pc, #168]	; (7ec <Check+0xd0>)
      printk("Dinheiro Descontado: 50 Centimos\n\r");
     742:	f006 fbc3 	bl	6ecc <printk>
      printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     746:	6821      	ldr	r1, [r4, #0]
     748:	4829      	ldr	r0, [pc, #164]	; (7f0 <Check+0xd4>)
}
     74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      printk("Dinheiro Atual : %d Centimos\n\r", credit); 
     74e:	f006 bbbd 	b.w	6ecc <printk>
      showMenu();
     752:	f7ff ff49 	bl	5e8 <showMenu>
      showSpace();
     756:	f7ff ff35 	bl	5c4 <showSpace>
      printk("Custo do Produto : 150 Centimos\n\r");
     75a:	4826      	ldr	r0, [pc, #152]	; (7f4 <Check+0xd8>)
     75c:	f006 fbb6 	bl	6ecc <printk>
      printk("Dinheiro que Falta: %d Centimos\n\r",(150-credit));
     760:	6821      	ldr	r1, [r4, #0]
     762:	f1c1 0196 	rsb	r1, r1, #150	; 0x96
      printk("Dinheiro que Falta: %d Centimos\n\r",(50-credit));
     766:	4824      	ldr	r0, [pc, #144]	; (7f8 <Check+0xdc>)
     768:	f006 fbb0 	bl	6ecc <printk>
     76c:	e7eb      	b.n	746 <Check+0x2a>
  } else if (choice == 2)
     76e:	2b02      	cmp	r3, #2
     770:	d119      	bne.n	7a6 <Check+0x8a>
    if(credit >= 100)
     772:	4c1c      	ldr	r4, [pc, #112]	; (7e4 <Check+0xc8>)
     774:	6823      	ldr	r3, [r4, #0]
     776:	2b63      	cmp	r3, #99	; 0x63
     778:	dd0a      	ble.n	790 <Check+0x74>
      credit = credit - 100;
     77a:	3b64      	subs	r3, #100	; 0x64
     77c:	6023      	str	r3, [r4, #0]
      showMenu();
     77e:	f7ff ff33 	bl	5e8 <showMenu>
      showSpace();
     782:	f7ff ff1f 	bl	5c4 <showSpace>
      printk("Produto Entregue (Tuna Sandwich)\n\r");
     786:	481d      	ldr	r0, [pc, #116]	; (7fc <Check+0xe0>)
     788:	f006 fba0 	bl	6ecc <printk>
      printk("Dinheiro Descontado: 100 Centimos\n\r");
     78c:	481c      	ldr	r0, [pc, #112]	; (800 <CONFIG_ISR_STACK_SIZE>)
     78e:	e7d8      	b.n	742 <Check+0x26>
      showMenu();
     790:	f7ff ff2a 	bl	5e8 <showMenu>
      showSpace();
     794:	f7ff ff16 	bl	5c4 <showSpace>
      printk("Custo do Produto : 100 Centimos\n\r");
     798:	481a      	ldr	r0, [pc, #104]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     79a:	f006 fb97 	bl	6ecc <printk>
      printk("Dinheiro que Falta: %d Centimos\n\r",(100-credit));
     79e:	6821      	ldr	r1, [r4, #0]
     7a0:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
     7a4:	e7df      	b.n	766 <Check+0x4a>
  } else if (choice == 3)
     7a6:	2b03      	cmp	r3, #3
     7a8:	d119      	bne.n	7de <Check+0xc2>
    if(credit >= 50)
     7aa:	4c0e      	ldr	r4, [pc, #56]	; (7e4 <Check+0xc8>)
     7ac:	6823      	ldr	r3, [r4, #0]
     7ae:	2b31      	cmp	r3, #49	; 0x31
     7b0:	dd0a      	ble.n	7c8 <Check+0xac>
      credit = credit - 50;
     7b2:	3b32      	subs	r3, #50	; 0x32
     7b4:	6023      	str	r3, [r4, #0]
      showMenu();
     7b6:	f7ff ff17 	bl	5e8 <showMenu>
      showSpace();
     7ba:	f7ff ff03 	bl	5c4 <showSpace>
      printk("Produto Entregue (Coffee)\n\r");
     7be:	4812      	ldr	r0, [pc, #72]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7c0:	f006 fb84 	bl	6ecc <printk>
      printk("Dinheiro Descontado: 50 Centimos\n\r");
     7c4:	4811      	ldr	r0, [pc, #68]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7c6:	e7bc      	b.n	742 <Check+0x26>
      showMenu();
     7c8:	f7ff ff0e 	bl	5e8 <showMenu>
      showSpace();
     7cc:	f7ff fefa 	bl	5c4 <showSpace>
      printk("Custo do Produto : 50 Centimos\n\r");
     7d0:	480f      	ldr	r0, [pc, #60]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7d2:	f006 fb7b 	bl	6ecc <printk>
      printk("Dinheiro que Falta: %d Centimos\n\r",(50-credit));
     7d6:	6821      	ldr	r1, [r4, #0]
     7d8:	f1c1 0132 	rsb	r1, r1, #50	; 0x32
     7dc:	e7c3      	b.n	766 <Check+0x4a>
}
     7de:	bd10      	pop	{r4, pc}
     7e0:	20000000 	.word	0x20000000
     7e4:	20000330 	.word	0x20000330
     7e8:	00007b11 	.word	0x00007b11
     7ec:	00007b2b 	.word	0x00007b2b
     7f0:	00007aab 	.word	0x00007aab
     7f4:	00007b4f 	.word	0x00007b4f
     7f8:	00007b71 	.word	0x00007b71
     7fc:	00007b93 	.word	0x00007b93
     800:	00007bb6 	.word	0x00007bb6
     804:	00007bda 	.word	0x00007bda
     808:	00007bfc 	.word	0x00007bfc
     80c:	00007c18 	.word	0x00007c18
     810:	00007c3b 	.word	0x00007c3b

00000814 <CONFIG_BUTTONS>:

/*Configure Buttons*/

void CONFIG_BUTTONS()
{
     814:	b510      	push	{r4, lr}
    int ret = 0;
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT1, GPIO_INPUT | GPIO_PULL_UP);
     816:	4c4a      	ldr	r4, [pc, #296]	; (940 <CONFIG_BUTTONS+0x12c>)
     818:	210b      	movs	r1, #11
     81a:	6820      	ldr	r0, [r4, #0]
     81c:	f7ff fe6a 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT2, GPIO_INPUT | GPIO_PULL_UP);
     820:	210c      	movs	r1, #12
     822:	6820      	ldr	r0, [r4, #0]
     824:	f7ff fe66 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT3, GPIO_INPUT | GPIO_PULL_UP);
     828:	2118      	movs	r1, #24
     82a:	6820      	ldr	r0, [r4, #0]
     82c:	f7ff fe62 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT4, GPIO_INPUT | GPIO_PULL_UP);
     830:	2119      	movs	r1, #25
     832:	6820      	ldr	r0, [r4, #0]
     834:	f7ff fe5e 	bl	4f4 <gpio_pin_configure.constprop.0>

    ret = gpio_pin_configure(gpio0_dev, BOARDBUT5, GPIO_INPUT | GPIO_PULL_UP);
     838:	2103      	movs	r1, #3
     83a:	6820      	ldr	r0, [r4, #0]
     83c:	f7ff fe5a 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT6, GPIO_INPUT | GPIO_PULL_UP);
     840:	2104      	movs	r1, #4
     842:	6820      	ldr	r0, [r4, #0]
     844:	f7ff fe56 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT7, GPIO_INPUT | GPIO_PULL_UP);
     848:	211c      	movs	r1, #28
     84a:	6820      	ldr	r0, [r4, #0]
     84c:	f7ff fe52 	bl	4f4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT8, GPIO_INPUT | GPIO_PULL_UP);
     850:	211d      	movs	r1, #29
     852:	6820      	ldr	r0, [r4, #0]
     854:	f7ff fe4e 	bl	4f4 <gpio_pin_configure.constprop.0>

    if (ret < 0) {
     858:	1e01      	subs	r1, r0, #0
     85a:	da04      	bge.n	866 <CONFIG_BUTTONS+0x52>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
     85c:	4839      	ldr	r0, [pc, #228]	; (944 <CONFIG_BUTTONS+0x130>)
    gpio_init_callback(&but7_cb_data, but7press_cbfunction, BIT(BOARDBUT7));
    gpio_add_callback(gpio0_dev, &but7_cb_data);

    gpio_init_callback(&but8_cb_data, but8press_cbfunction, BIT(BOARDBUT8));
    gpio_add_callback(gpio0_dev, &but8_cb_data);
}
     85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
     862:	f006 bb33 	b.w	6ecc <printk>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT1, GPIO_INT_EDGE_TO_ACTIVE);
     866:	210b      	movs	r1, #11
     868:	6820      	ldr	r0, [r4, #0]
     86a:	f7ff fe75 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT2, GPIO_INT_EDGE_TO_ACTIVE);
     86e:	210c      	movs	r1, #12
     870:	6820      	ldr	r0, [r4, #0]
     872:	f7ff fe71 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT3, GPIO_INT_EDGE_TO_ACTIVE);
     876:	2118      	movs	r1, #24
     878:	6820      	ldr	r0, [r4, #0]
     87a:	f7ff fe6d 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT4, GPIO_INT_EDGE_TO_ACTIVE);
     87e:	2119      	movs	r1, #25
     880:	6820      	ldr	r0, [r4, #0]
     882:	f7ff fe69 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT5, GPIO_INT_EDGE_TO_ACTIVE);
     886:	2103      	movs	r1, #3
     888:	6820      	ldr	r0, [r4, #0]
     88a:	f7ff fe65 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT6, GPIO_INT_EDGE_TO_ACTIVE);
     88e:	2104      	movs	r1, #4
     890:	6820      	ldr	r0, [r4, #0]
     892:	f7ff fe61 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT7, GPIO_INT_EDGE_TO_ACTIVE);
     896:	211c      	movs	r1, #28
     898:	6820      	ldr	r0, [r4, #0]
     89a:	f7ff fe5d 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT8, GPIO_INT_EDGE_TO_ACTIVE);
     89e:	211d      	movs	r1, #29
     8a0:	6820      	ldr	r0, [r4, #0]
     8a2:	f7ff fe59 	bl	558 <gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
     8a6:	4601      	mov	r1, r0
     8a8:	b108      	cbz	r0, 8ae <CONFIG_BUTTONS+0x9a>
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
     8aa:	4827      	ldr	r0, [pc, #156]	; (948 <CONFIG_BUTTONS+0x134>)
     8ac:	e7d7      	b.n	85e <CONFIG_BUTTONS+0x4a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     8ae:	4927      	ldr	r1, [pc, #156]	; (94c <CONFIG_BUTTONS+0x138>)
     8b0:	4b27      	ldr	r3, [pc, #156]	; (950 <CONFIG_BUTTONS+0x13c>)
     8b2:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but1_cb_data);
     8b4:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     8b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
     8ba:	608b      	str	r3, [r1, #8]
     8bc:	f006 fa2a 	bl	6d14 <gpio_add_callback>
	callback->handler = handler;
     8c0:	4924      	ldr	r1, [pc, #144]	; (954 <CONFIG_BUTTONS+0x140>)
     8c2:	4b25      	ldr	r3, [pc, #148]	; (958 <CONFIG_BUTTONS+0x144>)
     8c4:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but2_cb_data);
     8c6:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     8c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8cc:	608b      	str	r3, [r1, #8]
     8ce:	f006 fa21 	bl	6d14 <gpio_add_callback>
	callback->handler = handler;
     8d2:	4922      	ldr	r1, [pc, #136]	; (95c <CONFIG_BUTTONS+0x148>)
     8d4:	4b22      	ldr	r3, [pc, #136]	; (960 <CONFIG_BUTTONS+0x14c>)
     8d6:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but3_cb_data);
     8d8:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     8da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     8de:	608b      	str	r3, [r1, #8]
     8e0:	f006 fa18 	bl	6d14 <gpio_add_callback>
	callback->handler = handler;
     8e4:	491f      	ldr	r1, [pc, #124]	; (964 <CONFIG_BUTTONS+0x150>)
     8e6:	4b20      	ldr	r3, [pc, #128]	; (968 <CONFIG_BUTTONS+0x154>)
     8e8:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but4_cb_data);
     8ea:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     8ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     8f0:	608b      	str	r3, [r1, #8]
     8f2:	f006 fa0f 	bl	6d14 <gpio_add_callback>
	callback->handler = handler;
     8f6:	491d      	ldr	r1, [pc, #116]	; (96c <CONFIG_BUTTONS+0x158>)
     8f8:	4b1d      	ldr	r3, [pc, #116]	; (970 <CONFIG_BUTTONS+0x15c>)
     8fa:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but5_cb_data);
     8fc:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     8fe:	2308      	movs	r3, #8
     900:	608b      	str	r3, [r1, #8]
     902:	f006 fa07 	bl	6d14 <gpio_add_callback>
	callback->handler = handler;
     906:	491b      	ldr	r1, [pc, #108]	; (974 <CONFIG_BUTTONS+0x160>)
     908:	4b1b      	ldr	r3, [pc, #108]	; (978 <CONFIG_BUTTONS+0x164>)
     90a:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but6_cb_data);
     90c:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     90e:	2310      	movs	r3, #16
     910:	608b      	str	r3, [r1, #8]
     912:	f006 f9ff 	bl	6d14 <gpio_add_callback>
	callback->handler = handler;
     916:	4919      	ldr	r1, [pc, #100]	; (97c <CONFIG_BUTTONS+0x168>)
     918:	4b19      	ldr	r3, [pc, #100]	; (980 <CONFIG_BUTTONS+0x16c>)
     91a:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but7_cb_data);
     91c:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
     91e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     922:	608b      	str	r3, [r1, #8]
     924:	f006 f9f6 	bl	6d14 <gpio_add_callback>
	callback->handler = handler;
     928:	4916      	ldr	r1, [pc, #88]	; (984 <CONFIG_BUTTONS+0x170>)
     92a:	4b17      	ldr	r3, [pc, #92]	; (988 <CONFIG_BUTTONS+0x174>)
    gpio_add_callback(gpio0_dev, &but8_cb_data);
     92c:	6820      	ldr	r0, [r4, #0]
     92e:	604b      	str	r3, [r1, #4]
}
     930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	callback->pin_mask = pin_mask;
     934:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     938:	608b      	str	r3, [r1, #8]
    gpio_add_callback(gpio0_dev, &but8_cb_data);
     93a:	f006 b9eb 	b.w	6d14 <gpio_add_callback>
     93e:	bf00      	nop
     940:	20000354 	.word	0x20000354
     944:	00007c5c 	.word	0x00007c5c
     948:	00007c83 	.word	0x00007c83
     94c:	200002d0 	.word	0x200002d0
     950:	000003f5 	.word	0x000003f5
     954:	200002dc 	.word	0x200002dc
     958:	00000415 	.word	0x00000415
     95c:	200002e8 	.word	0x200002e8
     960:	00000435 	.word	0x00000435
     964:	200002f4 	.word	0x200002f4
     968:	00000455 	.word	0x00000455
     96c:	20000300 	.word	0x20000300
     970:	00000475 	.word	0x00000475
     974:	2000030c 	.word	0x2000030c
     978:	00000495 	.word	0x00000495
     97c:	20000318 	.word	0x20000318
     980:	000004b5 	.word	0x000004b5
     984:	20000324 	.word	0x20000324
     988:	000004d5 	.word	0x000004d5

0000098c <main>:
{
     98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     98e:	482c      	ldr	r0, [pc, #176]	; (a40 <main+0xb4>)
     990:	f003 fdbe 	bl	4510 <z_impl_device_get_binding>
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
     994:	4b2b      	ldr	r3, [pc, #172]	; (a44 <main+0xb8>)
     996:	6018      	str	r0, [r3, #0]
    if (gpio0_dev == NULL) 
     998:	b920      	cbnz	r0, 9a4 <main+0x18>
} 
     99a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        printk("Failed to bind to GPIO0\n\r");        
     99e:	482a      	ldr	r0, [pc, #168]	; (a48 <main+0xbc>)
     9a0:	f006 ba94 	b.w	6ecc <printk>
        printk("Bind to GPIO0 successfull \n\r");        
     9a4:	4829      	ldr	r0, [pc, #164]	; (a4c <main+0xc0>)
      if(dcToggleFlag1 == 1) 
     9a6:	4d2a      	ldr	r5, [pc, #168]	; (a50 <main+0xc4>)
      if(dcToggleFlag2 == 1) 
     9a8:	4e2a      	ldr	r6, [pc, #168]	; (a54 <main+0xc8>)
      if(dcToggleFlag3 == 1) 
     9aa:	4f2b      	ldr	r7, [pc, #172]	; (a58 <main+0xcc>)
        printk("Bind to GPIO0 successfull \n\r");        
     9ac:	f006 fa8e 	bl	6ecc <printk>
    CONFIG_BUTTONS();
     9b0:	f7ff ff30 	bl	814 <CONFIG_BUTTONS>
    showMenu(1);
     9b4:	2001      	movs	r0, #1
     9b6:	f7ff fe17 	bl	5e8 <showMenu>
      if(dcToggleFlag1 == 1) 
     9ba:	682b      	ldr	r3, [r5, #0]
     9bc:	2b01      	cmp	r3, #1
     9be:	d104      	bne.n	9ca <main+0x3e>
        addMoney(10);
     9c0:	200a      	movs	r0, #10
     9c2:	f7ff fe77 	bl	6b4 <addMoney>
        dcToggleFlag1 = 0;
     9c6:	2300      	movs	r3, #0
     9c8:	602b      	str	r3, [r5, #0]
      if(dcToggleFlag2 == 1) 
     9ca:	6833      	ldr	r3, [r6, #0]
     9cc:	2b01      	cmp	r3, #1
     9ce:	d104      	bne.n	9da <main+0x4e>
        addMoney(20);
     9d0:	2014      	movs	r0, #20
     9d2:	f7ff fe6f 	bl	6b4 <addMoney>
        dcToggleFlag2 = 0;
     9d6:	2300      	movs	r3, #0
     9d8:	6033      	str	r3, [r6, #0]
      if(dcToggleFlag3 == 1) 
     9da:	683b      	ldr	r3, [r7, #0]
     9dc:	2b01      	cmp	r3, #1
     9de:	d104      	bne.n	9ea <main+0x5e>
        addMoney(50);
     9e0:	2032      	movs	r0, #50	; 0x32
     9e2:	f7ff fe67 	bl	6b4 <addMoney>
        dcToggleFlag3 = 0;
     9e6:	2300      	movs	r3, #0
     9e8:	603b      	str	r3, [r7, #0]
      if(dcToggleFlag4 == 1) 
     9ea:	4c1c      	ldr	r4, [pc, #112]	; (a5c <main+0xd0>)
     9ec:	6823      	ldr	r3, [r4, #0]
     9ee:	2b01      	cmp	r3, #1
     9f0:	d104      	bne.n	9fc <main+0x70>
        addMoney(100);
     9f2:	2064      	movs	r0, #100	; 0x64
     9f4:	f7ff fe5e 	bl	6b4 <addMoney>
        dcToggleFlag4 = 0;
     9f8:	2300      	movs	r3, #0
     9fa:	6023      	str	r3, [r4, #0]
      if(dcToggleFlag6 == 1)
     9fc:	4c18      	ldr	r4, [pc, #96]	; (a60 <main+0xd4>)
     9fe:	6823      	ldr	r3, [r4, #0]
     a00:	2b01      	cmp	r3, #1
     a02:	d103      	bne.n	a0c <main+0x80>
        resetMoney();
     a04:	f7ff fe72 	bl	6ec <resetMoney>
        dcToggleFlag6 = 0;
     a08:	2300      	movs	r3, #0
     a0a:	6023      	str	r3, [r4, #0]
      if(dcToggleFlag5 == 1)
     a0c:	4c15      	ldr	r4, [pc, #84]	; (a64 <main+0xd8>)
     a0e:	6823      	ldr	r3, [r4, #0]
     a10:	2b01      	cmp	r3, #1
     a12:	d104      	bne.n	a1e <main+0x92>
        UpOrDown(2);
     a14:	2002      	movs	r0, #2
     a16:	f7ff fe35 	bl	684 <UpOrDown>
        dcToggleFlag5 = 0;
     a1a:	2300      	movs	r3, #0
     a1c:	6023      	str	r3, [r4, #0]
      if(dcToggleFlag7 == 1)
     a1e:	4c12      	ldr	r4, [pc, #72]	; (a68 <main+0xdc>)
     a20:	6820      	ldr	r0, [r4, #0]
     a22:	2801      	cmp	r0, #1
     a24:	d103      	bne.n	a2e <main+0xa2>
        UpOrDown(1);
     a26:	f7ff fe2d 	bl	684 <UpOrDown>
        dcToggleFlag7 = 0;
     a2a:	2300      	movs	r3, #0
     a2c:	6023      	str	r3, [r4, #0]
      if(dcToggleFlag8 == 1)
     a2e:	4c0f      	ldr	r4, [pc, #60]	; (a6c <main+0xe0>)
     a30:	6823      	ldr	r3, [r4, #0]
     a32:	2b01      	cmp	r3, #1
     a34:	d1c1      	bne.n	9ba <main+0x2e>
        Check();
     a36:	f7ff fe71 	bl	71c <Check>
        dcToggleFlag8 = 0;
     a3a:	2300      	movs	r3, #0
     a3c:	6023      	str	r3, [r4, #0]
     a3e:	e7bc      	b.n	9ba <main+0x2e>
     a40:	00007cba 	.word	0x00007cba
     a44:	20000354 	.word	0x20000354
     a48:	00007cc1 	.word	0x00007cc1
     a4c:	00007cdb 	.word	0x00007cdb
     a50:	20000334 	.word	0x20000334
     a54:	20000338 	.word	0x20000338
     a58:	2000033c 	.word	0x2000033c
     a5c:	20000340 	.word	0x20000340
     a60:	20000348 	.word	0x20000348
     a64:	20000344 	.word	0x20000344
     a68:	2000034c 	.word	0x2000034c
     a6c:	20000350 	.word	0x20000350

00000a70 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a74:	b091      	sub	sp, #68	; 0x44
     a76:	468b      	mov	fp, r1
     a78:	9002      	str	r0, [sp, #8]
     a7a:	4692      	mov	sl, r2
     a7c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     a7e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a80:	f89a 0000 	ldrb.w	r0, [sl]
     a84:	b908      	cbnz	r0, a8a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     a86:	4628      	mov	r0, r5
     a88:	e35e      	b.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
		if (*fp != '%') {
     a8a:	2825      	cmp	r0, #37	; 0x25
     a8c:	f10a 0701 	add.w	r7, sl, #1
     a90:	d007      	beq.n	aa2 <cbvprintf+0x32>
			OUTC('%');
     a92:	9b02      	ldr	r3, [sp, #8]
     a94:	4659      	mov	r1, fp
     a96:	4798      	blx	r3
     a98:	2800      	cmp	r0, #0
     a9a:	f2c0 8355 	blt.w	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
     a9e:	3501      	adds	r5, #1
			break;
     aa0:	e210      	b.n	ec4 <cbvprintf+0x454>
		} state = {
     aa2:	2218      	movs	r2, #24
     aa4:	2100      	movs	r1, #0
     aa6:	a80a      	add	r0, sp, #40	; 0x28
     aa8:	f006 fa71 	bl	6f8e <memset>
	if (*sp == '%') {
     aac:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ab0:	2b25      	cmp	r3, #37	; 0x25
     ab2:	d078      	beq.n	ba6 <cbvprintf+0x136>
     ab4:	2200      	movs	r2, #0
     ab6:	4694      	mov	ip, r2
     ab8:	4616      	mov	r6, r2
     aba:	4696      	mov	lr, r2
     abc:	4610      	mov	r0, r2
     abe:	4639      	mov	r1, r7
		switch (*sp) {
     ac0:	f817 3b01 	ldrb.w	r3, [r7], #1
     ac4:	2b2b      	cmp	r3, #43	; 0x2b
     ac6:	f000 809d 	beq.w	c04 <cbvprintf+0x194>
     aca:	f200 8094 	bhi.w	bf6 <cbvprintf+0x186>
     ace:	2b20      	cmp	r3, #32
     ad0:	f000 809b 	beq.w	c0a <cbvprintf+0x19a>
     ad4:	2b23      	cmp	r3, #35	; 0x23
     ad6:	f000 809a 	beq.w	c0e <cbvprintf+0x19e>
     ada:	b128      	cbz	r0, ae8 <cbvprintf+0x78>
     adc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     ae0:	f040 0004 	orr.w	r0, r0, #4
     ae4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ae8:	f1be 0f00 	cmp.w	lr, #0
     aec:	d005      	beq.n	afa <cbvprintf+0x8a>
     aee:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     af2:	f040 0008 	orr.w	r0, r0, #8
     af6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     afa:	b12e      	cbz	r6, b08 <cbvprintf+0x98>
     afc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b00:	f040 0010 	orr.w	r0, r0, #16
     b04:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b08:	f1bc 0f00 	cmp.w	ip, #0
     b0c:	d005      	beq.n	b1a <cbvprintf+0xaa>
     b0e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b12:	f040 0020 	orr.w	r0, r0, #32
     b16:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b1a:	b12a      	cbz	r2, b28 <cbvprintf+0xb8>
     b1c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b24:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b28:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b2c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b30:	2844      	cmp	r0, #68	; 0x44
     b32:	d103      	bne.n	b3c <cbvprintf+0xcc>
		conv->flag_zero = false;
     b34:	f36f 1286 	bfc	r2, #6, #1
     b38:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b40:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b46:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b4a:	d17b      	bne.n	c44 <cbvprintf+0x1d4>
		conv->width_star = true;
     b4c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b50:	f042 0201 	orr.w	r2, r2, #1
     b54:	1c4b      	adds	r3, r1, #1
     b56:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b5a:	781a      	ldrb	r2, [r3, #0]
     b5c:	2a2e      	cmp	r2, #46	; 0x2e
     b5e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b62:	bf0c      	ite	eq
     b64:	2101      	moveq	r1, #1
     b66:	2100      	movne	r1, #0
     b68:	f361 0241 	bfi	r2, r1, #1, #1
     b6c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     b70:	d174      	bne.n	c5c <cbvprintf+0x1ec>
	if (*sp == '*') {
     b72:	785a      	ldrb	r2, [r3, #1]
     b74:	2a2a      	cmp	r2, #42	; 0x2a
     b76:	d06a      	beq.n	c4e <cbvprintf+0x1de>
     b78:	3301      	adds	r3, #1
	size_t val = 0;
     b7a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     b7c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     b7e:	4618      	mov	r0, r3
     b80:	f810 2b01 	ldrb.w	r2, [r0], #1
     b84:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     b88:	2f09      	cmp	r7, #9
     b8a:	f240 808e 	bls.w	caa <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     b8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     b92:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     b94:	f3c2 0040 	ubfx	r0, r2, #1, #1
     b98:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     b9c:	f361 0241 	bfi	r2, r1, #1, #1
     ba0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     ba4:	e05a      	b.n	c5c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     ba6:	f10a 0702 	add.w	r7, sl, #2
     baa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     bae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bb2:	07d9      	lsls	r1, r3, #31
     bb4:	f140 8149 	bpl.w	e4a <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bb8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bbc:	f1b9 0f00 	cmp.w	r9, #0
     bc0:	da07      	bge.n	bd2 <cbvprintf+0x162>
				conv->flag_dash = true;
     bc2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bc6:	f042 0204 	orr.w	r2, r2, #4
     bca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bce:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     bd2:	075a      	lsls	r2, r3, #29
     bd4:	f140 8142 	bpl.w	e5c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     bd8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     bdc:	f1b8 0f00 	cmp.w	r8, #0
     be0:	f280 8141 	bge.w	e66 <cbvprintf+0x3f6>
				conv->prec_present = false;
     be4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     be8:	f36f 0341 	bfc	r3, #1, #1
     bec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     bf0:	f04f 38ff 	mov.w	r8, #4294967295
     bf4:	e137      	b.n	e66 <cbvprintf+0x3f6>
		switch (*sp) {
     bf6:	2b2d      	cmp	r3, #45	; 0x2d
     bf8:	d00c      	beq.n	c14 <cbvprintf+0x1a4>
     bfa:	2b30      	cmp	r3, #48	; 0x30
     bfc:	f47f af6d 	bne.w	ada <cbvprintf+0x6a>
			conv->flag_zero = true;
     c00:	2201      	movs	r2, #1
	} while (loop);
     c02:	e75c      	b.n	abe <cbvprintf+0x4e>
			conv->flag_plus = true;
     c04:	f04f 0e01 	mov.w	lr, #1
     c08:	e759      	b.n	abe <cbvprintf+0x4e>
			conv->flag_space = true;
     c0a:	2601      	movs	r6, #1
     c0c:	e757      	b.n	abe <cbvprintf+0x4e>
			conv->flag_hash = true;
     c0e:	f04f 0c01 	mov.w	ip, #1
     c12:	e754      	b.n	abe <cbvprintf+0x4e>
		switch (*sp) {
     c14:	2001      	movs	r0, #1
     c16:	e752      	b.n	abe <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c18:	fb0c 0202 	mla	r2, ip, r2, r0
     c1c:	3a30      	subs	r2, #48	; 0x30
     c1e:	4633      	mov	r3, r6
     c20:	461e      	mov	r6, r3
     c22:	f816 0b01 	ldrb.w	r0, [r6], #1
     c26:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c2a:	2f09      	cmp	r7, #9
     c2c:	d9f4      	bls.n	c18 <cbvprintf+0x1a8>
	if (sp != wp) {
     c2e:	4299      	cmp	r1, r3
     c30:	d093      	beq.n	b5a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c32:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c36:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c38:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c3a:	f362 0141 	bfi	r1, r2, #1, #1
     c3e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c42:	e78a      	b.n	b5a <cbvprintf+0xea>
     c44:	460b      	mov	r3, r1
	size_t val = 0;
     c46:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c48:	f04f 0c0a 	mov.w	ip, #10
     c4c:	e7e8      	b.n	c20 <cbvprintf+0x1b0>
		conv->prec_star = true;
     c4e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c52:	f042 0204 	orr.w	r2, r2, #4
     c56:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c5a:	3302      	adds	r3, #2
	switch (*sp) {
     c5c:	461f      	mov	r7, r3
     c5e:	f817 2b01 	ldrb.w	r2, [r7], #1
     c62:	2a6c      	cmp	r2, #108	; 0x6c
     c64:	d041      	beq.n	cea <cbvprintf+0x27a>
     c66:	d825      	bhi.n	cb4 <cbvprintf+0x244>
     c68:	2a68      	cmp	r2, #104	; 0x68
     c6a:	d02b      	beq.n	cc4 <cbvprintf+0x254>
     c6c:	2a6a      	cmp	r2, #106	; 0x6a
     c6e:	d046      	beq.n	cfe <cbvprintf+0x28e>
     c70:	2a4c      	cmp	r2, #76	; 0x4c
     c72:	d04c      	beq.n	d0e <cbvprintf+0x29e>
     c74:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     c76:	f817 2b01 	ldrb.w	r2, [r7], #1
     c7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c7e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     c82:	2a78      	cmp	r2, #120	; 0x78
     c84:	f200 80d9 	bhi.w	e3a <cbvprintf+0x3ca>
     c88:	2a57      	cmp	r2, #87	; 0x57
     c8a:	d84d      	bhi.n	d28 <cbvprintf+0x2b8>
     c8c:	2a41      	cmp	r2, #65	; 0x41
     c8e:	d003      	beq.n	c98 <cbvprintf+0x228>
     c90:	3a45      	subs	r2, #69	; 0x45
     c92:	2a02      	cmp	r2, #2
     c94:	f200 80d1 	bhi.w	e3a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     c98:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     c9c:	2204      	movs	r2, #4
     c9e:	f362 0302 	bfi	r3, r2, #0, #3
     ca2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     ca6:	2301      	movs	r3, #1
			break;
     ca8:	e09e      	b.n	de8 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     caa:	fb06 2101 	mla	r1, r6, r1, r2
     cae:	3930      	subs	r1, #48	; 0x30
     cb0:	4603      	mov	r3, r0
     cb2:	e764      	b.n	b7e <cbvprintf+0x10e>
	switch (*sp) {
     cb4:	2a74      	cmp	r2, #116	; 0x74
     cb6:	d026      	beq.n	d06 <cbvprintf+0x296>
     cb8:	2a7a      	cmp	r2, #122	; 0x7a
     cba:	d1db      	bne.n	c74 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     cbc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cc0:	2206      	movs	r2, #6
     cc2:	e00d      	b.n	ce0 <cbvprintf+0x270>
		if (*++sp == 'h') {
     cc4:	785a      	ldrb	r2, [r3, #1]
     cc6:	2a68      	cmp	r2, #104	; 0x68
     cc8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ccc:	d106      	bne.n	cdc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     cce:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     cd0:	f361 02c6 	bfi	r2, r1, #3, #4
     cd4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     cd8:	1c9f      	adds	r7, r3, #2
     cda:	e7cc      	b.n	c76 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     cdc:	4613      	mov	r3, r2
     cde:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     ce0:	f362 03c6 	bfi	r3, r2, #3, #4
     ce4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     ce8:	e7c5      	b.n	c76 <cbvprintf+0x206>
		if (*++sp == 'l') {
     cea:	785a      	ldrb	r2, [r3, #1]
     cec:	2a6c      	cmp	r2, #108	; 0x6c
     cee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cf2:	d101      	bne.n	cf8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     cf4:	2104      	movs	r1, #4
     cf6:	e7eb      	b.n	cd0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     cf8:	4613      	mov	r3, r2
     cfa:	2203      	movs	r2, #3
     cfc:	e7f0      	b.n	ce0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     cfe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d02:	2205      	movs	r2, #5
     d04:	e7ec      	b.n	ce0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d0a:	2207      	movs	r2, #7
     d0c:	e7e8      	b.n	ce0 <cbvprintf+0x270>
		conv->unsupported = true;
     d0e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d12:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d16:	f023 0302 	bic.w	r3, r3, #2
     d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d1e:	f043 0302 	orr.w	r3, r3, #2
     d22:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d26:	e7a6      	b.n	c76 <cbvprintf+0x206>
     d28:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d2c:	2920      	cmp	r1, #32
     d2e:	f200 8084 	bhi.w	e3a <cbvprintf+0x3ca>
     d32:	a001      	add	r0, pc, #4	; (adr r0, d38 <cbvprintf+0x2c8>)
     d34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d38:	00000dfd 	.word	0x00000dfd
     d3c:	00000e3b 	.word	0x00000e3b
     d40:	00000e3b 	.word	0x00000e3b
     d44:	00000e3b 	.word	0x00000e3b
     d48:	00000e3b 	.word	0x00000e3b
     d4c:	00000e3b 	.word	0x00000e3b
     d50:	00000e3b 	.word	0x00000e3b
     d54:	00000e3b 	.word	0x00000e3b
     d58:	00000e3b 	.word	0x00000e3b
     d5c:	00000c99 	.word	0x00000c99
     d60:	00000e3b 	.word	0x00000e3b
     d64:	00000dfd 	.word	0x00000dfd
     d68:	00000dbd 	.word	0x00000dbd
     d6c:	00000c99 	.word	0x00000c99
     d70:	00000c99 	.word	0x00000c99
     d74:	00000c99 	.word	0x00000c99
     d78:	00000e3b 	.word	0x00000e3b
     d7c:	00000dbd 	.word	0x00000dbd
     d80:	00000e3b 	.word	0x00000e3b
     d84:	00000e3b 	.word	0x00000e3b
     d88:	00000e3b 	.word	0x00000e3b
     d8c:	00000e3b 	.word	0x00000e3b
     d90:	00000e05 	.word	0x00000e05
     d94:	00000dfd 	.word	0x00000dfd
     d98:	00000e21 	.word	0x00000e21
     d9c:	00000e3b 	.word	0x00000e3b
     da0:	00000e3b 	.word	0x00000e3b
     da4:	00000e21 	.word	0x00000e21
     da8:	00000e3b 	.word	0x00000e3b
     dac:	00000dfd 	.word	0x00000dfd
     db0:	00000e3b 	.word	0x00000e3b
     db4:	00000e3b 	.word	0x00000e3b
     db8:	00000dfd 	.word	0x00000dfd
		conv->specifier_cat = SPECIFIER_SINT;
     dbc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     dc0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     dc2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     dc6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     dca:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     dcc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     dd0:	bf02      	ittt	eq
     dd2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     dd6:	f041 0101 	orreq.w	r1, r1, #1
     dda:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     dde:	2a63      	cmp	r2, #99	; 0x63
     de0:	d131      	bne.n	e46 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     de2:	3b00      	subs	r3, #0
     de4:	bf18      	it	ne
     de6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     de8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     dec:	f3c2 0140 	ubfx	r1, r2, #1, #1
     df0:	430b      	orrs	r3, r1
     df2:	f363 0241 	bfi	r2, r3, #1, #1
     df6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     dfa:	e6d8      	b.n	bae <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     dfc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e00:	2002      	movs	r0, #2
     e02:	e7de      	b.n	dc2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e04:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e08:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e0c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e10:	2103      	movs	r1, #3
     e12:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e16:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e18:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e1c:	4143      	adcs	r3, r0
     e1e:	e7e3      	b.n	de8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e20:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     e24:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     e26:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e2a:	f361 0202 	bfi	r2, r1, #0, #3
     e2e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e32:	bf14      	ite	ne
     e34:	2301      	movne	r3, #1
     e36:	2300      	moveq	r3, #0
     e38:	e7d6      	b.n	de8 <cbvprintf+0x378>
		conv->invalid = true;
     e3a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e3e:	f043 0301 	orr.w	r3, r3, #1
     e42:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e46:	2300      	movs	r3, #0
     e48:	e7ce      	b.n	de8 <cbvprintf+0x378>
		} else if (conv->width_present) {
     e4a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e4e:	2a00      	cmp	r2, #0
			width = conv->width_value;
     e50:	bfb4      	ite	lt
     e52:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     e56:	f04f 39ff 	movge.w	r9, #4294967295
     e5a:	e6ba      	b.n	bd2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e5c:	079b      	lsls	r3, r3, #30
     e5e:	f57f aec7 	bpl.w	bf0 <cbvprintf+0x180>
			precision = conv->prec_value;
     e62:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     e66:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     e6a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     e6c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     e70:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     e74:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     e78:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     e7a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     e7e:	d136      	bne.n	eee <cbvprintf+0x47e>
			switch (length_mod) {
     e80:	1ed3      	subs	r3, r2, #3
     e82:	2b04      	cmp	r3, #4
     e84:	d820      	bhi.n	ec8 <cbvprintf+0x458>
     e86:	e8df f003 	tbb	[pc, r3]
     e8a:	0703      	.short	0x0703
     e8c:	1f07      	.short	0x1f07
     e8e:	1f          	.byte	0x1f
     e8f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     e90:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     e94:	17c1      	asrs	r1, r0, #31
     e96:	e004      	b.n	ea2 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     e98:	3407      	adds	r4, #7
     e9a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     e9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     ea2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ea6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     eaa:	f013 0603 	ands.w	r6, r3, #3
     eae:	d054      	beq.n	f5a <cbvprintf+0x4ea>
			OUTS(sp, fp);
     eb0:	9802      	ldr	r0, [sp, #8]
     eb2:	463b      	mov	r3, r7
     eb4:	4652      	mov	r2, sl
     eb6:	4659      	mov	r1, fp
     eb8:	f005 ff86 	bl	6dc8 <outs>
     ebc:	2800      	cmp	r0, #0
     ebe:	f2c0 8143 	blt.w	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
     ec2:	4405      	add	r5, r0
			continue;
     ec4:	46ba      	mov	sl, r7
     ec6:	e5db      	b.n	a80 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ec8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     ecc:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ece:	ea4f 71e0 	mov.w	r1, r0, asr #31
     ed2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ed6:	d105      	bne.n	ee4 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     ed8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     edc:	930a      	str	r3, [sp, #40]	; 0x28
     ede:	2300      	movs	r3, #0
     ee0:	930b      	str	r3, [sp, #44]	; 0x2c
     ee2:	e7e0      	b.n	ea6 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     ee4:	2a02      	cmp	r2, #2
     ee6:	d1de      	bne.n	ea6 <cbvprintf+0x436>
				value->sint = (short)value->sint;
     ee8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     eec:	e7d2      	b.n	e94 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     eee:	2b02      	cmp	r3, #2
     ef0:	d123      	bne.n	f3a <cbvprintf+0x4ca>
			switch (length_mod) {
     ef2:	1ed3      	subs	r3, r2, #3
     ef4:	2b04      	cmp	r3, #4
     ef6:	d813      	bhi.n	f20 <cbvprintf+0x4b0>
     ef8:	e8df f003 	tbb	[pc, r3]
     efc:	120a0a03 	.word	0x120a0a03
     f00:	12          	.byte	0x12
     f01:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     f02:	6820      	ldr	r0, [r4, #0]
     f04:	900a      	str	r0, [sp, #40]	; 0x28
     f06:	2100      	movs	r1, #0
     f08:	1d23      	adds	r3, r4, #4
     f0a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f0c:	461c      	mov	r4, r3
     f0e:	e7ca      	b.n	ea6 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     f10:	3407      	adds	r4, #7
     f12:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     f16:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     f1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     f1e:	e7f5      	b.n	f0c <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     f20:	f854 3b04 	ldr.w	r3, [r4], #4
     f24:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f26:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     f28:	f04f 0300 	mov.w	r3, #0
     f2c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f2e:	d0d3      	beq.n	ed8 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     f30:	2a02      	cmp	r2, #2
     f32:	d1b8      	bne.n	ea6 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     f34:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f38:	e7d0      	b.n	edc <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     f3a:	2b04      	cmp	r3, #4
     f3c:	d107      	bne.n	f4e <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     f3e:	3407      	adds	r4, #7
     f40:	f024 0407 	bic.w	r4, r4, #7
     f44:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     f48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     f4c:	e7ab      	b.n	ea6 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f4e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f50:	bf04      	itt	eq
     f52:	f854 3b04 	ldreq.w	r3, [r4], #4
     f56:	930a      	streq	r3, [sp, #40]	; 0x28
     f58:	e7a5      	b.n	ea6 <cbvprintf+0x436>
		switch (conv->specifier) {
     f5a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f5e:	2878      	cmp	r0, #120	; 0x78
     f60:	d8b0      	bhi.n	ec4 <cbvprintf+0x454>
     f62:	2862      	cmp	r0, #98	; 0x62
     f64:	d822      	bhi.n	fac <cbvprintf+0x53c>
     f66:	2825      	cmp	r0, #37	; 0x25
     f68:	f43f ad93 	beq.w	a92 <cbvprintf+0x22>
     f6c:	2858      	cmp	r0, #88	; 0x58
     f6e:	d1a9      	bne.n	ec4 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     f70:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f74:	9300      	str	r3, [sp, #0]
     f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     f7a:	ab04      	add	r3, sp, #16
     f7c:	aa0c      	add	r2, sp, #48	; 0x30
     f7e:	f005 fed8 	bl	6d32 <encode_uint>
     f82:	4682      	mov	sl, r0
			if (precision >= 0) {
     f84:	f1b8 0f00 	cmp.w	r8, #0
     f88:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     f8c:	db0c      	blt.n	fa8 <cbvprintf+0x538>
				conv->flag_zero = false;
     f8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     f92:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     f96:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     f9a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     f9c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     fa0:	d902      	bls.n	fa8 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
     fa2:	eba8 0303 	sub.w	r3, r8, r3
     fa6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fa8:	4680      	mov	r8, r0
     faa:	e03d      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     fac:	3863      	subs	r0, #99	; 0x63
     fae:	2815      	cmp	r0, #21
     fb0:	d888      	bhi.n	ec4 <cbvprintf+0x454>
     fb2:	a101      	add	r1, pc, #4	; (adr r1, fb8 <cbvprintf+0x548>)
     fb4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     fb8:	00001039 	.word	0x00001039
     fbc:	0000109d 	.word	0x0000109d
     fc0:	00000ec5 	.word	0x00000ec5
     fc4:	00000ec5 	.word	0x00000ec5
     fc8:	00000ec5 	.word	0x00000ec5
     fcc:	00000ec5 	.word	0x00000ec5
     fd0:	0000109d 	.word	0x0000109d
     fd4:	00000ec5 	.word	0x00000ec5
     fd8:	00000ec5 	.word	0x00000ec5
     fdc:	00000ec5 	.word	0x00000ec5
     fe0:	00000ec5 	.word	0x00000ec5
     fe4:	000010fb 	.word	0x000010fb
     fe8:	000010c9 	.word	0x000010c9
     fec:	000010cd 	.word	0x000010cd
     ff0:	00000ec5 	.word	0x00000ec5
     ff4:	00000ec5 	.word	0x00000ec5
     ff8:	00001011 	.word	0x00001011
     ffc:	00000ec5 	.word	0x00000ec5
    1000:	000010c9 	.word	0x000010c9
    1004:	00000ec5 	.word	0x00000ec5
    1008:	00000ec5 	.word	0x00000ec5
    100c:	000010c9 	.word	0x000010c9
			if (precision >= 0) {
    1010:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1014:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1018:	db0a      	blt.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
				len = strnlen(bps, precision);
    101a:	4641      	mov	r1, r8
    101c:	4650      	mov	r0, sl
    101e:	f005 ff96 	bl	6f4e <strnlen>
			bpe = bps + len;
    1022:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1026:	2600      	movs	r6, #0
		if (bps == NULL) {
    1028:	f1ba 0f00 	cmp.w	sl, #0
    102c:	d10c      	bne.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    102e:	e749      	b.n	ec4 <cbvprintf+0x454>
				len = strlen(bps);
    1030:	4650      	mov	r0, sl
    1032:	f005 ff85 	bl	6f40 <strlen>
    1036:	e7f4      	b.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    103a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    103e:	2600      	movs	r6, #0
			bpe = buf + 1;
    1040:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1044:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1048:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    104c:	b106      	cbz	r6, 1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
			nj_len += 1U;
    104e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1050:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1054:	06d0      	lsls	r0, r2, #27
    1056:	d56b      	bpl.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
			nj_len += 2U;
    1058:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    105a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    105c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    105e:	bf48      	it	mi
    1060:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1062:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1064:	bf48      	it	mi
    1066:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1068:	f1b9 0f00 	cmp.w	r9, #0
    106c:	dd79      	ble.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
			if (!conv->flag_dash) {
    106e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1072:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1076:	f3c2 0380 	ubfx	r3, r2, #2, #1
    107a:	9303      	str	r3, [sp, #12]
    107c:	0753      	lsls	r3, r2, #29
    107e:	d470      	bmi.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
				if (conv->flag_zero) {
    1080:	0650      	lsls	r0, r2, #25
    1082:	d564      	bpl.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
					if (sign != 0) {
    1084:	b146      	cbz	r6, 1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
						OUTC(sign);
    1086:	9b02      	ldr	r3, [sp, #8]
    1088:	4659      	mov	r1, fp
    108a:	4630      	mov	r0, r6
    108c:	4798      	blx	r3
    108e:	2800      	cmp	r0, #0
    1090:	db5a      	blt.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
						sign = 0;
    1092:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1094:	3501      	adds	r5, #1
						sign = 0;
    1096:	461e      	mov	r6, r3
					pad = '0';
    1098:	2330      	movs	r3, #48	; 0x30
    109a:	e059      	b.n	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
			if (conv->flag_plus) {
    109c:	071e      	lsls	r6, r3, #28
    109e:	d411      	bmi.n	10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
				sign = ' ';
    10a0:	f013 0610 	ands.w	r6, r3, #16
    10a4:	bf18      	it	ne
    10a6:	2620      	movne	r6, #32
			sint = value->sint;
    10a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10ac:	2a00      	cmp	r2, #0
    10ae:	f173 0100 	sbcs.w	r1, r3, #0
    10b2:	f6bf af5d 	bge.w	f70 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    10b6:	4252      	negs	r2, r2
    10b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    10bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    10c0:	262d      	movs	r6, #45	; 0x2d
    10c2:	e755      	b.n	f70 <cbvprintf+0x500>
				sign = '+';
    10c4:	262b      	movs	r6, #43	; 0x2b
    10c6:	e7ef      	b.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
		switch (conv->specifier) {
    10c8:	2600      	movs	r6, #0
    10ca:	e751      	b.n	f70 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    10cc:	980a      	ldr	r0, [sp, #40]	; 0x28
    10ce:	b348      	cbz	r0, 1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10d0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    10d4:	9300      	str	r3, [sp, #0]
    10d6:	aa0c      	add	r2, sp, #48	; 0x30
    10d8:	ab04      	add	r3, sp, #16
    10da:	2100      	movs	r1, #0
    10dc:	f005 fe29 	bl	6d32 <encode_uint>
				conv->altform_0c = true;
    10e0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    10e4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    10e8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    10ec:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10f0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    10f2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    10f6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    10f8:	e744      	b.n	f84 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    10fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    10fc:	2a07      	cmp	r2, #7
    10fe:	f63f aee1 	bhi.w	ec4 <cbvprintf+0x454>
    1102:	e8df f002 	tbb	[pc, r2]
    1106:	040d      	.short	0x040d
    1108:	08080d06 	.word	0x08080d06
    110c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    110e:	701d      	strb	r5, [r3, #0]
		break;
    1110:	e6d8      	b.n	ec4 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    1112:	801d      	strh	r5, [r3, #0]
		break;
    1114:	e6d6      	b.n	ec4 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    1116:	4628      	mov	r0, r5
    1118:	17e9      	asrs	r1, r5, #31
    111a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    111e:	e6d1      	b.n	ec4 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1120:	601d      	str	r5, [r3, #0]
		break;
    1122:	e6cf      	b.n	ec4 <cbvprintf+0x454>
			bpe = bps + 5;
    1124:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
    1128:	4606      	mov	r6, r0
			bps = "(nil)";
    112a:	f1a8 0a05 	sub.w	sl, r8, #5
    112e:	e78b      	b.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
		} else if (conv->altform_0) {
    1130:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1132:	bf48      	it	mi
    1134:	3301      	addmi	r3, #1
    1136:	e790      	b.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
					OUTC(pad);
    1138:	4618      	mov	r0, r3
    113a:	9303      	str	r3, [sp, #12]
    113c:	4659      	mov	r1, fp
    113e:	9b02      	ldr	r3, [sp, #8]
    1140:	4798      	blx	r3
    1142:	2800      	cmp	r0, #0
    1144:	9b03      	ldr	r3, [sp, #12]
    1146:	da04      	bge.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
#undef OUTS
#undef OUTC
}
    1148:	b011      	add	sp, #68	; 0x44
    114a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    114e:	2320      	movs	r3, #32
    1150:	444d      	add	r5, r9
    1152:	464a      	mov	r2, r9
				while (width-- > 0) {
    1154:	2a00      	cmp	r2, #0
    1156:	eba5 0109 	sub.w	r1, r5, r9
    115a:	f109 39ff 	add.w	r9, r9, #4294967295
    115e:	dceb      	bgt.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    1160:	460d      	mov	r5, r1
		if (sign != 0) {
    1162:	b136      	cbz	r6, 1172 <CONFIG_FPROTECT_BLOCK_SIZE+0x172>
			OUTC(sign);
    1164:	9b02      	ldr	r3, [sp, #8]
    1166:	4659      	mov	r1, fp
    1168:	4630      	mov	r0, r6
    116a:	4798      	blx	r3
    116c:	2800      	cmp	r0, #0
    116e:	dbeb      	blt.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    1170:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1172:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1176:	06d9      	lsls	r1, r3, #27
    1178:	d401      	bmi.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
    117a:	071a      	lsls	r2, r3, #28
    117c:	d506      	bpl.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
				OUTC('0');
    117e:	9b02      	ldr	r3, [sp, #8]
    1180:	4659      	mov	r1, fp
    1182:	2030      	movs	r0, #48	; 0x30
    1184:	4798      	blx	r3
    1186:	2800      	cmp	r0, #0
    1188:	dbde      	blt.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    118a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    118c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1190:	06db      	lsls	r3, r3, #27
    1192:	d507      	bpl.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
				OUTC(conv->specifier);
    1194:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1198:	9b02      	ldr	r3, [sp, #8]
    119a:	4659      	mov	r1, fp
    119c:	4798      	blx	r3
    119e:	2800      	cmp	r0, #0
    11a0:	dbd2      	blt.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    11a2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    11a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    11a6:	442e      	add	r6, r5
    11a8:	1b73      	subs	r3, r6, r5
    11aa:	2b00      	cmp	r3, #0
    11ac:	dc16      	bgt.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
			OUTS(bps, bpe);
    11ae:	9802      	ldr	r0, [sp, #8]
    11b0:	4643      	mov	r3, r8
    11b2:	4652      	mov	r2, sl
    11b4:	4659      	mov	r1, fp
    11b6:	f005 fe07 	bl	6dc8 <outs>
    11ba:	2800      	cmp	r0, #0
    11bc:	dbc4      	blt.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    11be:	4405      	add	r5, r0
		while (width > 0) {
    11c0:	44a9      	add	r9, r5
    11c2:	eba9 0305 	sub.w	r3, r9, r5
    11c6:	2b00      	cmp	r3, #0
    11c8:	f77f ae7c 	ble.w	ec4 <cbvprintf+0x454>
			OUTC(' ');
    11cc:	9b02      	ldr	r3, [sp, #8]
    11ce:	4659      	mov	r1, fp
    11d0:	2020      	movs	r0, #32
    11d2:	4798      	blx	r3
    11d4:	2800      	cmp	r0, #0
    11d6:	dbb7      	blt.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    11d8:	3501      	adds	r5, #1
			--width;
    11da:	e7f2      	b.n	11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
				OUTC('0');
    11dc:	9b02      	ldr	r3, [sp, #8]
    11de:	4659      	mov	r1, fp
    11e0:	2030      	movs	r0, #48	; 0x30
    11e2:	4798      	blx	r3
    11e4:	2800      	cmp	r0, #0
    11e6:	dbaf      	blt.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    11e8:	3501      	adds	r5, #1
    11ea:	e7dd      	b.n	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
    11ec:	00007cfd 	.word	0x00007cfd

000011f0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    11f0:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    11f2:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    11f4:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    11f6:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    11fa:	2c03      	cmp	r4, #3
{
    11fc:	4605      	mov	r5, r0
	switch (method) {
    11fe:	d002      	beq.n	1206 <sys_notify_finalize+0x16>
    1200:	b12c      	cbz	r4, 120e <sys_notify_finalize+0x1e>
    1202:	2000      	movs	r0, #0
    1204:	e000      	b.n	1208 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1206:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1208:	2300      	movs	r3, #0
    120a:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    120c:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    120e:	4a05      	ldr	r2, [pc, #20]	; (1224 <sys_notify_finalize+0x34>)
    1210:	4905      	ldr	r1, [pc, #20]	; (1228 <sys_notify_finalize+0x38>)
    1212:	4806      	ldr	r0, [pc, #24]	; (122c <sys_notify_finalize+0x3c>)
    1214:	2345      	movs	r3, #69	; 0x45
    1216:	f005 fe59 	bl	6ecc <printk>
    121a:	4802      	ldr	r0, [pc, #8]	; (1224 <sys_notify_finalize+0x34>)
    121c:	2145      	movs	r1, #69	; 0x45
    121e:	f005 fd81 	bl	6d24 <assert_post_action>
    1222:	e7ee      	b.n	1202 <sys_notify_finalize+0x12>
    1224:	00007cfe 	.word	0x00007cfe
    1228:	00007dff 	.word	0x00007dff
    122c:	0000793c 	.word	0x0000793c

00001230 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1230:	4801      	ldr	r0, [pc, #4]	; (1238 <nrf_cc3xx_platform_abort_init+0x8>)
    1232:	f005 bbdd 	b.w	69f0 <nrf_cc3xx_platform_set_abort>
    1236:	bf00      	nop
    1238:	00007668 	.word	0x00007668

0000123c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    123c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    123e:	b1d0      	cbz	r0, 1276 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1240:	6843      	ldr	r3, [r0, #4]
    1242:	2b04      	cmp	r3, #4
    1244:	d111      	bne.n	126a <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1246:	2200      	movs	r2, #0
    1248:	6803      	ldr	r3, [r0, #0]
    124a:	f3bf 8f5b 	dmb	ish
    124e:	e853 1f00 	ldrex	r1, [r3]
    1252:	2901      	cmp	r1, #1
    1254:	d103      	bne.n	125e <mutex_unlock_platform+0x22>
    1256:	e843 2000 	strex	r0, r2, [r3]
    125a:	2800      	cmp	r0, #0
    125c:	d1f7      	bne.n	124e <mutex_unlock_platform+0x12>
    125e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1262:	4807      	ldr	r0, [pc, #28]	; (1280 <mutex_unlock_platform+0x44>)
    1264:	bf08      	it	eq
    1266:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1268:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    126a:	b13b      	cbz	r3, 127c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    126c:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    126e:	f003 fca7 	bl	4bc0 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1272:	2000      	movs	r0, #0
    1274:	e7f8      	b.n	1268 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1276:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    127a:	e7f5      	b.n	1268 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    127c:	4801      	ldr	r0, [pc, #4]	; (1284 <mutex_unlock_platform+0x48>)
    127e:	e7f3      	b.n	1268 <mutex_unlock_platform+0x2c>
    1280:	ffff8fe9 	.word	0xffff8fe9
    1284:	ffff8fea 	.word	0xffff8fea

00001288 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1288:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    128a:	4604      	mov	r4, r0
    128c:	b918      	cbnz	r0, 1296 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    128e:	4b0d      	ldr	r3, [pc, #52]	; (12c4 <mutex_free_platform+0x3c>)
    1290:	480d      	ldr	r0, [pc, #52]	; (12c8 <mutex_free_platform+0x40>)
    1292:	685b      	ldr	r3, [r3, #4]
    1294:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1296:	6861      	ldr	r1, [r4, #4]
    1298:	2908      	cmp	r1, #8
    129a:	d00d      	beq.n	12b8 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    129c:	f031 0304 	bics.w	r3, r1, #4
    12a0:	d00a      	beq.n	12b8 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    12a2:	f011 0102 	ands.w	r1, r1, #2
    12a6:	d008      	beq.n	12ba <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    12a8:	4808      	ldr	r0, [pc, #32]	; (12cc <mutex_free_platform+0x44>)
    12aa:	4621      	mov	r1, r4
    12ac:	f003 fb24 	bl	48f8 <k_mem_slab_free>
        mutex->mutex = NULL;
    12b0:	2300      	movs	r3, #0
    12b2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    12b4:	2300      	movs	r3, #0
    12b6:	6063      	str	r3, [r4, #4]
}
    12b8:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12ba:	6820      	ldr	r0, [r4, #0]
    12bc:	2214      	movs	r2, #20
    12be:	f005 fe66 	bl	6f8e <memset>
    12c2:	e7f7      	b.n	12b4 <mutex_free_platform+0x2c>
    12c4:	200000e0 	.word	0x200000e0
    12c8:	00007d21 	.word	0x00007d21
    12cc:	20000358 	.word	0x20000358

000012d0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12d0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    12d2:	4604      	mov	r4, r0
    12d4:	b918      	cbnz	r0, 12de <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    12d6:	4b16      	ldr	r3, [pc, #88]	; (1330 <mutex_init_platform+0x60>)
    12d8:	4816      	ldr	r0, [pc, #88]	; (1334 <mutex_init_platform+0x64>)
    12da:	685b      	ldr	r3, [r3, #4]
    12dc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12de:	6863      	ldr	r3, [r4, #4]
    12e0:	2b04      	cmp	r3, #4
    12e2:	d023      	beq.n	132c <mutex_init_platform+0x5c>
    12e4:	2b08      	cmp	r3, #8
    12e6:	d021      	beq.n	132c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    12e8:	b9cb      	cbnz	r3, 131e <mutex_init_platform+0x4e>
    12ea:	6823      	ldr	r3, [r4, #0]
    12ec:	b9bb      	cbnz	r3, 131e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    12ee:	4812      	ldr	r0, [pc, #72]	; (1338 <mutex_init_platform+0x68>)
    12f0:	f04f 32ff 	mov.w	r2, #4294967295
    12f4:	f04f 33ff 	mov.w	r3, #4294967295
    12f8:	4621      	mov	r1, r4
    12fa:	f003 fa91 	bl	4820 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    12fe:	b908      	cbnz	r0, 1304 <mutex_init_platform+0x34>
    1300:	6823      	ldr	r3, [r4, #0]
    1302:	b91b      	cbnz	r3, 130c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1304:	4b0a      	ldr	r3, [pc, #40]	; (1330 <mutex_init_platform+0x60>)
    1306:	480d      	ldr	r0, [pc, #52]	; (133c <mutex_init_platform+0x6c>)
    1308:	685b      	ldr	r3, [r3, #4]
    130a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    130c:	6820      	ldr	r0, [r4, #0]
    130e:	2214      	movs	r2, #20
    1310:	2100      	movs	r1, #0
    1312:	f005 fe3c 	bl	6f8e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1316:	6863      	ldr	r3, [r4, #4]
    1318:	f043 0302 	orr.w	r3, r3, #2
    131c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    131e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1320:	f006 f826 	bl	7370 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1324:	6863      	ldr	r3, [r4, #4]
    1326:	f043 0301 	orr.w	r3, r3, #1
    132a:	6063      	str	r3, [r4, #4]
}
    132c:	bd10      	pop	{r4, pc}
    132e:	bf00      	nop
    1330:	200000e0 	.word	0x200000e0
    1334:	00007d21 	.word	0x00007d21
    1338:	20000358 	.word	0x20000358
    133c:	00007d47 	.word	0x00007d47

00001340 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1340:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1342:	b308      	cbz	r0, 1388 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1344:	6843      	ldr	r3, [r0, #4]
    1346:	2b04      	cmp	r3, #4
    1348:	d110      	bne.n	136c <mutex_lock_platform+0x2c>
    134a:	2201      	movs	r2, #1
    134c:	6803      	ldr	r3, [r0, #0]
    134e:	f3bf 8f5b 	dmb	ish
    1352:	e853 1f00 	ldrex	r1, [r3]
    1356:	2900      	cmp	r1, #0
    1358:	d103      	bne.n	1362 <mutex_lock_platform+0x22>
    135a:	e843 2000 	strex	r0, r2, [r3]
    135e:	2800      	cmp	r0, #0
    1360:	d1f7      	bne.n	1352 <mutex_lock_platform+0x12>
    1362:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1366:	d10b      	bne.n	1380 <mutex_lock_platform+0x40>
    1368:	2000      	movs	r0, #0
}
    136a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    136c:	b153      	cbz	r3, 1384 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    136e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1370:	f04f 32ff 	mov.w	r2, #4294967295
    1374:	f04f 33ff 	mov.w	r3, #4294967295
    1378:	f003 fb22 	bl	49c0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    137c:	2800      	cmp	r0, #0
    137e:	d0f3      	beq.n	1368 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1380:	4803      	ldr	r0, [pc, #12]	; (1390 <mutex_lock_platform+0x50>)
    1382:	e7f2      	b.n	136a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1384:	4803      	ldr	r0, [pc, #12]	; (1394 <mutex_lock_platform+0x54>)
    1386:	e7f0      	b.n	136a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1388:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    138c:	e7ed      	b.n	136a <mutex_lock_platform+0x2a>
    138e:	bf00      	nop
    1390:	ffff8fe9 	.word	0xffff8fe9
    1394:	ffff8fea 	.word	0xffff8fea

00001398 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1398:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    139a:	4906      	ldr	r1, [pc, #24]	; (13b4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    139c:	4806      	ldr	r0, [pc, #24]	; (13b8 <nrf_cc3xx_platform_mutex_init+0x20>)
    139e:	2340      	movs	r3, #64	; 0x40
    13a0:	2214      	movs	r2, #20
    13a2:	f005 ffc9 	bl	7338 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    13a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    13aa:	4904      	ldr	r1, [pc, #16]	; (13bc <nrf_cc3xx_platform_mutex_init+0x24>)
    13ac:	4804      	ldr	r0, [pc, #16]	; (13c0 <nrf_cc3xx_platform_mutex_init+0x28>)
    13ae:	f005 bb81 	b.w	6ab4 <nrf_cc3xx_platform_set_mutexes>
    13b2:	bf00      	nop
    13b4:	20000378 	.word	0x20000378
    13b8:	20000358 	.word	0x20000358
    13bc:	00007680 	.word	0x00007680
    13c0:	00007670 	.word	0x00007670

000013c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13c8:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    13cc:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13ce:	f019 0f08 	tst.w	r9, #8
{
    13d2:	4604      	mov	r4, r0
    13d4:	9203      	str	r2, [sp, #12]
	if (processing) {
    13d6:	d022      	beq.n	141e <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    13d8:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13da:	bf0c      	ite	eq
    13dc:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13e0:	f049 0920 	orrne.w	r9, r9, #32
    13e4:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    13e8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    13ea:	4620      	mov	r0, r4
    13ec:	f004 ff4e 	bl	628c <z_spin_unlock_valid>
    13f0:	b968      	cbnz	r0, 140e <process_event+0x4a>
    13f2:	4a9f      	ldr	r2, [pc, #636]	; (1670 <process_event+0x2ac>)
    13f4:	499f      	ldr	r1, [pc, #636]	; (1674 <process_event+0x2b0>)
    13f6:	48a0      	ldr	r0, [pc, #640]	; (1678 <process_event+0x2b4>)
    13f8:	23ac      	movs	r3, #172	; 0xac
    13fa:	f005 fd67 	bl	6ecc <printk>
    13fe:	489f      	ldr	r0, [pc, #636]	; (167c <process_event+0x2b8>)
    1400:	4621      	mov	r1, r4
    1402:	f005 fd63 	bl	6ecc <printk>
    1406:	489a      	ldr	r0, [pc, #616]	; (1670 <process_event+0x2ac>)
    1408:	21ac      	movs	r1, #172	; 0xac
    140a:	f005 fc8b 	bl	6d24 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    140e:	9b03      	ldr	r3, [sp, #12]
    1410:	f383 8811 	msr	BASEPRI, r3
    1414:	f3bf 8f6f 	isb	sy
}
    1418:	b005      	add	sp, #20
    141a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    141e:	4f98      	ldr	r7, [pc, #608]	; (1680 <process_event+0x2bc>)
    1420:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1678 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1424:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1428:	2902      	cmp	r1, #2
    142a:	d106      	bne.n	143a <process_event+0x76>
			evt = process_recheck(mgr);
    142c:	4620      	mov	r0, r4
    142e:	f005 fcf7 	bl	6e20 <process_recheck>
		if (evt == EVT_NOP) {
    1432:	2800      	cmp	r0, #0
    1434:	d0d8      	beq.n	13e8 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    1436:	2801      	cmp	r0, #1
    1438:	d168      	bne.n	150c <process_event+0x148>
			res = mgr->last_res;
    143a:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    143e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1440:	f1bb 0f00 	cmp.w	fp, #0
    1444:	da0a      	bge.n	145c <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1446:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1448:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    144a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    144e:	e9c4 6600 	strd	r6, r6, [r4]
    1452:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1456:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1458:	9601      	str	r6, [sp, #4]
    145a:	e027      	b.n	14ac <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    145c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1460:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1462:	2901      	cmp	r1, #1
    1464:	d834      	bhi.n	14d0 <process_event+0x10c>
	list->head = NULL;
    1466:	2100      	movs	r1, #0
    1468:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    146c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    146e:	6825      	ldr	r5, [r4, #0]
    1470:	b29b      	uxth	r3, r3
	list->tail = NULL;
    1472:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1476:	d10c      	bne.n	1492 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1478:	428d      	cmp	r5, r1
    147a:	462a      	mov	r2, r5
    147c:	bf38      	it	cc
    147e:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1480:	b12a      	cbz	r2, 148e <process_event+0xca>
				mgr->refs += 1U;
    1482:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1484:	6812      	ldr	r2, [r2, #0]
    1486:	3101      	adds	r1, #1
    1488:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    148a:	2a00      	cmp	r2, #0
    148c:	d1f8      	bne.n	1480 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    148e:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1492:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1494:	4620      	mov	r0, r4
    1496:	f005 fcc3 	bl	6e20 <process_recheck>
    149a:	4606      	mov	r6, r0
    149c:	2800      	cmp	r0, #0
    149e:	d0db      	beq.n	1458 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14a0:	8ba3      	ldrh	r3, [r4, #28]
    14a2:	f043 0320 	orr.w	r3, r3, #32
    14a6:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    14a8:	2300      	movs	r3, #0
    14aa:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14ac:	8ba3      	ldrh	r3, [r4, #28]
    14ae:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    14b2:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14b4:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    14b6:	d003      	beq.n	14c0 <process_event+0xfc>
		if (do_monitors
    14b8:	68a2      	ldr	r2, [r4, #8]
    14ba:	2a00      	cmp	r2, #0
    14bc:	f040 80f0 	bne.w	16a0 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    14c0:	b91d      	cbnz	r5, 14ca <process_event+0x106>
		    || (transit != NULL)) {
    14c2:	9a01      	ldr	r2, [sp, #4]
    14c4:	2a00      	cmp	r2, #0
    14c6:	f000 8136 	beq.w	1736 <process_event+0x372>
    14ca:	f04f 0900 	mov.w	r9, #0
    14ce:	e0e9      	b.n	16a4 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    14d0:	2a04      	cmp	r2, #4
    14d2:	d10e      	bne.n	14f2 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14d4:	f023 0307 	bic.w	r3, r3, #7
    14d8:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    14da:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    14dc:	4620      	mov	r0, r4
    14de:	f005 fc9f 	bl	6e20 <process_recheck>
    14e2:	4605      	mov	r5, r0
    14e4:	b118      	cbz	r0, 14ee <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14e6:	f042 0220 	orr.w	r2, r2, #32
    14ea:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    14ec:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14ee:	9501      	str	r5, [sp, #4]
    14f0:	e7dc      	b.n	14ac <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    14f2:	4640      	mov	r0, r8
    14f4:	4963      	ldr	r1, [pc, #396]	; (1684 <process_event+0x2c0>)
    14f6:	f240 131b 	movw	r3, #283	; 0x11b
    14fa:	463a      	mov	r2, r7
    14fc:	f005 fce6 	bl	6ecc <printk>
    1500:	f240 111b 	movw	r1, #283	; 0x11b
    1504:	4638      	mov	r0, r7
    1506:	f005 fc0d 	bl	6d24 <assert_post_action>
    150a:	e7ef      	b.n	14ec <process_event+0x128>
		} else if (evt == EVT_START) {
    150c:	2803      	cmp	r0, #3
    150e:	d135      	bne.n	157c <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1510:	f1b9 0f00 	cmp.w	r9, #0
    1514:	d00b      	beq.n	152e <process_event+0x16a>
    1516:	495c      	ldr	r1, [pc, #368]	; (1688 <process_event+0x2c4>)
    1518:	4640      	mov	r0, r8
    151a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    151e:	463a      	mov	r2, r7
    1520:	f005 fcd4 	bl	6ecc <printk>
    1524:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1528:	4638      	mov	r0, r7
    152a:	f005 fbfb 	bl	6d24 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    152e:	6823      	ldr	r3, [r4, #0]
    1530:	b95b      	cbnz	r3, 154a <process_event+0x186>
    1532:	4956      	ldr	r1, [pc, #344]	; (168c <process_event+0x2c8>)
    1534:	4640      	mov	r0, r8
    1536:	f240 1357 	movw	r3, #343	; 0x157
    153a:	463a      	mov	r2, r7
    153c:	f005 fcc6 	bl	6ecc <printk>
    1540:	f240 1157 	movw	r1, #343	; 0x157
    1544:	4638      	mov	r0, r7
    1546:	f005 fbed 	bl	6d24 <assert_post_action>
			transit = mgr->transitions->start;
    154a:	6923      	ldr	r3, [r4, #16]
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1550:	b95b      	cbnz	r3, 156a <process_event+0x1a6>
    1552:	494f      	ldr	r1, [pc, #316]	; (1690 <process_event+0x2cc>)
    1554:	4640      	mov	r0, r8
    1556:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    155a:	463a      	mov	r2, r7
    155c:	f005 fcb6 	bl	6ecc <printk>
    1560:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1564:	4638      	mov	r0, r7
    1566:	f005 fbdd 	bl	6d24 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    156a:	8ba3      	ldrh	r3, [r4, #28]
    156c:	f023 0307 	bic.w	r3, r3, #7
    1570:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1574:	83a3      	strh	r3, [r4, #28]
}
    1576:	2500      	movs	r5, #0
		res = 0;
    1578:	46ab      	mov	fp, r5
}
    157a:	e797      	b.n	14ac <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    157c:	2804      	cmp	r0, #4
    157e:	d132      	bne.n	15e6 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1580:	f1b9 0f02 	cmp.w	r9, #2
    1584:	d00b      	beq.n	159e <process_event+0x1da>
    1586:	4943      	ldr	r1, [pc, #268]	; (1694 <process_event+0x2d0>)
    1588:	4640      	mov	r0, r8
    158a:	f240 135d 	movw	r3, #349	; 0x15d
    158e:	463a      	mov	r2, r7
    1590:	f005 fc9c 	bl	6ecc <printk>
    1594:	f240 115d 	movw	r1, #349	; 0x15d
    1598:	4638      	mov	r0, r7
    159a:	f005 fbc3 	bl	6d24 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    159e:	8be3      	ldrh	r3, [r4, #30]
    15a0:	b15b      	cbz	r3, 15ba <process_event+0x1f6>
    15a2:	493d      	ldr	r1, [pc, #244]	; (1698 <process_event+0x2d4>)
    15a4:	4640      	mov	r0, r8
    15a6:	f44f 73af 	mov.w	r3, #350	; 0x15e
    15aa:	463a      	mov	r2, r7
    15ac:	f005 fc8e 	bl	6ecc <printk>
    15b0:	f44f 71af 	mov.w	r1, #350	; 0x15e
    15b4:	4638      	mov	r0, r7
    15b6:	f005 fbb5 	bl	6d24 <assert_post_action>
			transit = mgr->transitions->stop;
    15ba:	6923      	ldr	r3, [r4, #16]
    15bc:	685b      	ldr	r3, [r3, #4]
    15be:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    15c0:	b95b      	cbnz	r3, 15da <process_event+0x216>
    15c2:	4933      	ldr	r1, [pc, #204]	; (1690 <process_event+0x2cc>)
    15c4:	4640      	mov	r0, r8
    15c6:	f240 1361 	movw	r3, #353	; 0x161
    15ca:	463a      	mov	r2, r7
    15cc:	f005 fc7e 	bl	6ecc <printk>
    15d0:	f240 1161 	movw	r1, #353	; 0x161
    15d4:	4638      	mov	r0, r7
    15d6:	f005 fba5 	bl	6d24 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15da:	8ba3      	ldrh	r3, [r4, #28]
    15dc:	f023 0307 	bic.w	r3, r3, #7
    15e0:	f043 0304 	orr.w	r3, r3, #4
    15e4:	e7c6      	b.n	1574 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    15e6:	2805      	cmp	r0, #5
    15e8:	d132      	bne.n	1650 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    15ea:	f1b9 0f01 	cmp.w	r9, #1
    15ee:	d00b      	beq.n	1608 <process_event+0x244>
    15f0:	492a      	ldr	r1, [pc, #168]	; (169c <process_event+0x2d8>)
    15f2:	4640      	mov	r0, r8
    15f4:	f44f 73b2 	mov.w	r3, #356	; 0x164
    15f8:	463a      	mov	r2, r7
    15fa:	f005 fc67 	bl	6ecc <printk>
    15fe:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1602:	4638      	mov	r0, r7
    1604:	f005 fb8e 	bl	6d24 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1608:	6823      	ldr	r3, [r4, #0]
    160a:	b95b      	cbnz	r3, 1624 <process_event+0x260>
    160c:	491f      	ldr	r1, [pc, #124]	; (168c <process_event+0x2c8>)
    160e:	4640      	mov	r0, r8
    1610:	f240 1365 	movw	r3, #357	; 0x165
    1614:	463a      	mov	r2, r7
    1616:	f005 fc59 	bl	6ecc <printk>
    161a:	f240 1165 	movw	r1, #357	; 0x165
    161e:	4638      	mov	r0, r7
    1620:	f005 fb80 	bl	6d24 <assert_post_action>
			transit = mgr->transitions->reset;
    1624:	6923      	ldr	r3, [r4, #16]
    1626:	689b      	ldr	r3, [r3, #8]
    1628:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    162a:	b95b      	cbnz	r3, 1644 <process_event+0x280>
    162c:	4918      	ldr	r1, [pc, #96]	; (1690 <process_event+0x2cc>)
    162e:	4640      	mov	r0, r8
    1630:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1634:	463a      	mov	r2, r7
    1636:	f005 fc49 	bl	6ecc <printk>
    163a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    163e:	4638      	mov	r0, r7
    1640:	f005 fb70 	bl	6d24 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1644:	8ba3      	ldrh	r3, [r4, #28]
    1646:	f023 0307 	bic.w	r3, r3, #7
    164a:	f043 0305 	orr.w	r3, r3, #5
    164e:	e791      	b.n	1574 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    1650:	490c      	ldr	r1, [pc, #48]	; (1684 <process_event+0x2c0>)
    1652:	f240 136b 	movw	r3, #363	; 0x16b
    1656:	463a      	mov	r2, r7
    1658:	4640      	mov	r0, r8
    165a:	f005 fc37 	bl	6ecc <printk>
    165e:	2500      	movs	r5, #0
    1660:	f240 116b 	movw	r1, #363	; 0x16b
    1664:	4638      	mov	r0, r7
    1666:	f005 fb5d 	bl	6d24 <assert_post_action>
		onoff_transition_fn transit = NULL;
    166a:	9501      	str	r5, [sp, #4]
    166c:	e784      	b.n	1578 <process_event+0x1b4>
    166e:	bf00      	nop
    1670:	00007e17 	.word	0x00007e17
    1674:	00007e3d 	.word	0x00007e3d
    1678:	0000793c 	.word	0x0000793c
    167c:	00007e54 	.word	0x00007e54
    1680:	00007d74 	.word	0x00007d74
    1684:	00007dff 	.word	0x00007dff
    1688:	00007d96 	.word	0x00007d96
    168c:	00007da2 	.word	0x00007da2
    1690:	00007dc5 	.word	0x00007dc5
    1694:	00007ddc 	.word	0x00007ddc
    1698:	00007df2 	.word	0x00007df2
    169c:	00007e01 	.word	0x00007e01
				   && !sys_slist_is_empty(&mgr->monitors);
    16a0:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    16a4:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    16a8:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    16ac:	83a3      	strh	r3, [r4, #28]
    16ae:	4650      	mov	r0, sl
    16b0:	f004 fdec 	bl	628c <z_spin_unlock_valid>
    16b4:	b968      	cbnz	r0, 16d2 <process_event+0x30e>
    16b6:	4a3a      	ldr	r2, [pc, #232]	; (17a0 <process_event+0x3dc>)
    16b8:	493a      	ldr	r1, [pc, #232]	; (17a4 <process_event+0x3e0>)
    16ba:	23ac      	movs	r3, #172	; 0xac
    16bc:	4640      	mov	r0, r8
    16be:	f005 fc05 	bl	6ecc <printk>
    16c2:	4839      	ldr	r0, [pc, #228]	; (17a8 <process_event+0x3e4>)
    16c4:	4651      	mov	r1, sl
    16c6:	f005 fc01 	bl	6ecc <printk>
    16ca:	4835      	ldr	r0, [pc, #212]	; (17a0 <process_event+0x3dc>)
    16cc:	21ac      	movs	r1, #172	; 0xac
    16ce:	f005 fb29 	bl	6d24 <assert_post_action>
    16d2:	9b03      	ldr	r3, [sp, #12]
    16d4:	f383 8811 	msr	BASEPRI, r3
    16d8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    16dc:	f1b9 0f00 	cmp.w	r9, #0
    16e0:	d138      	bne.n	1754 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    16e2:	2d00      	cmp	r5, #0
    16e4:	d14b      	bne.n	177e <process_event+0x3ba>
			if (transit != NULL) {
    16e6:	9b01      	ldr	r3, [sp, #4]
    16e8:	b113      	cbz	r3, 16f0 <process_event+0x32c>
				transit(mgr, transition_complete);
    16ea:	4930      	ldr	r1, [pc, #192]	; (17ac <process_event+0x3e8>)
    16ec:	4620      	mov	r0, r4
    16ee:	4798      	blx	r3
	__asm__ volatile(
    16f0:	f04f 0320 	mov.w	r3, #32
    16f4:	f3ef 8b11 	mrs	fp, BASEPRI
    16f8:	f383 8812 	msr	BASEPRI_MAX, r3
    16fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1700:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    1702:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1706:	f004 fdb3 	bl	6270 <z_spin_lock_valid>
    170a:	b968      	cbnz	r0, 1728 <process_event+0x364>
    170c:	4a24      	ldr	r2, [pc, #144]	; (17a0 <process_event+0x3dc>)
    170e:	4928      	ldr	r1, [pc, #160]	; (17b0 <process_event+0x3ec>)
    1710:	2381      	movs	r3, #129	; 0x81
    1712:	4640      	mov	r0, r8
    1714:	f005 fbda 	bl	6ecc <printk>
    1718:	4826      	ldr	r0, [pc, #152]	; (17b4 <process_event+0x3f0>)
    171a:	4651      	mov	r1, sl
    171c:	f005 fbd6 	bl	6ecc <printk>
    1720:	481f      	ldr	r0, [pc, #124]	; (17a0 <process_event+0x3dc>)
    1722:	2181      	movs	r1, #129	; 0x81
    1724:	f005 fafe 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    1728:	4650      	mov	r0, sl
    172a:	f004 fdbf 	bl	62ac <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    172e:	8ba3      	ldrh	r3, [r4, #28]
    1730:	f023 0308 	bic.w	r3, r3, #8
    1734:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1736:	8ba3      	ldrh	r3, [r4, #28]
    1738:	06da      	lsls	r2, r3, #27
    173a:	d528      	bpl.n	178e <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    173c:	f023 0310 	bic.w	r3, r3, #16
    1740:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1742:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1744:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1748:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    174c:	2900      	cmp	r1, #0
    174e:	f47f ae6b 	bne.w	1428 <process_event+0x64>
out:
    1752:	e649      	b.n	13e8 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1754:	68a1      	ldr	r1, [r4, #8]
    1756:	2900      	cmp	r1, #0
    1758:	d0c3      	beq.n	16e2 <process_event+0x31e>
	return node->next;
    175a:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    175c:	9a02      	ldr	r2, [sp, #8]
    175e:	2b00      	cmp	r3, #0
    1760:	bf38      	it	cc
    1762:	2300      	movcc	r3, #0
    1764:	4699      	mov	r9, r3
    1766:	684b      	ldr	r3, [r1, #4]
    1768:	4620      	mov	r0, r4
    176a:	461e      	mov	r6, r3
    176c:	465b      	mov	r3, fp
    176e:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1770:	f1b9 0f00 	cmp.w	r9, #0
    1774:	d0b5      	beq.n	16e2 <process_event+0x31e>
    1776:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    177a:	4649      	mov	r1, r9
    177c:	e7ee      	b.n	175c <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    177e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1780:	9a02      	ldr	r2, [sp, #8]
    1782:	682d      	ldr	r5, [r5, #0]
    1784:	465b      	mov	r3, fp
    1786:	4620      	mov	r0, r4
    1788:	f005 fb66 	bl	6e58 <notify_one>
    178c:	e7a9      	b.n	16e2 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    178e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1792:	bf1e      	ittt	ne
    1794:	f023 0320 	bicne.w	r3, r3, #32
    1798:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    179a:	2102      	movne	r1, #2
    179c:	e7d2      	b.n	1744 <process_event+0x380>
    179e:	bf00      	nop
    17a0:	00007e17 	.word	0x00007e17
    17a4:	00007e3d 	.word	0x00007e3d
    17a8:	00007e54 	.word	0x00007e54
    17ac:	000017b9 	.word	0x000017b9
    17b0:	00007e69 	.word	0x00007e69
    17b4:	00007e7e 	.word	0x00007e7e

000017b8 <transition_complete>:
{
    17b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ba:	4604      	mov	r4, r0
    17bc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    17be:	f100 0614 	add.w	r6, r0, #20
    17c2:	f04f 0320 	mov.w	r3, #32
    17c6:	f3ef 8711 	mrs	r7, BASEPRI
    17ca:	f383 8812 	msr	BASEPRI_MAX, r3
    17ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    17d2:	4630      	mov	r0, r6
    17d4:	f004 fd4c 	bl	6270 <z_spin_lock_valid>
    17d8:	b968      	cbnz	r0, 17f6 <transition_complete+0x3e>
    17da:	4a0c      	ldr	r2, [pc, #48]	; (180c <transition_complete+0x54>)
    17dc:	490c      	ldr	r1, [pc, #48]	; (1810 <transition_complete+0x58>)
    17de:	480d      	ldr	r0, [pc, #52]	; (1814 <transition_complete+0x5c>)
    17e0:	2381      	movs	r3, #129	; 0x81
    17e2:	f005 fb73 	bl	6ecc <printk>
    17e6:	480c      	ldr	r0, [pc, #48]	; (1818 <transition_complete+0x60>)
    17e8:	4631      	mov	r1, r6
    17ea:	f005 fb6f 	bl	6ecc <printk>
    17ee:	4807      	ldr	r0, [pc, #28]	; (180c <transition_complete+0x54>)
    17f0:	2181      	movs	r1, #129	; 0x81
    17f2:	f005 fa97 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    17f6:	4630      	mov	r0, r6
    17f8:	f004 fd58 	bl	62ac <z_spin_lock_set_owner>
	mgr->last_res = res;
    17fc:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    17fe:	463a      	mov	r2, r7
    1800:	4620      	mov	r0, r4
    1802:	2101      	movs	r1, #1
}
    1804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1808:	f7ff bddc 	b.w	13c4 <process_event>
    180c:	00007e17 	.word	0x00007e17
    1810:	00007e69 	.word	0x00007e69
    1814:	0000793c 	.word	0x0000793c
    1818:	00007e7e 	.word	0x00007e7e

0000181c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1820:	4604      	mov	r4, r0
    1822:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1824:	f005 fb2e 	bl	6e84 <validate_args>

	if (rv < 0) {
    1828:	1e05      	subs	r5, r0, #0
    182a:	db5e      	blt.n	18ea <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    182c:	f104 0914 	add.w	r9, r4, #20
    1830:	f04f 0320 	mov.w	r3, #32
    1834:	f3ef 8a11 	mrs	sl, BASEPRI
    1838:	f383 8812 	msr	BASEPRI_MAX, r3
    183c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1840:	4648      	mov	r0, r9
    1842:	f004 fd15 	bl	6270 <z_spin_lock_valid>
    1846:	b968      	cbnz	r0, 1864 <onoff_request+0x48>
    1848:	4a38      	ldr	r2, [pc, #224]	; (192c <onoff_request+0x110>)
    184a:	4939      	ldr	r1, [pc, #228]	; (1930 <onoff_request+0x114>)
    184c:	4839      	ldr	r0, [pc, #228]	; (1934 <onoff_request+0x118>)
    184e:	2381      	movs	r3, #129	; 0x81
    1850:	f005 fb3c 	bl	6ecc <printk>
    1854:	4838      	ldr	r0, [pc, #224]	; (1938 <onoff_request+0x11c>)
    1856:	4649      	mov	r1, r9
    1858:	f005 fb38 	bl	6ecc <printk>
    185c:	4833      	ldr	r0, [pc, #204]	; (192c <onoff_request+0x110>)
    185e:	2181      	movs	r1, #129	; 0x81
    1860:	f005 fa60 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    1864:	4648      	mov	r0, r9
    1866:	f004 fd21 	bl	62ac <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    186a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    186c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    186e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1872:	428b      	cmp	r3, r1
    1874:	f002 0607 	and.w	r6, r2, #7
    1878:	d050      	beq.n	191c <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    187a:	2e02      	cmp	r6, #2
    187c:	d124      	bne.n	18c8 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    187e:	3301      	adds	r3, #1
    1880:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1882:	4635      	mov	r5, r6
		notify = true;
    1884:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1888:	4648      	mov	r0, r9
    188a:	f004 fcff 	bl	628c <z_spin_unlock_valid>
    188e:	b968      	cbnz	r0, 18ac <onoff_request+0x90>
    1890:	4a26      	ldr	r2, [pc, #152]	; (192c <onoff_request+0x110>)
    1892:	492a      	ldr	r1, [pc, #168]	; (193c <onoff_request+0x120>)
    1894:	4827      	ldr	r0, [pc, #156]	; (1934 <onoff_request+0x118>)
    1896:	23ac      	movs	r3, #172	; 0xac
    1898:	f005 fb18 	bl	6ecc <printk>
    189c:	4828      	ldr	r0, [pc, #160]	; (1940 <onoff_request+0x124>)
    189e:	4649      	mov	r1, r9
    18a0:	f005 fb14 	bl	6ecc <printk>
    18a4:	4821      	ldr	r0, [pc, #132]	; (192c <onoff_request+0x110>)
    18a6:	21ac      	movs	r1, #172	; 0xac
    18a8:	f005 fa3c 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    18ac:	f38a 8811 	msr	BASEPRI, sl
    18b0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    18b4:	f1b8 0f00 	cmp.w	r8, #0
    18b8:	d017      	beq.n	18ea <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    18ba:	2300      	movs	r3, #0
    18bc:	4632      	mov	r2, r6
    18be:	4639      	mov	r1, r7
    18c0:	4620      	mov	r0, r4
    18c2:	f005 fac9 	bl	6e58 <notify_one>
    18c6:	e010      	b.n	18ea <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    18c8:	0793      	lsls	r3, r2, #30
    18ca:	d001      	beq.n	18d0 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    18cc:	2e06      	cmp	r6, #6
    18ce:	d10f      	bne.n	18f0 <onoff_request+0xd4>
	parent->next = child;
    18d0:	2300      	movs	r3, #0
    18d2:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    18d4:	6863      	ldr	r3, [r4, #4]
    18d6:	b9f3      	cbnz	r3, 1916 <onoff_request+0xfa>
	list->head = node;
    18d8:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    18dc:	4635      	mov	r5, r6
    18de:	b9fe      	cbnz	r6, 1920 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    18e0:	4652      	mov	r2, sl
    18e2:	2102      	movs	r1, #2
    18e4:	4620      	mov	r0, r4
    18e6:	f7ff fd6d 	bl	13c4 <process_event>
		}
	}

	return rv;
}
    18ea:	4628      	mov	r0, r5
    18ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    18f0:	2e05      	cmp	r6, #5
    18f2:	d018      	beq.n	1926 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    18f4:	2e01      	cmp	r6, #1
    18f6:	d00b      	beq.n	1910 <onoff_request+0xf4>
    18f8:	4912      	ldr	r1, [pc, #72]	; (1944 <onoff_request+0x128>)
    18fa:	480e      	ldr	r0, [pc, #56]	; (1934 <onoff_request+0x118>)
    18fc:	4a12      	ldr	r2, [pc, #72]	; (1948 <onoff_request+0x12c>)
    18fe:	f240 13c9 	movw	r3, #457	; 0x1c9
    1902:	f005 fae3 	bl	6ecc <printk>
    1906:	4810      	ldr	r0, [pc, #64]	; (1948 <onoff_request+0x12c>)
    1908:	f240 11c9 	movw	r1, #457	; 0x1c9
    190c:	f005 fa0a 	bl	6d24 <assert_post_action>
		rv = -EIO;
    1910:	f06f 0504 	mvn.w	r5, #4
    1914:	e004      	b.n	1920 <onoff_request+0x104>
	parent->next = child;
    1916:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1918:	6067      	str	r7, [r4, #4]
}
    191a:	e7df      	b.n	18dc <onoff_request+0xc0>
		rv = -EAGAIN;
    191c:	f06f 050a 	mvn.w	r5, #10
    1920:	f04f 0800 	mov.w	r8, #0
    1924:	e7b0      	b.n	1888 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1926:	f06f 0585 	mvn.w	r5, #133	; 0x85
    192a:	e7f9      	b.n	1920 <onoff_request+0x104>
    192c:	00007e17 	.word	0x00007e17
    1930:	00007e69 	.word	0x00007e69
    1934:	0000793c 	.word	0x0000793c
    1938:	00007e7e 	.word	0x00007e7e
    193c:	00007e3d 	.word	0x00007e3d
    1940:	00007e54 	.word	0x00007e54
    1944:	00007e01 	.word	0x00007e01
    1948:	00007d74 	.word	0x00007d74

0000194c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    194c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1950:	4605      	mov	r5, r0
	__asm__ volatile(
    1952:	f04f 0320 	mov.w	r3, #32
    1956:	f3ef 8611 	mrs	r6, BASEPRI
    195a:	f383 8812 	msr	BASEPRI_MAX, r3
    195e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1962:	4823      	ldr	r0, [pc, #140]	; (19f0 <pm_state_notify+0xa4>)
    1964:	f004 fc84 	bl	6270 <z_spin_lock_valid>
    1968:	b968      	cbnz	r0, 1986 <pm_state_notify+0x3a>
    196a:	4a22      	ldr	r2, [pc, #136]	; (19f4 <pm_state_notify+0xa8>)
    196c:	4922      	ldr	r1, [pc, #136]	; (19f8 <pm_state_notify+0xac>)
    196e:	4823      	ldr	r0, [pc, #140]	; (19fc <pm_state_notify+0xb0>)
    1970:	2381      	movs	r3, #129	; 0x81
    1972:	f005 faab 	bl	6ecc <printk>
    1976:	491e      	ldr	r1, [pc, #120]	; (19f0 <pm_state_notify+0xa4>)
    1978:	4821      	ldr	r0, [pc, #132]	; (1a00 <pm_state_notify+0xb4>)
    197a:	f005 faa7 	bl	6ecc <printk>
    197e:	481d      	ldr	r0, [pc, #116]	; (19f4 <pm_state_notify+0xa8>)
    1980:	2181      	movs	r1, #129	; 0x81
    1982:	f005 f9cf 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    1986:	481a      	ldr	r0, [pc, #104]	; (19f0 <pm_state_notify+0xa4>)
    1988:	f004 fc90 	bl	62ac <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    198c:	4b1d      	ldr	r3, [pc, #116]	; (1a04 <pm_state_notify+0xb8>)
    198e:	681c      	ldr	r4, [r3, #0]
    1990:	2c00      	cmp	r4, #0
    1992:	bf38      	it	cc
    1994:	2400      	movcc	r4, #0
    1996:	b19c      	cbz	r4, 19c0 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1998:	4f1b      	ldr	r7, [pc, #108]	; (1a08 <pm_state_notify+0xbc>)
    199a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1a14 <pm_state_notify+0xc8>
    199e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    19a2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    19a6:	2d00      	cmp	r5, #0
    19a8:	bf08      	it	eq
    19aa:	4613      	moveq	r3, r2
		if (callback) {
    19ac:	b12b      	cbz	r3, 19ba <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    19ae:	f898 2014 	ldrb.w	r2, [r8, #20]
    19b2:	fb09 f202 	mul.w	r2, r9, r2
    19b6:	5cb8      	ldrb	r0, [r7, r2]
    19b8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    19ba:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    19bc:	2c00      	cmp	r4, #0
    19be:	d1f0      	bne.n	19a2 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    19c0:	480b      	ldr	r0, [pc, #44]	; (19f0 <pm_state_notify+0xa4>)
    19c2:	f004 fc63 	bl	628c <z_spin_unlock_valid>
    19c6:	b968      	cbnz	r0, 19e4 <pm_state_notify+0x98>
    19c8:	4a0a      	ldr	r2, [pc, #40]	; (19f4 <pm_state_notify+0xa8>)
    19ca:	4910      	ldr	r1, [pc, #64]	; (1a0c <pm_state_notify+0xc0>)
    19cc:	480b      	ldr	r0, [pc, #44]	; (19fc <pm_state_notify+0xb0>)
    19ce:	23ac      	movs	r3, #172	; 0xac
    19d0:	f005 fa7c 	bl	6ecc <printk>
    19d4:	4906      	ldr	r1, [pc, #24]	; (19f0 <pm_state_notify+0xa4>)
    19d6:	480e      	ldr	r0, [pc, #56]	; (1a10 <pm_state_notify+0xc4>)
    19d8:	f005 fa78 	bl	6ecc <printk>
    19dc:	4805      	ldr	r0, [pc, #20]	; (19f4 <pm_state_notify+0xa8>)
    19de:	21ac      	movs	r1, #172	; 0xac
    19e0:	f005 f9a0 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    19e4:	f386 8811 	msr	BASEPRI, r6
    19e8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    19ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19f0:	20000878 	.word	0x20000878
    19f4:	00007e17 	.word	0x00007e17
    19f8:	00007e69 	.word	0x00007e69
    19fc:	0000793c 	.word	0x0000793c
    1a00:	00007e7e 	.word	0x00007e7e
    1a04:	2000087c 	.word	0x2000087c
    1a08:	20000888 	.word	0x20000888
    1a0c:	00007e3d 	.word	0x00007e3d
    1a10:	00007e54 	.word	0x00007e54
    1a14:	200009ec 	.word	0x200009ec

00001a18 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a18:	f000 031f 	and.w	r3, r0, #31
    1a1c:	2201      	movs	r2, #1
    1a1e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1a20:	4b0a      	ldr	r3, [pc, #40]	; (1a4c <atomic_test_and_set_bit.constprop.0+0x34>)
    1a22:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1a26:	0940      	lsrs	r0, r0, #5
    1a28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1a2c:	e850 3f00 	ldrex	r3, [r0]
    1a30:	ea43 0102 	orr.w	r1, r3, r2
    1a34:	e840 1c00 	strex	ip, r1, [r0]
    1a38:	f1bc 0f00 	cmp.w	ip, #0
    1a3c:	d1f6      	bne.n	1a2c <atomic_test_and_set_bit.constprop.0+0x14>
    1a3e:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1a42:	421a      	tst	r2, r3
}
    1a44:	bf14      	ite	ne
    1a46:	2001      	movne	r0, #1
    1a48:	2000      	moveq	r0, #0
    1a4a:	4770      	bx	lr
    1a4c:	20000894 	.word	0x20000894

00001a50 <pm_system_resume>:

void pm_system_resume(void)
{
    1a50:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1a52:	4b1d      	ldr	r3, [pc, #116]	; (1ac8 <pm_system_resume+0x78>)
    1a54:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a56:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a5a:	f005 031f 	and.w	r3, r5, #31
    1a5e:	2201      	movs	r2, #1
    1a60:	409a      	lsls	r2, r3
    1a62:	4b1a      	ldr	r3, [pc, #104]	; (1acc <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1a64:	0969      	lsrs	r1, r5, #5
{
    1a66:	b085      	sub	sp, #20
    1a68:	43d0      	mvns	r0, r2
    1a6a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1a6e:	e853 1f00 	ldrex	r1, [r3]
    1a72:	ea01 0400 	and.w	r4, r1, r0
    1a76:	e843 4c00 	strex	ip, r4, [r3]
    1a7a:	f1bc 0f00 	cmp.w	ip, #0
    1a7e:	d1f6      	bne.n	1a6e <pm_system_resume+0x1e>
    1a80:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1a84:	4211      	tst	r1, r2
    1a86:	d017      	beq.n	1ab8 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1a88:	4c11      	ldr	r4, [pc, #68]	; (1ad0 <pm_system_resume+0x80>)
    1a8a:	220c      	movs	r2, #12
    1a8c:	fb02 4205 	mla	r2, r2, r5, r4
    1a90:	ca07      	ldmia	r2, {r0, r1, r2}
    1a92:	ab01      	add	r3, sp, #4
    1a94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1a98:	4a0e      	ldr	r2, [pc, #56]	; (1ad4 <pm_system_resume+0x84>)
    1a9a:	b17a      	cbz	r2, 1abc <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1a9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1aa0:	f005 fa91 	bl	6fc6 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1aa4:	2000      	movs	r0, #0
    1aa6:	f7ff ff51 	bl	194c <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1aaa:	230c      	movs	r3, #12
    1aac:	436b      	muls	r3, r5
    1aae:	2200      	movs	r2, #0
    1ab0:	18e1      	adds	r1, r4, r3
    1ab2:	50e2      	str	r2, [r4, r3]
    1ab4:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1ab8:	b005      	add	sp, #20
    1aba:	bd30      	pop	{r4, r5, pc}
    1abc:	f382 8811 	msr	BASEPRI, r2
    1ac0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1ac4:	e7ee      	b.n	1aa4 <pm_system_resume+0x54>
    1ac6:	bf00      	nop
    1ac8:	200009ec 	.word	0x200009ec
    1acc:	20000884 	.word	0x20000884
    1ad0:	20000888 	.word	0x20000888
    1ad4:	00006fc7 	.word	0x00006fc7

00001ad8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1adc:	4b37      	ldr	r3, [pc, #220]	; (1bbc <pm_system_suspend+0xe4>)
    1ade:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1bd4 <pm_system_suspend+0xfc>
    1ae2:	7d1c      	ldrb	r4, [r3, #20]
{
    1ae4:	b088      	sub	sp, #32
    1ae6:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1ae8:	4620      	mov	r0, r4
    1aea:	f7ff ff95 	bl	1a18 <atomic_test_and_set_bit.constprop.0>
    1aee:	b960      	cbnz	r0, 1b0a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1af0:	466e      	mov	r6, sp
    1af2:	463a      	mov	r2, r7
    1af4:	4621      	mov	r1, r4
    1af6:	4630      	mov	r0, r6
    1af8:	f005 f9f5 	bl	6ee6 <pm_policy_next_state>
    1afc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1b00:	250c      	movs	r5, #12
    1b02:	fb05 8504 	mla	r5, r5, r4, r8
    1b06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    1b0a:	230c      	movs	r3, #12
    1b0c:	4363      	muls	r3, r4
    1b0e:	eb08 0203 	add.w	r2, r8, r3
    1b12:	f818 0003 	ldrb.w	r0, [r8, r3]
    1b16:	0965      	lsrs	r5, r4, #5
    1b18:	f004 061f 	and.w	r6, r4, #31
    1b1c:	b3c8      	cbz	r0, 1b92 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1b1e:	1c7b      	adds	r3, r7, #1
    1b20:	d00f      	beq.n	1b42 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1b22:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1b26:	4826      	ldr	r0, [pc, #152]	; (1bc0 <pm_system_suspend+0xe8>)
    1b28:	4a26      	ldr	r2, [pc, #152]	; (1bc4 <pm_system_suspend+0xec>)
    1b2a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1b2e:	2100      	movs	r1, #0
    1b30:	2300      	movs	r3, #0
    1b32:	fbec 010e 	umlal	r0, r1, ip, lr
    1b36:	f7fe fae3 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1b3a:	2101      	movs	r1, #1
    1b3c:	1a38      	subs	r0, r7, r0
    1b3e:	f004 fd77 	bl	6630 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1b42:	f003 f9c5 	bl	4ed0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1b46:	2001      	movs	r0, #1
    1b48:	f7ff ff00 	bl	194c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1b4c:	f3bf 8f5b 	dmb	ish
    1b50:	4b1d      	ldr	r3, [pc, #116]	; (1bc8 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1b52:	2201      	movs	r2, #1
    1b54:	40b2      	lsls	r2, r6
    1b56:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1b5a:	e853 1f00 	ldrex	r1, [r3]
    1b5e:	4311      	orrs	r1, r2
    1b60:	e843 1000 	strex	r0, r1, [r3]
    1b64:	2800      	cmp	r0, #0
    1b66:	d1f8      	bne.n	1b5a <pm_system_suspend+0x82>
    1b68:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    1b6c:	230c      	movs	r3, #12
    1b6e:	fb03 8404 	mla	r4, r3, r4, r8
    1b72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1b76:	ab05      	add	r3, sp, #20
    1b78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1b7c:	4a13      	ldr	r2, [pc, #76]	; (1bcc <pm_system_suspend+0xf4>)
    1b7e:	b11a      	cbz	r2, 1b88 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    1b80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1b84:	f005 fa0c 	bl	6fa0 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1b88:	f7ff ff62 	bl	1a50 <pm_system_resume>
	k_sched_unlock();
    1b8c:	f003 fe98 	bl	58c0 <k_sched_unlock>
	bool ret = true;
    1b90:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b92:	4a0f      	ldr	r2, [pc, #60]	; (1bd0 <pm_system_suspend+0xf8>)
    1b94:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1b98:	2301      	movs	r3, #1
    1b9a:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1b9c:	43db      	mvns	r3, r3
    1b9e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1ba2:	e855 2f00 	ldrex	r2, [r5]
    1ba6:	401a      	ands	r2, r3
    1ba8:	e845 2100 	strex	r1, r2, [r5]
    1bac:	2900      	cmp	r1, #0
    1bae:	d1f8      	bne.n	1ba2 <pm_system_suspend+0xca>
    1bb0:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1bb4:	b008      	add	sp, #32
    1bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bba:	bf00      	nop
    1bbc:	200009ec 	.word	0x200009ec
    1bc0:	000f423f 	.word	0x000f423f
    1bc4:	000f4240 	.word	0x000f4240
    1bc8:	20000884 	.word	0x20000884
    1bcc:	00006fa1 	.word	0x00006fa1
    1bd0:	20000894 	.word	0x20000894
    1bd4:	20000888 	.word	0x20000888

00001bd8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1bd8:	680b      	ldr	r3, [r1, #0]
    1bda:	3301      	adds	r3, #1
    1bdc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1bde:	4b01      	ldr	r3, [pc, #4]	; (1be4 <char_out+0xc>)
    1be0:	681b      	ldr	r3, [r3, #0]
    1be2:	4718      	bx	r3
    1be4:	20000024 	.word	0x20000024

00001be8 <__printk_hook_install>:
	_char_out = fn;
    1be8:	4b01      	ldr	r3, [pc, #4]	; (1bf0 <__printk_hook_install+0x8>)
    1bea:	6018      	str	r0, [r3, #0]
}
    1bec:	4770      	bx	lr
    1bee:	bf00      	nop
    1bf0:	20000024 	.word	0x20000024

00001bf4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1bf4:	b507      	push	{r0, r1, r2, lr}
    1bf6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1bf8:	2100      	movs	r1, #0
{
    1bfa:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1bfc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1bfe:	4803      	ldr	r0, [pc, #12]	; (1c0c <vprintk+0x18>)
    1c00:	a901      	add	r1, sp, #4
    1c02:	f7fe ff35 	bl	a70 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1c06:	b003      	add	sp, #12
    1c08:	f85d fb04 	ldr.w	pc, [sp], #4
    1c0c:	00001bd9 	.word	0x00001bd9

00001c10 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1c10:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c12:	f04f 0220 	mov.w	r2, #32
    1c16:	f3ef 8311 	mrs	r3, BASEPRI
    1c1a:	f382 8812 	msr	BASEPRI_MAX, r2
    1c1e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c22:	f000 fca1 	bl	2568 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1c26:	4803      	ldr	r0, [pc, #12]	; (1c34 <sys_reboot+0x24>)
    1c28:	f005 f950 	bl	6ecc <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c2c:	f000 f80a 	bl	1c44 <arch_cpu_idle>
    1c30:	e7fc      	b.n	1c2c <sys_reboot+0x1c>
    1c32:	bf00      	nop
    1c34:	00007e96 	.word	0x00007e96

00001c38 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1c38:	4901      	ldr	r1, [pc, #4]	; (1c40 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1c3a:	2210      	movs	r2, #16
	str	r2, [r1]
    1c3c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1c3e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1c40:	e000ed10 	.word	0xe000ed10

00001c44 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1c44:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1c46:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1c48:	f380 8811 	msr	BASEPRI, r0
	isb
    1c4c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1c50:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1c54:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1c56:	b662      	cpsie	i
	isb
    1c58:	f3bf 8f6f 	isb	sy

	bx	lr
    1c5c:	4770      	bx	lr
    1c5e:	bf00      	nop

00001c60 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1c60:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1c62:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1c64:	f381 8811 	msr	BASEPRI, r1

	wfe
    1c68:	bf20      	wfe

	msr	BASEPRI, r0
    1c6a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1c6e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1c70:	4770      	bx	lr
    1c72:	bf00      	nop

00001c74 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1c74:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c76:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c78:	4a0b      	ldr	r2, [pc, #44]	; (1ca8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c7a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1c7c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c7e:	bf1e      	ittt	ne
	movne	r1, #0
    1c80:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c82:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1c84:	f005 fb51 	blne	732a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1c88:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1c8a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c8e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c92:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1c96:	4905      	ldr	r1, [pc, #20]	; (1cac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1c98:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1c9a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1c9c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1c9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1ca2:	4903      	ldr	r1, [pc, #12]	; (1cb0 <_isr_wrapper+0x3c>)
	bx r1
    1ca4:	4708      	bx	r1
    1ca6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ca8:	200009ec 	.word	0x200009ec
	ldr r1, =_sw_isr_table
    1cac:	000074c0 	.word	0x000074c0
	ldr r1, =z_arm_int_exit
    1cb0:	00001ed9 	.word	0x00001ed9

00001cb4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1cb4:	bf30      	wfi
    b z_SysNmiOnReset
    1cb6:	f7ff bffd 	b.w	1cb4 <z_SysNmiOnReset>
    1cba:	bf00      	nop

00001cbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1cbc:	4912      	ldr	r1, [pc, #72]	; (1d08 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1cbe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1cc0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1cc4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1cc6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1cca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1cce:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1cd0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1cd4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1cd8:	4f0c      	ldr	r7, [pc, #48]	; (1d0c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1cda:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1cde:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1ce0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1ce2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1ce4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1ce6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1ce8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1cea:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1cee:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1cf0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1cf2:	f000 fae7 	bl	22c4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1cf6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1cfa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1cfe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1d02:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1d06:	4770      	bx	lr
    ldr r1, =_kernel
    1d08:	200009ec 	.word	0x200009ec
    ldr v4, =_SCS_ICSR
    1d0c:	e000ed04 	.word	0xe000ed04

00001d10 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1d10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1d14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1d16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1d1a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1d1e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1d20:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1d24:	2902      	cmp	r1, #2
    beq _oops
    1d26:	d0ff      	beq.n	1d28 <_oops>

00001d28 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1d28:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1d2a:	f005 f8ed 	bl	6f08 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1d2e:	bd01      	pop	{r0, pc}

00001d30 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1d30:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1d32:	2b00      	cmp	r3, #0
    1d34:	db08      	blt.n	1d48 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d36:	2201      	movs	r2, #1
    1d38:	f000 001f 	and.w	r0, r0, #31
    1d3c:	fa02 f000 	lsl.w	r0, r2, r0
    1d40:	095b      	lsrs	r3, r3, #5
    1d42:	4a02      	ldr	r2, [pc, #8]	; (1d4c <arch_irq_enable+0x1c>)
    1d44:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1d48:	4770      	bx	lr
    1d4a:	bf00      	nop
    1d4c:	e000e100 	.word	0xe000e100

00001d50 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1d50:	4b05      	ldr	r3, [pc, #20]	; (1d68 <arch_irq_is_enabled+0x18>)
    1d52:	0942      	lsrs	r2, r0, #5
    1d54:	f000 001f 	and.w	r0, r0, #31
    1d58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1d5c:	2301      	movs	r3, #1
    1d5e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1d62:	4010      	ands	r0, r2
    1d64:	4770      	bx	lr
    1d66:	bf00      	nop
    1d68:	e000e100 	.word	0xe000e100

00001d6c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1d6c:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1d6e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1d70:	2c07      	cmp	r4, #7
{
    1d72:	4605      	mov	r5, r0
    1d74:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1d76:	d90f      	bls.n	1d98 <z_arm_irq_priority_set+0x2c>
    1d78:	4a11      	ldr	r2, [pc, #68]	; (1dc0 <z_arm_irq_priority_set+0x54>)
    1d7a:	4912      	ldr	r1, [pc, #72]	; (1dc4 <z_arm_irq_priority_set+0x58>)
    1d7c:	4812      	ldr	r0, [pc, #72]	; (1dc8 <z_arm_irq_priority_set+0x5c>)
    1d7e:	2359      	movs	r3, #89	; 0x59
    1d80:	f005 f8a4 	bl	6ecc <printk>
    1d84:	4811      	ldr	r0, [pc, #68]	; (1dcc <z_arm_irq_priority_set+0x60>)
    1d86:	4631      	mov	r1, r6
    1d88:	2307      	movs	r3, #7
    1d8a:	462a      	mov	r2, r5
    1d8c:	f005 f89e 	bl	6ecc <printk>
    1d90:	480b      	ldr	r0, [pc, #44]	; (1dc0 <z_arm_irq_priority_set+0x54>)
    1d92:	2159      	movs	r1, #89	; 0x59
    1d94:	f004 ffc6 	bl	6d24 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1d98:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1d9a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d9c:	bfac      	ite	ge
    1d9e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1da2:	4b0b      	ldrlt	r3, [pc, #44]	; (1dd0 <z_arm_irq_priority_set+0x64>)
    1da4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1da8:	bfb8      	it	lt
    1daa:	f005 050f 	andlt.w	r5, r5, #15
    1dae:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1db0:	bfaa      	itet	ge
    1db2:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1db6:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1db8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1dbc:	bd70      	pop	{r4, r5, r6, pc}
    1dbe:	bf00      	nop
    1dc0:	00007ebf 	.word	0x00007ebf
    1dc4:	00007ef5 	.word	0x00007ef5
    1dc8:	0000793c 	.word	0x0000793c
    1dcc:	00007f10 	.word	0x00007f10
    1dd0:	e000ed14 	.word	0xe000ed14

00001dd4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1dd4:	4a0b      	ldr	r2, [pc, #44]	; (1e04 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1dd6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1dd8:	4b0b      	ldr	r3, [pc, #44]	; (1e08 <z_arm_prep_c+0x34>)
    1dda:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1dde:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1de0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1de4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1de8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1dec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1df4:	f002 fc5c 	bl	46b0 <z_bss_zero>
	z_data_copy();
    1df8:	f004 fd86 	bl	6908 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1dfc:	f000 f9f6 	bl	21ec <z_arm_interrupt_init>
	z_cstart();
    1e00:	f002 fc60 	bl	46c4 <z_cstart>
    1e04:	00000000 	.word	0x00000000
    1e08:	e000ed00 	.word	0xe000ed00

00001e0c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1e0c:	4a09      	ldr	r2, [pc, #36]	; (1e34 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1e0e:	490a      	ldr	r1, [pc, #40]	; (1e38 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1e10:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1e12:	6809      	ldr	r1, [r1, #0]
    1e14:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e16:	4909      	ldr	r1, [pc, #36]	; (1e3c <arch_swap+0x30>)
	_current->arch.basepri = key;
    1e18:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e1a:	684b      	ldr	r3, [r1, #4]
    1e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1e20:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1e22:	2300      	movs	r3, #0
    1e24:	f383 8811 	msr	BASEPRI, r3
    1e28:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1e2c:	6893      	ldr	r3, [r2, #8]
}
    1e2e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1e30:	4770      	bx	lr
    1e32:	bf00      	nop
    1e34:	200009ec 	.word	0x200009ec
    1e38:	000077a0 	.word	0x000077a0
    1e3c:	e000ed00 	.word	0xe000ed00

00001e40 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1e40:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1e44:	9b00      	ldr	r3, [sp, #0]
    1e46:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1e4a:	490a      	ldr	r1, [pc, #40]	; (1e74 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1e4c:	9b01      	ldr	r3, [sp, #4]
    1e4e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1e52:	9b02      	ldr	r3, [sp, #8]
    1e54:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1e58:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1e60:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1e64:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1e68:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1e6a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1e6c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1e6e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1e70:	4770      	bx	lr
    1e72:	bf00      	nop
    1e74:	00006ef1 	.word	0x00006ef1

00001e78 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1e78:	4a0b      	ldr	r2, [pc, #44]	; (1ea8 <z_check_thread_stack_fail+0x30>)
{
    1e7a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1e7c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1e7e:	b190      	cbz	r0, 1ea6 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1e80:	f113 0f16 	cmn.w	r3, #22
    1e84:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1e86:	d005      	beq.n	1e94 <z_check_thread_stack_fail+0x1c>
    1e88:	f1a0 0220 	sub.w	r2, r0, #32
    1e8c:	429a      	cmp	r2, r3
    1e8e:	d806      	bhi.n	1e9e <z_check_thread_stack_fail+0x26>
    1e90:	4283      	cmp	r3, r0
    1e92:	d204      	bcs.n	1e9e <z_check_thread_stack_fail+0x26>
    1e94:	4281      	cmp	r1, r0
    1e96:	bf2c      	ite	cs
    1e98:	2100      	movcs	r1, #0
    1e9a:	2101      	movcc	r1, #1
    1e9c:	e000      	b.n	1ea0 <z_check_thread_stack_fail+0x28>
    1e9e:	2100      	movs	r1, #0
    1ea0:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1ea2:	bf08      	it	eq
    1ea4:	2000      	moveq	r0, #0
}
    1ea6:	4770      	bx	lr
    1ea8:	200009ec 	.word	0x200009ec

00001eac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1eac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1eae:	4b09      	ldr	r3, [pc, #36]	; (1ed4 <arch_switch_to_main_thread+0x28>)
    1eb0:	6098      	str	r0, [r3, #8]
{
    1eb2:	460d      	mov	r5, r1
    1eb4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1eb6:	f000 fa05 	bl	22c4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1eba:	4620      	mov	r0, r4
    1ebc:	f385 8809 	msr	PSP, r5
    1ec0:	2100      	movs	r1, #0
    1ec2:	b663      	cpsie	if
    1ec4:	f381 8811 	msr	BASEPRI, r1
    1ec8:	f3bf 8f6f 	isb	sy
    1ecc:	2200      	movs	r2, #0
    1ece:	2300      	movs	r3, #0
    1ed0:	f005 f80e 	bl	6ef0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1ed4:	200009ec 	.word	0x200009ec

00001ed8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1ed8:	4b04      	ldr	r3, [pc, #16]	; (1eec <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1eda:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1edc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1ede:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1ee0:	d003      	beq.n	1eea <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1ee2:	4903      	ldr	r1, [pc, #12]	; (1ef0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ee8:	600a      	str	r2, [r1, #0]

00001eea <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1eea:	4770      	bx	lr
	ldr r3, =_kernel
    1eec:	200009ec 	.word	0x200009ec
	ldr r1, =_SCS_ICSR
    1ef0:	e000ed04 	.word	0xe000ed04

00001ef4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1ef4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1ef8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1efc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1efe:	4672      	mov	r2, lr
	bl z_arm_fault
    1f00:	f000 f8ae 	bl	2060 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1f04:	bd01      	pop	{r0, pc}
    1f06:	bf00      	nop

00001f08 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1f08:	2000      	movs	r0, #0
    msr CONTROL, r0
    1f0a:	f380 8814 	msr	CONTROL, r0
    isb
    1f0e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1f12:	f005 fa63 	bl	73dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1f16:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1f18:	490d      	ldr	r1, [pc, #52]	; (1f50 <__start+0x48>)
    str r0, [r1]
    1f1a:	6008      	str	r0, [r1, #0]
    dsb
    1f1c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f20:	480c      	ldr	r0, [pc, #48]	; (1f54 <__start+0x4c>)
    msr msp, r0
    1f22:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1f26:	f000 f97d 	bl	2224 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1f2a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1f2c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1f30:	4809      	ldr	r0, [pc, #36]	; (1f58 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1f32:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1f36:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1f38:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1f3c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1f40:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1f42:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1f44:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1f48:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1f4c:	f7ff ff42 	bl	1dd4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1f50:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1f54:	20001420 	.word	0x20001420
    ldr r0, =z_interrupt_stacks
    1f58:	200015a0 	.word	0x200015a0

00001f5c <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1f5c:	4b23      	ldr	r3, [pc, #140]	; (1fec <mem_manage_fault+0x90>)
{
    1f5e:	b570      	push	{r4, r5, r6, lr}
    1f60:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1f68:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1f6a:	0790      	lsls	r0, r2, #30
    1f6c:	d51a      	bpl.n	1fa4 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1f6e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f72:	0612      	lsls	r2, r2, #24
    1f74:	d516      	bpl.n	1fa4 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1f76:	b119      	cbz	r1, 1f80 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1f7e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f86:	06d6      	lsls	r6, r2, #27
    1f88:	d40f      	bmi.n	1faa <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f8c:	0799      	lsls	r1, r3, #30
    1f8e:	d40c      	bmi.n	1faa <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f90:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1f92:	4a16      	ldr	r2, [pc, #88]	; (1fec <mem_manage_fault+0x90>)
    1f94:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1f96:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f9a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1f9c:	2300      	movs	r3, #0
    1f9e:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1fa0:	4620      	mov	r0, r4
    1fa2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1fa4:	f06f 0015 	mvn.w	r0, #21
    1fa8:	e7ea      	b.n	1f80 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1faa:	4e10      	ldr	r6, [pc, #64]	; (1fec <mem_manage_fault+0x90>)
    1fac:	6873      	ldr	r3, [r6, #4]
    1fae:	051a      	lsls	r2, r3, #20
    1fb0:	d5ee      	bpl.n	1f90 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1fb2:	4621      	mov	r1, r4
    1fb4:	f7ff ff60 	bl	1e78 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1fb8:	4604      	mov	r4, r0
    1fba:	b118      	cbz	r0, 1fc4 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1fbc:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1fc0:	2402      	movs	r4, #2
    1fc2:	e7e6      	b.n	1f92 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1fc4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1fc6:	06db      	lsls	r3, r3, #27
    1fc8:	d5e2      	bpl.n	1f90 <mem_manage_fault+0x34>
    1fca:	4a09      	ldr	r2, [pc, #36]	; (1ff0 <mem_manage_fault+0x94>)
    1fcc:	4909      	ldr	r1, [pc, #36]	; (1ff4 <mem_manage_fault+0x98>)
    1fce:	480a      	ldr	r0, [pc, #40]	; (1ff8 <mem_manage_fault+0x9c>)
    1fd0:	f240 1349 	movw	r3, #329	; 0x149
    1fd4:	f004 ff7a 	bl	6ecc <printk>
    1fd8:	4808      	ldr	r0, [pc, #32]	; (1ffc <mem_manage_fault+0xa0>)
    1fda:	f004 ff77 	bl	6ecc <printk>
    1fde:	4804      	ldr	r0, [pc, #16]	; (1ff0 <mem_manage_fault+0x94>)
    1fe0:	f240 1149 	movw	r1, #329	; 0x149
    1fe4:	f004 fe9e 	bl	6d24 <assert_post_action>
    1fe8:	e7d3      	b.n	1f92 <mem_manage_fault+0x36>
    1fea:	bf00      	nop
    1fec:	e000ed00 	.word	0xe000ed00
    1ff0:	00007f50 	.word	0x00007f50
    1ff4:	00007f8a 	.word	0x00007f8a
    1ff8:	0000793c 	.word	0x0000793c
    1ffc:	00007fd4 	.word	0x00007fd4

00002000 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2000:	4b0d      	ldr	r3, [pc, #52]	; (2038 <bus_fault.isra.0+0x38>)
    2002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2008:	0592      	lsls	r2, r2, #22
    200a:	d508      	bpl.n	201e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    200c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    200e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2010:	0412      	lsls	r2, r2, #16
    2012:	d504      	bpl.n	201e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2014:	b118      	cbz	r0, 201e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    201c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    201e:	4b06      	ldr	r3, [pc, #24]	; (2038 <bus_fault.isra.0+0x38>)
    2020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2024:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2026:	bf58      	it	pl
    2028:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    202a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    202c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    202e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2032:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2034:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2036:	4770      	bx	lr
    2038:	e000ed00 	.word	0xe000ed00

0000203c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    203c:	4b07      	ldr	r3, [pc, #28]	; (205c <usage_fault.isra.0+0x20>)
    203e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    204a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    204c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2050:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2054:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2056:	2000      	movs	r0, #0
    2058:	4770      	bx	lr
    205a:	bf00      	nop
    205c:	e000ed00 	.word	0xe000ed00

00002060 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2060:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2062:	4b54      	ldr	r3, [pc, #336]	; (21b4 <z_arm_fault+0x154>)
    2064:	685c      	ldr	r4, [r3, #4]
{
    2066:	b08a      	sub	sp, #40	; 0x28
    2068:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    206a:	f3c4 0408 	ubfx	r4, r4, #0, #9
    206e:	2600      	movs	r6, #0
    2070:	f386 8811 	msr	BASEPRI, r6
    2074:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2078:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    207c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2080:	d108      	bne.n	2094 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2082:	f002 030c 	and.w	r3, r2, #12
    2086:	2b08      	cmp	r3, #8
    2088:	d004      	beq.n	2094 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    208a:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    208c:	bf5c      	itt	pl
    208e:	4605      	movpl	r5, r0
			*nested_exc = true;
    2090:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2092:	b97d      	cbnz	r5, 20b4 <z_arm_fault+0x54>
    2094:	4a48      	ldr	r2, [pc, #288]	; (21b8 <z_arm_fault+0x158>)
    2096:	4949      	ldr	r1, [pc, #292]	; (21bc <z_arm_fault+0x15c>)
    2098:	4849      	ldr	r0, [pc, #292]	; (21c0 <z_arm_fault+0x160>)
    209a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    209e:	f004 ff15 	bl	6ecc <printk>
    20a2:	4848      	ldr	r0, [pc, #288]	; (21c4 <z_arm_fault+0x164>)
    20a4:	f004 ff12 	bl	6ecc <printk>
    20a8:	4843      	ldr	r0, [pc, #268]	; (21b8 <z_arm_fault+0x158>)
    20aa:	f240 31f2 	movw	r1, #1010	; 0x3f2
    20ae:	f004 fe39 	bl	6d24 <assert_post_action>
    20b2:	2500      	movs	r5, #0
	*recoverable = false;
    20b4:	2300      	movs	r3, #0
    20b6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    20ba:	1ee3      	subs	r3, r4, #3
    20bc:	2b03      	cmp	r3, #3
    20be:	d872      	bhi.n	21a6 <z_arm_fault+0x146>
    20c0:	e8df f003 	tbb	[pc, r3]
    20c4:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    20c8:	4b3a      	ldr	r3, [pc, #232]	; (21b4 <z_arm_fault+0x154>)
    20ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    20cc:	f014 0402 	ands.w	r4, r4, #2
    20d0:	d169      	bne.n	21a6 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    20d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20d4:	2a00      	cmp	r2, #0
    20d6:	db18      	blt.n	210a <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    20d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    20da:	005b      	lsls	r3, r3, #1
    20dc:	d54e      	bpl.n	217c <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    20de:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    20e0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    20e4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    20e8:	429a      	cmp	r2, r3
    20ea:	d00d      	beq.n	2108 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    20ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    20f0:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    20f4:	781b      	ldrb	r3, [r3, #0]
    20f6:	b30b      	cbz	r3, 213c <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    20f8:	f10d 0207 	add.w	r2, sp, #7
    20fc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    20fe:	4628      	mov	r0, r5
    2100:	f7ff ff2c 	bl	1f5c <mem_manage_fault>
		reason = usage_fault(esf);
    2104:	4604      	mov	r4, r0
		break;
    2106:	e000      	b.n	210a <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2108:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    210a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    210e:	b99b      	cbnz	r3, 2138 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2110:	2220      	movs	r2, #32
    2112:	4629      	mov	r1, r5
    2114:	a802      	add	r0, sp, #8
    2116:	f004 ff2f 	bl	6f78 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    211a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    211c:	2e00      	cmp	r6, #0
    211e:	d044      	beq.n	21aa <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2120:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2124:	b922      	cbnz	r2, 2130 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2126:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    212a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    212e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2130:	a902      	add	r1, sp, #8
    2132:	4620      	mov	r0, r4
    2134:	f004 fee6 	bl	6f04 <z_arm_fatal_error>
}
    2138:	b00a      	add	sp, #40	; 0x28
    213a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    213c:	4b22      	ldr	r3, [pc, #136]	; (21c8 <z_arm_fault+0x168>)
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	b12b      	cbz	r3, 214e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    2142:	f10d 0107 	add.w	r1, sp, #7
    2146:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2148:	f7ff ff5a 	bl	2000 <bus_fault.isra.0>
    214c:	e7da      	b.n	2104 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    214e:	4b1f      	ldr	r3, [pc, #124]	; (21cc <z_arm_fault+0x16c>)
    2150:	881b      	ldrh	r3, [r3, #0]
    2152:	b29b      	uxth	r3, r3
    2154:	b113      	cbz	r3, 215c <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    2156:	f7ff ff71 	bl	203c <usage_fault.isra.0>
    215a:	e7d3      	b.n	2104 <z_arm_fault+0xa4>
			__ASSERT(0,
    215c:	491c      	ldr	r1, [pc, #112]	; (21d0 <z_arm_fault+0x170>)
    215e:	4a16      	ldr	r2, [pc, #88]	; (21b8 <z_arm_fault+0x158>)
    2160:	4817      	ldr	r0, [pc, #92]	; (21c0 <z_arm_fault+0x160>)
    2162:	f240 23c3 	movw	r3, #707	; 0x2c3
    2166:	f004 feb1 	bl	6ecc <printk>
    216a:	481a      	ldr	r0, [pc, #104]	; (21d4 <z_arm_fault+0x174>)
    216c:	f004 feae 	bl	6ecc <printk>
    2170:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    2174:	4810      	ldr	r0, [pc, #64]	; (21b8 <z_arm_fault+0x158>)
    2176:	f004 fdd5 	bl	6d24 <assert_post_action>
    217a:	e7c6      	b.n	210a <z_arm_fault+0xaa>
    217c:	4914      	ldr	r1, [pc, #80]	; (21d0 <z_arm_fault+0x170>)
    217e:	4a0e      	ldr	r2, [pc, #56]	; (21b8 <z_arm_fault+0x158>)
    2180:	480f      	ldr	r0, [pc, #60]	; (21c0 <z_arm_fault+0x160>)
    2182:	f240 23c7 	movw	r3, #711	; 0x2c7
    2186:	f004 fea1 	bl	6ecc <printk>
    218a:	4813      	ldr	r0, [pc, #76]	; (21d8 <z_arm_fault+0x178>)
    218c:	f004 fe9e 	bl	6ecc <printk>
    2190:	f240 21c7 	movw	r1, #711	; 0x2c7
    2194:	e7ee      	b.n	2174 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    2196:	f10d 0207 	add.w	r2, sp, #7
    219a:	2100      	movs	r1, #0
    219c:	e7af      	b.n	20fe <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    219e:	f10d 0107 	add.w	r1, sp, #7
    21a2:	2000      	movs	r0, #0
    21a4:	e7d0      	b.n	2148 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    21a6:	2400      	movs	r4, #0
    21a8:	e7af      	b.n	210a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    21aa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    21ae:	f023 0301 	bic.w	r3, r3, #1
    21b2:	e7bc      	b.n	212e <z_arm_fault+0xce>
    21b4:	e000ed00 	.word	0xe000ed00
    21b8:	00007f50 	.word	0x00007f50
    21bc:	00007ff7 	.word	0x00007ff7
    21c0:	0000793c 	.word	0x0000793c
    21c4:	0000800a 	.word	0x0000800a
    21c8:	e000ed29 	.word	0xe000ed29
    21cc:	e000ed2a 	.word	0xe000ed2a
    21d0:	00007dff 	.word	0x00007dff
    21d4:	00008048 	.word	0x00008048
    21d8:	0000806c 	.word	0x0000806c

000021dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    21dc:	4a02      	ldr	r2, [pc, #8]	; (21e8 <z_arm_fault_init+0xc>)
    21de:	6953      	ldr	r3, [r2, #20]
    21e0:	f043 0310 	orr.w	r3, r3, #16
    21e4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    21e6:	4770      	bx	lr
    21e8:	e000ed00 	.word	0xe000ed00

000021ec <z_arm_interrupt_init>:
    21ec:	4804      	ldr	r0, [pc, #16]	; (2200 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    21ee:	2300      	movs	r3, #0
    21f0:	2120      	movs	r1, #32
    21f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    21f4:	3301      	adds	r3, #1
    21f6:	2b30      	cmp	r3, #48	; 0x30
    21f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    21fc:	d1f9      	bne.n	21f2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    21fe:	4770      	bx	lr
    2200:	e000e100 	.word	0xe000e100

00002204 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2204:	4a06      	ldr	r2, [pc, #24]	; (2220 <z_arm_clear_arm_mpu_config+0x1c>)
    2206:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2208:	2300      	movs	r3, #0
	int num_regions =
    220a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    220e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2210:	428b      	cmp	r3, r1
    2212:	d100      	bne.n	2216 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2214:	4770      	bx	lr
  MPU->RNR = rnr;
    2216:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2218:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    221a:	3301      	adds	r3, #1
    221c:	e7f8      	b.n	2210 <z_arm_clear_arm_mpu_config+0xc>
    221e:	bf00      	nop
    2220:	e000ed90 	.word	0xe000ed90

00002224 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2224:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2226:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2228:	2300      	movs	r3, #0
    222a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    222e:	f7ff ffe9 	bl	2204 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2232:	4b14      	ldr	r3, [pc, #80]	; (2284 <z_arm_init_arch_hw_at_boot+0x60>)
    2234:	f04f 32ff 	mov.w	r2, #4294967295
    2238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    223c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    224c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2250:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2258:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    225c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2260:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2264:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2268:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    226c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2270:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2274:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2278:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    227a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    227e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2282:	bd08      	pop	{r3, pc}
    2284:	e000e100 	.word	0xe000e100

00002288 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2288:	4b06      	ldr	r3, [pc, #24]	; (22a4 <z_impl_k_thread_abort+0x1c>)
    228a:	689b      	ldr	r3, [r3, #8]
    228c:	4283      	cmp	r3, r0
    228e:	d107      	bne.n	22a0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2290:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2294:	b123      	cbz	r3, 22a0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2296:	4a04      	ldr	r2, [pc, #16]	; (22a8 <z_impl_k_thread_abort+0x20>)
    2298:	6853      	ldr	r3, [r2, #4]
    229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    229e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    22a0:	f003 bd76 	b.w	5d90 <z_thread_abort>
    22a4:	200009ec 	.word	0x200009ec
    22a8:	e000ed00 	.word	0xe000ed00

000022ac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    22ac:	4b02      	ldr	r3, [pc, #8]	; (22b8 <z_arm_configure_static_mpu_regions+0xc>)
    22ae:	4a03      	ldr	r2, [pc, #12]	; (22bc <z_arm_configure_static_mpu_regions+0x10>)
    22b0:	4803      	ldr	r0, [pc, #12]	; (22c0 <z_arm_configure_static_mpu_regions+0x14>)
    22b2:	2101      	movs	r1, #1
    22b4:	f000 b868 	b.w	2388 <arm_core_mpu_configure_static_mpu_regions>
    22b8:	20040000 	.word	0x20040000
    22bc:	20000000 	.word	0x20000000
    22c0:	00007694 	.word	0x00007694

000022c4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    22c4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    22c6:	4b05      	ldr	r3, [pc, #20]	; (22dc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    22c8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    22ca:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    22cc:	4a04      	ldr	r2, [pc, #16]	; (22e0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    22ce:	2120      	movs	r1, #32
    22d0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    22d4:	4618      	mov	r0, r3
    22d6:	2101      	movs	r1, #1
    22d8:	f000 b87e 	b.w	23d8 <arm_core_mpu_configure_dynamic_mpu_regions>
    22dc:	20000898 	.word	0x20000898
    22e0:	150b0000 	.word	0x150b0000

000022e4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    22e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    22e6:	4f1e      	ldr	r7, [pc, #120]	; (2360 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    22e8:	2600      	movs	r6, #0
    22ea:	428e      	cmp	r6, r1
    22ec:	db01      	blt.n	22f2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    22ee:	4610      	mov	r0, r2
    22f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    22f2:	6844      	ldr	r4, [r0, #4]
    22f4:	b384      	cbz	r4, 2358 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    22f6:	b153      	cbz	r3, 230e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    22f8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    22fc:	ea14 0f0c 	tst.w	r4, ip
    2300:	d118      	bne.n	2334 <mpu_configure_regions+0x50>
		&&
    2302:	2c1f      	cmp	r4, #31
    2304:	d916      	bls.n	2334 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2306:	6805      	ldr	r5, [r0, #0]
		&&
    2308:	ea1c 0f05 	tst.w	ip, r5
    230c:	d112      	bne.n	2334 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    230e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2310:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2312:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2316:	b2d2      	uxtb	r2, r2
    2318:	d90f      	bls.n	233a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    231a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    231e:	d80e      	bhi.n	233e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2320:	3c01      	subs	r4, #1
    2322:	fab4 f484 	clz	r4, r4
    2326:	f1c4 041f 	rsb	r4, r4, #31
    232a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    232c:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    232e:	ea4c 0404 	orr.w	r4, ip, r4
    2332:	d906      	bls.n	2342 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2334:	f06f 0215 	mvn.w	r2, #21
    2338:	e7d9      	b.n	22ee <mpu_configure_regions+0xa>
		return REGION_32B;
    233a:	2408      	movs	r4, #8
    233c:	e7f6      	b.n	232c <mpu_configure_regions+0x48>
		return REGION_4G;
    233e:	243e      	movs	r4, #62	; 0x3e
    2340:	e7f4      	b.n	232c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2342:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2346:	4315      	orrs	r5, r2
    2348:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    234c:	f044 0401 	orr.w	r4, r4, #1
    2350:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2352:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2354:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2356:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2358:	3601      	adds	r6, #1
    235a:	300c      	adds	r0, #12
    235c:	e7c5      	b.n	22ea <mpu_configure_regions+0x6>
    235e:	bf00      	nop
    2360:	e000ed90 	.word	0xe000ed90

00002364 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2364:	4b03      	ldr	r3, [pc, #12]	; (2374 <arm_core_mpu_enable+0x10>)
    2366:	2205      	movs	r2, #5
    2368:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    236a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    236e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2372:	4770      	bx	lr
    2374:	e000ed90 	.word	0xe000ed90

00002378 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2378:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    237c:	4b01      	ldr	r3, [pc, #4]	; (2384 <arm_core_mpu_disable+0xc>)
    237e:	2200      	movs	r2, #0
    2380:	605a      	str	r2, [r3, #4]
}
    2382:	4770      	bx	lr
    2384:	e000ed90 	.word	0xe000ed90

00002388 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2388:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    238a:	4d0e      	ldr	r5, [pc, #56]	; (23c4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    238c:	2301      	movs	r3, #1
    238e:	782a      	ldrb	r2, [r5, #0]
    2390:	460c      	mov	r4, r1
    2392:	f7ff ffa7 	bl	22e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2396:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2398:	3016      	adds	r0, #22
    239a:	d111      	bne.n	23c0 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    239c:	f240 1311 	movw	r3, #273	; 0x111
    23a0:	4a09      	ldr	r2, [pc, #36]	; (23c8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    23a2:	490a      	ldr	r1, [pc, #40]	; (23cc <arm_core_mpu_configure_static_mpu_regions+0x44>)
    23a4:	480a      	ldr	r0, [pc, #40]	; (23d0 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    23a6:	f004 fd91 	bl	6ecc <printk>
    23aa:	4621      	mov	r1, r4
    23ac:	4809      	ldr	r0, [pc, #36]	; (23d4 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    23ae:	f004 fd8d 	bl	6ecc <printk>
			regions_num);
	}
}
    23b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    23b6:	4804      	ldr	r0, [pc, #16]	; (23c8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    23b8:	f240 1111 	movw	r1, #273	; 0x111
    23bc:	f004 bcb2 	b.w	6d24 <assert_post_action>
}
    23c0:	bd38      	pop	{r3, r4, r5, pc}
    23c2:	bf00      	nop
    23c4:	20000a4c 	.word	0x20000a4c
    23c8:	0000809c 	.word	0x0000809c
    23cc:	00007dff 	.word	0x00007dff
    23d0:	0000793c 	.word	0x0000793c
    23d4:	000080d3 	.word	0x000080d3

000023d8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    23d8:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    23da:	4a12      	ldr	r2, [pc, #72]	; (2424 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    23dc:	2300      	movs	r3, #0
    23de:	7812      	ldrb	r2, [r2, #0]
    23e0:	460c      	mov	r4, r1
    23e2:	f7ff ff7f 	bl	22e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    23e6:	f110 0f16 	cmn.w	r0, #22
    23ea:	d008      	beq.n	23fe <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    23ec:	4b0e      	ldr	r3, [pc, #56]	; (2428 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    23ee:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    23f0:	2807      	cmp	r0, #7
    23f2:	dd00      	ble.n	23f6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    23f4:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    23f6:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    23f8:	611a      	str	r2, [r3, #16]
    23fa:	3001      	adds	r0, #1
    23fc:	e7f8      	b.n	23f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    23fe:	4a0b      	ldr	r2, [pc, #44]	; (242c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2400:	490b      	ldr	r1, [pc, #44]	; (2430 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2402:	480c      	ldr	r0, [pc, #48]	; (2434 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2404:	f44f 7398 	mov.w	r3, #304	; 0x130
    2408:	f004 fd60 	bl	6ecc <printk>
    240c:	4621      	mov	r1, r4
    240e:	480a      	ldr	r0, [pc, #40]	; (2438 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2410:	f004 fd5c 	bl	6ecc <printk>
}
    2414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2418:	4804      	ldr	r0, [pc, #16]	; (242c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    241a:	f44f 7198 	mov.w	r1, #304	; 0x130
    241e:	f004 bc81 	b.w	6d24 <assert_post_action>
    2422:	bf00      	nop
    2424:	20000a4c 	.word	0x20000a4c
    2428:	e000ed90 	.word	0xe000ed90
    242c:	0000809c 	.word	0x0000809c
    2430:	00007dff 	.word	0x00007dff
    2434:	0000793c 	.word	0x0000793c
    2438:	000080ff 	.word	0x000080ff

0000243c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    243c:	4925      	ldr	r1, [pc, #148]	; (24d4 <z_arm_mpu_init+0x98>)
{
    243e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2440:	680c      	ldr	r4, [r1, #0]
    2442:	2c08      	cmp	r4, #8
    2444:	d913      	bls.n	246e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2446:	f44f 73a4 	mov.w	r3, #328	; 0x148
    244a:	4a23      	ldr	r2, [pc, #140]	; (24d8 <z_arm_mpu_init+0x9c>)
    244c:	4923      	ldr	r1, [pc, #140]	; (24dc <z_arm_mpu_init+0xa0>)
    244e:	4824      	ldr	r0, [pc, #144]	; (24e0 <z_arm_mpu_init+0xa4>)
    2450:	f004 fd3c 	bl	6ecc <printk>
    2454:	4823      	ldr	r0, [pc, #140]	; (24e4 <z_arm_mpu_init+0xa8>)
    2456:	2208      	movs	r2, #8
    2458:	4621      	mov	r1, r4
    245a:	f004 fd37 	bl	6ecc <printk>
    245e:	481e      	ldr	r0, [pc, #120]	; (24d8 <z_arm_mpu_init+0x9c>)
    2460:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2464:	f004 fc5e 	bl	6d24 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2468:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    246c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    246e:	f7ff ff83 	bl	2378 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2472:	6848      	ldr	r0, [r1, #4]
    2474:	491c      	ldr	r1, [pc, #112]	; (24e8 <z_arm_mpu_init+0xac>)
    2476:	2200      	movs	r2, #0
    2478:	4294      	cmp	r4, r2
    247a:	f100 000c 	add.w	r0, r0, #12
    247e:	d119      	bne.n	24b4 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    2480:	4b1a      	ldr	r3, [pc, #104]	; (24ec <z_arm_mpu_init+0xb0>)
    2482:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2484:	f7ff ff6e 	bl	2364 <arm_core_mpu_enable>
	__ASSERT(
    2488:	680b      	ldr	r3, [r1, #0]
    248a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    248e:	2b08      	cmp	r3, #8
    2490:	d00e      	beq.n	24b0 <z_arm_mpu_init+0x74>
    2492:	4917      	ldr	r1, [pc, #92]	; (24f0 <z_arm_mpu_init+0xb4>)
    2494:	4a10      	ldr	r2, [pc, #64]	; (24d8 <z_arm_mpu_init+0x9c>)
    2496:	4812      	ldr	r0, [pc, #72]	; (24e0 <z_arm_mpu_init+0xa4>)
    2498:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    249c:	f004 fd16 	bl	6ecc <printk>
    24a0:	4814      	ldr	r0, [pc, #80]	; (24f4 <z_arm_mpu_init+0xb8>)
    24a2:	f004 fd13 	bl	6ecc <printk>
    24a6:	480c      	ldr	r0, [pc, #48]	; (24d8 <z_arm_mpu_init+0x9c>)
    24a8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    24ac:	f004 fc3a 	bl	6d24 <assert_post_action>
	return 0;
    24b0:	2000      	movs	r0, #0
    24b2:	e7db      	b.n	246c <z_arm_mpu_init+0x30>
    24b4:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    24b6:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    24ba:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    24be:	4313      	orrs	r3, r2
    24c0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    24c4:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    24c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    24ca:	f043 0301 	orr.w	r3, r3, #1
    24ce:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    24d0:	3201      	adds	r2, #1
    24d2:	e7d1      	b.n	2478 <z_arm_mpu_init+0x3c>
    24d4:	000076a0 	.word	0x000076a0
    24d8:	0000809c 	.word	0x0000809c
    24dc:	00007dff 	.word	0x00007dff
    24e0:	0000793c 	.word	0x0000793c
    24e4:	0000812c 	.word	0x0000812c
    24e8:	e000ed90 	.word	0xe000ed90
    24ec:	20000a4c 	.word	0x20000a4c
    24f0:	00008160 	.word	0x00008160
    24f4:	000081b0 	.word	0x000081b0

000024f8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    24f8:	4b01      	ldr	r3, [pc, #4]	; (2500 <__stdout_hook_install+0x8>)
    24fa:	6018      	str	r0, [r3, #0]
}
    24fc:	4770      	bx	lr
    24fe:	bf00      	nop
    2500:	20000028 	.word	0x20000028

00002504 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2504:	f04f 0320 	mov.w	r3, #32
    2508:	f3ef 8111 	mrs	r1, BASEPRI
    250c:	f383 8812 	msr	BASEPRI_MAX, r3
    2510:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2514:	4a0f      	ldr	r2, [pc, #60]	; (2554 <nordicsemi_nrf52_init+0x50>)
    2516:	2301      	movs	r3, #1
    2518:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    251c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2520:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2524:	4a0c      	ldr	r2, [pc, #48]	; (2558 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2526:	6812      	ldr	r2, [r2, #0]
    2528:	2a08      	cmp	r2, #8
    252a:	d108      	bne.n	253e <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    252c:	4a0b      	ldr	r2, [pc, #44]	; (255c <nordicsemi_nrf52_init+0x58>)
    252e:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2530:	2a05      	cmp	r2, #5
    2532:	d804      	bhi.n	253e <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2534:	480a      	ldr	r0, [pc, #40]	; (2560 <nordicsemi_nrf52_init+0x5c>)
    2536:	5c82      	ldrb	r2, [r0, r2]
    2538:	b10a      	cbz	r2, 253e <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    253a:	4a0a      	ldr	r2, [pc, #40]	; (2564 <nordicsemi_nrf52_init+0x60>)
    253c:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    253e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2542:	2201      	movs	r2, #1
    2544:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2548:	f381 8811 	msr	BASEPRI, r1
    254c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2550:	2000      	movs	r0, #0
    2552:	4770      	bx	lr
    2554:	4001e000 	.word	0x4001e000
    2558:	10000130 	.word	0x10000130
    255c:	10000134 	.word	0x10000134
    2560:	000081e0 	.word	0x000081e0
    2564:	40000638 	.word	0x40000638

00002568 <sys_arch_reboot>:
    *p_gpregret = val;
    2568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    256c:	b2c0      	uxtb	r0, r0
    256e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2572:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2576:	4905      	ldr	r1, [pc, #20]	; (258c <sys_arch_reboot+0x24>)
    2578:	4b05      	ldr	r3, [pc, #20]	; (2590 <sys_arch_reboot+0x28>)
    257a:	68ca      	ldr	r2, [r1, #12]
    257c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2580:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2582:	60cb      	str	r3, [r1, #12]
    2584:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2588:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    258a:	e7fd      	b.n	2588 <sys_arch_reboot+0x20>
    258c:	e000ed00 	.word	0xe000ed00
    2590:	05fa0004 	.word	0x05fa0004

00002594 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2594:	b120      	cbz	r0, 25a0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2596:	4b03      	ldr	r3, [pc, #12]	; (25a4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2598:	0180      	lsls	r0, r0, #6
    259a:	f043 0301 	orr.w	r3, r3, #1
    259e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    25a0:	4770      	bx	lr
    25a2:	bf00      	nop
    25a4:	00007660 	.word	0x00007660

000025a8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    25a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    25ac:	4c10      	ldr	r4, [pc, #64]	; (25f0 <onoff_start+0x48>)
    25ae:	1b07      	subs	r7, r0, r4
    25b0:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    25b4:	f04f 080c 	mov.w	r8, #12
    25b8:	fb08 f807 	mul.w	r8, r8, r7
{
    25bc:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    25be:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    25c2:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    25c4:	4420      	add	r0, r4
    25c6:	2140      	movs	r1, #64	; 0x40
    25c8:	f004 fd08 	bl	6fdc <set_starting_state>
	if (err < 0) {
    25cc:	1e01      	subs	r1, r0, #0
    25ce:	db09      	blt.n	25e4 <onoff_start+0x3c>
	subdata->cb = cb;
    25d0:	4b08      	ldr	r3, [pc, #32]	; (25f4 <onoff_start+0x4c>)
    25d2:	4444      	add	r4, r8
	subdata->user_data = user_data;
    25d4:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    25d8:	4b07      	ldr	r3, [pc, #28]	; (25f8 <onoff_start+0x50>)
    25da:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    25de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    25e2:	4718      	bx	r3
		notify(mgr, err);
    25e4:	4630      	mov	r0, r6
    25e6:	462b      	mov	r3, r5
}
    25e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    25ec:	4718      	bx	r3
    25ee:	bf00      	nop
    25f0:	200008b4 	.word	0x200008b4
    25f4:	0000703f 	.word	0x0000703f
    25f8:	000076d8 	.word	0x000076d8

000025fc <get_status>:
{
    25fc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25fe:	b2cc      	uxtb	r4, r1
    2600:	2c01      	cmp	r4, #1
{
    2602:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2604:	d909      	bls.n	261a <get_status+0x1e>
    2606:	4909      	ldr	r1, [pc, #36]	; (262c <get_status+0x30>)
    2608:	4809      	ldr	r0, [pc, #36]	; (2630 <get_status+0x34>)
    260a:	4a0a      	ldr	r2, [pc, #40]	; (2634 <get_status+0x38>)
    260c:	2379      	movs	r3, #121	; 0x79
    260e:	f004 fc5d 	bl	6ecc <printk>
    2612:	4808      	ldr	r0, [pc, #32]	; (2634 <get_status+0x38>)
    2614:	2179      	movs	r1, #121	; 0x79
    2616:	f004 fb85 	bl	6d24 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    261a:	692b      	ldr	r3, [r5, #16]
    261c:	210c      	movs	r1, #12
    261e:	fb04 3401 	mla	r4, r4, r1, r3
    2622:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2624:	f000 0007 	and.w	r0, r0, #7
    2628:	bd38      	pop	{r3, r4, r5, pc}
    262a:	bf00      	nop
    262c:	00008223 	.word	0x00008223
    2630:	0000793c 	.word	0x0000793c
    2634:	000081e6 	.word	0x000081e6

00002638 <stop>:
{
    2638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    263a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    263c:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    263e:	6907      	ldr	r7, [r0, #16]
{
    2640:	4605      	mov	r5, r0
    2642:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2644:	d90b      	bls.n	265e <stop+0x26>
    2646:	4918      	ldr	r1, [pc, #96]	; (26a8 <stop+0x70>)
    2648:	4818      	ldr	r0, [pc, #96]	; (26ac <stop+0x74>)
    264a:	4a19      	ldr	r2, [pc, #100]	; (26b0 <stop+0x78>)
    264c:	f240 134d 	movw	r3, #333	; 0x14d
    2650:	f004 fc3c 	bl	6ecc <printk>
    2654:	4816      	ldr	r0, [pc, #88]	; (26b0 <stop+0x78>)
    2656:	f240 114d 	movw	r1, #333	; 0x14d
    265a:	f004 fb63 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    265e:	f04f 0320 	mov.w	r3, #32
    2662:	f3ef 8211 	mrs	r2, BASEPRI
    2666:	f383 8812 	msr	BASEPRI_MAX, r3
    266a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    266e:	230c      	movs	r3, #12
    2670:	fb03 7104 	mla	r1, r3, r4, r7
    2674:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2676:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    267a:	d001      	beq.n	2680 <stop+0x48>
    267c:	428e      	cmp	r6, r1
    267e:	d110      	bne.n	26a2 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2680:	fb03 7304 	mla	r3, r3, r4, r7
    2684:	2101      	movs	r1, #1
    2686:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2688:	2000      	movs	r0, #0
	__asm__ volatile(
    268a:	f382 8811 	msr	BASEPRI, r2
    268e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2692:	b928      	cbnz	r0, 26a0 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2694:	6869      	ldr	r1, [r5, #4]
    2696:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    269a:	6863      	ldr	r3, [r4, #4]
    269c:	4798      	blx	r3
	return 0;
    269e:	2000      	movs	r0, #0
}
    26a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    26a2:	f04f 30ff 	mov.w	r0, #4294967295
    26a6:	e7f0      	b.n	268a <stop+0x52>
    26a8:	00008223 	.word	0x00008223
    26ac:	0000793c 	.word	0x0000793c
    26b0:	000081e6 	.word	0x000081e6

000026b4 <onoff_stop>:
{
    26b4:	b570      	push	{r4, r5, r6, lr}
    26b6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    26b8:	4906      	ldr	r1, [pc, #24]	; (26d4 <onoff_stop+0x20>)
    26ba:	1a41      	subs	r1, r0, r1
{
    26bc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    26be:	1149      	asrs	r1, r1, #5
    26c0:	4805      	ldr	r0, [pc, #20]	; (26d8 <onoff_stop+0x24>)
    26c2:	2240      	movs	r2, #64	; 0x40
    26c4:	f7ff ffb8 	bl	2638 <stop>
	notify(mgr, res);
    26c8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    26ca:	4601      	mov	r1, r0
	notify(mgr, res);
    26cc:	4620      	mov	r0, r4
}
    26ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    26d2:	4718      	bx	r3
    26d4:	200008b4 	.word	0x200008b4
    26d8:	00007448 	.word	0x00007448

000026dc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    26dc:	2200      	movs	r2, #0
{
    26de:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    26e0:	2101      	movs	r1, #1
{
    26e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    26e4:	4610      	mov	r0, r2
    26e6:	f7ff fb41 	bl	1d6c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    26ea:	2000      	movs	r0, #0
    26ec:	f7ff fb20 	bl	1d30 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    26f0:	480f      	ldr	r0, [pc, #60]	; (2730 <clk_init+0x54>)
    26f2:	f001 f853 	bl	379c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    26f6:	4b0f      	ldr	r3, [pc, #60]	; (2734 <clk_init+0x58>)
    26f8:	4298      	cmp	r0, r3
    26fa:	d115      	bne.n	2728 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    26fc:	f001 f872 	bl	37e4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2700:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2702:	490d      	ldr	r1, [pc, #52]	; (2738 <clk_init+0x5c>)
    2704:	4630      	mov	r0, r6
    2706:	f004 fbcc 	bl	6ea2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    270a:	2800      	cmp	r0, #0
    270c:	db0b      	blt.n	2726 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    270e:	2501      	movs	r5, #1
    2710:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    2712:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2714:	4908      	ldr	r1, [pc, #32]	; (2738 <clk_init+0x5c>)
    2716:	f104 0020 	add.w	r0, r4, #32
    271a:	f004 fbc2 	bl	6ea2 <onoff_manager_init>
		if (err < 0) {
    271e:	2800      	cmp	r0, #0
    2720:	db01      	blt.n	2726 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2722:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2724:	2000      	movs	r0, #0
}
    2726:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2728:	f06f 0004 	mvn.w	r0, #4
    272c:	e7fb      	b.n	2726 <clk_init+0x4a>
    272e:	bf00      	nop
    2730:	00002771 	.word	0x00002771
    2734:	0bad0000 	.word	0x0bad0000
    2738:	000076e8 	.word	0x000076e8

0000273c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    273c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    273e:	230c      	movs	r3, #12
    2740:	4809      	ldr	r0, [pc, #36]	; (2768 <clkstarted_handle.constprop.0+0x2c>)
    2742:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2744:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2746:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2748:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    274c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    274e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2750:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2752:	4418      	add	r0, r3
    2754:	f004 fc60 	bl	7018 <set_on_state>
	if (callback) {
    2758:	b12d      	cbz	r5, 2766 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    275a:	4632      	mov	r2, r6
    275c:	462b      	mov	r3, r5
    275e:	4803      	ldr	r0, [pc, #12]	; (276c <clkstarted_handle.constprop.0+0x30>)
}
    2760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2764:	4718      	bx	r3
}
    2766:	bd70      	pop	{r4, r5, r6, pc}
    2768:	200008b4 	.word	0x200008b4
    276c:	00007448 	.word	0x00007448

00002770 <clock_event_handler>:
	switch (event) {
    2770:	2801      	cmp	r0, #1
{
    2772:	b508      	push	{r3, lr}
	switch (event) {
    2774:	d006      	beq.n	2784 <clock_event_handler+0x14>
    2776:	2803      	cmp	r0, #3
    2778:	d008      	beq.n	278c <clock_event_handler+0x1c>
    277a:	b9a8      	cbnz	r0, 27a8 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    277c:	4b10      	ldr	r3, [pc, #64]	; (27c0 <clock_event_handler+0x50>)
    277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2780:	075b      	lsls	r3, r3, #29
    2782:	d11b      	bne.n	27bc <clock_event_handler+0x4c>
}
    2784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2788:	f7ff bfd8 	b.w	273c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    278c:	490d      	ldr	r1, [pc, #52]	; (27c4 <clock_event_handler+0x54>)
    278e:	4a0e      	ldr	r2, [pc, #56]	; (27c8 <clock_event_handler+0x58>)
    2790:	480e      	ldr	r0, [pc, #56]	; (27cc <clock_event_handler+0x5c>)
    2792:	f240 235e 	movw	r3, #606	; 0x25e
    2796:	f004 fb99 	bl	6ecc <printk>
    279a:	f240 215e 	movw	r1, #606	; 0x25e
}
    279e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    27a2:	4809      	ldr	r0, [pc, #36]	; (27c8 <clock_event_handler+0x58>)
    27a4:	f004 babe 	b.w	6d24 <assert_post_action>
    27a8:	4906      	ldr	r1, [pc, #24]	; (27c4 <clock_event_handler+0x54>)
    27aa:	4a07      	ldr	r2, [pc, #28]	; (27c8 <clock_event_handler+0x58>)
    27ac:	4807      	ldr	r0, [pc, #28]	; (27cc <clock_event_handler+0x5c>)
    27ae:	f240 2362 	movw	r3, #610	; 0x262
    27b2:	f004 fb8b 	bl	6ecc <printk>
    27b6:	f240 2162 	movw	r1, #610	; 0x262
    27ba:	e7f0      	b.n	279e <clock_event_handler+0x2e>
}
    27bc:	bd08      	pop	{r3, pc}
    27be:	bf00      	nop
    27c0:	200008b4 	.word	0x200008b4
    27c4:	00007dff 	.word	0x00007dff
    27c8:	000081e6 	.word	0x000081e6
    27cc:	0000793c 	.word	0x0000793c

000027d0 <generic_hfclk_start>:
{
    27d0:	b508      	push	{r3, lr}
	__asm__ volatile(
    27d2:	f04f 0320 	mov.w	r3, #32
    27d6:	f3ef 8111 	mrs	r1, BASEPRI
    27da:	f383 8812 	msr	BASEPRI_MAX, r3
    27de:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    27e2:	4a12      	ldr	r2, [pc, #72]	; (282c <generic_hfclk_start+0x5c>)
    27e4:	6813      	ldr	r3, [r2, #0]
    27e6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    27ea:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    27ee:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    27f0:	d00c      	beq.n	280c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    27f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    27f6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    27fa:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    27fe:	f013 0301 	ands.w	r3, r3, #1
    2802:	d003      	beq.n	280c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2804:	480a      	ldr	r0, [pc, #40]	; (2830 <generic_hfclk_start+0x60>)
    2806:	f004 fc07 	bl	7018 <set_on_state>
			already_started = true;
    280a:	2301      	movs	r3, #1
	__asm__ volatile(
    280c:	f381 8811 	msr	BASEPRI, r1
    2810:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2814:	b123      	cbz	r3, 2820 <generic_hfclk_start+0x50>
}
    2816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    281a:	2000      	movs	r0, #0
    281c:	f7ff bf8e 	b.w	273c <clkstarted_handle.constprop.0>
}
    2820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2824:	2001      	movs	r0, #1
    2826:	f000 bffd 	b.w	3824 <nrfx_clock_start>
    282a:	bf00      	nop
    282c:	2000090c 	.word	0x2000090c
    2830:	200008fc 	.word	0x200008fc

00002834 <generic_hfclk_stop>:
    2834:	4b09      	ldr	r3, [pc, #36]	; (285c <generic_hfclk_stop+0x28>)
    2836:	f3bf 8f5b 	dmb	ish
    283a:	e853 2f00 	ldrex	r2, [r3]
    283e:	f022 0102 	bic.w	r1, r2, #2
    2842:	e843 1000 	strex	r0, r1, [r3]
    2846:	2800      	cmp	r0, #0
    2848:	d1f7      	bne.n	283a <generic_hfclk_stop+0x6>
    284a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    284e:	07d3      	lsls	r3, r2, #31
    2850:	d402      	bmi.n	2858 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2852:	2001      	movs	r0, #1
    2854:	f001 b83a 	b.w	38cc <nrfx_clock_stop>
}
    2858:	4770      	bx	lr
    285a:	bf00      	nop
    285c:	2000090c 	.word	0x2000090c

00002860 <api_blocking_start>:
{
    2860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2862:	2200      	movs	r2, #0
    2864:	2301      	movs	r3, #1
    2866:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    286a:	4a09      	ldr	r2, [pc, #36]	; (2890 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    286c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2870:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2872:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2876:	f004 fbf4 	bl	7062 <api_start>
	if (err < 0) {
    287a:	2800      	cmp	r0, #0
    287c:	db05      	blt.n	288a <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    287e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2882:	2300      	movs	r3, #0
    2884:	4668      	mov	r0, sp
    2886:	f003 fb75 	bl	5f74 <z_impl_k_sem_take>
}
    288a:	b005      	add	sp, #20
    288c:	f85d fb04 	ldr.w	pc, [sp], #4
    2890:	0000705d 	.word	0x0000705d

00002894 <z_nrf_clock_control_lf_on>:
{
    2894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2898:	4949      	ldr	r1, [pc, #292]	; (29c0 <z_nrf_clock_control_lf_on+0x12c>)
    289a:	f3bf 8f5b 	dmb	ish
    289e:	4605      	mov	r5, r0
    28a0:	2201      	movs	r2, #1
    28a2:	e851 3f00 	ldrex	r3, [r1]
    28a6:	e841 2000 	strex	r0, r2, [r1]
    28aa:	2800      	cmp	r0, #0
    28ac:	d1f9      	bne.n	28a2 <z_nrf_clock_control_lf_on+0xe>
    28ae:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    28b2:	b9a3      	cbnz	r3, 28de <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    28b4:	4943      	ldr	r1, [pc, #268]	; (29c4 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    28b6:	4844      	ldr	r0, [pc, #272]	; (29c8 <z_nrf_clock_control_lf_on+0x134>)
    28b8:	604b      	str	r3, [r1, #4]
    28ba:	60cb      	str	r3, [r1, #12]
    28bc:	608a      	str	r2, [r1, #8]
    28be:	f7fe ffad 	bl	181c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    28c2:	2800      	cmp	r0, #0
    28c4:	da0b      	bge.n	28de <z_nrf_clock_control_lf_on+0x4a>
    28c6:	4941      	ldr	r1, [pc, #260]	; (29cc <z_nrf_clock_control_lf_on+0x138>)
    28c8:	4841      	ldr	r0, [pc, #260]	; (29d0 <z_nrf_clock_control_lf_on+0x13c>)
    28ca:	4a42      	ldr	r2, [pc, #264]	; (29d4 <z_nrf_clock_control_lf_on+0x140>)
    28cc:	f44f 7308 	mov.w	r3, #544	; 0x220
    28d0:	f004 fafc 	bl	6ecc <printk>
    28d4:	483f      	ldr	r0, [pc, #252]	; (29d4 <z_nrf_clock_control_lf_on+0x140>)
    28d6:	f44f 7108 	mov.w	r1, #544	; 0x220
    28da:	f004 fa23 	bl	6d24 <assert_post_action>
	switch (start_mode) {
    28de:	b3ad      	cbz	r5, 294c <z_nrf_clock_control_lf_on+0xb8>
    28e0:	1e6b      	subs	r3, r5, #1
    28e2:	2b01      	cmp	r3, #1
    28e4:	d856      	bhi.n	2994 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    28e6:	2d01      	cmp	r5, #1
    28e8:	d107      	bne.n	28fa <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    28ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28ee:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    28f2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    28f6:	2b01      	cmp	r3, #1
    28f8:	d028      	beq.n	294c <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28fa:	f004 fd60 	bl	73be <k_is_in_isr>
    28fe:	4604      	mov	r4, r0
    2900:	b918      	cbnz	r0, 290a <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    2902:	4b35      	ldr	r3, [pc, #212]	; (29d8 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	2b00      	cmp	r3, #0
    2908:	d152      	bne.n	29b0 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    290a:	f04f 0320 	mov.w	r3, #32
    290e:	f3ef 8611 	mrs	r6, BASEPRI
    2912:	f383 8812 	msr	BASEPRI_MAX, r3
    2916:	f3bf 8f6f 	isb	sy
    291a:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    291c:	4f2f      	ldr	r7, [pc, #188]	; (29dc <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    291e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 29e4 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2922:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 29e8 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    292a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    292e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2932:	03d2      	lsls	r2, r2, #15
    2934:	d50c      	bpl.n	2950 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2936:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    293a:	2b01      	cmp	r3, #1
    293c:	d001      	beq.n	2942 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    293e:	2d01      	cmp	r5, #1
    2940:	d106      	bne.n	2950 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    2942:	b30c      	cbz	r4, 2988 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    2944:	f386 8811 	msr	BASEPRI, r6
    2948:	f3bf 8f6f 	isb	sy
}
    294c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2950:	b1ac      	cbz	r4, 297e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2952:	4630      	mov	r0, r6
    2954:	f7ff f984 	bl	1c60 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    295c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2960:	2b00      	cmp	r3, #0
    2962:	d1e0      	bne.n	2926 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2964:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2966:	2900      	cmp	r1, #0
    2968:	d0dd      	beq.n	2926 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    296a:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    296c:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    296e:	2301      	movs	r3, #1
    2970:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2974:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2978:	f8c9 3000 	str.w	r3, [r9]
}
    297c:	e7d3      	b.n	2926 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    297e:	2100      	movs	r1, #0
    2980:	2021      	movs	r0, #33	; 0x21
    2982:	f003 f9c7 	bl	5d14 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2986:	e7e7      	b.n	2958 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    2988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    298c:	2202      	movs	r2, #2
    298e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2992:	e7db      	b.n	294c <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2994:	4912      	ldr	r1, [pc, #72]	; (29e0 <z_nrf_clock_control_lf_on+0x14c>)
    2996:	480e      	ldr	r0, [pc, #56]	; (29d0 <z_nrf_clock_control_lf_on+0x13c>)
    2998:	4a0e      	ldr	r2, [pc, #56]	; (29d4 <z_nrf_clock_control_lf_on+0x140>)
    299a:	f240 2332 	movw	r3, #562	; 0x232
    299e:	f004 fa95 	bl	6ecc <printk>
}
    29a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    29a6:	480b      	ldr	r0, [pc, #44]	; (29d4 <z_nrf_clock_control_lf_on+0x140>)
    29a8:	f240 2132 	movw	r1, #562	; 0x232
    29ac:	f004 b9ba 	b.w	6d24 <assert_post_action>
    p_reg->INTENCLR = mask;
    29b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29b4:	2202      	movs	r2, #2
    29b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    29ba:	4606      	mov	r6, r0
}
    29bc:	e7ae      	b.n	291c <z_nrf_clock_control_lf_on+0x88>
    29be:	bf00      	nop
    29c0:	20000910 	.word	0x20000910
    29c4:	200008a4 	.word	0x200008a4
    29c8:	200008d4 	.word	0x200008d4
    29cc:	00008247 	.word	0x00008247
    29d0:	0000793c 	.word	0x0000793c
    29d4:	000081e6 	.word	0x000081e6
    29d8:	20000e5d 	.word	0x20000e5d
    29dc:	40000104 	.word	0x40000104
    29e0:	00007dff 	.word	0x00007dff
    29e4:	e000e100 	.word	0xe000e100
    29e8:	40000008 	.word	0x40000008

000029ec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    29ec:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    29ee:	4b08      	ldr	r3, [pc, #32]	; (2a10 <uart_console_init+0x24>)
    29f0:	4808      	ldr	r0, [pc, #32]	; (2a14 <uart_console_init+0x28>)
    29f2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    29f4:	f004 fc8f 	bl	7316 <z_device_ready>
    29f8:	b138      	cbz	r0, 2a0a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    29fa:	4807      	ldr	r0, [pc, #28]	; (2a18 <uart_console_init+0x2c>)
    29fc:	f7ff fd7c 	bl	24f8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2a00:	4805      	ldr	r0, [pc, #20]	; (2a18 <uart_console_init+0x2c>)
    2a02:	f7ff f8f1 	bl	1be8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2a06:	2000      	movs	r0, #0
}
    2a08:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2a0a:	f06f 0012 	mvn.w	r0, #18
    2a0e:	e7fb      	b.n	2a08 <uart_console_init+0x1c>
    2a10:	20000914 	.word	0x20000914
    2a14:	000074a8 	.word	0x000074a8
    2a18:	00002a1d 	.word	0x00002a1d

00002a1c <console_out>:
	if ('\n' == c) {
    2a1c:	280a      	cmp	r0, #10
{
    2a1e:	b538      	push	{r3, r4, r5, lr}
    2a20:	4d07      	ldr	r5, [pc, #28]	; (2a40 <console_out+0x24>)
    2a22:	4604      	mov	r4, r0
	if ('\n' == c) {
    2a24:	d104      	bne.n	2a30 <console_out+0x14>
    2a26:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2a28:	6883      	ldr	r3, [r0, #8]
    2a2a:	210d      	movs	r1, #13
    2a2c:	685b      	ldr	r3, [r3, #4]
    2a2e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2a30:	6828      	ldr	r0, [r5, #0]
    2a32:	6883      	ldr	r3, [r0, #8]
    2a34:	b2e1      	uxtb	r1, r4
    2a36:	685b      	ldr	r3, [r3, #4]
    2a38:	4798      	blx	r3
}
    2a3a:	4620      	mov	r0, r4
    2a3c:	bd38      	pop	{r3, r4, r5, pc}
    2a3e:	bf00      	nop
    2a40:	20000914 	.word	0x20000914

00002a44 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2a44:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2a46:	6905      	ldr	r5, [r0, #16]
{
    2a48:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2a4a:	460c      	mov	r4, r1
    2a4c:	b961      	cbnz	r1, 2a68 <gpio_nrfx_manage_callback+0x24>
    2a4e:	4922      	ldr	r1, [pc, #136]	; (2ad8 <gpio_nrfx_manage_callback+0x94>)
    2a50:	4a22      	ldr	r2, [pc, #136]	; (2adc <gpio_nrfx_manage_callback+0x98>)
    2a52:	4823      	ldr	r0, [pc, #140]	; (2ae0 <gpio_nrfx_manage_callback+0x9c>)
    2a54:	2324      	movs	r3, #36	; 0x24
    2a56:	f004 fa39 	bl	6ecc <printk>
    2a5a:	4822      	ldr	r0, [pc, #136]	; (2ae4 <gpio_nrfx_manage_callback+0xa0>)
    2a5c:	f004 fa36 	bl	6ecc <printk>
    2a60:	481e      	ldr	r0, [pc, #120]	; (2adc <gpio_nrfx_manage_callback+0x98>)
    2a62:	2124      	movs	r1, #36	; 0x24
    2a64:	f004 f95e 	bl	6d24 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2a68:	6863      	ldr	r3, [r4, #4]
    2a6a:	b963      	cbnz	r3, 2a86 <gpio_nrfx_manage_callback+0x42>
    2a6c:	491e      	ldr	r1, [pc, #120]	; (2ae8 <gpio_nrfx_manage_callback+0xa4>)
    2a6e:	4a1b      	ldr	r2, [pc, #108]	; (2adc <gpio_nrfx_manage_callback+0x98>)
    2a70:	481b      	ldr	r0, [pc, #108]	; (2ae0 <gpio_nrfx_manage_callback+0x9c>)
    2a72:	2325      	movs	r3, #37	; 0x25
    2a74:	f004 fa2a 	bl	6ecc <printk>
    2a78:	481c      	ldr	r0, [pc, #112]	; (2aec <gpio_nrfx_manage_callback+0xa8>)
    2a7a:	f004 fa27 	bl	6ecc <printk>
    2a7e:	4817      	ldr	r0, [pc, #92]	; (2adc <gpio_nrfx_manage_callback+0x98>)
    2a80:	2125      	movs	r1, #37	; 0x25
    2a82:	f004 f94f 	bl	6d24 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2a86:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2a88:	b15b      	cbz	r3, 2aa2 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a8a:	2200      	movs	r2, #0
    2a8c:	429c      	cmp	r4, r3
    2a8e:	d113      	bne.n	2ab8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2a90:	6823      	ldr	r3, [r4, #0]
    2a92:	b95a      	cbnz	r2, 2aac <gpio_nrfx_manage_callback+0x68>
    2a94:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2a96:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2a98:	4294      	cmp	r4, r2
    2a9a:	d100      	bne.n	2a9e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2a9c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2a9e:	2300      	movs	r3, #0
    2aa0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2aa2:	b976      	cbnz	r6, 2ac2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2aa4:	2000      	movs	r0, #0
				     callback, set);
}
    2aa6:	bd70      	pop	{r4, r5, r6, pc}
    2aa8:	460b      	mov	r3, r1
    2aaa:	e7ef      	b.n	2a8c <gpio_nrfx_manage_callback+0x48>
    2aac:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2aae:	68ab      	ldr	r3, [r5, #8]
    2ab0:	429c      	cmp	r4, r3
	list->tail = node;
    2ab2:	bf08      	it	eq
    2ab4:	60aa      	streq	r2, [r5, #8]
}
    2ab6:	e7f2      	b.n	2a9e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2ab8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2aba:	461a      	mov	r2, r3
    2abc:	2900      	cmp	r1, #0
    2abe:	d1f3      	bne.n	2aa8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2ac0:	b13e      	cbz	r6, 2ad2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2ac2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2ac4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2ac6:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2ac8:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    2aca:	2800      	cmp	r0, #0
    2acc:	d1ea      	bne.n	2aa4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2ace:	60ac      	str	r4, [r5, #8]
}
    2ad0:	e7e9      	b.n	2aa6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2ad2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2ad6:	e7e6      	b.n	2aa6 <gpio_nrfx_manage_callback+0x62>
    2ad8:	00008283 	.word	0x00008283
    2adc:	00008256 	.word	0x00008256
    2ae0:	0000793c 	.word	0x0000793c
    2ae4:	0000828c 	.word	0x0000828c
    2ae8:	0000829b 	.word	0x0000829b
    2aec:	000082ad 	.word	0x000082ad

00002af0 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2af0:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2af6:	d003      	beq.n	2b00 <nrfx_gpio_handler+0x10>
    2af8:	2b01      	cmp	r3, #1
    2afa:	d036      	beq.n	2b6a <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b00:	4f1b      	ldr	r7, [pc, #108]	; (2b70 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b02:	693b      	ldr	r3, [r7, #16]
    2b04:	685c      	ldr	r4, [r3, #4]
    2b06:	2c00      	cmp	r4, #0
    2b08:	d0f8      	beq.n	2afc <nrfx_gpio_handler+0xc>
    2b0a:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    2b0c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2b7c <nrfx_gpio_handler+0x8c>
    2b10:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2b80 <nrfx_gpio_handler+0x90>
    2b14:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2b84 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2b18:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2b1c:	2601      	movs	r6, #1
    2b1e:	2d00      	cmp	r5, #0
    2b20:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    2b24:	bf38      	it	cc
    2b26:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2b28:	68a3      	ldr	r3, [r4, #8]
    2b2a:	421e      	tst	r6, r3
    2b2c:	d014      	beq.n	2b58 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    2b2e:	6863      	ldr	r3, [r4, #4]
    2b30:	b963      	cbnz	r3, 2b4c <nrfx_gpio_handler+0x5c>
    2b32:	4649      	mov	r1, r9
    2b34:	2345      	movs	r3, #69	; 0x45
    2b36:	4642      	mov	r2, r8
    2b38:	4650      	mov	r0, sl
    2b3a:	f004 f9c7 	bl	6ecc <printk>
    2b3e:	480d      	ldr	r0, [pc, #52]	; (2b74 <nrfx_gpio_handler+0x84>)
    2b40:	f004 f9c4 	bl	6ecc <printk>
    2b44:	2145      	movs	r1, #69	; 0x45
    2b46:	4640      	mov	r0, r8
    2b48:	f004 f8ec 	bl	6d24 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2b4c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2b50:	4621      	mov	r1, r4
    2b52:	4032      	ands	r2, r6
    2b54:	4638      	mov	r0, r7
    2b56:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b58:	2d00      	cmp	r5, #0
    2b5a:	d0cf      	beq.n	2afc <nrfx_gpio_handler+0xc>
    2b5c:	682b      	ldr	r3, [r5, #0]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	bf38      	it	cc
    2b62:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2b64:	462c      	mov	r4, r5
    2b66:	461d      	mov	r5, r3
    2b68:	e7de      	b.n	2b28 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b6a:	4f03      	ldr	r7, [pc, #12]	; (2b78 <nrfx_gpio_handler+0x88>)
    2b6c:	e7c9      	b.n	2b02 <nrfx_gpio_handler+0x12>
    2b6e:	bf00      	nop
    2b70:	00007460 	.word	0x00007460
    2b74:	000082ad 	.word	0x000082ad
    2b78:	00007478 	.word	0x00007478
    2b7c:	00008256 	.word	0x00008256
    2b80:	000082c4 	.word	0x000082c4
    2b84:	0000793c 	.word	0x0000793c

00002b88 <gpio_nrfx_pin_interrupt_configure>:
{
    2b88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b8a:	6840      	ldr	r0, [r0, #4]
    2b8c:	7b05      	ldrb	r5, [r0, #12]
    2b8e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b92:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b96:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b9a:	f04f 0500 	mov.w	r5, #0
    2b9e:	d104      	bne.n	2baa <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2ba0:	4620      	mov	r0, r4
    2ba2:	f001 fa2b 	bl	3ffc <nrfx_gpiote_trigger_disable>
	return 0;
    2ba6:	2000      	movs	r0, #0
    2ba8:	e054      	b.n	2c54 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2baa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2bae:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2bb2:	d151      	bne.n	2c58 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2bb8:	bf0c      	ite	eq
    2bba:	2304      	moveq	r3, #4
    2bbc:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2bbe:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2bc2:	6883      	ldr	r3, [r0, #8]
    2bc4:	fa23 f101 	lsr.w	r1, r3, r1
    2bc8:	f011 0101 	ands.w	r1, r1, #1
    2bcc:	d155      	bne.n	2c7a <gpio_nrfx_pin_interrupt_configure+0xf2>
    2bce:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2bd2:	d152      	bne.n	2c7a <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    2bd4:	0966      	lsrs	r6, r4, #5
    2bd6:	d04a      	beq.n	2c6e <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    2bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bdc:	2e01      	cmp	r6, #1
    2bde:	bf08      	it	eq
    2be0:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    2be2:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2be6:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2be8:	07ca      	lsls	r2, r1, #31
    2bea:	d40b      	bmi.n	2c04 <gpio_nrfx_pin_interrupt_configure+0x7c>
    2bec:	492b      	ldr	r1, [pc, #172]	; (2c9c <gpio_nrfx_pin_interrupt_configure+0x114>)
    2bee:	482c      	ldr	r0, [pc, #176]	; (2ca0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2bf0:	4a2c      	ldr	r2, [pc, #176]	; (2ca4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2bf2:	f240 2329 	movw	r3, #553	; 0x229
    2bf6:	f004 f969 	bl	6ecc <printk>
    2bfa:	482a      	ldr	r0, [pc, #168]	; (2ca4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2bfc:	f240 2129 	movw	r1, #553	; 0x229
    2c00:	f004 f890 	bl	6d24 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c04:	b16e      	cbz	r6, 2c22 <gpio_nrfx_pin_interrupt_configure+0x9a>
    2c06:	2e01      	cmp	r6, #1
    2c08:	d034      	beq.n	2c74 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    2c0a:	4927      	ldr	r1, [pc, #156]	; (2ca8 <gpio_nrfx_pin_interrupt_configure+0x120>)
    2c0c:	4824      	ldr	r0, [pc, #144]	; (2ca0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2c0e:	4a25      	ldr	r2, [pc, #148]	; (2ca4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2c10:	f240 232e 	movw	r3, #558	; 0x22e
    2c14:	f004 f95a 	bl	6ecc <printk>
    2c18:	4822      	ldr	r0, [pc, #136]	; (2ca4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2c1a:	f240 212e 	movw	r1, #558	; 0x22e
    2c1e:	f004 f881 	bl	6d24 <assert_post_action>
        case 0: return NRF_P0;
    2c22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2c26:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2c2a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2c2e:	07db      	lsls	r3, r3, #31
    2c30:	d423      	bmi.n	2c7a <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2c32:	f10d 0507 	add.w	r5, sp, #7
    2c36:	4629      	mov	r1, r5
    2c38:	4620      	mov	r0, r4
    2c3a:	f001 f909 	bl	3e50 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2c3e:	4b1b      	ldr	r3, [pc, #108]	; (2cac <gpio_nrfx_pin_interrupt_configure+0x124>)
    2c40:	4298      	cmp	r0, r3
    2c42:	d119      	bne.n	2c78 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    2c44:	4628      	mov	r0, r5
    2c46:	f001 f963 	bl	3f10 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2c4a:	4b19      	ldr	r3, [pc, #100]	; (2cb0 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2c4c:	4298      	cmp	r0, r3
    2c4e:	d013      	beq.n	2c78 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    2c50:	f06f 000b 	mvn.w	r0, #11
}
    2c54:	b004      	add	sp, #16
    2c56:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2c58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2c5c:	d005      	beq.n	2c6a <gpio_nrfx_pin_interrupt_configure+0xe2>
    2c5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2c62:	bf0c      	ite	eq
    2c64:	2302      	moveq	r3, #2
    2c66:	2301      	movne	r3, #1
    2c68:	e7a9      	b.n	2bbe <gpio_nrfx_pin_interrupt_configure+0x36>
    2c6a:	2303      	movs	r3, #3
    2c6c:	e7a7      	b.n	2bbe <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    2c6e:	f04f 31ff 	mov.w	r1, #4294967295
    2c72:	e7b6      	b.n	2be2 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c74:	4b0f      	ldr	r3, [pc, #60]	; (2cb4 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    2c76:	e7d6      	b.n	2c26 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    2c78:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2c7a:	2300      	movs	r3, #0
    2c7c:	4619      	mov	r1, r3
    2c7e:	aa02      	add	r2, sp, #8
    2c80:	4620      	mov	r0, r4
    2c82:	f000 ffc7 	bl	3c14 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2c86:	4b0a      	ldr	r3, [pc, #40]	; (2cb0 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2c88:	4298      	cmp	r0, r3
    2c8a:	d104      	bne.n	2c96 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2c8c:	2101      	movs	r1, #1
    2c8e:	4620      	mov	r0, r4
    2c90:	f001 f944 	bl	3f1c <nrfx_gpiote_trigger_enable>
    2c94:	e787      	b.n	2ba6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    2c96:	f06f 0004 	mvn.w	r0, #4
    2c9a:	e7db      	b.n	2c54 <gpio_nrfx_pin_interrupt_configure+0xcc>
    2c9c:	00008303 	.word	0x00008303
    2ca0:	0000793c 	.word	0x0000793c
    2ca4:	000082d0 	.word	0x000082d0
    2ca8:	00007dff 	.word	0x00007dff
    2cac:	0bad0004 	.word	0x0bad0004
    2cb0:	0bad0000 	.word	0x0bad0000
    2cb4:	50000300 	.word	0x50000300

00002cb8 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2cb8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2cba:	f001 f919 	bl	3ef0 <nrfx_gpiote_is_init>
    2cbe:	4604      	mov	r4, r0
    2cc0:	b968      	cbnz	r0, 2cde <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2cc2:	f001 f8ed 	bl	3ea0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2cc6:	4b08      	ldr	r3, [pc, #32]	; (2ce8 <gpio_nrfx_init+0x30>)
    2cc8:	4298      	cmp	r0, r3
    2cca:	d10a      	bne.n	2ce2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2ccc:	4807      	ldr	r0, [pc, #28]	; (2cec <gpio_nrfx_init+0x34>)
    2cce:	4621      	mov	r1, r4
    2cd0:	f001 f8b8 	bl	3e44 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2cd4:	4622      	mov	r2, r4
    2cd6:	2105      	movs	r1, #5
    2cd8:	2006      	movs	r0, #6
    2cda:	f7ff f847 	bl	1d6c <z_arm_irq_priority_set>
		return 0;
    2cde:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2ce0:	bd10      	pop	{r4, pc}
		return -EIO;
    2ce2:	f06f 0004 	mvn.w	r0, #4
    2ce6:	e7fb      	b.n	2ce0 <gpio_nrfx_init+0x28>
    2ce8:	0bad0000 	.word	0x0bad0000
    2cec:	00002af1 	.word	0x00002af1

00002cf0 <gpio_nrfx_pin_configure>:
{
    2cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2cf4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2cf6:	7b3b      	ldrb	r3, [r7, #12]
    2cf8:	f001 051f 	and.w	r5, r1, #31
{
    2cfc:	b085      	sub	sp, #20
    2cfe:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2d00:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2d04:	4614      	mov	r4, r2
    2d06:	b9ca      	cbnz	r2, 2d3c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2d08:	a902      	add	r1, sp, #8
    2d0a:	4628      	mov	r0, r5
    2d0c:	f001 f8a0 	bl	3e50 <nrfx_gpiote_channel_get>
    2d10:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2d12:	4628      	mov	r0, r5
    2d14:	f001 f994 	bl	4040 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2d18:	4b48      	ldr	r3, [pc, #288]	; (2e3c <gpio_nrfx_pin_configure+0x14c>)
    2d1a:	4298      	cmp	r0, r3
    2d1c:	d004      	beq.n	2d28 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2d1e:	f06f 0004 	mvn.w	r0, #4
}
    2d22:	b005      	add	sp, #20
    2d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2d28:	4284      	cmp	r4, r0
    2d2a:	d105      	bne.n	2d38 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2d2c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2d30:	f001 f8e8 	bl	3f04 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2d34:	42a0      	cmp	r0, r4
    2d36:	d1f2      	bne.n	2d1e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2d38:	2000      	movs	r0, #0
    2d3a:	e7f2      	b.n	2d22 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2d3c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2d40:	f10d 0103 	add.w	r1, sp, #3
    2d44:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2d46:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2d4a:	f001 f881 	bl	3e50 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2d4e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2d50:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2d52:	aa02      	add	r2, sp, #8
    2d54:	4649      	mov	r1, r9
    2d56:	4628      	mov	r0, r5
    2d58:	f000 ff5c 	bl	3c14 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d5c:	4b37      	ldr	r3, [pc, #220]	; (2e3c <gpio_nrfx_pin_configure+0x14c>)
    2d5e:	4298      	cmp	r0, r3
    2d60:	d002      	beq.n	2d68 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d62:	f06f 0015 	mvn.w	r0, #21
    2d66:	e7dc      	b.n	2d22 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2d68:	4580      	cmp	r8, r0
    2d6a:	d103      	bne.n	2d74 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2d6c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2d70:	f001 f8c8 	bl	3f04 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2d74:	05a3      	lsls	r3, r4, #22
    2d76:	d54e      	bpl.n	2e16 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d78:	4b31      	ldr	r3, [pc, #196]	; (2e40 <gpio_nrfx_pin_configure+0x150>)
    2d7a:	4a32      	ldr	r2, [pc, #200]	; (2e44 <gpio_nrfx_pin_configure+0x154>)
    2d7c:	4023      	ands	r3, r4
    2d7e:	4293      	cmp	r3, r2
    2d80:	d03a      	beq.n	2df8 <gpio_nrfx_pin_configure+0x108>
    2d82:	d80c      	bhi.n	2d9e <gpio_nrfx_pin_configure+0xae>
    2d84:	2b06      	cmp	r3, #6
    2d86:	d014      	beq.n	2db2 <gpio_nrfx_pin_configure+0xc2>
    2d88:	d804      	bhi.n	2d94 <gpio_nrfx_pin_configure+0xa4>
    2d8a:	b193      	cbz	r3, 2db2 <gpio_nrfx_pin_configure+0xc2>
    2d8c:	2b02      	cmp	r3, #2
    2d8e:	d1e8      	bne.n	2d62 <gpio_nrfx_pin_configure+0x72>
    2d90:	2304      	movs	r3, #4
    2d92:	e00e      	b.n	2db2 <gpio_nrfx_pin_configure+0xc2>
    2d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2d98:	d1e3      	bne.n	2d62 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2d9a:	2301      	movs	r3, #1
    2d9c:	e009      	b.n	2db2 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d9e:	4a2a      	ldr	r2, [pc, #168]	; (2e48 <gpio_nrfx_pin_configure+0x158>)
    2da0:	4293      	cmp	r3, r2
    2da2:	d02b      	beq.n	2dfc <gpio_nrfx_pin_configure+0x10c>
    2da4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2da8:	d02a      	beq.n	2e00 <gpio_nrfx_pin_configure+0x110>
    2daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2dae:	d1d8      	bne.n	2d62 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2db0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2db2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2db6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2dba:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2dbe:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2dc0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2dc4:	bf54      	ite	pl
    2dc6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2dca:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2dcc:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2dce:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2dd2:	d517      	bpl.n	2e04 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	2101      	movs	r1, #1
    2dd8:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2ddc:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2de0:	2200      	movs	r2, #0
    2de2:	a901      	add	r1, sp, #4
    2de4:	4628      	mov	r0, r5
    2de6:	f000 ffbd 	bl	3d64 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2dea:	4b14      	ldr	r3, [pc, #80]	; (2e3c <gpio_nrfx_pin_configure+0x14c>)
    2dec:	4298      	cmp	r0, r3
    2dee:	bf14      	ite	ne
    2df0:	f06f 0015 	mvnne.w	r0, #21
    2df4:	2000      	moveq	r0, #0
    2df6:	e794      	b.n	2d22 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2df8:	2307      	movs	r3, #7
    2dfa:	e7da      	b.n	2db2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2dfc:	2305      	movs	r3, #5
    2dfe:	e7d8      	b.n	2db2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2e00:	2303      	movs	r3, #3
    2e02:	e7d6      	b.n	2db2 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2e04:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2e06:	bf41      	itttt	mi
    2e08:	687b      	ldrmi	r3, [r7, #4]
    2e0a:	2101      	movmi	r1, #1
    2e0c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2e10:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2e14:	e7e4      	b.n	2de0 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2e16:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2e18:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2e1c:	bf54      	ite	pl
    2e1e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2e22:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2e24:	461a      	mov	r2, r3
    2e26:	a901      	add	r1, sp, #4
    2e28:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2e2a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2e2e:	f000 fef1 	bl	3c14 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2e32:	4b02      	ldr	r3, [pc, #8]	; (2e3c <gpio_nrfx_pin_configure+0x14c>)
    2e34:	4298      	cmp	r0, r3
    2e36:	f43f af7f 	beq.w	2d38 <gpio_nrfx_pin_configure+0x48>
    2e3a:	e792      	b.n	2d62 <gpio_nrfx_pin_configure+0x72>
    2e3c:	0bad0000 	.word	0x0bad0000
    2e40:	00f00006 	.word	0x00f00006
    2e44:	00100006 	.word	0x00100006
    2e48:	00400002 	.word	0x00400002

00002e4c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2e4e:	794b      	ldrb	r3, [r1, #5]
    2e50:	2b01      	cmp	r3, #1
    2e52:	d026      	beq.n	2ea2 <uarte_nrfx_configure+0x56>
    2e54:	2b03      	cmp	r3, #3
    2e56:	d121      	bne.n	2e9c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2e58:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2e5a:	798b      	ldrb	r3, [r1, #6]
    2e5c:	2b03      	cmp	r3, #3
    2e5e:	d11d      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2e60:	79cc      	ldrb	r4, [r1, #7]
    2e62:	b10c      	cbz	r4, 2e68 <uarte_nrfx_configure+0x1c>
    2e64:	2c01      	cmp	r4, #1
    2e66:	d119      	bne.n	2e9c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2e68:	790a      	ldrb	r2, [r1, #4]
    2e6a:	b112      	cbz	r2, 2e72 <uarte_nrfx_configure+0x26>
    2e6c:	2a02      	cmp	r2, #2
    2e6e:	d115      	bne.n	2e9c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2e70:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2e72:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2e74:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2e76:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2e7a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2e7c:	d065      	beq.n	2f4a <uarte_nrfx_configure+0xfe>
    2e7e:	d82d      	bhi.n	2edc <uarte_nrfx_configure+0x90>
    2e80:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2e84:	d064      	beq.n	2f50 <uarte_nrfx_configure+0x104>
    2e86:	d816      	bhi.n	2eb6 <uarte_nrfx_configure+0x6a>
    2e88:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2e8c:	d062      	beq.n	2f54 <uarte_nrfx_configure+0x108>
    2e8e:	d80a      	bhi.n	2ea6 <uarte_nrfx_configure+0x5a>
    2e90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2e94:	d061      	beq.n	2f5a <uarte_nrfx_configure+0x10e>
    2e96:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2e9a:	d061      	beq.n	2f60 <uarte_nrfx_configure+0x114>
    2e9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2ea0:	e052      	b.n	2f48 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2ea2:	2600      	movs	r6, #0
    2ea4:	e7d9      	b.n	2e5a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2ea6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2eaa:	d05c      	beq.n	2f66 <uarte_nrfx_configure+0x11a>
    2eac:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2eb0:	d1f4      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2eb2:	4b37      	ldr	r3, [pc, #220]	; (2f90 <uarte_nrfx_configure+0x144>)
    2eb4:	e03c      	b.n	2f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2eb6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2eba:	d057      	beq.n	2f6c <uarte_nrfx_configure+0x120>
    2ebc:	d807      	bhi.n	2ece <uarte_nrfx_configure+0x82>
    2ebe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2ec2:	d055      	beq.n	2f70 <uarte_nrfx_configure+0x124>
    2ec4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2ec8:	d1e8      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2eca:	4b32      	ldr	r3, [pc, #200]	; (2f94 <uarte_nrfx_configure+0x148>)
    2ecc:	e030      	b.n	2f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ece:	f647 2712 	movw	r7, #31250	; 0x7a12
    2ed2:	42bb      	cmp	r3, r7
    2ed4:	d1e2      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2ed6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2eda:	e029      	b.n	2f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2edc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2ee0:	d048      	beq.n	2f74 <uarte_nrfx_configure+0x128>
    2ee2:	d813      	bhi.n	2f0c <uarte_nrfx_configure+0xc0>
    2ee4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2ee8:	d047      	beq.n	2f7a <uarte_nrfx_configure+0x12e>
    2eea:	d809      	bhi.n	2f00 <uarte_nrfx_configure+0xb4>
    2eec:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2ef0:	42bb      	cmp	r3, r7
    2ef2:	d044      	beq.n	2f7e <uarte_nrfx_configure+0x132>
    2ef4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2ef8:	d1d0      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2efa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2efe:	e017      	b.n	2f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f00:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f04:	d1ca      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2f06:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2f0a:	e011      	b.n	2f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f0c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2f10:	d038      	beq.n	2f84 <uarte_nrfx_configure+0x138>
    2f12:	d808      	bhi.n	2f26 <uarte_nrfx_configure+0xda>
    2f14:	4f20      	ldr	r7, [pc, #128]	; (2f98 <uarte_nrfx_configure+0x14c>)
    2f16:	42bb      	cmp	r3, r7
    2f18:	d037      	beq.n	2f8a <uarte_nrfx_configure+0x13e>
    2f1a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2f1e:	d1bd      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2f20:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2f24:	e004      	b.n	2f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f26:	4f1d      	ldr	r7, [pc, #116]	; (2f9c <uarte_nrfx_configure+0x150>)
    2f28:	42bb      	cmp	r3, r7
    2f2a:	d1b7      	bne.n	2e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2f2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2f30:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2f34:	6903      	ldr	r3, [r0, #16]
    2f36:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2f38:	4334      	orrs	r4, r6
    2f3a:	4322      	orrs	r2, r4
    2f3c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2f3e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2f42:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2f46:	2000      	movs	r0, #0
}
    2f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2f4a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2f4e:	e7ef      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2f50:	4b13      	ldr	r3, [pc, #76]	; (2fa0 <uarte_nrfx_configure+0x154>)
    2f52:	e7ed      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2f54:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2f58:	e7ea      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2f5a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2f5e:	e7e7      	b.n	2f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f60:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2f64:	e7e4      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2f66:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2f6a:	e7e1      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2f6c:	4b0d      	ldr	r3, [pc, #52]	; (2fa4 <uarte_nrfx_configure+0x158>)
    2f6e:	e7df      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2f70:	4b0d      	ldr	r3, [pc, #52]	; (2fa8 <uarte_nrfx_configure+0x15c>)
    2f72:	e7dd      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2f74:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2f78:	e7da      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2f7a:	4b0c      	ldr	r3, [pc, #48]	; (2fac <uarte_nrfx_configure+0x160>)
    2f7c:	e7d8      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2f7e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2f82:	e7d5      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2f84:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2f88:	e7d2      	b.n	2f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2f8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2f8e:	e7cf      	b.n	2f30 <uarte_nrfx_configure+0xe4>
    2f90:	0013b000 	.word	0x0013b000
    2f94:	004ea000 	.word	0x004ea000
    2f98:	0003d090 	.word	0x0003d090
    2f9c:	000f4240 	.word	0x000f4240
    2fa0:	00275000 	.word	0x00275000
    2fa4:	0075c000 	.word	0x0075c000
    2fa8:	003af000 	.word	0x003af000
    2fac:	013a9000 	.word	0x013a9000

00002fb0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2fb0:	6802      	ldr	r2, [r0, #0]
    switch (port)
    2fb2:	0953      	lsrs	r3, r2, #5
{
    2fb4:	b510      	push	{r4, lr}
    2fb6:	4604      	mov	r4, r0
    switch (port)
    2fb8:	d02c      	beq.n	3014 <nrf_gpio_pin_port_decode+0x64>
    2fba:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2fc0:	bf18      	it	ne
    2fc2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    2fc4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2fc8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2fca:	07db      	lsls	r3, r3, #31
    2fcc:	d40b      	bmi.n	2fe6 <nrf_gpio_pin_port_decode+0x36>
    2fce:	4914      	ldr	r1, [pc, #80]	; (3020 <nrf_gpio_pin_port_decode+0x70>)
    2fd0:	4814      	ldr	r0, [pc, #80]	; (3024 <nrf_gpio_pin_port_decode+0x74>)
    2fd2:	4a15      	ldr	r2, [pc, #84]	; (3028 <nrf_gpio_pin_port_decode+0x78>)
    2fd4:	f240 2329 	movw	r3, #553	; 0x229
    2fd8:	f003 ff78 	bl	6ecc <printk>
    2fdc:	4812      	ldr	r0, [pc, #72]	; (3028 <nrf_gpio_pin_port_decode+0x78>)
    2fde:	f240 2129 	movw	r1, #553	; 0x229
    2fe2:	f003 fe9f 	bl	6d24 <assert_post_action>
    uint32_t pin_number = *p_pin;
    2fe6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2fe8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2fec:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2fee:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ff0:	d00d      	beq.n	300e <nrf_gpio_pin_port_decode+0x5e>
    2ff2:	2b01      	cmp	r3, #1
    2ff4:	d011      	beq.n	301a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    2ff6:	490d      	ldr	r1, [pc, #52]	; (302c <nrf_gpio_pin_port_decode+0x7c>)
    2ff8:	480a      	ldr	r0, [pc, #40]	; (3024 <nrf_gpio_pin_port_decode+0x74>)
    2ffa:	4a0b      	ldr	r2, [pc, #44]	; (3028 <nrf_gpio_pin_port_decode+0x78>)
    2ffc:	f240 232e 	movw	r3, #558	; 0x22e
    3000:	f003 ff64 	bl	6ecc <printk>
    3004:	4808      	ldr	r0, [pc, #32]	; (3028 <nrf_gpio_pin_port_decode+0x78>)
    3006:	f240 212e 	movw	r1, #558	; 0x22e
    300a:	f003 fe8b 	bl	6d24 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    300e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3012:	bd10      	pop	{r4, pc}
    switch (port)
    3014:	f04f 33ff 	mov.w	r3, #4294967295
    3018:	e7d4      	b.n	2fc4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    301a:	4805      	ldr	r0, [pc, #20]	; (3030 <nrf_gpio_pin_port_decode+0x80>)
    301c:	e7f9      	b.n	3012 <nrf_gpio_pin_port_decode+0x62>
    301e:	bf00      	nop
    3020:	00008303 	.word	0x00008303
    3024:	0000793c 	.word	0x0000793c
    3028:	000082d0 	.word	0x000082d0
    302c:	00007dff 	.word	0x00007dff
    3030:	50000300 	.word	0x50000300

00003034 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3036:	6906      	ldr	r6, [r0, #16]
{
    3038:	4605      	mov	r5, r0
    303a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    303c:	f004 f9bf 	bl	73be <k_is_in_isr>
    3040:	b910      	cbnz	r0, 3048 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3042:	4b2c      	ldr	r3, [pc, #176]	; (30f4 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	b983      	cbnz	r3, 306a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3048:	f04f 0320 	mov.w	r3, #32
    304c:	f3ef 8411 	mrs	r4, BASEPRI
    3050:	f383 8812 	msr	BASEPRI_MAX, r3
    3054:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3058:	4628      	mov	r0, r5
    305a:	f004 f88d 	bl	7178 <is_tx_ready>
    305e:	bb28      	cbnz	r0, 30ac <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3060:	f384 8811 	msr	BASEPRI, r4
    3064:	f3bf 8f6f 	isb	sy
}
    3068:	e7ee      	b.n	3048 <uarte_nrfx_poll_out+0x14>
{
    306a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    306c:	4628      	mov	r0, r5
    306e:	f004 f883 	bl	7178 <is_tx_ready>
    3072:	b970      	cbnz	r0, 3092 <uarte_nrfx_poll_out+0x5e>
    3074:	2001      	movs	r0, #1
    3076:	f004 f8d5 	bl	7224 <nrfx_busy_wait>
    307a:	3c01      	subs	r4, #1
    307c:	d1f6      	bne.n	306c <uarte_nrfx_poll_out+0x38>
    307e:	2100      	movs	r1, #0
    3080:	2021      	movs	r0, #33	; 0x21
    3082:	f002 fe47 	bl	5d14 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3086:	e7f0      	b.n	306a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3088:	f384 8811 	msr	BASEPRI, r4
    308c:	f3bf 8f6f 	isb	sy
}
    3090:	e7f5      	b.n	307e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3092:	f04f 0320 	mov.w	r3, #32
    3096:	f3ef 8411 	mrs	r4, BASEPRI
    309a:	f383 8812 	msr	BASEPRI_MAX, r3
    309e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    30a2:	4628      	mov	r0, r5
    30a4:	f004 f868 	bl	7178 <is_tx_ready>
    30a8:	2800      	cmp	r0, #0
    30aa:	d0ed      	beq.n	3088 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    30ac:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    30b0:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    30b2:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    30b4:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    30b6:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    30ba:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30be:	2200      	movs	r2, #0
    30c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    30c4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    30c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    30cc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    30d0:	684a      	ldr	r2, [r1, #4]
    30d2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    30d4:	bf41      	itttt	mi
    30d6:	2208      	movmi	r2, #8
    30d8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    30dc:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    30e0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30e4:	2201      	movs	r2, #1
    30e6:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    30e8:	f384 8811 	msr	BASEPRI, r4
    30ec:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    30f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30f2:	bf00      	nop
    30f4:	20000e5d 	.word	0x20000e5d

000030f8 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    30f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    30fc:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3100:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    3102:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3106:	2300      	movs	r3, #0
    3108:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    310c:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    310e:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3110:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    3112:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3114:	1c58      	adds	r0, r3, #1
    3116:	d013      	beq.n	3140 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3118:	a801      	add	r0, sp, #4
    311a:	9301      	str	r3, [sp, #4]
    311c:	f7ff ff48 	bl	2fb0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3120:	9a01      	ldr	r2, [sp, #4]
    3122:	2301      	movs	r3, #1
    3124:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3126:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    312a:	68eb      	ldr	r3, [r5, #12]
    312c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    312e:	a801      	add	r0, sp, #4
    3130:	f7ff ff3e 	bl	2fb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3134:	9b01      	ldr	r3, [sp, #4]
    3136:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    313a:	2203      	movs	r2, #3
    313c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3140:	692b      	ldr	r3, [r5, #16]
    3142:	1c59      	adds	r1, r3, #1
    3144:	d011      	beq.n	316a <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3146:	7f2a      	ldrb	r2, [r5, #28]
    3148:	9301      	str	r3, [sp, #4]
    314a:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    314c:	a801      	add	r0, sp, #4
    314e:	bf14      	ite	ne
    3150:	f04f 0903 	movne.w	r9, #3
    3154:	f04f 0900 	moveq.w	r9, #0
    3158:	f7ff ff2a 	bl	2fb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    315c:	9b01      	ldr	r3, [sp, #4]
    315e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3162:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3166:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    316a:	696b      	ldr	r3, [r5, #20]
    316c:	1c5a      	adds	r2, r3, #1
    316e:	d013      	beq.n	3198 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3170:	a801      	add	r0, sp, #4
    3172:	9301      	str	r3, [sp, #4]
    3174:	f7ff ff1c 	bl	2fb0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3178:	9a01      	ldr	r2, [sp, #4]
    317a:	2301      	movs	r3, #1
    317c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    317e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3182:	696b      	ldr	r3, [r5, #20]
    3184:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3186:	a801      	add	r0, sp, #4
    3188:	f7ff ff12 	bl	2fb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    318c:	9b01      	ldr	r3, [sp, #4]
    318e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3192:	2203      	movs	r2, #3
    3194:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3198:	69ab      	ldr	r3, [r5, #24]
    319a:	1c58      	adds	r0, r3, #1
    319c:	d011      	beq.n	31c2 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    319e:	7f6a      	ldrb	r2, [r5, #29]
    31a0:	9301      	str	r3, [sp, #4]
    31a2:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31a4:	a801      	add	r0, sp, #4
    31a6:	bf14      	ite	ne
    31a8:	f04f 0903 	movne.w	r9, #3
    31ac:	f04f 0900 	moveq.w	r9, #0
    31b0:	f7ff fefe 	bl	2fb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    31b4:	9b01      	ldr	r3, [sp, #4]
    31b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    31ba:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    31be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    31c2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    31c6:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    31c8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    31cc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    31d0:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    31d4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    31d8:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    31da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    31de:	3104      	adds	r1, #4
    31e0:	4630      	mov	r0, r6
    31e2:	f7ff fe33 	bl	2e4c <uarte_nrfx_configure>
	if (err) {
    31e6:	4605      	mov	r5, r0
    31e8:	2800      	cmp	r0, #0
    31ea:	d146      	bne.n	327a <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    31ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    31f0:	0799      	lsls	r1, r3, #30
    31f2:	d519      	bpl.n	3228 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    31f4:	f107 0012 	add.w	r0, r7, #18
    31f8:	f001 f820 	bl	423c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    31fc:	4b22      	ldr	r3, [pc, #136]	; (3288 <uarte_instance_init.isra.0+0x190>)
    31fe:	4298      	cmp	r0, r3
    3200:	d13f      	bne.n	3282 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3202:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3204:	00c3      	lsls	r3, r0, #3
    3206:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    320a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    320e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3212:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3216:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    321a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    321e:	4a1b      	ldr	r2, [pc, #108]	; (328c <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3220:	2301      	movs	r3, #1
    3222:	4083      	lsls	r3, r0
    3224:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3228:	2308      	movs	r3, #8
    322a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    322e:	f898 3008 	ldrb.w	r3, [r8, #8]
    3232:	b95b      	cbnz	r3, 324c <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3234:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3238:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    323c:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3240:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3244:	2301      	movs	r3, #1
    3246:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    324a:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    324c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3250:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3252:	bf5c      	itt	pl
    3254:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3258:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    325c:	06db      	lsls	r3, r3, #27
    325e:	bf44      	itt	mi
    3260:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3264:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3268:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    326a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    326c:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3270:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3274:	2301      	movs	r3, #1
    3276:	60a3      	str	r3, [r4, #8]
    3278:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    327a:	4628      	mov	r0, r5
    327c:	b003      	add	sp, #12
    327e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3282:	f06f 0504 	mvn.w	r5, #4
    3286:	e7f8      	b.n	327a <uarte_instance_init.isra.0+0x182>
    3288:	0bad0000 	.word	0x0bad0000
    328c:	4001f000 	.word	0x4001f000

00003290 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3290:	4919      	ldr	r1, [pc, #100]	; (32f8 <sys_clock_timeout_handler+0x68>)
{
    3292:	b570      	push	{r4, r5, r6, lr}
    3294:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3296:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    329a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    329c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    32a0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32a4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    32a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    32aa:	f04f 0500 	mov.w	r5, #0
    32ae:	d20a      	bcs.n	32c6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    32b0:	4b12      	ldr	r3, [pc, #72]	; (32fc <sys_clock_timeout_handler+0x6c>)
    32b2:	6819      	ldr	r1, [r3, #0]
    32b4:	060a      	lsls	r2, r1, #24
    32b6:	0a0b      	lsrs	r3, r1, #8
    32b8:	1992      	adds	r2, r2, r6
    32ba:	4911      	ldr	r1, [pc, #68]	; (3300 <sys_clock_timeout_handler+0x70>)
    32bc:	f143 0300 	adc.w	r3, r3, #0
    32c0:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    32c4:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    32c6:	f003 fa03 	bl	66d0 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    32ca:	00a3      	lsls	r3, r4, #2
    32cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32d0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    32d4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    32d8:	42b2      	cmp	r2, r6
    32da:	d10b      	bne.n	32f4 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    32dc:	b91d      	cbnz	r5, 32e6 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    32de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    32e2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    32e6:	4b07      	ldr	r3, [pc, #28]	; (3304 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    32e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    32ec:	fa00 f404 	lsl.w	r4, r0, r4
    32f0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    32f4:	bd70      	pop	{r4, r5, r6, pc}
    32f6:	bf00      	nop
    32f8:	200001c0 	.word	0x200001c0
    32fc:	20000938 	.word	0x20000938
    3300:	200001a8 	.word	0x200001a8
    3304:	40011000 	.word	0x40011000

00003308 <compare_int_lock>:
{
    3308:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    330a:	2301      	movs	r3, #1
    330c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    330e:	4a11      	ldr	r2, [pc, #68]	; (3354 <compare_int_lock+0x4c>)
    3310:	f3bf 8f5b 	dmb	ish
    3314:	43dc      	mvns	r4, r3
    3316:	e852 1f00 	ldrex	r1, [r2]
    331a:	ea01 0c04 	and.w	ip, r1, r4
    331e:	e842 ce00 	strex	lr, ip, [r2]
    3322:	f1be 0f00 	cmp.w	lr, #0
    3326:	d1f6      	bne.n	3316 <compare_int_lock+0xe>
    3328:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    332c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3330:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3334:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3338:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    333c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3340:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3344:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    3348:	420b      	tst	r3, r1
}
    334a:	bf14      	ite	ne
    334c:	2001      	movne	r0, #1
    334e:	2000      	moveq	r0, #0
    3350:	bd10      	pop	{r4, pc}
    3352:	bf00      	nop
    3354:	20000934 	.word	0x20000934

00003358 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    3358:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    335a:	4a12      	ldr	r2, [pc, #72]	; (33a4 <compare_int_unlock.part.0+0x4c>)
    335c:	f3bf 8f5b 	dmb	ish
    3360:	4083      	lsls	r3, r0
    3362:	e852 1f00 	ldrex	r1, [r2]
    3366:	4319      	orrs	r1, r3
    3368:	e842 1c00 	strex	ip, r1, [r2]
    336c:	f1bc 0f00 	cmp.w	ip, #0
    3370:	d1f7      	bne.n	3362 <compare_int_unlock.part.0+0xa>
    3372:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3376:	4a0c      	ldr	r2, [pc, #48]	; (33a8 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    337c:	4083      	lsls	r3, r0
    337e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3382:	4b0a      	ldr	r3, [pc, #40]	; (33ac <compare_int_unlock.part.0+0x54>)
    3384:	f3bf 8f5b 	dmb	ish
    3388:	681b      	ldr	r3, [r3, #0]
    338a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    338e:	fa23 f000 	lsr.w	r0, r3, r0
    3392:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3394:	bf42      	ittt	mi
    3396:	4b06      	ldrmi	r3, [pc, #24]	; (33b0 <compare_int_unlock.part.0+0x58>)
    3398:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    339c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    33a0:	4770      	bx	lr
    33a2:	bf00      	nop
    33a4:	20000934 	.word	0x20000934
    33a8:	40011000 	.word	0x40011000
    33ac:	20000930 	.word	0x20000930
    33b0:	e000e100 	.word	0xe000e100

000033b4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    33b4:	4b0d      	ldr	r3, [pc, #52]	; (33ec <z_nrf_rtc_timer_read+0x38>)
    33b6:	681b      	ldr	r3, [r3, #0]
    33b8:	0a19      	lsrs	r1, r3, #8
    33ba:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    33bc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    33c0:	4b0b      	ldr	r3, [pc, #44]	; (33f0 <z_nrf_rtc_timer_read+0x3c>)
    33c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    33c6:	18c0      	adds	r0, r0, r3
    33c8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    33cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    33d0:	d20a      	bcs.n	33e8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    33d2:	4b08      	ldr	r3, [pc, #32]	; (33f4 <z_nrf_rtc_timer_read+0x40>)
    33d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    33d8:	4299      	cmp	r1, r3
    33da:	bf08      	it	eq
    33dc:	4290      	cmpeq	r0, r2
    33de:	d203      	bcs.n	33e8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    33e0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    33e4:	f141 0100 	adc.w	r1, r1, #0
}
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop
    33ec:	20000938 	.word	0x20000938
    33f0:	40011000 	.word	0x40011000
    33f4:	200001a8 	.word	0x200001a8

000033f8 <compare_set>:
{
    33f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33fc:	b085      	sub	sp, #20
    33fe:	4616      	mov	r6, r2
    3400:	461f      	mov	r7, r3
    3402:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3404:	f7ff ff80 	bl	3308 <compare_int_lock>
    3408:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    340a:	f7ff ffd3 	bl	33b4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    340e:	42b9      	cmp	r1, r7
    3410:	bf08      	it	eq
    3412:	42b0      	cmpeq	r0, r6
    3414:	d27f      	bcs.n	3516 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    3416:	ebb6 0800 	subs.w	r8, r6, r0
    341a:	eb67 0901 	sbc.w	r9, r7, r1
    341e:	2300      	movs	r3, #0
    3420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3424:	454b      	cmp	r3, r9
    3426:	bf08      	it	eq
    3428:	4542      	cmpeq	r2, r8
    342a:	f0c0 8085 	bcc.w	3538 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    342e:	4b44      	ldr	r3, [pc, #272]	; (3540 <compare_set+0x148>)
    3430:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3434:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3438:	429f      	cmp	r7, r3
    343a:	bf08      	it	eq
    343c:	4296      	cmpeq	r6, r2
    343e:	d054      	beq.n	34ea <compare_set+0xf2>
    3440:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3444:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    3448:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    344c:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3450:	fa0b f205 	lsl.w	r2, fp, r5
    3454:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3458:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    345c:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3460:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    3462:	4a38      	ldr	r2, [pc, #224]	; (3544 <compare_set+0x14c>)
    return p_reg->CC[ch];
    3464:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    3468:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    346c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3470:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3474:	461c      	mov	r4, r3
    3476:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3478:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    347c:	eba0 000a 	sub.w	r0, r0, sl
    3480:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3484:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3488:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    348a:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    348e:	d105      	bne.n	349c <compare_set+0xa4>
    3490:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3492:	2013      	movs	r0, #19
    3494:	f003 ff9d 	bl	73d2 <z_impl_k_busy_wait>
    3498:	4a2a      	ldr	r2, [pc, #168]	; (3544 <compare_set+0x14c>)
    349a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    349c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    349e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    34a2:	eba4 000c 	sub.w	r0, r4, ip
    34a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    34aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    34ae:	bf88      	it	hi
    34b0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34b2:	2000      	movs	r0, #0
    34b4:	f8c8 0000 	str.w	r0, [r8]
    34b8:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    34bc:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    34c0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    34c4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    34c8:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    34cc:	4582      	cmp	sl, r0
    34ce:	d006      	beq.n	34de <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    34d0:	1a20      	subs	r0, r4, r0
    34d2:	3802      	subs	r0, #2
    34d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    34d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    34dc:	d819      	bhi.n	3512 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    34de:	1ae4      	subs	r4, r4, r3
    34e0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    34e4:	1932      	adds	r2, r6, r4
    34e6:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    34ea:	4c15      	ldr	r4, [pc, #84]	; (3540 <compare_set+0x148>)
    34ec:	0129      	lsls	r1, r5, #4
    34ee:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    34f2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    34f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    34f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    34fa:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    34fc:	6043      	str	r3, [r0, #4]
	return ret;
    34fe:	2400      	movs	r4, #0
	if (key) {
    3500:	9b01      	ldr	r3, [sp, #4]
    3502:	b113      	cbz	r3, 350a <compare_set+0x112>
    3504:	4628      	mov	r0, r5
    3506:	f7ff ff27 	bl	3358 <compare_int_unlock.part.0>
}
    350a:	4620      	mov	r0, r4
    350c:	b005      	add	sp, #20
    350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3512:	4620      	mov	r0, r4
    3514:	e7b0      	b.n	3478 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    3516:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3518:	4a0b      	ldr	r2, [pc, #44]	; (3548 <compare_set+0x150>)
    351a:	f3bf 8f5b 	dmb	ish
    351e:	40ab      	lsls	r3, r5
    3520:	e852 1f00 	ldrex	r1, [r2]
    3524:	4319      	orrs	r1, r3
    3526:	e842 1000 	strex	r0, r1, [r2]
    352a:	2800      	cmp	r0, #0
    352c:	d1f8      	bne.n	3520 <compare_set+0x128>
    352e:	f3bf 8f5b 	dmb	ish
    3532:	4632      	mov	r2, r6
    3534:	463b      	mov	r3, r7
    3536:	e7d8      	b.n	34ea <compare_set+0xf2>
			return -EINVAL;
    3538:	f06f 0415 	mvn.w	r4, #21
    353c:	e7e0      	b.n	3500 <compare_set+0x108>
    353e:	bf00      	nop
    3540:	200001b0 	.word	0x200001b0
    3544:	40011000 	.word	0x40011000
    3548:	20000930 	.word	0x20000930

0000354c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    354c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    354e:	4b19      	ldr	r3, [pc, #100]	; (35b4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3550:	4d19      	ldr	r5, [pc, #100]	; (35b8 <sys_clock_driver_init+0x6c>)
    3552:	2400      	movs	r4, #0
    3554:	f04f 30ff 	mov.w	r0, #4294967295
    3558:	f04f 31ff 	mov.w	r1, #4294967295
    355c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3560:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3568:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    356c:	4b13      	ldr	r3, [pc, #76]	; (35bc <sys_clock_driver_init+0x70>)
    356e:	2602      	movs	r6, #2
    3570:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3574:	2101      	movs	r1, #1
    3576:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    357a:	2011      	movs	r0, #17
    357c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3580:	4622      	mov	r2, r4
    3582:	f7fe fbf3 	bl	1d6c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3586:	2011      	movs	r0, #17
    3588:	f7fe fbd2 	bl	1d30 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    358c:	4a0c      	ldr	r2, [pc, #48]	; (35c0 <sys_clock_driver_init+0x74>)
    358e:	2301      	movs	r3, #1
    3590:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3592:	4a0c      	ldr	r2, [pc, #48]	; (35c4 <sys_clock_driver_init+0x78>)
    3594:	602b      	str	r3, [r5, #0]
    3596:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3598:	4b0b      	ldr	r3, [pc, #44]	; (35c8 <sys_clock_driver_init+0x7c>)
    359a:	4a0c      	ldr	r2, [pc, #48]	; (35cc <sys_clock_driver_init+0x80>)
    359c:	9300      	str	r3, [sp, #0]
    359e:	9401      	str	r4, [sp, #4]
    35a0:	2300      	movs	r3, #0
    35a2:	4620      	mov	r0, r4
    35a4:	f7ff ff28 	bl	33f8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    35a8:	4630      	mov	r0, r6
    35aa:	f7ff f973 	bl	2894 <z_nrf_clock_control_lf_on>

	return 0;
}
    35ae:	4620      	mov	r0, r4
    35b0:	b002      	add	sp, #8
    35b2:	bd70      	pop	{r4, r5, r6, pc}
    35b4:	200001b0 	.word	0x200001b0
    35b8:	40011000 	.word	0x40011000
    35bc:	e000e100 	.word	0xe000e100
    35c0:	40011008 	.word	0x40011008
    35c4:	20000934 	.word	0x20000934
    35c8:	00003291 	.word	0x00003291
    35cc:	007fffff 	.word	0x007fffff

000035d0 <rtc_nrf_isr>:
{
    35d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    35d4:	4c34      	ldr	r4, [pc, #208]	; (36a8 <rtc_nrf_isr+0xd8>)
    35d6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    35da:	079a      	lsls	r2, r3, #30
    35dc:	d509      	bpl.n	35f2 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35de:	4b33      	ldr	r3, [pc, #204]	; (36ac <rtc_nrf_isr+0xdc>)
    35e0:	681a      	ldr	r2, [r3, #0]
    35e2:	b132      	cbz	r2, 35f2 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35e4:	2200      	movs	r2, #0
    35e6:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    35e8:	4a31      	ldr	r2, [pc, #196]	; (36b0 <rtc_nrf_isr+0xe0>)
    35ea:	681b      	ldr	r3, [r3, #0]
    35ec:	6813      	ldr	r3, [r2, #0]
    35ee:	3301      	adds	r3, #1
    35f0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    35f2:	f04f 0320 	mov.w	r3, #32
    35f6:	f3ef 8211 	mrs	r2, BASEPRI
    35fa:	f383 8812 	msr	BASEPRI_MAX, r3
    35fe:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3602:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3606:	03db      	lsls	r3, r3, #15
    3608:	d512      	bpl.n	3630 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    360a:	f3bf 8f5b 	dmb	ish
    360e:	4b29      	ldr	r3, [pc, #164]	; (36b4 <rtc_nrf_isr+0xe4>)
    3610:	e853 1f00 	ldrex	r1, [r3]
    3614:	f021 0001 	bic.w	r0, r1, #1
    3618:	e843 0600 	strex	r6, r0, [r3]
    361c:	2e00      	cmp	r6, #0
    361e:	d1f7      	bne.n	3610 <rtc_nrf_isr+0x40>
    3620:	f3bf 8f5b 	dmb	ish
    3624:	4b24      	ldr	r3, [pc, #144]	; (36b8 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3626:	2900      	cmp	r1, #0
    3628:	d136      	bne.n	3698 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    362a:	6819      	ldr	r1, [r3, #0]
		if (result) {
    362c:	2900      	cmp	r1, #0
    362e:	d133      	bne.n	3698 <rtc_nrf_isr+0xc8>
{
    3630:	2300      	movs	r3, #0
	__asm__ volatile(
    3632:	f382 8811 	msr	BASEPRI, r2
    3636:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    363a:	b353      	cbz	r3, 3692 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    363c:	f7ff feba 	bl	33b4 <z_nrf_rtc_timer_read>
    3640:	4606      	mov	r6, r0
	__asm__ volatile(
    3642:	f04f 0320 	mov.w	r3, #32
    3646:	f3ef 8011 	mrs	r0, BASEPRI
    364a:	f383 8812 	msr	BASEPRI_MAX, r3
    364e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3652:	4b1a      	ldr	r3, [pc, #104]	; (36bc <rtc_nrf_isr+0xec>)
    3654:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3658:	4549      	cmp	r1, r9
    365a:	bf08      	it	eq
    365c:	4546      	cmpeq	r6, r8
    365e:	f04f 0200 	mov.w	r2, #0
    3662:	d31e      	bcc.n	36a2 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3664:	f04f 36ff 	mov.w	r6, #4294967295
    3668:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    366c:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3670:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3674:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    367a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    367e:	f380 8811 	msr	BASEPRI, r0
    3682:	f3bf 8f6f 	isb	sy
		if (handler) {
    3686:	b121      	cbz	r1, 3692 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3688:	9500      	str	r5, [sp, #0]
    368a:	4642      	mov	r2, r8
    368c:	464b      	mov	r3, r9
    368e:	2000      	movs	r0, #0
    3690:	4788      	blx	r1
}
    3692:	b003      	add	sp, #12
    3694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3698:	2100      	movs	r1, #0
    369a:	6019      	str	r1, [r3, #0]
    369c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    369e:	2301      	movs	r3, #1
}
    36a0:	e7c7      	b.n	3632 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    36a2:	4611      	mov	r1, r2
    36a4:	e7eb      	b.n	367e <rtc_nrf_isr+0xae>
    36a6:	bf00      	nop
    36a8:	40011000 	.word	0x40011000
    36ac:	40011104 	.word	0x40011104
    36b0:	20000938 	.word	0x20000938
    36b4:	20000930 	.word	0x20000930
    36b8:	40011140 	.word	0x40011140
    36bc:	200001b0 	.word	0x200001b0

000036c0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    36c0:	4b14      	ldr	r3, [pc, #80]	; (3714 <sys_clock_set_timeout+0x54>)
{
    36c2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    36c4:	f1b0 3fff 	cmp.w	r0, #4294967295
    36c8:	bf08      	it	eq
    36ca:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    36cc:	1e44      	subs	r4, r0, #1
    36ce:	2c00      	cmp	r4, #0
    36d0:	dd1e      	ble.n	3710 <sys_clock_set_timeout+0x50>
    36d2:	429c      	cmp	r4, r3
    36d4:	bfa8      	it	ge
    36d6:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    36d8:	f7ff fe6c 	bl	33b4 <z_nrf_rtc_timer_read>
    36dc:	4b0e      	ldr	r3, [pc, #56]	; (3718 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    36de:	490f      	ldr	r1, [pc, #60]	; (371c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    36e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36e4:	1a80      	subs	r0, r0, r2
		ticks = 0;
    36e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    36ea:	bf28      	it	cs
    36ec:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    36ee:	3001      	adds	r0, #1
    36f0:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    36f2:	4808      	ldr	r0, [pc, #32]	; (3714 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    36f4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    36f6:	4284      	cmp	r4, r0
    36f8:	bf28      	it	cs
    36fa:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    36fc:	1912      	adds	r2, r2, r4
    36fe:	f04f 0000 	mov.w	r0, #0
    3702:	9001      	str	r0, [sp, #4]
    3704:	f143 0300 	adc.w	r3, r3, #0
    3708:	f7ff fe76 	bl	33f8 <compare_set>
}
    370c:	b002      	add	sp, #8
    370e:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3710:	2400      	movs	r4, #0
    3712:	e7e1      	b.n	36d8 <sys_clock_set_timeout+0x18>
    3714:	007fffff 	.word	0x007fffff
    3718:	200001c0 	.word	0x200001c0
    371c:	00003291 	.word	0x00003291

00003720 <sys_clock_elapsed>:
{
    3720:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3722:	f7ff fe47 	bl	33b4 <z_nrf_rtc_timer_read>
    3726:	4b02      	ldr	r3, [pc, #8]	; (3730 <sys_clock_elapsed+0x10>)
    3728:	681b      	ldr	r3, [r3, #0]
}
    372a:	1ac0      	subs	r0, r0, r3
    372c:	bd08      	pop	{r3, pc}
    372e:	bf00      	nop
    3730:	200001c0 	.word	0x200001c0

00003734 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3734:	b508      	push	{r3, lr}
    switch (domain)
    3736:	b178      	cbz	r0, 3758 <nrf_clock_is_running.constprop.0+0x24>
    3738:	2801      	cmp	r0, #1
    373a:	d01c      	beq.n	3776 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    373c:	4a14      	ldr	r2, [pc, #80]	; (3790 <nrf_clock_is_running.constprop.0+0x5c>)
    373e:	4915      	ldr	r1, [pc, #84]	; (3794 <nrf_clock_is_running.constprop.0+0x60>)
    3740:	4815      	ldr	r0, [pc, #84]	; (3798 <nrf_clock_is_running.constprop.0+0x64>)
    3742:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3746:	f003 fbc1 	bl	6ecc <printk>
    374a:	4811      	ldr	r0, [pc, #68]	; (3790 <nrf_clock_is_running.constprop.0+0x5c>)
    374c:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3750:	f003 fae8 	bl	6d24 <assert_post_action>
            return false;
    3754:	2000      	movs	r0, #0
    3756:	e00d      	b.n	3774 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3758:	b131      	cbz	r1, 3768 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    375a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    375e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3762:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3766:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    376c:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3770:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3774:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3776:	b131      	cbz	r1, 3786 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    377c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3780:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3784:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    378a:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    378e:	e7ef      	b.n	3770 <nrf_clock_is_running.constprop.0+0x3c>
    3790:	0000833b 	.word	0x0000833b
    3794:	00007dff 	.word	0x00007dff
    3798:	0000793c 	.word	0x0000793c

0000379c <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    379c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    379e:	4604      	mov	r4, r0
    37a0:	b948      	cbnz	r0, 37b6 <nrfx_clock_init+0x1a>
    37a2:	490a      	ldr	r1, [pc, #40]	; (37cc <nrfx_clock_init+0x30>)
    37a4:	480a      	ldr	r0, [pc, #40]	; (37d0 <nrfx_clock_init+0x34>)
    37a6:	4a0b      	ldr	r2, [pc, #44]	; (37d4 <nrfx_clock_init+0x38>)
    37a8:	23bd      	movs	r3, #189	; 0xbd
    37aa:	f003 fb8f 	bl	6ecc <printk>
    37ae:	4809      	ldr	r0, [pc, #36]	; (37d4 <nrfx_clock_init+0x38>)
    37b0:	21bd      	movs	r1, #189	; 0xbd
    37b2:	f003 fab7 	bl	6d24 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    37b6:	4b08      	ldr	r3, [pc, #32]	; (37d8 <nrfx_clock_init+0x3c>)
    37b8:	791a      	ldrb	r2, [r3, #4]
    37ba:	b922      	cbnz	r2, 37c6 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    37bc:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    37be:	4807      	ldr	r0, [pc, #28]	; (37dc <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    37c0:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    37c2:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    37c4:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    37c6:	4806      	ldr	r0, [pc, #24]	; (37e0 <nrfx_clock_init+0x44>)
    return err_code;
    37c8:	e7fc      	b.n	37c4 <nrfx_clock_init+0x28>
    37ca:	bf00      	nop
    37cc:	000083ac 	.word	0x000083ac
    37d0:	0000793c 	.word	0x0000793c
    37d4:	0000836f 	.word	0x0000836f
    37d8:	2000093c 	.word	0x2000093c
    37dc:	0bad0000 	.word	0x0bad0000
    37e0:	0bad000c 	.word	0x0bad000c

000037e4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    37e4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    37e6:	4b0b      	ldr	r3, [pc, #44]	; (3814 <nrfx_clock_enable+0x30>)
    37e8:	791b      	ldrb	r3, [r3, #4]
    37ea:	b94b      	cbnz	r3, 3800 <nrfx_clock_enable+0x1c>
    37ec:	490a      	ldr	r1, [pc, #40]	; (3818 <nrfx_clock_enable+0x34>)
    37ee:	480b      	ldr	r0, [pc, #44]	; (381c <nrfx_clock_enable+0x38>)
    37f0:	4a0b      	ldr	r2, [pc, #44]	; (3820 <nrfx_clock_enable+0x3c>)
    37f2:	23d6      	movs	r3, #214	; 0xd6
    37f4:	f003 fb6a 	bl	6ecc <printk>
    37f8:	4809      	ldr	r0, [pc, #36]	; (3820 <nrfx_clock_enable+0x3c>)
    37fa:	21d6      	movs	r1, #214	; 0xd6
    37fc:	f003 fa92 	bl	6d24 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3800:	2000      	movs	r0, #0
    3802:	f7fe faa5 	bl	1d50 <arch_irq_is_enabled>
    3806:	b918      	cbnz	r0, 3810 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    380c:	f7fe ba90 	b.w	1d30 <arch_irq_enable>
    3810:	bd08      	pop	{r3, pc}
    3812:	bf00      	nop
    3814:	2000093c 	.word	0x2000093c
    3818:	000083ba 	.word	0x000083ba
    381c:	0000793c 	.word	0x0000793c
    3820:	0000836f 	.word	0x0000836f

00003824 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3824:	4b22      	ldr	r3, [pc, #136]	; (38b0 <nrfx_clock_start+0x8c>)
    3826:	791b      	ldrb	r3, [r3, #4]
{
    3828:	b513      	push	{r0, r1, r4, lr}
    382a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    382c:	b95b      	cbnz	r3, 3846 <nrfx_clock_start+0x22>
    382e:	4921      	ldr	r1, [pc, #132]	; (38b4 <nrfx_clock_start+0x90>)
    3830:	4821      	ldr	r0, [pc, #132]	; (38b8 <nrfx_clock_start+0x94>)
    3832:	4a22      	ldr	r2, [pc, #136]	; (38bc <nrfx_clock_start+0x98>)
    3834:	f44f 7389 	mov.w	r3, #274	; 0x112
    3838:	f003 fb48 	bl	6ecc <printk>
    383c:	481f      	ldr	r0, [pc, #124]	; (38bc <nrfx_clock_start+0x98>)
    383e:	f44f 7189 	mov.w	r1, #274	; 0x112
    3842:	f003 fa6f 	bl	6d24 <assert_post_action>
    switch (domain)
    3846:	b174      	cbz	r4, 3866 <nrfx_clock_start+0x42>
    3848:	2c01      	cmp	r4, #1
    384a:	d027      	beq.n	389c <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    384c:	4a1b      	ldr	r2, [pc, #108]	; (38bc <nrfx_clock_start+0x98>)
    384e:	491c      	ldr	r1, [pc, #112]	; (38c0 <nrfx_clock_start+0x9c>)
    3850:	4819      	ldr	r0, [pc, #100]	; (38b8 <nrfx_clock_start+0x94>)
    3852:	f44f 73a2 	mov.w	r3, #324	; 0x144
    3856:	f003 fb39 	bl	6ecc <printk>
    385a:	4818      	ldr	r0, [pc, #96]	; (38bc <nrfx_clock_start+0x98>)
    385c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3860:	f003 fa60 	bl	6d24 <assert_post_action>
            break;
    }
}
    3864:	e016      	b.n	3894 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3866:	a901      	add	r1, sp, #4
    3868:	4620      	mov	r0, r4
    386a:	f7ff ff63 	bl	3734 <nrf_clock_is_running.constprop.0>
    386e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3872:	b188      	cbz	r0, 3898 <nrfx_clock_start+0x74>
    3874:	9a01      	ldr	r2, [sp, #4]
    3876:	2a01      	cmp	r2, #1
    3878:	d10e      	bne.n	3898 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    387a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    387e:	4b11      	ldr	r3, [pc, #68]	; (38c4 <nrfx_clock_start+0xa0>)
    3880:	2200      	movs	r2, #0
    3882:	601a      	str	r2, [r3, #0]
    3884:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    388a:	2202      	movs	r2, #2
    388c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3890:	2201      	movs	r2, #1
    3892:	609a      	str	r2, [r3, #8]
}
    3894:	b002      	add	sp, #8
    3896:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3898:	2200      	movs	r2, #0
    389a:	e7ee      	b.n	387a <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    389c:	4b0a      	ldr	r3, [pc, #40]	; (38c8 <nrfx_clock_start+0xa4>)
    389e:	2200      	movs	r2, #0
    38a0:	601a      	str	r2, [r3, #0]
    38a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    38a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38a8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38ac:	601c      	str	r4, [r3, #0]
}
    38ae:	e7f1      	b.n	3894 <nrfx_clock_start+0x70>
    38b0:	2000093c 	.word	0x2000093c
    38b4:	000083ba 	.word	0x000083ba
    38b8:	0000793c 	.word	0x0000793c
    38bc:	0000836f 	.word	0x0000836f
    38c0:	00007dff 	.word	0x00007dff
    38c4:	40000104 	.word	0x40000104
    38c8:	40000100 	.word	0x40000100

000038cc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    38cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38ce:	4d2f      	ldr	r5, [pc, #188]	; (398c <nrfx_clock_stop+0xc0>)
    38d0:	792a      	ldrb	r2, [r5, #4]
{
    38d2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38d4:	b95a      	cbnz	r2, 38ee <nrfx_clock_stop+0x22>
    38d6:	492e      	ldr	r1, [pc, #184]	; (3990 <nrfx_clock_stop+0xc4>)
    38d8:	482e      	ldr	r0, [pc, #184]	; (3994 <nrfx_clock_stop+0xc8>)
    38da:	4a2f      	ldr	r2, [pc, #188]	; (3998 <nrfx_clock_stop+0xcc>)
    38dc:	f240 134b 	movw	r3, #331	; 0x14b
    38e0:	f003 faf4 	bl	6ecc <printk>
    38e4:	482c      	ldr	r0, [pc, #176]	; (3998 <nrfx_clock_stop+0xcc>)
    38e6:	f240 114b 	movw	r1, #331	; 0x14b
    38ea:	f003 fa1b 	bl	6d24 <assert_post_action>
    switch (domain)
    38ee:	b17c      	cbz	r4, 3910 <nrfx_clock_stop+0x44>
    38f0:	2c01      	cmp	r4, #1
    38f2:	d028      	beq.n	3946 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    38f4:	4929      	ldr	r1, [pc, #164]	; (399c <nrfx_clock_stop+0xd0>)
    38f6:	4827      	ldr	r0, [pc, #156]	; (3994 <nrfx_clock_stop+0xc8>)
    38f8:	4a27      	ldr	r2, [pc, #156]	; (3998 <nrfx_clock_stop+0xcc>)
    38fa:	f240 1367 	movw	r3, #359	; 0x167
    38fe:	f003 fae5 	bl	6ecc <printk>
    3902:	4825      	ldr	r0, [pc, #148]	; (3998 <nrfx_clock_stop+0xcc>)
    3904:	f240 1167 	movw	r1, #359	; 0x167
    3908:	f003 fa0c 	bl	6d24 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    390c:	b003      	add	sp, #12
    390e:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3914:	2202      	movs	r2, #2
    3916:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    391a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    391e:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3922:	2201      	movs	r2, #1
    3924:	681b      	ldr	r3, [r3, #0]
    3926:	4b1e      	ldr	r3, [pc, #120]	; (39a0 <nrfx_clock_stop+0xd4>)
    3928:	f242 7410 	movw	r4, #10000	; 0x2710
    392c:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    392e:	2100      	movs	r1, #0
    3930:	4608      	mov	r0, r1
    3932:	f7ff feff 	bl	3734 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3936:	2800      	cmp	r0, #0
    3938:	d0e8      	beq.n	390c <nrfx_clock_stop+0x40>
    393a:	2001      	movs	r0, #1
    393c:	f003 fc72 	bl	7224 <nrfx_busy_wait>
    3940:	3c01      	subs	r4, #1
    3942:	d1f4      	bne.n	392e <nrfx_clock_stop+0x62>
    3944:	e7e2      	b.n	390c <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    394a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    394c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3950:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3954:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3958:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    395a:	4b12      	ldr	r3, [pc, #72]	; (39a4 <nrfx_clock_stop+0xd8>)
    395c:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    395e:	f88d 4007 	strb.w	r4, [sp, #7]
    3962:	f242 7410 	movw	r4, #10000	; 0x2710
    3966:	f10d 0107 	add.w	r1, sp, #7
    396a:	2001      	movs	r0, #1
    396c:	f7ff fee2 	bl	3734 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3970:	b910      	cbnz	r0, 3978 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    3972:	2300      	movs	r3, #0
    3974:	716b      	strb	r3, [r5, #5]
    3976:	e7c9      	b.n	390c <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3978:	f89d 0007 	ldrb.w	r0, [sp, #7]
    397c:	2801      	cmp	r0, #1
    397e:	d1f8      	bne.n	3972 <nrfx_clock_stop+0xa6>
    3980:	f003 fc50 	bl	7224 <nrfx_busy_wait>
    3984:	3c01      	subs	r4, #1
    3986:	d1ee      	bne.n	3966 <nrfx_clock_stop+0x9a>
    3988:	e7f3      	b.n	3972 <nrfx_clock_stop+0xa6>
    398a:	bf00      	nop
    398c:	2000093c 	.word	0x2000093c
    3990:	000083ba 	.word	0x000083ba
    3994:	0000793c 	.word	0x0000793c
    3998:	0000836f 	.word	0x0000836f
    399c:	00007dff 	.word	0x00007dff
    39a0:	4000000c 	.word	0x4000000c
    39a4:	40000004 	.word	0x40000004

000039a8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39a8:	4b16      	ldr	r3, [pc, #88]	; (3a04 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    39aa:	b507      	push	{r0, r1, r2, lr}
    39ac:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    39ae:	b16a      	cbz	r2, 39cc <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39b0:	2200      	movs	r2, #0
    39b2:	601a      	str	r2, [r3, #0]
    39b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    39b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39ba:	2201      	movs	r2, #1
    39bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    39c0:	4b11      	ldr	r3, [pc, #68]	; (3a08 <nrfx_power_clock_irq_handler+0x60>)
    39c2:	7958      	ldrb	r0, [r3, #5]
    39c4:	b910      	cbnz	r0, 39cc <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    39c6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39cc:	4b0f      	ldr	r3, [pc, #60]	; (3a0c <nrfx_power_clock_irq_handler+0x64>)
    39ce:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    39d0:	b16a      	cbz	r2, 39ee <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39d2:	2000      	movs	r0, #0
    39d4:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    39d6:	a901      	add	r1, sp, #4
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	f7ff feab 	bl	3734 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    39de:	9a01      	ldr	r2, [sp, #4]
    39e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39e4:	b932      	cbnz	r2, 39f4 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    39e6:	2201      	movs	r2, #1
    39e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39ec:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    39ee:	b003      	add	sp, #12
    39f0:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    39f4:	2202      	movs	r2, #2
    39f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    39fa:	4b03      	ldr	r3, [pc, #12]	; (3a08 <nrfx_power_clock_irq_handler+0x60>)
    39fc:	2001      	movs	r0, #1
    39fe:	681b      	ldr	r3, [r3, #0]
    3a00:	4798      	blx	r3
}
    3a02:	e7f4      	b.n	39ee <nrfx_power_clock_irq_handler+0x46>
    3a04:	40000100 	.word	0x40000100
    3a08:	2000093c 	.word	0x2000093c
    3a0c:	40000104 	.word	0x40000104

00003a10 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3a10:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3a12:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3a14:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3a16:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3a1a:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3a1c:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3a20:	d014      	beq.n	3a4c <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a22:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3a26:	fa05 f204 	lsl.w	r2, r5, r4
    3a2a:	ea23 0202 	bic.w	r2, r3, r2
    3a2e:	e850 6f00 	ldrex	r6, [r0]
    3a32:	429e      	cmp	r6, r3
    3a34:	d104      	bne.n	3a40 <nrfx_flag32_alloc+0x30>
    3a36:	e840 2c00 	strex	ip, r2, [r0]
    3a3a:	f1bc 0f00 	cmp.w	ip, #0
    3a3e:	d1f6      	bne.n	3a2e <nrfx_flag32_alloc+0x1e>
    3a40:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3a44:	d1e6      	bne.n	3a14 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3a46:	4802      	ldr	r0, [pc, #8]	; (3a50 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    3a48:	700c      	strb	r4, [r1, #0]
}
    3a4a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3a4c:	4801      	ldr	r0, [pc, #4]	; (3a54 <nrfx_flag32_alloc+0x44>)
    3a4e:	e7fc      	b.n	3a4a <nrfx_flag32_alloc+0x3a>
    3a50:	0bad0000 	.word	0x0bad0000
    3a54:	0bad0002 	.word	0x0bad0002

00003a58 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3a58:	6803      	ldr	r3, [r0, #0]
    3a5a:	40cb      	lsrs	r3, r1
    3a5c:	07db      	lsls	r3, r3, #31
{
    3a5e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3a60:	d415      	bmi.n	3a8e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3a62:	2301      	movs	r3, #1
    3a64:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3a68:	6803      	ldr	r3, [r0, #0]
    3a6a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3a6e:	ea41 0203 	orr.w	r2, r1, r3
    3a72:	e850 4f00 	ldrex	r4, [r0]
    3a76:	429c      	cmp	r4, r3
    3a78:	d104      	bne.n	3a84 <nrfx_flag32_free+0x2c>
    3a7a:	e840 2c00 	strex	ip, r2, [r0]
    3a7e:	f1bc 0f00 	cmp.w	ip, #0
    3a82:	d1f6      	bne.n	3a72 <nrfx_flag32_free+0x1a>
    3a84:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3a88:	d1ee      	bne.n	3a68 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3a8a:	4802      	ldr	r0, [pc, #8]	; (3a94 <nrfx_flag32_free+0x3c>)
}
    3a8c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3a8e:	4802      	ldr	r0, [pc, #8]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a90:	e7fc      	b.n	3a8c <nrfx_flag32_free+0x34>
    3a92:	bf00      	nop
    3a94:	0bad0000 	.word	0x0bad0000
    3a98:	0bad0004 	.word	0x0bad0004

00003a9c <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3a9c:	4b05      	ldr	r3, [pc, #20]	; (3ab4 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a9e:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3aa0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3aa4:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    3aa8:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    3aac:	4258      	negs	r0, r3
    3aae:	4158      	adcs	r0, r3
    3ab0:	4770      	bx	lr
    3ab2:	bf00      	nop
    3ab4:	20000054 	.word	0x20000054

00003ab8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3ab8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3aba:	f100 0308 	add.w	r3, r0, #8
    3abe:	4c0c      	ldr	r4, [pc, #48]	; (3af0 <call_handler+0x38>)
    3ac0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3ac4:	05da      	lsls	r2, r3, #23
{
    3ac6:	4605      	mov	r5, r0
    3ac8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3aca:	d507      	bpl.n	3adc <call_handler+0x24>
    3acc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3ad0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3ad4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3ad8:	6852      	ldr	r2, [r2, #4]
    3ada:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3adc:	68a3      	ldr	r3, [r4, #8]
    3ade:	b12b      	cbz	r3, 3aec <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3ae0:	68e2      	ldr	r2, [r4, #12]
    3ae2:	4631      	mov	r1, r6
    3ae4:	4628      	mov	r0, r5
    }
}
    3ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3aea:	4718      	bx	r3
}
    3aec:	bd70      	pop	{r4, r5, r6, pc}
    3aee:	bf00      	nop
    3af0:	20000054 	.word	0x20000054

00003af4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3af4:	4b19      	ldr	r3, [pc, #100]	; (3b5c <release_handler+0x68>)
    3af6:	3008      	adds	r0, #8
{
    3af8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3afa:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3afe:	05d1      	lsls	r1, r2, #23
    3b00:	d51d      	bpl.n	3b3e <release_handler+0x4a>
    3b02:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3b06:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3b0a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3b0e:	f103 0410 	add.w	r4, r3, #16
    3b12:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3b14:	f834 2b02 	ldrh.w	r2, [r4], #2
    3b18:	f412 7f80 	tst.w	r2, #256	; 0x100
    3b1c:	d003      	beq.n	3b26 <release_handler+0x32>
    3b1e:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3b22:	4291      	cmp	r1, r2
    3b24:	d00b      	beq.n	3b3e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3b26:	3001      	adds	r0, #1
    3b28:	2830      	cmp	r0, #48	; 0x30
    3b2a:	d1f3      	bne.n	3b14 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3b2c:	2200      	movs	r2, #0
    3b2e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3b32:	480b      	ldr	r0, [pc, #44]	; (3b60 <release_handler+0x6c>)
    3b34:	f7ff ff90 	bl	3a58 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3b38:	4b0a      	ldr	r3, [pc, #40]	; (3b64 <release_handler+0x70>)
    3b3a:	4298      	cmp	r0, r3
    3b3c:	d100      	bne.n	3b40 <release_handler+0x4c>
}
    3b3e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3b40:	4909      	ldr	r1, [pc, #36]	; (3b68 <release_handler+0x74>)
    3b42:	480a      	ldr	r0, [pc, #40]	; (3b6c <release_handler+0x78>)
    3b44:	4a0a      	ldr	r2, [pc, #40]	; (3b70 <release_handler+0x7c>)
    3b46:	f44f 7399 	mov.w	r3, #306	; 0x132
    3b4a:	f003 f9bf 	bl	6ecc <printk>
}
    3b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3b52:	4807      	ldr	r0, [pc, #28]	; (3b70 <release_handler+0x7c>)
    3b54:	f44f 7199 	mov.w	r1, #306	; 0x132
    3b58:	f003 b8e4 	b.w	6d24 <assert_post_action>
    3b5c:	20000054 	.word	0x20000054
    3b60:	200000c8 	.word	0x200000c8
    3b64:	0bad0000 	.word	0x0bad0000
    3b68:	0000843c 	.word	0x0000843c
    3b6c:	0000793c 	.word	0x0000793c
    3b70:	000083d8 	.word	0x000083d8

00003b74 <pin_handler_trigger_uninit>:
{
    3b74:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3b76:	4c0a      	ldr	r4, [pc, #40]	; (3ba0 <pin_handler_trigger_uninit+0x2c>)
    3b78:	f100 0508 	add.w	r5, r0, #8
    3b7c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3b80:	069a      	lsls	r2, r3, #26
    3b82:	d506      	bpl.n	3b92 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3b84:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3b86:	4a07      	ldr	r2, [pc, #28]	; (3ba4 <pin_handler_trigger_uninit+0x30>)
    3b88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3b8c:	2100      	movs	r1, #0
    3b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3b92:	f7ff ffaf 	bl	3af4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3b96:	2300      	movs	r3, #0
    3b98:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3b9c:	bd38      	pop	{r3, r4, r5, pc}
    3b9e:	bf00      	nop
    3ba0:	20000054 	.word	0x20000054
    3ba4:	40006000 	.word	0x40006000

00003ba8 <nrf_gpio_pin_port_decode>:
{
    3ba8:	b510      	push	{r4, lr}
    3baa:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3bac:	6800      	ldr	r0, [r0, #0]
    3bae:	f003 fb3b 	bl	7228 <nrf_gpio_pin_present_check>
    3bb2:	b958      	cbnz	r0, 3bcc <nrf_gpio_pin_port_decode+0x24>
    3bb4:	4912      	ldr	r1, [pc, #72]	; (3c00 <nrf_gpio_pin_port_decode+0x58>)
    3bb6:	4813      	ldr	r0, [pc, #76]	; (3c04 <nrf_gpio_pin_port_decode+0x5c>)
    3bb8:	4a13      	ldr	r2, [pc, #76]	; (3c08 <nrf_gpio_pin_port_decode+0x60>)
    3bba:	f240 2329 	movw	r3, #553	; 0x229
    3bbe:	f003 f985 	bl	6ecc <printk>
    3bc2:	4811      	ldr	r0, [pc, #68]	; (3c08 <nrf_gpio_pin_port_decode+0x60>)
    3bc4:	f240 2129 	movw	r1, #553	; 0x229
    3bc8:	f003 f8ac 	bl	6d24 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3bcc:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3bce:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3bd2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3bd4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3bd6:	d00d      	beq.n	3bf4 <nrf_gpio_pin_port_decode+0x4c>
    3bd8:	2b01      	cmp	r3, #1
    3bda:	d00e      	beq.n	3bfa <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    3bdc:	490b      	ldr	r1, [pc, #44]	; (3c0c <nrf_gpio_pin_port_decode+0x64>)
    3bde:	4809      	ldr	r0, [pc, #36]	; (3c04 <nrf_gpio_pin_port_decode+0x5c>)
    3be0:	4a09      	ldr	r2, [pc, #36]	; (3c08 <nrf_gpio_pin_port_decode+0x60>)
    3be2:	f240 232e 	movw	r3, #558	; 0x22e
    3be6:	f003 f971 	bl	6ecc <printk>
    3bea:	4807      	ldr	r0, [pc, #28]	; (3c08 <nrf_gpio_pin_port_decode+0x60>)
    3bec:	f240 212e 	movw	r1, #558	; 0x22e
    3bf0:	f003 f898 	bl	6d24 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3bf4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3bf8:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3bfa:	4805      	ldr	r0, [pc, #20]	; (3c10 <nrf_gpio_pin_port_decode+0x68>)
    3bfc:	e7fc      	b.n	3bf8 <nrf_gpio_pin_port_decode+0x50>
    3bfe:	bf00      	nop
    3c00:	00008303 	.word	0x00008303
    3c04:	0000793c 	.word	0x0000793c
    3c08:	000082d0 	.word	0x000082d0
    3c0c:	00007dff 	.word	0x00007dff
    3c10:	50000300 	.word	0x50000300

00003c14 <nrfx_gpiote_input_configure>:
{
    3c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c16:	4604      	mov	r4, r0
    3c18:	b085      	sub	sp, #20
    3c1a:	4617      	mov	r7, r2
    3c1c:	461d      	mov	r5, r3
    if (p_input_config)
    3c1e:	b1f1      	cbz	r1, 3c5e <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    3c20:	f7ff ff3c 	bl	3a9c <pin_is_task_output>
    3c24:	b110      	cbz	r0, 3c2c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    3c26:	484a      	ldr	r0, [pc, #296]	; (3d50 <nrfx_gpiote_input_configure+0x13c>)
}
    3c28:	b005      	add	sp, #20
    3c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3c2c:	460b      	mov	r3, r1
    3c2e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3c32:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3c36:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3c3a:	f10d 020f 	add.w	r2, sp, #15
    3c3e:	f10d 010e 	add.w	r1, sp, #14
    3c42:	4620      	mov	r0, r4
    3c44:	f003 fb05 	bl	7252 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3c48:	4a42      	ldr	r2, [pc, #264]	; (3d54 <nrfx_gpiote_input_configure+0x140>)
    3c4a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3c4e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3c52:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3c56:	f043 0301 	orr.w	r3, r3, #1
    3c5a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3c5e:	b197      	cbz	r7, 3c86 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3c60:	4b3c      	ldr	r3, [pc, #240]	; (3d54 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3c62:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3c64:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3c66:	f104 0008 	add.w	r0, r4, #8
    3c6a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3c6e:	078f      	lsls	r7, r1, #30
    3c70:	d50c      	bpl.n	3c8c <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    3c72:	2a00      	cmp	r2, #0
    3c74:	d1d7      	bne.n	3c26 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3c76:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3c7a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3c7e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3c82:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3c86:	bbcd      	cbnz	r5, 3cfc <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    3c88:	4833      	ldr	r0, [pc, #204]	; (3d58 <nrfx_gpiote_input_configure+0x144>)
    3c8a:	e7cd      	b.n	3c28 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3c8c:	f021 0120 	bic.w	r1, r1, #32
    3c90:	04c9      	lsls	r1, r1, #19
    3c92:	0cc9      	lsrs	r1, r1, #19
    3c94:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3c98:	2a00      	cmp	r2, #0
    3c9a:	d0ec      	beq.n	3c76 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    3c9c:	2e03      	cmp	r6, #3
    3c9e:	d8c2      	bhi.n	3c26 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3ca0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3ca2:	b92e      	cbnz	r6, 3cb0 <nrfx_gpiote_input_configure+0x9c>
    3ca4:	4a2d      	ldr	r2, [pc, #180]	; (3d5c <nrfx_gpiote_input_configure+0x148>)
    3ca6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3caa:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3cae:	e7e2      	b.n	3c76 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3cb0:	00ba      	lsls	r2, r7, #2
    3cb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3cb6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3cba:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3cbe:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3cc2:	f02c 0c03 	bic.w	ip, ip, #3
    3cc6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3cca:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3cce:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3cd2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3cd6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3cda:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3cde:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3ce2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3ce6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3cea:	ea4c 0c0e 	orr.w	ip, ip, lr
    3cee:	f041 0120 	orr.w	r1, r1, #32
    3cf2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3cf6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3cfa:	e7bc      	b.n	3c76 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3cfc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3d00:	4620      	mov	r0, r4
    3d02:	f7ff fef7 	bl	3af4 <release_handler>
    if (!handler)
    3d06:	2e00      	cmp	r6, #0
    3d08:	d0be      	beq.n	3c88 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3d0a:	4d12      	ldr	r5, [pc, #72]	; (3d54 <nrfx_gpiote_input_configure+0x140>)
    3d0c:	682b      	ldr	r3, [r5, #0]
    3d0e:	429e      	cmp	r6, r3
    3d10:	d104      	bne.n	3d1c <nrfx_gpiote_input_configure+0x108>
    3d12:	686b      	ldr	r3, [r5, #4]
    3d14:	429f      	cmp	r7, r3
    3d16:	d101      	bne.n	3d1c <nrfx_gpiote_input_configure+0x108>
    3d18:	2200      	movs	r2, #0
    3d1a:	e00a      	b.n	3d32 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3d1c:	4810      	ldr	r0, [pc, #64]	; (3d60 <nrfx_gpiote_input_configure+0x14c>)
    3d1e:	f10d 010f 	add.w	r1, sp, #15
    3d22:	f7ff fe75 	bl	3a10 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3d26:	4b0c      	ldr	r3, [pc, #48]	; (3d58 <nrfx_gpiote_input_configure+0x144>)
    3d28:	4298      	cmp	r0, r3
    3d2a:	f47f af7d 	bne.w	3c28 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    3d2e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3d32:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3d36:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3d3a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3d3c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3d3e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3d42:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3d4a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3d4e:	e79b      	b.n	3c88 <nrfx_gpiote_input_configure+0x74>
    3d50:	0bad0004 	.word	0x0bad0004
    3d54:	20000054 	.word	0x20000054
    3d58:	0bad0000 	.word	0x0bad0000
    3d5c:	40006000 	.word	0x40006000
    3d60:	200000c8 	.word	0x200000c8

00003d64 <nrfx_gpiote_output_configure>:
{
    3d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d66:	4604      	mov	r4, r0
    3d68:	b085      	sub	sp, #20
    3d6a:	4615      	mov	r5, r2
    if (p_config)
    3d6c:	b309      	cbz	r1, 3db2 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3d6e:	f100 0708 	add.w	r7, r0, #8
    3d72:	4e31      	ldr	r6, [pc, #196]	; (3e38 <nrfx_gpiote_output_configure+0xd4>)
    3d74:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3d78:	0798      	lsls	r0, r3, #30
    3d7a:	d401      	bmi.n	3d80 <nrfx_gpiote_output_configure+0x1c>
    3d7c:	069a      	lsls	r2, r3, #26
    3d7e:	d458      	bmi.n	3e32 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3d80:	f013 0f1c 	tst.w	r3, #28
    3d84:	d002      	beq.n	3d8c <nrfx_gpiote_output_configure+0x28>
    3d86:	784b      	ldrb	r3, [r1, #1]
    3d88:	2b01      	cmp	r3, #1
    3d8a:	d052      	beq.n	3e32 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3d8c:	2301      	movs	r3, #1
    3d8e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3d92:	2300      	movs	r3, #0
    3d94:	e9cd 1300 	strd	r1, r3, [sp]
    3d98:	1c4a      	adds	r2, r1, #1
    3d9a:	1c8b      	adds	r3, r1, #2
    3d9c:	4620      	mov	r0, r4
    3d9e:	f10d 010f 	add.w	r1, sp, #15
    3da2:	f003 fa56 	bl	7252 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3da6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3daa:	f043 0303 	orr.w	r3, r3, #3
    3dae:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3db2:	b915      	cbnz	r5, 3dba <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    3db4:	4821      	ldr	r0, [pc, #132]	; (3e3c <nrfx_gpiote_output_configure+0xd8>)
}
    3db6:	b005      	add	sp, #20
    3db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3dba:	4e1f      	ldr	r6, [pc, #124]	; (3e38 <nrfx_gpiote_output_configure+0xd4>)
    3dbc:	f104 0708 	add.w	r7, r4, #8
    3dc0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3dc4:	0783      	lsls	r3, r0, #30
    3dc6:	d534      	bpl.n	3e32 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    3dc8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3dcc:	4661      	mov	r1, ip
    3dce:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3dd0:	f020 0020 	bic.w	r0, r0, #32
    3dd4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3dd8:	04c0      	lsls	r0, r0, #19
    3dda:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3dde:	0cc0      	lsrs	r0, r0, #19
    3de0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3de4:	2300      	movs	r3, #0
    3de6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3dea:	786a      	ldrb	r2, [r5, #1]
    3dec:	2a00      	cmp	r2, #0
    3dee:	d0e1      	beq.n	3db4 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3df0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3df4:	78ad      	ldrb	r5, [r5, #2]
    3df6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3dfa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3dfe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e02:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3e06:	0223      	lsls	r3, r4, #8
    3e08:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e0c:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e0e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e12:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3e16:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e18:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3e1a:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3e1e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e22:	432b      	orrs	r3, r5
    3e24:	f040 0020 	orr.w	r0, r0, #32
    3e28:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3e2c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3e30:	e7c0      	b.n	3db4 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    3e32:	4803      	ldr	r0, [pc, #12]	; (3e40 <nrfx_gpiote_output_configure+0xdc>)
    3e34:	e7bf      	b.n	3db6 <nrfx_gpiote_output_configure+0x52>
    3e36:	bf00      	nop
    3e38:	20000054 	.word	0x20000054
    3e3c:	0bad0000 	.word	0x0bad0000
    3e40:	0bad0004 	.word	0x0bad0004

00003e44 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3e44:	4b01      	ldr	r3, [pc, #4]	; (3e4c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3e46:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3e4a:	4770      	bx	lr
    3e4c:	20000054 	.word	0x20000054

00003e50 <nrfx_gpiote_channel_get>:
{
    3e50:	b538      	push	{r3, r4, r5, lr}
    3e52:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    3e54:	460d      	mov	r5, r1
    3e56:	b959      	cbnz	r1, 3e70 <nrfx_gpiote_channel_get+0x20>
    3e58:	490b      	ldr	r1, [pc, #44]	; (3e88 <nrfx_gpiote_channel_get+0x38>)
    3e5a:	480c      	ldr	r0, [pc, #48]	; (3e8c <nrfx_gpiote_channel_get+0x3c>)
    3e5c:	4a0c      	ldr	r2, [pc, #48]	; (3e90 <nrfx_gpiote_channel_get+0x40>)
    3e5e:	f240 2335 	movw	r3, #565	; 0x235
    3e62:	f003 f833 	bl	6ecc <printk>
    3e66:	480a      	ldr	r0, [pc, #40]	; (3e90 <nrfx_gpiote_channel_get+0x40>)
    3e68:	f240 2135 	movw	r1, #565	; 0x235
    3e6c:	f002 ff5a 	bl	6d24 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3e70:	3408      	adds	r4, #8
    3e72:	4b08      	ldr	r3, [pc, #32]	; (3e94 <nrfx_gpiote_channel_get+0x44>)
    3e74:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    3e78:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e7a:	bf43      	ittte	mi
    3e7c:	0b5b      	lsrmi	r3, r3, #13
    3e7e:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    3e80:	4805      	ldrmi	r0, [pc, #20]	; (3e98 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    3e82:	4806      	ldrpl	r0, [pc, #24]	; (3e9c <nrfx_gpiote_channel_get+0x4c>)
}
    3e84:	bd38      	pop	{r3, r4, r5, pc}
    3e86:	bf00      	nop
    3e88:	00008450 	.word	0x00008450
    3e8c:	0000793c 	.word	0x0000793c
    3e90:	000083d8 	.word	0x000083d8
    3e94:	20000054 	.word	0x20000054
    3e98:	0bad0000 	.word	0x0bad0000
    3e9c:	0bad0004 	.word	0x0bad0004

00003ea0 <nrfx_gpiote_init>:
{
    3ea0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3ea2:	4c0e      	ldr	r4, [pc, #56]	; (3edc <nrfx_gpiote_init+0x3c>)
    3ea4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3ea8:	b9b5      	cbnz	r5, 3ed8 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3eaa:	2260      	movs	r2, #96	; 0x60
    3eac:	4629      	mov	r1, r5
    3eae:	f104 0010 	add.w	r0, r4, #16
    3eb2:	f003 f86c 	bl	6f8e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3eb6:	2006      	movs	r0, #6
    3eb8:	f7fd ff3a 	bl	1d30 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ebc:	4b08      	ldr	r3, [pc, #32]	; (3ee0 <nrfx_gpiote_init+0x40>)
    return err_code;
    3ebe:	4809      	ldr	r0, [pc, #36]	; (3ee4 <nrfx_gpiote_init+0x44>)
    3ec0:	601d      	str	r5, [r3, #0]
    3ec2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3ec4:	4b08      	ldr	r3, [pc, #32]	; (3ee8 <nrfx_gpiote_init+0x48>)
    3ec6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3eca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3ece:	2301      	movs	r3, #1
    3ed0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3ed4:	6763      	str	r3, [r4, #116]	; 0x74
}
    3ed6:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3ed8:	4804      	ldr	r0, [pc, #16]	; (3eec <nrfx_gpiote_init+0x4c>)
    3eda:	e7fc      	b.n	3ed6 <nrfx_gpiote_init+0x36>
    3edc:	20000054 	.word	0x20000054
    3ee0:	4000617c 	.word	0x4000617c
    3ee4:	0bad0000 	.word	0x0bad0000
    3ee8:	40006000 	.word	0x40006000
    3eec:	0bad0005 	.word	0x0bad0005

00003ef0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3ef0:	4b03      	ldr	r3, [pc, #12]	; (3f00 <nrfx_gpiote_is_init+0x10>)
    3ef2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3ef6:	3800      	subs	r0, #0
    3ef8:	bf18      	it	ne
    3efa:	2001      	movne	r0, #1
    3efc:	4770      	bx	lr
    3efe:	bf00      	nop
    3f00:	20000054 	.word	0x20000054

00003f04 <nrfx_gpiote_channel_free>:
{
    3f04:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3f06:	4801      	ldr	r0, [pc, #4]	; (3f0c <nrfx_gpiote_channel_free+0x8>)
    3f08:	f7ff bda6 	b.w	3a58 <nrfx_flag32_free>
    3f0c:	200000c4 	.word	0x200000c4

00003f10 <nrfx_gpiote_channel_alloc>:
{
    3f10:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3f12:	4801      	ldr	r0, [pc, #4]	; (3f18 <nrfx_gpiote_channel_alloc+0x8>)
    3f14:	f7ff bd7c 	b.w	3a10 <nrfx_flag32_alloc>
    3f18:	200000c4 	.word	0x200000c4

00003f1c <nrfx_gpiote_trigger_enable>:
{
    3f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3f1e:	4d31      	ldr	r5, [pc, #196]	; (3fe4 <nrfx_gpiote_trigger_enable+0xc8>)
    3f20:	f100 0708 	add.w	r7, r0, #8
{
    3f24:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3f26:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    3f2a:	f013 0f1c 	tst.w	r3, #28
{
    3f2e:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    3f30:	d10b      	bne.n	3f4a <nrfx_gpiote_trigger_enable+0x2e>
    3f32:	492d      	ldr	r1, [pc, #180]	; (3fe8 <nrfx_gpiote_trigger_enable+0xcc>)
    3f34:	482d      	ldr	r0, [pc, #180]	; (3fec <nrfx_gpiote_trigger_enable+0xd0>)
    3f36:	4a2e      	ldr	r2, [pc, #184]	; (3ff0 <nrfx_gpiote_trigger_enable+0xd4>)
    3f38:	f240 33df 	movw	r3, #991	; 0x3df
    3f3c:	f002 ffc6 	bl	6ecc <printk>
    3f40:	482b      	ldr	r0, [pc, #172]	; (3ff0 <nrfx_gpiote_trigger_enable+0xd4>)
    3f42:	f240 31df 	movw	r1, #991	; 0x3df
    3f46:	f002 feed 	bl	6d24 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3f4a:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3f4e:	0683      	lsls	r3, r0, #26
    3f50:	d51f      	bpl.n	3f92 <nrfx_gpiote_trigger_enable+0x76>
    3f52:	f010 0302 	ands.w	r3, r0, #2
    3f56:	d11c      	bne.n	3f92 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f58:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    3f5a:	4608      	mov	r0, r1
    3f5c:	f003 f975 	bl	724a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    3f60:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3f64:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f68:	6003      	str	r3, [r0, #0]
    3f6a:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3f6c:	008b      	lsls	r3, r1, #2
    3f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f72:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3f76:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3f7a:	f042 0201 	orr.w	r2, r2, #1
    3f7e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    3f82:	b126      	cbz	r6, 3f8e <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    3f84:	4a1b      	ldr	r2, [pc, #108]	; (3ff4 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3f86:	2301      	movs	r3, #1
    3f88:	408b      	lsls	r3, r1
    3f8a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3f8e:	b003      	add	sp, #12
    3f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    3f92:	b95e      	cbnz	r6, 3fac <nrfx_gpiote_trigger_enable+0x90>
    3f94:	4918      	ldr	r1, [pc, #96]	; (3ff8 <nrfx_gpiote_trigger_enable+0xdc>)
    3f96:	4815      	ldr	r0, [pc, #84]	; (3fec <nrfx_gpiote_trigger_enable+0xd0>)
    3f98:	4a15      	ldr	r2, [pc, #84]	; (3ff0 <nrfx_gpiote_trigger_enable+0xd4>)
    3f9a:	f240 33ee 	movw	r3, #1006	; 0x3ee
    3f9e:	f002 ff95 	bl	6ecc <printk>
    3fa2:	4813      	ldr	r0, [pc, #76]	; (3ff0 <nrfx_gpiote_trigger_enable+0xd4>)
    3fa4:	f240 31ee 	movw	r1, #1006	; 0x3ee
    3fa8:	f002 febc 	bl	6d24 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3fac:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    3fb0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3fb4:	2b04      	cmp	r3, #4
    3fb6:	d010      	beq.n	3fda <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3fb8:	2b05      	cmp	r3, #5
    3fba:	d010      	beq.n	3fde <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3fbc:	a801      	add	r0, sp, #4
    3fbe:	9401      	str	r4, [sp, #4]
    3fc0:	f7ff fdf2 	bl	3ba8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3fc4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3fc6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3fca:	40d9      	lsrs	r1, r3
    3fcc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3fd0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3fd2:	4620      	mov	r0, r4
    3fd4:	f003 f988 	bl	72e8 <nrf_gpio_cfg_sense_set>
}
    3fd8:	e7d9      	b.n	3f8e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3fda:	2103      	movs	r1, #3
    3fdc:	e7f9      	b.n	3fd2 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3fde:	2102      	movs	r1, #2
    3fe0:	e7f7      	b.n	3fd2 <nrfx_gpiote_trigger_enable+0xb6>
    3fe2:	bf00      	nop
    3fe4:	20000054 	.word	0x20000054
    3fe8:	0000845a 	.word	0x0000845a
    3fec:	0000793c 	.word	0x0000793c
    3ff0:	000083d8 	.word	0x000083d8
    3ff4:	40006000 	.word	0x40006000
    3ff8:	0000846f 	.word	0x0000846f

00003ffc <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ffc:	4b0e      	ldr	r3, [pc, #56]	; (4038 <nrfx_gpiote_trigger_disable+0x3c>)
    3ffe:	f100 0208 	add.w	r2, r0, #8
    4002:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4006:	0699      	lsls	r1, r3, #26
    4008:	d513      	bpl.n	4032 <nrfx_gpiote_trigger_disable+0x36>
    400a:	079a      	lsls	r2, r3, #30
    400c:	d411      	bmi.n	4032 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    400e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4010:	2201      	movs	r2, #1
    4012:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4014:	009b      	lsls	r3, r3, #2
    4016:	4909      	ldr	r1, [pc, #36]	; (403c <nrfx_gpiote_trigger_disable+0x40>)
    4018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    401c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4020:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4024:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4028:	f022 0203 	bic.w	r2, r2, #3
    402c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4030:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4032:	2100      	movs	r1, #0
    4034:	f003 b958 	b.w	72e8 <nrf_gpio_cfg_sense_set>
    4038:	20000054 	.word	0x20000054
    403c:	40006000 	.word	0x40006000

00004040 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4040:	4b0e      	ldr	r3, [pc, #56]	; (407c <nrfx_gpiote_pin_uninit+0x3c>)
    4042:	f100 0208 	add.w	r2, r0, #8
{
    4046:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4048:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    404c:	07db      	lsls	r3, r3, #31
{
    404e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4050:	d511      	bpl.n	4076 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4052:	f7ff ffd3 	bl	3ffc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4056:	4620      	mov	r0, r4
    4058:	f7ff fd8c 	bl	3b74 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    405c:	a801      	add	r0, sp, #4
    405e:	9401      	str	r4, [sp, #4]
    4060:	f7ff fda2 	bl	3ba8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4064:	9b01      	ldr	r3, [sp, #4]
    4066:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    406a:	2202      	movs	r2, #2
    406c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4070:	4803      	ldr	r0, [pc, #12]	; (4080 <nrfx_gpiote_pin_uninit+0x40>)
}
    4072:	b002      	add	sp, #8
    4074:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4076:	4803      	ldr	r0, [pc, #12]	; (4084 <nrfx_gpiote_pin_uninit+0x44>)
    4078:	e7fb      	b.n	4072 <nrfx_gpiote_pin_uninit+0x32>
    407a:	bf00      	nop
    407c:	20000054 	.word	0x20000054
    4080:	0bad0000 	.word	0x0bad0000
    4084:	0bad0004 	.word	0x0bad0004

00004088 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    408c:	4b65      	ldr	r3, [pc, #404]	; (4224 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    408e:	4866      	ldr	r0, [pc, #408]	; (4228 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4090:	4966      	ldr	r1, [pc, #408]	; (422c <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    4092:	2500      	movs	r5, #0
{
    4094:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4096:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4098:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    409a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    409c:	b136      	cbz	r6, 40ac <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    409e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    40a2:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    40a4:	bf1e      	ittt	ne
    40a6:	601c      	strne	r4, [r3, #0]
    40a8:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    40aa:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    40ac:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    40ae:	428b      	cmp	r3, r1
        mask <<= 1;
    40b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    40b4:	d1f1      	bne.n	409a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40b6:	4f5e      	ldr	r7, [pc, #376]	; (4230 <nrfx_gpiote_irq_handler+0x1a8>)
    40b8:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    40ba:	b37b      	cbz	r3, 411c <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    40bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    40c0:	4e5c      	ldr	r6, [pc, #368]	; (4234 <nrfx_gpiote_irq_handler+0x1ac>)
    40c2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    40c6:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    40c8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    40cc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    40d0:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    40d2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    40d6:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    40d8:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    40dc:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    40e0:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    40e4:	f8d9 3000 	ldr.w	r3, [r9]
    40e8:	b9f3      	cbnz	r3, 4128 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    40ea:	f108 0820 	add.w	r8, r8, #32
    40ee:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    40f2:	f109 0904 	add.w	r9, r9, #4
    40f6:	d1f5      	bne.n	40e4 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    40f8:	603b      	str	r3, [r7, #0]
    40fa:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    40fc:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    40fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4102:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4106:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4108:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    410c:	9b01      	ldr	r3, [sp, #4]
    410e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    4112:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4114:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4118:	4313      	orrs	r3, r2
    411a:	d1dd      	bne.n	40d8 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    411c:	2401      	movs	r4, #1
    while (mask)
    411e:	2d00      	cmp	r5, #0
    4120:	d168      	bne.n	41f4 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4122:	b009      	add	sp, #36	; 0x24
    4124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4128:	fa93 f3a3 	rbit	r3, r3
    412c:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    4130:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4134:	f106 0208 	add.w	r2, r6, #8
    4138:	4b3f      	ldr	r3, [pc, #252]	; (4238 <nrfx_gpiote_irq_handler+0x1b0>)
    413a:	9605      	str	r6, [sp, #20]
    413c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    4140:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4144:	08f4      	lsrs	r4, r6, #3
    4146:	9302      	str	r3, [sp, #8]
    4148:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    414a:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    414c:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4150:	fa0b fc00 	lsl.w	ip, fp, r0
    4154:	5d18      	ldrb	r0, [r3, r4]
    4156:	ea20 000c 	bic.w	r0, r0, ip
    415a:	5518      	strb	r0, [r3, r4]
    415c:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    415e:	a805      	add	r0, sp, #20
    4160:	9103      	str	r1, [sp, #12]
    4162:	f7ff fd21 	bl	3ba8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4166:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    4168:	9903      	ldr	r1, [sp, #12]
    416a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    416e:	074b      	lsls	r3, r1, #29
    4170:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4174:	f3c4 4401 	ubfx	r4, r4, #16, #2
    4178:	d523      	bpl.n	41c2 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    417a:	4651      	mov	r1, sl
    417c:	4630      	mov	r0, r6
    417e:	f7ff fc9b 	bl	3ab8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4182:	a805      	add	r0, sp, #20
    4184:	9605      	str	r6, [sp, #20]
    4186:	f7ff fd0f 	bl	3ba8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    418a:	9a05      	ldr	r2, [sp, #20]
    418c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4190:	b2e4      	uxtb	r4, r4
    4192:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4196:	f3c2 4201 	ubfx	r2, r2, #16, #2
    419a:	4294      	cmp	r4, r2
    419c:	d107      	bne.n	41ae <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    419e:	2100      	movs	r1, #0
    41a0:	4630      	mov	r0, r6
    41a2:	f003 f8a1 	bl	72e8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    41a6:	4621      	mov	r1, r4
    41a8:	4630      	mov	r0, r6
    41aa:	f003 f89d 	bl	72e8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41ae:	a805      	add	r0, sp, #20
    41b0:	9605      	str	r6, [sp, #20]
    41b2:	f7ff fcf9 	bl	3ba8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    41b6:	9b05      	ldr	r3, [sp, #20]
    41b8:	fa0b f303 	lsl.w	r3, fp, r3
    41bc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    41c0:	e790      	b.n	40e4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    41c2:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    41c4:	bf0c      	ite	eq
    41c6:	2103      	moveq	r1, #3
    41c8:	2102      	movne	r1, #2
    41ca:	4630      	mov	r0, r6
    41cc:	f003 f88c 	bl	72e8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    41d0:	9b02      	ldr	r3, [sp, #8]
    41d2:	2b03      	cmp	r3, #3
    41d4:	d004      	beq.n	41e0 <nrfx_gpiote_irq_handler+0x158>
    41d6:	2c02      	cmp	r4, #2
    41d8:	d107      	bne.n	41ea <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    41da:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    41de:	d1e6      	bne.n	41ae <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    41e0:	4651      	mov	r1, sl
    41e2:	4630      	mov	r0, r6
    41e4:	f7ff fc68 	bl	3ab8 <call_handler>
    41e8:	e7e1      	b.n	41ae <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    41ea:	2c03      	cmp	r4, #3
    41ec:	d1df      	bne.n	41ae <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    41ee:	f1ba 0f02 	cmp.w	sl, #2
    41f2:	e7f4      	b.n	41de <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    41f4:	fa95 f3a5 	rbit	r3, r5
    41f8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    41fc:	fa04 f203 	lsl.w	r2, r4, r3
    4200:	009b      	lsls	r3, r3, #2
    4202:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4206:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    420a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    420e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4212:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4216:	f3c0 2005 	ubfx	r0, r0, #8, #6
    421a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    421e:	f7ff fc4b 	bl	3ab8 <call_handler>
    4222:	e77c      	b.n	411e <nrfx_gpiote_irq_handler+0x96>
    4224:	40006100 	.word	0x40006100
    4228:	40006000 	.word	0x40006000
    422c:	40006120 	.word	0x40006120
    4230:	4000617c 	.word	0x4000617c
    4234:	50000300 	.word	0x50000300
    4238:	20000054 	.word	0x20000054

0000423c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    423c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    423e:	4801      	ldr	r0, [pc, #4]	; (4244 <nrfx_ppi_channel_alloc+0x8>)
    4240:	f7ff bbe6 	b.w	3a10 <nrfx_flag32_alloc>
    4244:	200000d0 	.word	0x200000d0

00004248 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4248:	4b03      	ldr	r3, [pc, #12]	; (4258 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    424a:	6818      	ldr	r0, [r3, #0]
}
    424c:	f1a0 0308 	sub.w	r3, r0, #8
    4250:	4258      	negs	r0, r3
    4252:	4158      	adcs	r0, r3
    4254:	4770      	bx	lr
    4256:	bf00      	nop
    4258:	10000130 	.word	0x10000130

0000425c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    425c:	4b06      	ldr	r3, [pc, #24]	; (4278 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    425e:	681b      	ldr	r3, [r3, #0]
    4260:	2b08      	cmp	r3, #8
    4262:	d106      	bne.n	4272 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4264:	4b05      	ldr	r3, [pc, #20]	; (427c <nrf52_errata_103+0x20>)
    4266:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    4268:	2b05      	cmp	r3, #5
    426a:	d802      	bhi.n	4272 <nrf52_errata_103+0x16>
    426c:	4a04      	ldr	r2, [pc, #16]	; (4280 <nrf52_errata_103+0x24>)
    426e:	5cd0      	ldrb	r0, [r2, r3]
    4270:	4770      	bx	lr
        return false;
    4272:	2000      	movs	r0, #0
}
    4274:	4770      	bx	lr
    4276:	bf00      	nop
    4278:	10000130 	.word	0x10000130
    427c:	10000134 	.word	0x10000134
    4280:	00008480 	.word	0x00008480

00004284 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4284:	4a02      	ldr	r2, [pc, #8]	; (4290 <nvmc_wait+0xc>)
    4286:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    428a:	2b00      	cmp	r3, #0
    428c:	d0fb      	beq.n	4286 <nvmc_wait+0x2>
}
    428e:	4770      	bx	lr
    4290:	4001e000 	.word	0x4001e000

00004294 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4294:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4296:	f7ff ffd7 	bl	4248 <nrf52_errata_136>
    429a:	b140      	cbz	r0, 42ae <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    429c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42a0:	2200      	movs	r2, #0
    42a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    42a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    42aa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    42ae:	f7ff ffcb 	bl	4248 <nrf52_errata_136>
    42b2:	2800      	cmp	r0, #0
    42b4:	d046      	beq.n	4344 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    42b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    42ba:	4b5b      	ldr	r3, [pc, #364]	; (4428 <SystemInit+0x194>)
    42bc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    42c0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    42c4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    42c8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    42cc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    42d0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    42d4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    42d8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    42dc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    42e0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    42e4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    42e8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    42ec:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    42f0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    42f4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    42f8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    42fc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4300:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4304:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4308:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    430c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4310:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4314:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4318:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    431c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4320:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4324:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4328:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    432c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4330:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4334:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4338:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    433c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4340:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4344:	f7ff ff8a 	bl	425c <nrf52_errata_103>
    4348:	b110      	cbz	r0, 4350 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    434a:	4b38      	ldr	r3, [pc, #224]	; (442c <SystemInit+0x198>)
    434c:	4a38      	ldr	r2, [pc, #224]	; (4430 <SystemInit+0x19c>)
    434e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4350:	f7ff ff84 	bl	425c <nrf52_errata_103>
    4354:	b118      	cbz	r0, 435e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4356:	4b37      	ldr	r3, [pc, #220]	; (4434 <SystemInit+0x1a0>)
    4358:	22fb      	movs	r2, #251	; 0xfb
    435a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    435e:	f7ff ff7d 	bl	425c <nrf52_errata_103>
    4362:	b148      	cbz	r0, 4378 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4364:	4934      	ldr	r1, [pc, #208]	; (4438 <SystemInit+0x1a4>)
    4366:	4b35      	ldr	r3, [pc, #212]	; (443c <SystemInit+0x1a8>)
    4368:	680a      	ldr	r2, [r1, #0]
    436a:	681b      	ldr	r3, [r3, #0]
    436c:	f022 020f 	bic.w	r2, r2, #15
    4370:	f003 030f 	and.w	r3, r3, #15
    4374:	4313      	orrs	r3, r2
    4376:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4378:	f7ff ff70 	bl	425c <nrf52_errata_103>
    437c:	b118      	cbz	r0, 4386 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    437e:	4b30      	ldr	r3, [pc, #192]	; (4440 <SystemInit+0x1ac>)
    4380:	f44f 7200 	mov.w	r2, #512	; 0x200
    4384:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4386:	f7ff ff5f 	bl	4248 <nrf52_errata_136>
    438a:	b148      	cbz	r0, 43a0 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    438c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4390:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4394:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4396:	bf44      	itt	mi
    4398:	f06f 0201 	mvnmi.w	r2, #1
    439c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    43a0:	4b28      	ldr	r3, [pc, #160]	; (4444 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    43a2:	681b      	ldr	r3, [r3, #0]
    43a4:	2b08      	cmp	r3, #8
    43a6:	d10e      	bne.n	43c6 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    43a8:	4b27      	ldr	r3, [pc, #156]	; (4448 <SystemInit+0x1b4>)
    43aa:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    43ac:	2b05      	cmp	r3, #5
    43ae:	d802      	bhi.n	43b6 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    43b0:	4a26      	ldr	r2, [pc, #152]	; (444c <SystemInit+0x1b8>)
    43b2:	5cd3      	ldrb	r3, [r2, r3]
    43b4:	b13b      	cbz	r3, 43c6 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    43b6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    43ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    43be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43c2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    43c6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    43ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    43ce:	2a00      	cmp	r2, #0
    43d0:	db03      	blt.n	43da <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    43d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    43d6:	2b00      	cmp	r3, #0
    43d8:	da22      	bge.n	4420 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    43da:	491d      	ldr	r1, [pc, #116]	; (4450 <SystemInit+0x1bc>)
    43dc:	2301      	movs	r3, #1
    43de:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    43e2:	f7ff ff4f 	bl	4284 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    43e6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    43ea:	2412      	movs	r4, #18
    43ec:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    43f0:	f7ff ff48 	bl	4284 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    43f4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    43f8:	f7ff ff44 	bl	4284 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    43fc:	2300      	movs	r3, #0
    43fe:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4402:	f7ff ff3f 	bl	4284 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4406:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    440a:	4912      	ldr	r1, [pc, #72]	; (4454 <SystemInit+0x1c0>)
    440c:	4b12      	ldr	r3, [pc, #72]	; (4458 <SystemInit+0x1c4>)
    440e:	68ca      	ldr	r2, [r1, #12]
    4410:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4414:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4416:	60cb      	str	r3, [r1, #12]
    4418:	f3bf 8f4f 	dsb	sy
    __NOP();
    441c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    441e:	e7fd      	b.n	441c <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4420:	4b0e      	ldr	r3, [pc, #56]	; (445c <SystemInit+0x1c8>)
    4422:	4a0f      	ldr	r2, [pc, #60]	; (4460 <SystemInit+0x1cc>)
    4424:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4426:	bd10      	pop	{r4, pc}
    4428:	4000c000 	.word	0x4000c000
    442c:	4000568c 	.word	0x4000568c
    4430:	00038148 	.word	0x00038148
    4434:	4000f000 	.word	0x4000f000
    4438:	40000ee4 	.word	0x40000ee4
    443c:	10000258 	.word	0x10000258
    4440:	40029640 	.word	0x40029640
    4444:	10000130 	.word	0x10000130
    4448:	10000134 	.word	0x10000134
    444c:	0000847a 	.word	0x0000847a
    4450:	4001e000 	.word	0x4001e000
    4454:	e000ed00 	.word	0xe000ed00
    4458:	05fa0004 	.word	0x05fa0004
    445c:	200000d4 	.word	0x200000d4
    4460:	03d09000 	.word	0x03d09000

00004464 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4464:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4466:	4c14      	ldr	r4, [pc, #80]	; (44b8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4468:	4a14      	ldr	r2, [pc, #80]	; (44bc <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    446a:	4915      	ldr	r1, [pc, #84]	; (44c0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    446c:	2303      	movs	r3, #3
    446e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4470:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4472:	4b14      	ldr	r3, [pc, #80]	; (44c4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4474:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4476:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4478:	f44f 6380 	mov.w	r3, #1024	; 0x400
    447c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    447e:	2300      	movs	r3, #0
    4480:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4482:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4484:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4486:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4488:	4a0f      	ldr	r2, [pc, #60]	; (44c8 <_DoInit+0x64>)
    448a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    448c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    448e:	2210      	movs	r2, #16
    4490:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4492:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4494:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4496:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4498:	f002 fd48 	bl	6f2c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    449c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    44a0:	490a      	ldr	r1, [pc, #40]	; (44cc <_DoInit+0x68>)
    44a2:	4620      	mov	r0, r4
    44a4:	f002 fd42 	bl	6f2c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    44a8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    44ac:	2320      	movs	r3, #32
    44ae:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    44b0:	f3bf 8f5f 	dmb	sy
}
    44b4:	bd10      	pop	{r4, pc}
    44b6:	bf00      	nop
    44b8:	20000944 	.word	0x20000944
    44bc:	00008486 	.word	0x00008486
    44c0:	0000848f 	.word	0x0000848f
    44c4:	20000a5d 	.word	0x20000a5d
    44c8:	20000a4d 	.word	0x20000a4d
    44cc:	00008493 	.word	0x00008493

000044d0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    44d0:	4b0e      	ldr	r3, [pc, #56]	; (450c <z_sys_init_run_level+0x3c>)
{
    44d2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    44d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    44d8:	3001      	adds	r0, #1
    44da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    44de:	42a6      	cmp	r6, r4
    44e0:	d800      	bhi.n	44e4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    44e2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    44e4:	e9d4 3500 	ldrd	r3, r5, [r4]
    44e8:	4628      	mov	r0, r5
    44ea:	4798      	blx	r3
		if (dev != NULL) {
    44ec:	b165      	cbz	r5, 4508 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    44ee:	68eb      	ldr	r3, [r5, #12]
    44f0:	b130      	cbz	r0, 4500 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    44f2:	2800      	cmp	r0, #0
    44f4:	bfb8      	it	lt
    44f6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    44f8:	28ff      	cmp	r0, #255	; 0xff
    44fa:	bfa8      	it	ge
    44fc:	20ff      	movge	r0, #255	; 0xff
    44fe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4500:	785a      	ldrb	r2, [r3, #1]
    4502:	f042 0201 	orr.w	r2, r2, #1
    4506:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4508:	3408      	adds	r4, #8
    450a:	e7e8      	b.n	44de <z_sys_init_run_level+0xe>
    450c:	0000778c 	.word	0x0000778c

00004510 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4510:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4512:	4605      	mov	r5, r0
    4514:	b910      	cbnz	r0, 451c <z_impl_device_get_binding+0xc>
		return NULL;
    4516:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4518:	4620      	mov	r0, r4
    451a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    451c:	7803      	ldrb	r3, [r0, #0]
    451e:	2b00      	cmp	r3, #0
    4520:	d0f9      	beq.n	4516 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4522:	4a0f      	ldr	r2, [pc, #60]	; (4560 <z_impl_device_get_binding+0x50>)
    4524:	4c0f      	ldr	r4, [pc, #60]	; (4564 <z_impl_device_get_binding+0x54>)
    4526:	4616      	mov	r6, r2
    4528:	4294      	cmp	r4, r2
    452a:	d108      	bne.n	453e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    452c:	4c0d      	ldr	r4, [pc, #52]	; (4564 <z_impl_device_get_binding+0x54>)
    452e:	42b4      	cmp	r4, r6
    4530:	d0f1      	beq.n	4516 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4532:	4620      	mov	r0, r4
    4534:	f002 feef 	bl	7316 <z_device_ready>
    4538:	b950      	cbnz	r0, 4550 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    453a:	3418      	adds	r4, #24
    453c:	e7f7      	b.n	452e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    453e:	4620      	mov	r0, r4
    4540:	f002 fee9 	bl	7316 <z_device_ready>
    4544:	b110      	cbz	r0, 454c <z_impl_device_get_binding+0x3c>
    4546:	6823      	ldr	r3, [r4, #0]
    4548:	42ab      	cmp	r3, r5
    454a:	d0e5      	beq.n	4518 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    454c:	3418      	adds	r4, #24
    454e:	e7eb      	b.n	4528 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4550:	6821      	ldr	r1, [r4, #0]
    4552:	4628      	mov	r0, r5
    4554:	f002 fd04 	bl	6f60 <strcmp>
    4558:	2800      	cmp	r0, #0
    455a:	d1ee      	bne.n	453a <z_impl_device_get_binding+0x2a>
    455c:	e7dc      	b.n	4518 <z_impl_device_get_binding+0x8>
    455e:	bf00      	nop
    4560:	000074c0 	.word	0x000074c0
    4564:	00007448 	.word	0x00007448

00004568 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    456a:	4604      	mov	r4, r0
    456c:	460e      	mov	r6, r1
	__asm__ volatile(
    456e:	f04f 0320 	mov.w	r3, #32
    4572:	f3ef 8711 	mrs	r7, BASEPRI
    4576:	f383 8812 	msr	BASEPRI_MAX, r3
    457a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    457e:	f001 fc01 	bl	5d84 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4582:	4631      	mov	r1, r6
    4584:	4605      	mov	r5, r0
    4586:	4620      	mov	r0, r4
    4588:	f002 fe3c 	bl	7204 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    458c:	2c04      	cmp	r4, #4
    458e:	d10c      	bne.n	45aa <z_fatal_error+0x42>
    4590:	490a      	ldr	r1, [pc, #40]	; (45bc <z_fatal_error+0x54>)
    4592:	4a0b      	ldr	r2, [pc, #44]	; (45c0 <z_fatal_error+0x58>)
    4594:	480b      	ldr	r0, [pc, #44]	; (45c4 <z_fatal_error+0x5c>)
    4596:	238f      	movs	r3, #143	; 0x8f
    4598:	f002 fc98 	bl	6ecc <printk>
    459c:	480a      	ldr	r0, [pc, #40]	; (45c8 <z_fatal_error+0x60>)
    459e:	f002 fc95 	bl	6ecc <printk>
    45a2:	4807      	ldr	r0, [pc, #28]	; (45c0 <z_fatal_error+0x58>)
    45a4:	218f      	movs	r1, #143	; 0x8f
    45a6:	f002 fbbd 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    45aa:	f387 8811 	msr	BASEPRI, r7
    45ae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    45b2:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    45b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    45b8:	f7fd be66 	b.w	2288 <z_impl_k_thread_abort>
    45bc:	000084bc 	.word	0x000084bc
    45c0:	0000849a 	.word	0x0000849a
    45c4:	0000793c 	.word	0x0000793c
    45c8:	000084d9 	.word	0x000084d9

000045cc <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    45cc:	4c11      	ldr	r4, [pc, #68]	; (4614 <idle+0x48>)
    45ce:	68a2      	ldr	r2, [r4, #8]
    45d0:	f992 200e 	ldrsb.w	r2, [r2, #14]
    45d4:	2a00      	cmp	r2, #0
{
    45d6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    45d8:	da09      	bge.n	45ee <idle+0x22>
    45da:	490f      	ldr	r1, [pc, #60]	; (4618 <idle+0x4c>)
    45dc:	480f      	ldr	r0, [pc, #60]	; (461c <idle+0x50>)
    45de:	4a10      	ldr	r2, [pc, #64]	; (4620 <idle+0x54>)
    45e0:	2327      	movs	r3, #39	; 0x27
    45e2:	f002 fc73 	bl	6ecc <printk>
    45e6:	480e      	ldr	r0, [pc, #56]	; (4620 <idle+0x54>)
    45e8:	2127      	movs	r1, #39	; 0x27
    45ea:	f002 fb9b 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    45ee:	f04f 0220 	mov.w	r2, #32
    45f2:	f3ef 8311 	mrs	r3, BASEPRI
    45f6:	f382 8812 	msr	BASEPRI_MAX, r2
    45fa:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    45fe:	f001 ffcf 	bl	65a0 <z_get_next_timeout_expiry>
    4602:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4604:	f7fd fa68 	bl	1ad8 <pm_system_suspend>
    4608:	2800      	cmp	r0, #0
    460a:	d1f0      	bne.n	45ee <idle+0x22>
	arch_cpu_idle();
    460c:	f7fd fb1a 	bl	1c44 <arch_cpu_idle>
}
    4610:	e7ed      	b.n	45ee <idle+0x22>
    4612:	bf00      	nop
    4614:	200009ec 	.word	0x200009ec
    4618:	0000852f 	.word	0x0000852f
    461c:	0000793c 	.word	0x0000793c
    4620:	0000850e 	.word	0x0000850e

00004624 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4624:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4626:	2300      	movs	r3, #0
{
    4628:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    462a:	2201      	movs	r2, #1
    462c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4630:	220f      	movs	r2, #15
    4632:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    4636:	4c0d      	ldr	r4, [pc, #52]	; (466c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4638:	4a0d      	ldr	r2, [pc, #52]	; (4670 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    463a:	9301      	str	r3, [sp, #4]
    463c:	490d      	ldr	r1, [pc, #52]	; (4674 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    463e:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4640:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4644:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4648:	f44f 75b0 	mov.w	r5, #352	; 0x160
    464c:	9300      	str	r3, [sp, #0]
    464e:	fb05 1100 	mla	r1, r5, r0, r1
    4652:	4b09      	ldr	r3, [pc, #36]	; (4678 <init_idle_thread+0x54>)
    4654:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4658:	4620      	mov	r0, r4
    465a:	f001 fd15 	bl	6088 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    465e:	7b63      	ldrb	r3, [r4, #13]
    4660:	f023 0304 	bic.w	r3, r3, #4
    4664:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4666:	b007      	add	sp, #28
    4668:	bd30      	pop	{r4, r5, pc}
    466a:	bf00      	nop
    466c:	200001c8 	.word	0x200001c8
    4670:	200009ec 	.word	0x200009ec
    4674:	20001440 	.word	0x20001440
    4678:	000045cd 	.word	0x000045cd

0000467c <bg_thread_main>:
{
    467c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    467e:	4b0a      	ldr	r3, [pc, #40]	; (46a8 <bg_thread_main+0x2c>)
    4680:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4682:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4684:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4686:	f7ff ff23 	bl	44d0 <z_sys_init_run_level>
	boot_banner();
    468a:	f002 f957 	bl	693c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    468e:	2003      	movs	r0, #3
    4690:	f7ff ff1e 	bl	44d0 <z_sys_init_run_level>
	z_init_static_threads();
    4694:	f001 fd5c 	bl	6150 <z_init_static_threads>
	main();
    4698:	f7fc f978 	bl	98c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    469c:	4a03      	ldr	r2, [pc, #12]	; (46ac <bg_thread_main+0x30>)
    469e:	7b13      	ldrb	r3, [r2, #12]
    46a0:	f023 0301 	bic.w	r3, r3, #1
    46a4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    46a6:	bd08      	pop	{r3, pc}
    46a8:	20000e5d 	.word	0x20000e5d
    46ac:	20000248 	.word	0x20000248

000046b0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    46b0:	4802      	ldr	r0, [pc, #8]	; (46bc <z_bss_zero+0xc>)
    46b2:	4a03      	ldr	r2, [pc, #12]	; (46c0 <z_bss_zero+0x10>)
    46b4:	2100      	movs	r1, #0
    46b6:	1a12      	subs	r2, r2, r0
    46b8:	f002 bc69 	b.w	6f8e <memset>
    46bc:	200001a8 	.word	0x200001a8
    46c0:	2000101c 	.word	0x2000101c

000046c4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    46c4:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    46c6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 47a0 <z_cstart+0xdc>
    46ca:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    46cc:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    46d0:	4d2d      	ldr	r5, [pc, #180]	; (4788 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    46d2:	4e2e      	ldr	r6, [pc, #184]	; (478c <z_cstart+0xc8>)
    46d4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    46d6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 47a4 <z_cstart+0xe0>
    46da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    46de:	2400      	movs	r4, #0
    46e0:	616b      	str	r3, [r5, #20]
    46e2:	23e0      	movs	r3, #224	; 0xe0
    46e4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    46e8:	77ec      	strb	r4, [r5, #31]
    46ea:	762c      	strb	r4, [r5, #24]
    46ec:	766c      	strb	r4, [r5, #25]
    46ee:	76ac      	strb	r4, [r5, #26]
    46f0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    46f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    46f6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    46fa:	626b      	str	r3, [r5, #36]	; 0x24
    46fc:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4700:	f7fd fd6c 	bl	21dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4704:	f7fd fa98 	bl	1c38 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4708:	f04f 33ff 	mov.w	r3, #4294967295
    470c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    470e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4710:	f7fd fe94 	bl	243c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4714:	f7fd fdca 	bl	22ac <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4718:	f240 1301 	movw	r3, #257	; 0x101
    471c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4720:	ab06      	add	r3, sp, #24
    4722:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4724:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4728:	f002 fdf4 	bl	7314 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    472c:	4620      	mov	r0, r4
    472e:	f7ff fecf 	bl	44d0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4732:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4734:	4d16      	ldr	r5, [pc, #88]	; (4790 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4736:	f7ff fecb 	bl	44d0 <z_sys_init_run_level>
	z_sched_init();
    473a:	f001 f98d 	bl	5a58 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    473e:	4b15      	ldr	r3, [pc, #84]	; (4794 <z_cstart+0xd0>)
    4740:	9305      	str	r3, [sp, #20]
    4742:	2301      	movs	r3, #1
    4744:	4914      	ldr	r1, [pc, #80]	; (4798 <z_cstart+0xd4>)
    4746:	9400      	str	r4, [sp, #0]
    4748:	e9cd 4303 	strd	r4, r3, [sp, #12]
    474c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4750:	464b      	mov	r3, r9
    4752:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4756:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    4758:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    475a:	f001 fc95 	bl	6088 <z_setup_new_thread>
    475e:	7b6a      	ldrb	r2, [r5, #13]
    4760:	f022 0204 	bic.w	r2, r2, #4
    4764:	736a      	strb	r2, [r5, #13]
    4766:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    4768:	4628      	mov	r0, r5
    476a:	f000 fdc1 	bl	52f0 <z_ready_thread>
		init_idle_thread(i);
    476e:	4620      	mov	r0, r4
    4770:	f7ff ff58 	bl	4624 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4774:	4b09      	ldr	r3, [pc, #36]	; (479c <z_cstart+0xd8>)
    4776:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4778:	464a      	mov	r2, r9
    477a:	4639      	mov	r1, r7
    477c:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    477e:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4780:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4784:	f7fd fb92 	bl	1eac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4788:	e000ed00 	.word	0xe000ed00
    478c:	200009ec 	.word	0x200009ec
    4790:	20000248 	.word	0x20000248
    4794:	00008557 	.word	0x00008557
    4798:	20001020 	.word	0x20001020
    479c:	200001c8 	.word	0x200001c8
    47a0:	20001dc0 	.word	0x20001dc0
    47a4:	0000467d 	.word	0x0000467d

000047a8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    47a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    47ac:	4d16      	ldr	r5, [pc, #88]	; (4808 <init_mem_slab_module+0x60>)
    47ae:	4c17      	ldr	r4, [pc, #92]	; (480c <init_mem_slab_module+0x64>)
    47b0:	4e17      	ldr	r6, [pc, #92]	; (4810 <init_mem_slab_module+0x68>)
    47b2:	46a8      	mov	r8, r5
    47b4:	42ac      	cmp	r4, r5
    47b6:	d90c      	bls.n	47d2 <init_mem_slab_module+0x2a>
    47b8:	4916      	ldr	r1, [pc, #88]	; (4814 <init_mem_slab_module+0x6c>)
    47ba:	4817      	ldr	r0, [pc, #92]	; (4818 <init_mem_slab_module+0x70>)
    47bc:	233c      	movs	r3, #60	; 0x3c
    47be:	4632      	mov	r2, r6
    47c0:	f002 fb84 	bl	6ecc <printk>
    47c4:	4815      	ldr	r0, [pc, #84]	; (481c <init_mem_slab_module+0x74>)
    47c6:	f002 fb81 	bl	6ecc <printk>
    47ca:	213c      	movs	r1, #60	; 0x3c
    47cc:	4630      	mov	r0, r6
    47ce:	f002 faa9 	bl	6d24 <assert_post_action>
    47d2:	4544      	cmp	r4, r8
    47d4:	d302      	bcc.n	47dc <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    47d6:	2000      	movs	r0, #0
	return rc;
}
    47d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    47dc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    47e0:	ea41 0302 	orr.w	r3, r1, r2
    47e4:	f013 0303 	ands.w	r3, r3, #3
    47e8:	d10b      	bne.n	4802 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    47ea:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    47ec:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    47ee:	4283      	cmp	r3, r0
    47f0:	d101      	bne.n	47f6 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    47f2:	3420      	adds	r4, #32
    47f4:	e7de      	b.n	47b4 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    47f6:	69a7      	ldr	r7, [r4, #24]
    47f8:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    47fa:	3301      	adds	r3, #1
		slab->free_list = p;
    47fc:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    47fe:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4800:	e7f5      	b.n	47ee <init_mem_slab_module+0x46>
		return -EINVAL;
    4802:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4806:	e7e7      	b.n	47d8 <init_mem_slab_module+0x30>
    4808:	20000154 	.word	0x20000154
    480c:	20000154 	.word	0x20000154
    4810:	0000855c 	.word	0x0000855c
    4814:	00008581 	.word	0x00008581
    4818:	0000793c 	.word	0x0000793c
    481c:	0000859e 	.word	0x0000859e

00004820 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4824:	4604      	mov	r4, r0
    4826:	460e      	mov	r6, r1
    4828:	4690      	mov	r8, r2
    482a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    482c:	f100 0508 	add.w	r5, r0, #8
    4830:	f04f 0320 	mov.w	r3, #32
    4834:	f3ef 8711 	mrs	r7, BASEPRI
    4838:	f383 8812 	msr	BASEPRI_MAX, r3
    483c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4840:	4628      	mov	r0, r5
    4842:	f001 fd15 	bl	6270 <z_spin_lock_valid>
    4846:	b968      	cbnz	r0, 4864 <k_mem_slab_alloc+0x44>
    4848:	4a24      	ldr	r2, [pc, #144]	; (48dc <k_mem_slab_alloc+0xbc>)
    484a:	4925      	ldr	r1, [pc, #148]	; (48e0 <k_mem_slab_alloc+0xc0>)
    484c:	4825      	ldr	r0, [pc, #148]	; (48e4 <k_mem_slab_alloc+0xc4>)
    484e:	2381      	movs	r3, #129	; 0x81
    4850:	f002 fb3c 	bl	6ecc <printk>
    4854:	4824      	ldr	r0, [pc, #144]	; (48e8 <k_mem_slab_alloc+0xc8>)
    4856:	4629      	mov	r1, r5
    4858:	f002 fb38 	bl	6ecc <printk>
    485c:	481f      	ldr	r0, [pc, #124]	; (48dc <k_mem_slab_alloc+0xbc>)
    485e:	2181      	movs	r1, #129	; 0x81
    4860:	f002 fa60 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    4864:	4628      	mov	r0, r5
    4866:	f001 fd21 	bl	62ac <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    486a:	69a3      	ldr	r3, [r4, #24]
    486c:	b1eb      	cbz	r3, 48aa <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    486e:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    4870:	681b      	ldr	r3, [r3, #0]
    4872:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    4874:	69e3      	ldr	r3, [r4, #28]
    4876:	3301      	adds	r3, #1
    4878:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    487a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    487c:	4628      	mov	r0, r5
    487e:	f001 fd05 	bl	628c <z_spin_unlock_valid>
    4882:	b968      	cbnz	r0, 48a0 <k_mem_slab_alloc+0x80>
    4884:	4a15      	ldr	r2, [pc, #84]	; (48dc <k_mem_slab_alloc+0xbc>)
    4886:	4919      	ldr	r1, [pc, #100]	; (48ec <k_mem_slab_alloc+0xcc>)
    4888:	4816      	ldr	r0, [pc, #88]	; (48e4 <k_mem_slab_alloc+0xc4>)
    488a:	23ac      	movs	r3, #172	; 0xac
    488c:	f002 fb1e 	bl	6ecc <printk>
    4890:	4817      	ldr	r0, [pc, #92]	; (48f0 <k_mem_slab_alloc+0xd0>)
    4892:	4629      	mov	r1, r5
    4894:	f002 fb1a 	bl	6ecc <printk>
    4898:	4810      	ldr	r0, [pc, #64]	; (48dc <k_mem_slab_alloc+0xbc>)
    489a:	21ac      	movs	r1, #172	; 0xac
    489c:	f002 fa42 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    48a0:	f387 8811 	msr	BASEPRI, r7
    48a4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    48a8:	e013      	b.n	48d2 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    48aa:	ea58 0209 	orrs.w	r2, r8, r9
    48ae:	d103      	bne.n	48b8 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    48b0:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    48b2:	f06f 040b 	mvn.w	r4, #11
    48b6:	e7e1      	b.n	487c <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    48b8:	4622      	mov	r2, r4
    48ba:	e9cd 8900 	strd	r8, r9, [sp]
    48be:	4639      	mov	r1, r7
    48c0:	4628      	mov	r0, r5
    48c2:	f000 fec7 	bl	5654 <z_pend_curr>
		if (result == 0) {
    48c6:	4604      	mov	r4, r0
    48c8:	b918      	cbnz	r0, 48d2 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    48ca:	4b0a      	ldr	r3, [pc, #40]	; (48f4 <k_mem_slab_alloc+0xd4>)
    48cc:	689b      	ldr	r3, [r3, #8]
    48ce:	695b      	ldr	r3, [r3, #20]
    48d0:	6033      	str	r3, [r6, #0]
}
    48d2:	4620      	mov	r0, r4
    48d4:	b003      	add	sp, #12
    48d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    48da:	bf00      	nop
    48dc:	00007e17 	.word	0x00007e17
    48e0:	00007e69 	.word	0x00007e69
    48e4:	0000793c 	.word	0x0000793c
    48e8:	00007e7e 	.word	0x00007e7e
    48ec:	00007e3d 	.word	0x00007e3d
    48f0:	00007e54 	.word	0x00007e54
    48f4:	200009ec 	.word	0x200009ec

000048f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    48f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48fc:	4604      	mov	r4, r0
    48fe:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4900:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4904:	f04f 0320 	mov.w	r3, #32
    4908:	f3ef 8711 	mrs	r7, BASEPRI
    490c:	f383 8812 	msr	BASEPRI_MAX, r3
    4910:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4914:	4628      	mov	r0, r5
    4916:	f001 fcab 	bl	6270 <z_spin_lock_valid>
    491a:	b968      	cbnz	r0, 4938 <k_mem_slab_free+0x40>
    491c:	4a22      	ldr	r2, [pc, #136]	; (49a8 <k_mem_slab_free+0xb0>)
    491e:	4923      	ldr	r1, [pc, #140]	; (49ac <k_mem_slab_free+0xb4>)
    4920:	4823      	ldr	r0, [pc, #140]	; (49b0 <k_mem_slab_free+0xb8>)
    4922:	2381      	movs	r3, #129	; 0x81
    4924:	f002 fad2 	bl	6ecc <printk>
    4928:	4822      	ldr	r0, [pc, #136]	; (49b4 <k_mem_slab_free+0xbc>)
    492a:	4629      	mov	r1, r5
    492c:	f002 face 	bl	6ecc <printk>
    4930:	481d      	ldr	r0, [pc, #116]	; (49a8 <k_mem_slab_free+0xb0>)
    4932:	2181      	movs	r1, #129	; 0x81
    4934:	f002 f9f6 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    4938:	4628      	mov	r0, r5
    493a:	f001 fcb7 	bl	62ac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    493e:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4942:	f1b8 0f00 	cmp.w	r8, #0
    4946:	d10f      	bne.n	4968 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4948:	4620      	mov	r0, r4
    494a:	f001 f835 	bl	59b8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    494e:	b158      	cbz	r0, 4968 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4950:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4952:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4954:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    4958:	f000 fcca 	bl	52f0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    495c:	4639      	mov	r1, r7
    495e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    4964:	f000 ba70 	b.w	4e48 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4968:	6833      	ldr	r3, [r6, #0]
    496a:	69a2      	ldr	r2, [r4, #24]
    496c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    496e:	6833      	ldr	r3, [r6, #0]
    4970:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    4972:	69e3      	ldr	r3, [r4, #28]
    4974:	3b01      	subs	r3, #1
    4976:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4978:	4628      	mov	r0, r5
    497a:	f001 fc87 	bl	628c <z_spin_unlock_valid>
    497e:	b968      	cbnz	r0, 499c <k_mem_slab_free+0xa4>
    4980:	4a09      	ldr	r2, [pc, #36]	; (49a8 <k_mem_slab_free+0xb0>)
    4982:	490d      	ldr	r1, [pc, #52]	; (49b8 <k_mem_slab_free+0xc0>)
    4984:	480a      	ldr	r0, [pc, #40]	; (49b0 <k_mem_slab_free+0xb8>)
    4986:	23ac      	movs	r3, #172	; 0xac
    4988:	f002 faa0 	bl	6ecc <printk>
    498c:	480b      	ldr	r0, [pc, #44]	; (49bc <k_mem_slab_free+0xc4>)
    498e:	4629      	mov	r1, r5
    4990:	f002 fa9c 	bl	6ecc <printk>
    4994:	4804      	ldr	r0, [pc, #16]	; (49a8 <k_mem_slab_free+0xb0>)
    4996:	21ac      	movs	r1, #172	; 0xac
    4998:	f002 f9c4 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    499c:	f387 8811 	msr	BASEPRI, r7
    49a0:	f3bf 8f6f 	isb	sy
}
    49a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49a8:	00007e17 	.word	0x00007e17
    49ac:	00007e69 	.word	0x00007e69
    49b0:	0000793c 	.word	0x0000793c
    49b4:	00007e7e 	.word	0x00007e7e
    49b8:	00007e3d 	.word	0x00007e3d
    49bc:	00007e54 	.word	0x00007e54

000049c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    49c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    49c4:	4604      	mov	r4, r0
    49c6:	4616      	mov	r6, r2
    49c8:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    49ca:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    49ce:	b163      	cbz	r3, 49ea <z_impl_k_mutex_lock+0x2a>
    49d0:	4970      	ldr	r1, [pc, #448]	; (4b94 <z_impl_k_mutex_lock+0x1d4>)
    49d2:	4a71      	ldr	r2, [pc, #452]	; (4b98 <z_impl_k_mutex_lock+0x1d8>)
    49d4:	4871      	ldr	r0, [pc, #452]	; (4b9c <z_impl_k_mutex_lock+0x1dc>)
    49d6:	2365      	movs	r3, #101	; 0x65
    49d8:	f002 fa78 	bl	6ecc <printk>
    49dc:	4870      	ldr	r0, [pc, #448]	; (4ba0 <z_impl_k_mutex_lock+0x1e0>)
    49de:	f002 fa75 	bl	6ecc <printk>
    49e2:	486d      	ldr	r0, [pc, #436]	; (4b98 <z_impl_k_mutex_lock+0x1d8>)
    49e4:	2165      	movs	r1, #101	; 0x65
    49e6:	f002 f99d 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    49ea:	f04f 0320 	mov.w	r3, #32
    49ee:	f3ef 8811 	mrs	r8, BASEPRI
    49f2:	f383 8812 	msr	BASEPRI_MAX, r3
    49f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    49fa:	486a      	ldr	r0, [pc, #424]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    49fc:	f001 fc38 	bl	6270 <z_spin_lock_valid>
    4a00:	b968      	cbnz	r0, 4a1e <z_impl_k_mutex_lock+0x5e>
    4a02:	4a69      	ldr	r2, [pc, #420]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4a04:	4969      	ldr	r1, [pc, #420]	; (4bac <z_impl_k_mutex_lock+0x1ec>)
    4a06:	4865      	ldr	r0, [pc, #404]	; (4b9c <z_impl_k_mutex_lock+0x1dc>)
    4a08:	2381      	movs	r3, #129	; 0x81
    4a0a:	f002 fa5f 	bl	6ecc <printk>
    4a0e:	4965      	ldr	r1, [pc, #404]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4a10:	4867      	ldr	r0, [pc, #412]	; (4bb0 <z_impl_k_mutex_lock+0x1f0>)
    4a12:	f002 fa5b 	bl	6ecc <printk>
    4a16:	4864      	ldr	r0, [pc, #400]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4a18:	2181      	movs	r1, #129	; 0x81
    4a1a:	f002 f983 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a1e:	4861      	ldr	r0, [pc, #388]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4a20:	f001 fc44 	bl	62ac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4a24:	68e3      	ldr	r3, [r4, #12]
    4a26:	4a63      	ldr	r2, [pc, #396]	; (4bb4 <z_impl_k_mutex_lock+0x1f4>)
    4a28:	b1fb      	cbz	r3, 4a6a <z_impl_k_mutex_lock+0xaa>
    4a2a:	68a0      	ldr	r0, [r4, #8]
    4a2c:	6891      	ldr	r1, [r2, #8]
    4a2e:	4288      	cmp	r0, r1
    4a30:	d03d      	beq.n	4aae <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4a32:	ea56 0307 	orrs.w	r3, r6, r7
    4a36:	d13c      	bne.n	4ab2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a38:	485a      	ldr	r0, [pc, #360]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4a3a:	f001 fc27 	bl	628c <z_spin_unlock_valid>
    4a3e:	b968      	cbnz	r0, 4a5c <z_impl_k_mutex_lock+0x9c>
    4a40:	4a59      	ldr	r2, [pc, #356]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4a42:	495d      	ldr	r1, [pc, #372]	; (4bb8 <z_impl_k_mutex_lock+0x1f8>)
    4a44:	4855      	ldr	r0, [pc, #340]	; (4b9c <z_impl_k_mutex_lock+0x1dc>)
    4a46:	23ac      	movs	r3, #172	; 0xac
    4a48:	f002 fa40 	bl	6ecc <printk>
    4a4c:	4955      	ldr	r1, [pc, #340]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4a4e:	485b      	ldr	r0, [pc, #364]	; (4bbc <z_impl_k_mutex_lock+0x1fc>)
    4a50:	f002 fa3c 	bl	6ecc <printk>
    4a54:	4854      	ldr	r0, [pc, #336]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4a56:	21ac      	movs	r1, #172	; 0xac
    4a58:	f002 f964 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    4a5c:	f388 8811 	msr	BASEPRI, r8
    4a60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4a64:	f06f 000f 	mvn.w	r0, #15
    4a68:	e01e      	b.n	4aa8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4a6a:	6891      	ldr	r1, [r2, #8]
    4a6c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4a70:	484c      	ldr	r0, [pc, #304]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4a72:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4a74:	3301      	adds	r3, #1
    4a76:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4a78:	6893      	ldr	r3, [r2, #8]
    4a7a:	60a3      	str	r3, [r4, #8]
    4a7c:	f001 fc06 	bl	628c <z_spin_unlock_valid>
    4a80:	b968      	cbnz	r0, 4a9e <z_impl_k_mutex_lock+0xde>
    4a82:	4a49      	ldr	r2, [pc, #292]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4a84:	494c      	ldr	r1, [pc, #304]	; (4bb8 <z_impl_k_mutex_lock+0x1f8>)
    4a86:	4845      	ldr	r0, [pc, #276]	; (4b9c <z_impl_k_mutex_lock+0x1dc>)
    4a88:	23ac      	movs	r3, #172	; 0xac
    4a8a:	f002 fa1f 	bl	6ecc <printk>
    4a8e:	4945      	ldr	r1, [pc, #276]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4a90:	484a      	ldr	r0, [pc, #296]	; (4bbc <z_impl_k_mutex_lock+0x1fc>)
    4a92:	f002 fa1b 	bl	6ecc <printk>
    4a96:	4844      	ldr	r0, [pc, #272]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4a98:	21ac      	movs	r1, #172	; 0xac
    4a9a:	f002 f943 	bl	6d24 <assert_post_action>
    4a9e:	f388 8811 	msr	BASEPRI, r8
    4aa2:	f3bf 8f6f 	isb	sy
		return 0;
    4aa6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4aa8:	b002      	add	sp, #8
    4aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4aae:	6921      	ldr	r1, [r4, #16]
    4ab0:	e7de      	b.n	4a70 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4ab2:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4ab6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4aba:	4299      	cmp	r1, r3
    4abc:	bfa8      	it	ge
    4abe:	4619      	movge	r1, r3
    4ac0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4ac4:	4291      	cmp	r1, r2
    4ac6:	bfb8      	it	lt
    4ac8:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4aca:	428b      	cmp	r3, r1
    4acc:	dd44      	ble.n	4b58 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    4ace:	f000 fdf1 	bl	56b4 <z_set_prio>
    4ad2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4ad4:	e9cd 6700 	strd	r6, r7, [sp]
    4ad8:	4832      	ldr	r0, [pc, #200]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4ada:	4622      	mov	r2, r4
    4adc:	4641      	mov	r1, r8
    4ade:	f000 fdb9 	bl	5654 <z_pend_curr>
	if (got_mutex == 0) {
    4ae2:	2800      	cmp	r0, #0
    4ae4:	d0e0      	beq.n	4aa8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    4ae6:	f04f 0320 	mov.w	r3, #32
    4aea:	f3ef 8611 	mrs	r6, BASEPRI
    4aee:	f383 8812 	msr	BASEPRI_MAX, r3
    4af2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4af6:	482b      	ldr	r0, [pc, #172]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4af8:	f001 fbba 	bl	6270 <z_spin_lock_valid>
    4afc:	b968      	cbnz	r0, 4b1a <z_impl_k_mutex_lock+0x15a>
    4afe:	4a2a      	ldr	r2, [pc, #168]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4b00:	492a      	ldr	r1, [pc, #168]	; (4bac <z_impl_k_mutex_lock+0x1ec>)
    4b02:	4826      	ldr	r0, [pc, #152]	; (4b9c <z_impl_k_mutex_lock+0x1dc>)
    4b04:	2381      	movs	r3, #129	; 0x81
    4b06:	f002 f9e1 	bl	6ecc <printk>
    4b0a:	4926      	ldr	r1, [pc, #152]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4b0c:	4828      	ldr	r0, [pc, #160]	; (4bb0 <z_impl_k_mutex_lock+0x1f0>)
    4b0e:	f002 f9dd 	bl	6ecc <printk>
    4b12:	4825      	ldr	r0, [pc, #148]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4b14:	2181      	movs	r1, #129	; 0x81
    4b16:	f002 f905 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b1a:	4822      	ldr	r0, [pc, #136]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4b1c:	f001 fbc6 	bl	62ac <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4b20:	6823      	ldr	r3, [r4, #0]
    4b22:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b24:	429c      	cmp	r4, r3
    4b26:	d00a      	beq.n	4b3e <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4b28:	b14b      	cbz	r3, 4b3e <z_impl_k_mutex_lock+0x17e>
    4b2a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4b2e:	4299      	cmp	r1, r3
    4b30:	bfa8      	it	ge
    4b32:	4619      	movge	r1, r3
    4b34:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4b38:	4299      	cmp	r1, r3
    4b3a:	bfb8      	it	lt
    4b3c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4b3e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4b40:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4b44:	4299      	cmp	r1, r3
    4b46:	d109      	bne.n	4b5c <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    4b48:	b16d      	cbz	r5, 4b66 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    4b4a:	4816      	ldr	r0, [pc, #88]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4b4c:	4631      	mov	r1, r6
    4b4e:	f000 f97b 	bl	4e48 <z_reschedule>
	return -EAGAIN;
    4b52:	f06f 000a 	mvn.w	r0, #10
    4b56:	e7a7      	b.n	4aa8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    4b58:	2500      	movs	r5, #0
    4b5a:	e7bb      	b.n	4ad4 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    4b5c:	f000 fdaa 	bl	56b4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4b60:	2800      	cmp	r0, #0
    4b62:	d1f2      	bne.n	4b4a <z_impl_k_mutex_lock+0x18a>
    4b64:	e7f0      	b.n	4b48 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b66:	480f      	ldr	r0, [pc, #60]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4b68:	f001 fb90 	bl	628c <z_spin_unlock_valid>
    4b6c:	b968      	cbnz	r0, 4b8a <z_impl_k_mutex_lock+0x1ca>
    4b6e:	4a0e      	ldr	r2, [pc, #56]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4b70:	4911      	ldr	r1, [pc, #68]	; (4bb8 <z_impl_k_mutex_lock+0x1f8>)
    4b72:	480a      	ldr	r0, [pc, #40]	; (4b9c <z_impl_k_mutex_lock+0x1dc>)
    4b74:	23ac      	movs	r3, #172	; 0xac
    4b76:	f002 f9a9 	bl	6ecc <printk>
    4b7a:	490a      	ldr	r1, [pc, #40]	; (4ba4 <z_impl_k_mutex_lock+0x1e4>)
    4b7c:	480f      	ldr	r0, [pc, #60]	; (4bbc <z_impl_k_mutex_lock+0x1fc>)
    4b7e:	f002 f9a5 	bl	6ecc <printk>
    4b82:	4809      	ldr	r0, [pc, #36]	; (4ba8 <z_impl_k_mutex_lock+0x1e8>)
    4b84:	21ac      	movs	r1, #172	; 0xac
    4b86:	f002 f8cd 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    4b8a:	f386 8811 	msr	BASEPRI, r6
    4b8e:	f3bf 8f6f 	isb	sy
    4b92:	e7de      	b.n	4b52 <z_impl_k_mutex_lock+0x192>
    4b94:	000085df 	.word	0x000085df
    4b98:	000085bd 	.word	0x000085bd
    4b9c:	0000793c 	.word	0x0000793c
    4ba0:	000085f1 	.word	0x000085f1
    4ba4:	20000a14 	.word	0x20000a14
    4ba8:	00007e17 	.word	0x00007e17
    4bac:	00007e69 	.word	0x00007e69
    4bb0:	00007e7e 	.word	0x00007e7e
    4bb4:	200009ec 	.word	0x200009ec
    4bb8:	00007e3d 	.word	0x00007e3d
    4bbc:	00007e54 	.word	0x00007e54

00004bc0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4bc0:	b538      	push	{r3, r4, r5, lr}
    4bc2:	4604      	mov	r4, r0
    4bc4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4bc8:	b163      	cbz	r3, 4be4 <z_impl_k_mutex_unlock+0x24>
    4bca:	4952      	ldr	r1, [pc, #328]	; (4d14 <z_impl_k_mutex_unlock+0x154>)
    4bcc:	4a52      	ldr	r2, [pc, #328]	; (4d18 <z_impl_k_mutex_unlock+0x158>)
    4bce:	4853      	ldr	r0, [pc, #332]	; (4d1c <z_impl_k_mutex_unlock+0x15c>)
    4bd0:	23c7      	movs	r3, #199	; 0xc7
    4bd2:	f002 f97b 	bl	6ecc <printk>
    4bd6:	4852      	ldr	r0, [pc, #328]	; (4d20 <z_impl_k_mutex_unlock+0x160>)
    4bd8:	f002 f978 	bl	6ecc <printk>
    4bdc:	484e      	ldr	r0, [pc, #312]	; (4d18 <z_impl_k_mutex_unlock+0x158>)
    4bde:	21c7      	movs	r1, #199	; 0xc7
    4be0:	f002 f8a0 	bl	6d24 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4be4:	68a3      	ldr	r3, [r4, #8]
    4be6:	2b00      	cmp	r3, #0
    4be8:	f000 808d 	beq.w	4d06 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4bec:	4d4d      	ldr	r5, [pc, #308]	; (4d24 <z_impl_k_mutex_unlock+0x164>)
    4bee:	68aa      	ldr	r2, [r5, #8]
    4bf0:	4293      	cmp	r3, r2
    4bf2:	f040 808b 	bne.w	4d0c <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    4bf6:	68e3      	ldr	r3, [r4, #12]
    4bf8:	b94b      	cbnz	r3, 4c0e <z_impl_k_mutex_unlock+0x4e>
    4bfa:	494b      	ldr	r1, [pc, #300]	; (4d28 <z_impl_k_mutex_unlock+0x168>)
    4bfc:	4847      	ldr	r0, [pc, #284]	; (4d1c <z_impl_k_mutex_unlock+0x15c>)
    4bfe:	4a46      	ldr	r2, [pc, #280]	; (4d18 <z_impl_k_mutex_unlock+0x158>)
    4c00:	23df      	movs	r3, #223	; 0xdf
    4c02:	f002 f963 	bl	6ecc <printk>
    4c06:	4844      	ldr	r0, [pc, #272]	; (4d18 <z_impl_k_mutex_unlock+0x158>)
    4c08:	21df      	movs	r1, #223	; 0xdf
    4c0a:	f002 f88b 	bl	6d24 <assert_post_action>
    4c0e:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    4c12:	b163      	cbz	r3, 4c2e <z_impl_k_mutex_unlock+0x6e>
    4c14:	493f      	ldr	r1, [pc, #252]	; (4d14 <z_impl_k_mutex_unlock+0x154>)
    4c16:	4a45      	ldr	r2, [pc, #276]	; (4d2c <z_impl_k_mutex_unlock+0x16c>)
    4c18:	4840      	ldr	r0, [pc, #256]	; (4d1c <z_impl_k_mutex_unlock+0x15c>)
    4c1a:	23fd      	movs	r3, #253	; 0xfd
    4c1c:	f002 f956 	bl	6ecc <printk>
    4c20:	4843      	ldr	r0, [pc, #268]	; (4d30 <z_impl_k_mutex_unlock+0x170>)
    4c22:	f002 f953 	bl	6ecc <printk>
    4c26:	4841      	ldr	r0, [pc, #260]	; (4d2c <z_impl_k_mutex_unlock+0x16c>)
    4c28:	21fd      	movs	r1, #253	; 0xfd
    4c2a:	f002 f87b 	bl	6d24 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4c2e:	68ab      	ldr	r3, [r5, #8]
    4c30:	7bdb      	ldrb	r3, [r3, #15]
    4c32:	2b01      	cmp	r3, #1
    4c34:	d10c      	bne.n	4c50 <z_impl_k_mutex_unlock+0x90>
    4c36:	493f      	ldr	r1, [pc, #252]	; (4d34 <z_impl_k_mutex_unlock+0x174>)
    4c38:	4a3c      	ldr	r2, [pc, #240]	; (4d2c <z_impl_k_mutex_unlock+0x16c>)
    4c3a:	4838      	ldr	r0, [pc, #224]	; (4d1c <z_impl_k_mutex_unlock+0x15c>)
    4c3c:	23fe      	movs	r3, #254	; 0xfe
    4c3e:	f002 f945 	bl	6ecc <printk>
    4c42:	483b      	ldr	r0, [pc, #236]	; (4d30 <z_impl_k_mutex_unlock+0x170>)
    4c44:	f002 f942 	bl	6ecc <printk>
    4c48:	4838      	ldr	r0, [pc, #224]	; (4d2c <z_impl_k_mutex_unlock+0x16c>)
    4c4a:	21fe      	movs	r1, #254	; 0xfe
    4c4c:	f002 f86a 	bl	6d24 <assert_post_action>

	--_current->base.sched_locked;
    4c50:	68aa      	ldr	r2, [r5, #8]
    4c52:	7bd3      	ldrb	r3, [r2, #15]
    4c54:	3b01      	subs	r3, #1
    4c56:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4c58:	68e3      	ldr	r3, [r4, #12]
    4c5a:	2b01      	cmp	r3, #1
    4c5c:	d905      	bls.n	4c6a <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    4c5e:	3b01      	subs	r3, #1
    4c60:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4c62:	f000 fe2d 	bl	58c0 <k_sched_unlock>

	return 0;
    4c66:	2000      	movs	r0, #0
}
    4c68:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4c6a:	f04f 0320 	mov.w	r3, #32
    4c6e:	f3ef 8511 	mrs	r5, BASEPRI
    4c72:	f383 8812 	msr	BASEPRI_MAX, r3
    4c76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c7a:	482f      	ldr	r0, [pc, #188]	; (4d38 <z_impl_k_mutex_unlock+0x178>)
    4c7c:	f001 faf8 	bl	6270 <z_spin_lock_valid>
    4c80:	b968      	cbnz	r0, 4c9e <z_impl_k_mutex_unlock+0xde>
    4c82:	4a2e      	ldr	r2, [pc, #184]	; (4d3c <z_impl_k_mutex_unlock+0x17c>)
    4c84:	492e      	ldr	r1, [pc, #184]	; (4d40 <z_impl_k_mutex_unlock+0x180>)
    4c86:	4825      	ldr	r0, [pc, #148]	; (4d1c <z_impl_k_mutex_unlock+0x15c>)
    4c88:	2381      	movs	r3, #129	; 0x81
    4c8a:	f002 f91f 	bl	6ecc <printk>
    4c8e:	492a      	ldr	r1, [pc, #168]	; (4d38 <z_impl_k_mutex_unlock+0x178>)
    4c90:	482c      	ldr	r0, [pc, #176]	; (4d44 <z_impl_k_mutex_unlock+0x184>)
    4c92:	f002 f91b 	bl	6ecc <printk>
    4c96:	4829      	ldr	r0, [pc, #164]	; (4d3c <z_impl_k_mutex_unlock+0x17c>)
    4c98:	2181      	movs	r1, #129	; 0x81
    4c9a:	f002 f843 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c9e:	4826      	ldr	r0, [pc, #152]	; (4d38 <z_impl_k_mutex_unlock+0x178>)
    4ca0:	f001 fb04 	bl	62ac <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4ca4:	68a0      	ldr	r0, [r4, #8]
    4ca6:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    4ca8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4cac:	4299      	cmp	r1, r3
    4cae:	d001      	beq.n	4cb4 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    4cb0:	f000 fd00 	bl	56b4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4cb4:	4620      	mov	r0, r4
    4cb6:	f000 fe7f 	bl	59b8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4cba:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4cbc:	b158      	cbz	r0, 4cd6 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    4cbe:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4cc2:	6122      	str	r2, [r4, #16]
    4cc4:	2200      	movs	r2, #0
    4cc6:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4cc8:	f000 fb12 	bl	52f0 <z_ready_thread>
		z_reschedule(&lock, key);
    4ccc:	481a      	ldr	r0, [pc, #104]	; (4d38 <z_impl_k_mutex_unlock+0x178>)
    4cce:	4629      	mov	r1, r5
    4cd0:	f000 f8ba 	bl	4e48 <z_reschedule>
    4cd4:	e7c5      	b.n	4c62 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    4cd6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4cd8:	4817      	ldr	r0, [pc, #92]	; (4d38 <z_impl_k_mutex_unlock+0x178>)
    4cda:	f001 fad7 	bl	628c <z_spin_unlock_valid>
    4cde:	b968      	cbnz	r0, 4cfc <z_impl_k_mutex_unlock+0x13c>
    4ce0:	4a16      	ldr	r2, [pc, #88]	; (4d3c <z_impl_k_mutex_unlock+0x17c>)
    4ce2:	4919      	ldr	r1, [pc, #100]	; (4d48 <z_impl_k_mutex_unlock+0x188>)
    4ce4:	480d      	ldr	r0, [pc, #52]	; (4d1c <z_impl_k_mutex_unlock+0x15c>)
    4ce6:	23ac      	movs	r3, #172	; 0xac
    4ce8:	f002 f8f0 	bl	6ecc <printk>
    4cec:	4912      	ldr	r1, [pc, #72]	; (4d38 <z_impl_k_mutex_unlock+0x178>)
    4cee:	4817      	ldr	r0, [pc, #92]	; (4d4c <z_impl_k_mutex_unlock+0x18c>)
    4cf0:	f002 f8ec 	bl	6ecc <printk>
    4cf4:	4811      	ldr	r0, [pc, #68]	; (4d3c <z_impl_k_mutex_unlock+0x17c>)
    4cf6:	21ac      	movs	r1, #172	; 0xac
    4cf8:	f002 f814 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    4cfc:	f385 8811 	msr	BASEPRI, r5
    4d00:	f3bf 8f6f 	isb	sy
    4d04:	e7ad      	b.n	4c62 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    4d06:	f06f 0015 	mvn.w	r0, #21
    4d0a:	e7ad      	b.n	4c68 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    4d0c:	f04f 30ff 	mov.w	r0, #4294967295
    4d10:	e7aa      	b.n	4c68 <z_impl_k_mutex_unlock+0xa8>
    4d12:	bf00      	nop
    4d14:	000085df 	.word	0x000085df
    4d18:	000085bd 	.word	0x000085bd
    4d1c:	0000793c 	.word	0x0000793c
    4d20:	000085f1 	.word	0x000085f1
    4d24:	200009ec 	.word	0x200009ec
    4d28:	00008616 	.word	0x00008616
    4d2c:	0000862d 	.word	0x0000862d
    4d30:	00008658 	.word	0x00008658
    4d34:	0000865b 	.word	0x0000865b
    4d38:	20000a14 	.word	0x20000a14
    4d3c:	00007e17 	.word	0x00007e17
    4d40:	00007e69 	.word	0x00007e69
    4d44:	00007e7e 	.word	0x00007e7e
    4d48:	00007e3d 	.word	0x00007e3d
    4d4c:	00007e54 	.word	0x00007e54

00004d50 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4d50:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4d52:	4c08      	ldr	r4, [pc, #32]	; (4d74 <z_reset_time_slice+0x24>)
    4d54:	6823      	ldr	r3, [r4, #0]
    4d56:	b15b      	cbz	r3, 4d70 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4d58:	f7fe fce2 	bl	3720 <sys_clock_elapsed>
    4d5c:	4603      	mov	r3, r0
    4d5e:	6820      	ldr	r0, [r4, #0]
    4d60:	4a05      	ldr	r2, [pc, #20]	; (4d78 <z_reset_time_slice+0x28>)
    4d62:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    4d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4d68:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4d6a:	2100      	movs	r1, #0
    4d6c:	f001 bc60 	b.w	6630 <z_set_timeout_expiry>
}
    4d70:	bd10      	pop	{r4, pc}
    4d72:	bf00      	nop
    4d74:	20000a24 	.word	0x20000a24
    4d78:	200009ec 	.word	0x200009ec

00004d7c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d7e:	4604      	mov	r4, r0
    4d80:	460d      	mov	r5, r1
	__asm__ volatile(
    4d82:	f04f 0320 	mov.w	r3, #32
    4d86:	f3ef 8611 	mrs	r6, BASEPRI
    4d8a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d92:	4823      	ldr	r0, [pc, #140]	; (4e20 <k_sched_time_slice_set+0xa4>)
    4d94:	f001 fa6c 	bl	6270 <z_spin_lock_valid>
    4d98:	b968      	cbnz	r0, 4db6 <k_sched_time_slice_set+0x3a>
    4d9a:	4a22      	ldr	r2, [pc, #136]	; (4e24 <k_sched_time_slice_set+0xa8>)
    4d9c:	4922      	ldr	r1, [pc, #136]	; (4e28 <k_sched_time_slice_set+0xac>)
    4d9e:	4823      	ldr	r0, [pc, #140]	; (4e2c <k_sched_time_slice_set+0xb0>)
    4da0:	2381      	movs	r3, #129	; 0x81
    4da2:	f002 f893 	bl	6ecc <printk>
    4da6:	491e      	ldr	r1, [pc, #120]	; (4e20 <k_sched_time_slice_set+0xa4>)
    4da8:	4821      	ldr	r0, [pc, #132]	; (4e30 <k_sched_time_slice_set+0xb4>)
    4daa:	f002 f88f 	bl	6ecc <printk>
    4dae:	481d      	ldr	r0, [pc, #116]	; (4e24 <k_sched_time_slice_set+0xa8>)
    4db0:	2181      	movs	r1, #129	; 0x81
    4db2:	f001 ffb7 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    4db6:	481a      	ldr	r0, [pc, #104]	; (4e20 <k_sched_time_slice_set+0xa4>)
    4db8:	f001 fa78 	bl	62ac <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4dbc:	4b1d      	ldr	r3, [pc, #116]	; (4e34 <k_sched_time_slice_set+0xb8>)
    4dbe:	2200      	movs	r2, #0
    4dc0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4dc4:	f240 30e7 	movw	r0, #999	; 0x3e7
    4dc8:	2100      	movs	r1, #0
    4dca:	611a      	str	r2, [r3, #16]
    4dcc:	fbe7 0104 	umlal	r0, r1, r7, r4
    4dd0:	2300      	movs	r3, #0
    4dd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4dd6:	f7fb f993 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4dda:	2c00      	cmp	r4, #0
    4ddc:	4b16      	ldr	r3, [pc, #88]	; (4e38 <k_sched_time_slice_set+0xbc>)
    4dde:	dc1b      	bgt.n	4e18 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4de0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4de2:	4b16      	ldr	r3, [pc, #88]	; (4e3c <k_sched_time_slice_set+0xc0>)
    4de4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4de6:	f7ff ffb3 	bl	4d50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4dea:	480d      	ldr	r0, [pc, #52]	; (4e20 <k_sched_time_slice_set+0xa4>)
    4dec:	f001 fa4e 	bl	628c <z_spin_unlock_valid>
    4df0:	b968      	cbnz	r0, 4e0e <k_sched_time_slice_set+0x92>
    4df2:	4a0c      	ldr	r2, [pc, #48]	; (4e24 <k_sched_time_slice_set+0xa8>)
    4df4:	4912      	ldr	r1, [pc, #72]	; (4e40 <k_sched_time_slice_set+0xc4>)
    4df6:	480d      	ldr	r0, [pc, #52]	; (4e2c <k_sched_time_slice_set+0xb0>)
    4df8:	23ac      	movs	r3, #172	; 0xac
    4dfa:	f002 f867 	bl	6ecc <printk>
    4dfe:	4908      	ldr	r1, [pc, #32]	; (4e20 <k_sched_time_slice_set+0xa4>)
    4e00:	4810      	ldr	r0, [pc, #64]	; (4e44 <k_sched_time_slice_set+0xc8>)
    4e02:	f002 f863 	bl	6ecc <printk>
    4e06:	4807      	ldr	r0, [pc, #28]	; (4e24 <k_sched_time_slice_set+0xa8>)
    4e08:	21ac      	movs	r1, #172	; 0xac
    4e0a:	f001 ff8b 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    4e0e:	f386 8811 	msr	BASEPRI, r6
    4e12:	f3bf 8f6f 	isb	sy
	}
}
    4e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4e18:	2802      	cmp	r0, #2
    4e1a:	bfb8      	it	lt
    4e1c:	2002      	movlt	r0, #2
    4e1e:	e7df      	b.n	4de0 <k_sched_time_slice_set+0x64>
    4e20:	20000a1c 	.word	0x20000a1c
    4e24:	00007e17 	.word	0x00007e17
    4e28:	00007e69 	.word	0x00007e69
    4e2c:	0000793c 	.word	0x0000793c
    4e30:	00007e7e 	.word	0x00007e7e
    4e34:	200009ec 	.word	0x200009ec
    4e38:	20000a24 	.word	0x20000a24
    4e3c:	20000a20 	.word	0x20000a20
    4e40:	00007e3d 	.word	0x00007e3d
    4e44:	00007e54 	.word	0x00007e54

00004e48 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4e48:	b538      	push	{r3, r4, r5, lr}
    4e4a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4e4c:	460d      	mov	r5, r1
    4e4e:	b9e9      	cbnz	r1, 4e8c <z_reschedule+0x44>
    4e50:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    4e54:	b9d3      	cbnz	r3, 4e8c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    4e56:	4b19      	ldr	r3, [pc, #100]	; (4ebc <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    4e58:	69da      	ldr	r2, [r3, #28]
    4e5a:	689b      	ldr	r3, [r3, #8]
    4e5c:	429a      	cmp	r2, r3
    4e5e:	d015      	beq.n	4e8c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e60:	f001 fa14 	bl	628c <z_spin_unlock_valid>
    4e64:	b968      	cbnz	r0, 4e82 <z_reschedule+0x3a>
    4e66:	4a16      	ldr	r2, [pc, #88]	; (4ec0 <z_reschedule+0x78>)
    4e68:	4916      	ldr	r1, [pc, #88]	; (4ec4 <z_reschedule+0x7c>)
    4e6a:	4817      	ldr	r0, [pc, #92]	; (4ec8 <z_reschedule+0x80>)
    4e6c:	23c3      	movs	r3, #195	; 0xc3
    4e6e:	f002 f82d 	bl	6ecc <printk>
    4e72:	4816      	ldr	r0, [pc, #88]	; (4ecc <z_reschedule+0x84>)
    4e74:	4621      	mov	r1, r4
    4e76:	f002 f829 	bl	6ecc <printk>
    4e7a:	4811      	ldr	r0, [pc, #68]	; (4ec0 <z_reschedule+0x78>)
    4e7c:	21c3      	movs	r1, #195	; 0xc3
    4e7e:	f001 ff51 	bl	6d24 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    4e86:	2000      	movs	r0, #0
    4e88:	f7fc bfc0 	b.w	1e0c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e8c:	4620      	mov	r0, r4
    4e8e:	f001 f9fd 	bl	628c <z_spin_unlock_valid>
    4e92:	b968      	cbnz	r0, 4eb0 <z_reschedule+0x68>
    4e94:	4a0a      	ldr	r2, [pc, #40]	; (4ec0 <z_reschedule+0x78>)
    4e96:	490b      	ldr	r1, [pc, #44]	; (4ec4 <z_reschedule+0x7c>)
    4e98:	480b      	ldr	r0, [pc, #44]	; (4ec8 <z_reschedule+0x80>)
    4e9a:	23ac      	movs	r3, #172	; 0xac
    4e9c:	f002 f816 	bl	6ecc <printk>
    4ea0:	480a      	ldr	r0, [pc, #40]	; (4ecc <z_reschedule+0x84>)
    4ea2:	4621      	mov	r1, r4
    4ea4:	f002 f812 	bl	6ecc <printk>
    4ea8:	4805      	ldr	r0, [pc, #20]	; (4ec0 <z_reschedule+0x78>)
    4eaa:	21ac      	movs	r1, #172	; 0xac
    4eac:	f001 ff3a 	bl	6d24 <assert_post_action>
    4eb0:	f385 8811 	msr	BASEPRI, r5
    4eb4:	f3bf 8f6f 	isb	sy
    4eb8:	bd38      	pop	{r3, r4, r5, pc}
    4eba:	bf00      	nop
    4ebc:	200009ec 	.word	0x200009ec
    4ec0:	00007e17 	.word	0x00007e17
    4ec4:	00007e3d 	.word	0x00007e3d
    4ec8:	0000793c 	.word	0x0000793c
    4ecc:	00007e54 	.word	0x00007e54

00004ed0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4ed0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4ed2:	f04f 0320 	mov.w	r3, #32
    4ed6:	f3ef 8511 	mrs	r5, BASEPRI
    4eda:	f383 8812 	msr	BASEPRI_MAX, r3
    4ede:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ee2:	4829      	ldr	r0, [pc, #164]	; (4f88 <k_sched_lock+0xb8>)
    4ee4:	f001 f9c4 	bl	6270 <z_spin_lock_valid>
    4ee8:	b968      	cbnz	r0, 4f06 <k_sched_lock+0x36>
    4eea:	4a28      	ldr	r2, [pc, #160]	; (4f8c <k_sched_lock+0xbc>)
    4eec:	4928      	ldr	r1, [pc, #160]	; (4f90 <k_sched_lock+0xc0>)
    4eee:	4829      	ldr	r0, [pc, #164]	; (4f94 <k_sched_lock+0xc4>)
    4ef0:	2381      	movs	r3, #129	; 0x81
    4ef2:	f001 ffeb 	bl	6ecc <printk>
    4ef6:	4924      	ldr	r1, [pc, #144]	; (4f88 <k_sched_lock+0xb8>)
    4ef8:	4827      	ldr	r0, [pc, #156]	; (4f98 <k_sched_lock+0xc8>)
    4efa:	f001 ffe7 	bl	6ecc <printk>
    4efe:	4823      	ldr	r0, [pc, #140]	; (4f8c <k_sched_lock+0xbc>)
    4f00:	2181      	movs	r1, #129	; 0x81
    4f02:	f001 ff0f 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f06:	4820      	ldr	r0, [pc, #128]	; (4f88 <k_sched_lock+0xb8>)
    4f08:	f001 f9d0 	bl	62ac <z_spin_lock_set_owner>
    4f0c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4f10:	b163      	cbz	r3, 4f2c <k_sched_lock+0x5c>
    4f12:	4922      	ldr	r1, [pc, #136]	; (4f9c <k_sched_lock+0xcc>)
    4f14:	4a22      	ldr	r2, [pc, #136]	; (4fa0 <k_sched_lock+0xd0>)
    4f16:	481f      	ldr	r0, [pc, #124]	; (4f94 <k_sched_lock+0xc4>)
    4f18:	23fd      	movs	r3, #253	; 0xfd
    4f1a:	f001 ffd7 	bl	6ecc <printk>
    4f1e:	4821      	ldr	r0, [pc, #132]	; (4fa4 <k_sched_lock+0xd4>)
    4f20:	f001 ffd4 	bl	6ecc <printk>
    4f24:	481e      	ldr	r0, [pc, #120]	; (4fa0 <k_sched_lock+0xd0>)
    4f26:	21fd      	movs	r1, #253	; 0xfd
    4f28:	f001 fefc 	bl	6d24 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4f2c:	4c1e      	ldr	r4, [pc, #120]	; (4fa8 <k_sched_lock+0xd8>)
    4f2e:	68a2      	ldr	r2, [r4, #8]
    4f30:	7bd2      	ldrb	r2, [r2, #15]
    4f32:	2a01      	cmp	r2, #1
    4f34:	d10c      	bne.n	4f50 <k_sched_lock+0x80>
    4f36:	491d      	ldr	r1, [pc, #116]	; (4fac <k_sched_lock+0xdc>)
    4f38:	4a19      	ldr	r2, [pc, #100]	; (4fa0 <k_sched_lock+0xd0>)
    4f3a:	4816      	ldr	r0, [pc, #88]	; (4f94 <k_sched_lock+0xc4>)
    4f3c:	23fe      	movs	r3, #254	; 0xfe
    4f3e:	f001 ffc5 	bl	6ecc <printk>
    4f42:	4818      	ldr	r0, [pc, #96]	; (4fa4 <k_sched_lock+0xd4>)
    4f44:	f001 ffc2 	bl	6ecc <printk>
    4f48:	4815      	ldr	r0, [pc, #84]	; (4fa0 <k_sched_lock+0xd0>)
    4f4a:	21fe      	movs	r1, #254	; 0xfe
    4f4c:	f001 feea 	bl	6d24 <assert_post_action>
	--_current->base.sched_locked;
    4f50:	68a2      	ldr	r2, [r4, #8]
    4f52:	7bd3      	ldrb	r3, [r2, #15]
    4f54:	3b01      	subs	r3, #1
    4f56:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f58:	480b      	ldr	r0, [pc, #44]	; (4f88 <k_sched_lock+0xb8>)
    4f5a:	f001 f997 	bl	628c <z_spin_unlock_valid>
    4f5e:	b968      	cbnz	r0, 4f7c <k_sched_lock+0xac>
    4f60:	4a0a      	ldr	r2, [pc, #40]	; (4f8c <k_sched_lock+0xbc>)
    4f62:	4913      	ldr	r1, [pc, #76]	; (4fb0 <k_sched_lock+0xe0>)
    4f64:	480b      	ldr	r0, [pc, #44]	; (4f94 <k_sched_lock+0xc4>)
    4f66:	23ac      	movs	r3, #172	; 0xac
    4f68:	f001 ffb0 	bl	6ecc <printk>
    4f6c:	4906      	ldr	r1, [pc, #24]	; (4f88 <k_sched_lock+0xb8>)
    4f6e:	4811      	ldr	r0, [pc, #68]	; (4fb4 <k_sched_lock+0xe4>)
    4f70:	f001 ffac 	bl	6ecc <printk>
    4f74:	4805      	ldr	r0, [pc, #20]	; (4f8c <k_sched_lock+0xbc>)
    4f76:	21ac      	movs	r1, #172	; 0xac
    4f78:	f001 fed4 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    4f7c:	f385 8811 	msr	BASEPRI, r5
    4f80:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4f84:	bd38      	pop	{r3, r4, r5, pc}
    4f86:	bf00      	nop
    4f88:	20000a1c 	.word	0x20000a1c
    4f8c:	00007e17 	.word	0x00007e17
    4f90:	00007e69 	.word	0x00007e69
    4f94:	0000793c 	.word	0x0000793c
    4f98:	00007e7e 	.word	0x00007e7e
    4f9c:	000085df 	.word	0x000085df
    4fa0:	0000862d 	.word	0x0000862d
    4fa4:	00008658 	.word	0x00008658
    4fa8:	200009ec 	.word	0x200009ec
    4fac:	0000865b 	.word	0x0000865b
    4fb0:	00007e3d 	.word	0x00007e3d
    4fb4:	00007e54 	.word	0x00007e54

00004fb8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4fb8:	4b0c      	ldr	r3, [pc, #48]	; (4fec <z_priq_dumb_remove+0x34>)
    4fba:	4299      	cmp	r1, r3
{
    4fbc:	b510      	push	{r4, lr}
    4fbe:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4fc0:	d10b      	bne.n	4fda <z_priq_dumb_remove+0x22>
    4fc2:	490b      	ldr	r1, [pc, #44]	; (4ff0 <z_priq_dumb_remove+0x38>)
    4fc4:	480b      	ldr	r0, [pc, #44]	; (4ff4 <z_priq_dumb_remove+0x3c>)
    4fc6:	4a0c      	ldr	r2, [pc, #48]	; (4ff8 <z_priq_dumb_remove+0x40>)
    4fc8:	f240 33e7 	movw	r3, #999	; 0x3e7
    4fcc:	f001 ff7e 	bl	6ecc <printk>
    4fd0:	4809      	ldr	r0, [pc, #36]	; (4ff8 <z_priq_dumb_remove+0x40>)
    4fd2:	f240 31e7 	movw	r1, #999	; 0x3e7
    4fd6:	f001 fea5 	bl	6d24 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4fda:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    4fde:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4fe0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4fe2:	2300      	movs	r3, #0
	node->prev = NULL;
    4fe4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4fe8:	bd10      	pop	{r4, pc}
    4fea:	bf00      	nop
    4fec:	200001c8 	.word	0x200001c8
    4ff0:	000086ae 	.word	0x000086ae
    4ff4:	0000793c 	.word	0x0000793c
    4ff8:	0000868c 	.word	0x0000868c

00004ffc <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    4ffc:	6883      	ldr	r3, [r0, #8]
{
    4ffe:	b510      	push	{r4, lr}
    5000:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5002:	b95b      	cbnz	r3, 501c <unpend_thread_no_timeout+0x20>
    5004:	490b      	ldr	r1, [pc, #44]	; (5034 <unpend_thread_no_timeout+0x38>)
    5006:	480c      	ldr	r0, [pc, #48]	; (5038 <unpend_thread_no_timeout+0x3c>)
    5008:	4a0c      	ldr	r2, [pc, #48]	; (503c <unpend_thread_no_timeout+0x40>)
    500a:	f240 2383 	movw	r3, #643	; 0x283
    500e:	f001 ff5d 	bl	6ecc <printk>
    5012:	480a      	ldr	r0, [pc, #40]	; (503c <unpend_thread_no_timeout+0x40>)
    5014:	f240 2183 	movw	r1, #643	; 0x283
    5018:	f001 fe84 	bl	6d24 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    501c:	68a0      	ldr	r0, [r4, #8]
    501e:	4621      	mov	r1, r4
    5020:	f7ff ffca 	bl	4fb8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5024:	7b63      	ldrb	r3, [r4, #13]
    5026:	f023 0302 	bic.w	r3, r3, #2
    502a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    502c:	2300      	movs	r3, #0
    502e:	60a3      	str	r3, [r4, #8]
}
    5030:	bd10      	pop	{r4, pc}
    5032:	bf00      	nop
    5034:	000086cf 	.word	0x000086cf
    5038:	0000793c 	.word	0x0000793c
    503c:	0000868c 	.word	0x0000868c

00005040 <update_cache>:
{
    5040:	b538      	push	{r3, r4, r5, lr}
    5042:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5044:	4814      	ldr	r0, [pc, #80]	; (5098 <update_cache+0x58>)
    5046:	4d15      	ldr	r5, [pc, #84]	; (509c <update_cache+0x5c>)
    5048:	f002 f9af 	bl	73aa <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    504c:	4604      	mov	r4, r0
    504e:	b900      	cbnz	r0, 5052 <update_cache+0x12>
    5050:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5052:	b9ca      	cbnz	r2, 5088 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    5054:	68ab      	ldr	r3, [r5, #8]
    5056:	b963      	cbnz	r3, 5072 <update_cache+0x32>
    5058:	4911      	ldr	r1, [pc, #68]	; (50a0 <update_cache+0x60>)
    505a:	4a12      	ldr	r2, [pc, #72]	; (50a4 <update_cache+0x64>)
    505c:	4812      	ldr	r0, [pc, #72]	; (50a8 <update_cache+0x68>)
    505e:	2389      	movs	r3, #137	; 0x89
    5060:	f001 ff34 	bl	6ecc <printk>
    5064:	4811      	ldr	r0, [pc, #68]	; (50ac <update_cache+0x6c>)
    5066:	f001 ff31 	bl	6ecc <printk>
    506a:	480e      	ldr	r0, [pc, #56]	; (50a4 <update_cache+0x64>)
    506c:	2189      	movs	r1, #137	; 0x89
    506e:	f001 fe59 	bl	6d24 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5072:	68ab      	ldr	r3, [r5, #8]
    5074:	7b5a      	ldrb	r2, [r3, #13]
    5076:	06d2      	lsls	r2, r2, #27
    5078:	d106      	bne.n	5088 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    507a:	69a2      	ldr	r2, [r4, #24]
    507c:	b922      	cbnz	r2, 5088 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    507e:	89da      	ldrh	r2, [r3, #14]
    5080:	2a7f      	cmp	r2, #127	; 0x7f
    5082:	d901      	bls.n	5088 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5084:	61eb      	str	r3, [r5, #28]
}
    5086:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5088:	68ab      	ldr	r3, [r5, #8]
    508a:	42a3      	cmp	r3, r4
    508c:	d001      	beq.n	5092 <update_cache+0x52>
			z_reset_time_slice();
    508e:	f7ff fe5f 	bl	4d50 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5092:	61ec      	str	r4, [r5, #28]
}
    5094:	e7f7      	b.n	5086 <update_cache+0x46>
    5096:	bf00      	nop
    5098:	20000a0c 	.word	0x20000a0c
    509c:	200009ec 	.word	0x200009ec
    50a0:	000086e6 	.word	0x000086e6
    50a4:	0000868c 	.word	0x0000868c
    50a8:	0000793c 	.word	0x0000793c
    50ac:	00008658 	.word	0x00008658

000050b0 <move_thread_to_end_of_prio_q>:
{
    50b0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    50b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    50b6:	7b43      	ldrb	r3, [r0, #13]
    50b8:	2a00      	cmp	r2, #0
{
    50ba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    50bc:	da06      	bge.n	50cc <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    50c2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    50c4:	4601      	mov	r1, r0
    50c6:	481f      	ldr	r0, [pc, #124]	; (5144 <move_thread_to_end_of_prio_q+0x94>)
    50c8:	f7ff ff76 	bl	4fb8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    50cc:	7b63      	ldrb	r3, [r4, #13]
    50ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    50d2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    50d4:	4b1c      	ldr	r3, [pc, #112]	; (5148 <move_thread_to_end_of_prio_q+0x98>)
    50d6:	429c      	cmp	r4, r3
    50d8:	d109      	bne.n	50ee <move_thread_to_end_of_prio_q+0x3e>
    50da:	491c      	ldr	r1, [pc, #112]	; (514c <move_thread_to_end_of_prio_q+0x9c>)
    50dc:	481c      	ldr	r0, [pc, #112]	; (5150 <move_thread_to_end_of_prio_q+0xa0>)
    50de:	4a1d      	ldr	r2, [pc, #116]	; (5154 <move_thread_to_end_of_prio_q+0xa4>)
    50e0:	23ba      	movs	r3, #186	; 0xba
    50e2:	f001 fef3 	bl	6ecc <printk>
    50e6:	481b      	ldr	r0, [pc, #108]	; (5154 <move_thread_to_end_of_prio_q+0xa4>)
    50e8:	21ba      	movs	r1, #186	; 0xba
    50ea:	f001 fe1b 	bl	6d24 <assert_post_action>
	return list->head == list;
    50ee:	4a1a      	ldr	r2, [pc, #104]	; (5158 <move_thread_to_end_of_prio_q+0xa8>)
    50f0:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    50f2:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    50f4:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50f8:	428b      	cmp	r3, r1
    50fa:	bf08      	it	eq
    50fc:	2300      	moveq	r3, #0
    50fe:	2b00      	cmp	r3, #0
    5100:	bf38      	it	cc
    5102:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5104:	b1cb      	cbz	r3, 513a <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    5106:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    510a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    510e:	4286      	cmp	r6, r0
    5110:	d00f      	beq.n	5132 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    5112:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5114:	2800      	cmp	r0, #0
    5116:	dd0c      	ble.n	5132 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    5118:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    511a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    511e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5120:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5122:	6890      	ldr	r0, [r2, #8]
    5124:	1b03      	subs	r3, r0, r4
    5126:	4258      	negs	r0, r3
}
    5128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    512c:	4158      	adcs	r0, r3
    512e:	f7ff bf87 	b.w	5040 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5132:	42ab      	cmp	r3, r5
    5134:	d001      	beq.n	513a <move_thread_to_end_of_prio_q+0x8a>
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	e7e4      	b.n	5104 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    513a:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    513e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5140:	6254      	str	r4, [r2, #36]	; 0x24
}
    5142:	e7ee      	b.n	5122 <move_thread_to_end_of_prio_q+0x72>
    5144:	20000a0c 	.word	0x20000a0c
    5148:	200001c8 	.word	0x200001c8
    514c:	000086ae 	.word	0x000086ae
    5150:	0000793c 	.word	0x0000793c
    5154:	0000868c 	.word	0x0000868c
    5158:	200009ec 	.word	0x200009ec

0000515c <z_time_slice>:
{
    515c:	b570      	push	{r4, r5, r6, lr}
    515e:	4604      	mov	r4, r0
	__asm__ volatile(
    5160:	f04f 0320 	mov.w	r3, #32
    5164:	f3ef 8511 	mrs	r5, BASEPRI
    5168:	f383 8812 	msr	BASEPRI_MAX, r3
    516c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5170:	482a      	ldr	r0, [pc, #168]	; (521c <z_time_slice+0xc0>)
    5172:	f001 f87d 	bl	6270 <z_spin_lock_valid>
    5176:	b968      	cbnz	r0, 5194 <z_time_slice+0x38>
    5178:	4a29      	ldr	r2, [pc, #164]	; (5220 <z_time_slice+0xc4>)
    517a:	492a      	ldr	r1, [pc, #168]	; (5224 <z_time_slice+0xc8>)
    517c:	482a      	ldr	r0, [pc, #168]	; (5228 <z_time_slice+0xcc>)
    517e:	2381      	movs	r3, #129	; 0x81
    5180:	f001 fea4 	bl	6ecc <printk>
    5184:	4925      	ldr	r1, [pc, #148]	; (521c <z_time_slice+0xc0>)
    5186:	4829      	ldr	r0, [pc, #164]	; (522c <z_time_slice+0xd0>)
    5188:	f001 fea0 	bl	6ecc <printk>
    518c:	4824      	ldr	r0, [pc, #144]	; (5220 <z_time_slice+0xc4>)
    518e:	2181      	movs	r1, #129	; 0x81
    5190:	f001 fdc8 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    5194:	4821      	ldr	r0, [pc, #132]	; (521c <z_time_slice+0xc0>)
    5196:	f001 f889 	bl	62ac <z_spin_lock_set_owner>
	if (pending_current == _current) {
    519a:	4b25      	ldr	r3, [pc, #148]	; (5230 <z_time_slice+0xd4>)
    519c:	4a25      	ldr	r2, [pc, #148]	; (5234 <z_time_slice+0xd8>)
    519e:	6898      	ldr	r0, [r3, #8]
    51a0:	6811      	ldr	r1, [r2, #0]
    51a2:	4288      	cmp	r0, r1
    51a4:	4619      	mov	r1, r3
    51a6:	d118      	bne.n	51da <z_time_slice+0x7e>
			z_reset_time_slice();
    51a8:	f7ff fdd2 	bl	4d50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51ac:	481b      	ldr	r0, [pc, #108]	; (521c <z_time_slice+0xc0>)
    51ae:	f001 f86d 	bl	628c <z_spin_unlock_valid>
    51b2:	b968      	cbnz	r0, 51d0 <z_time_slice+0x74>
    51b4:	4a1a      	ldr	r2, [pc, #104]	; (5220 <z_time_slice+0xc4>)
    51b6:	4920      	ldr	r1, [pc, #128]	; (5238 <z_time_slice+0xdc>)
    51b8:	481b      	ldr	r0, [pc, #108]	; (5228 <z_time_slice+0xcc>)
    51ba:	23ac      	movs	r3, #172	; 0xac
    51bc:	f001 fe86 	bl	6ecc <printk>
    51c0:	4916      	ldr	r1, [pc, #88]	; (521c <z_time_slice+0xc0>)
    51c2:	481e      	ldr	r0, [pc, #120]	; (523c <z_time_slice+0xe0>)
    51c4:	f001 fe82 	bl	6ecc <printk>
    51c8:	4815      	ldr	r0, [pc, #84]	; (5220 <z_time_slice+0xc4>)
    51ca:	21ac      	movs	r1, #172	; 0xac
    51cc:	f001 fdaa 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    51d0:	f385 8811 	msr	BASEPRI, r5
    51d4:	f3bf 8f6f 	isb	sy
}
    51d8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    51da:	2600      	movs	r6, #0
    51dc:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    51de:	4a18      	ldr	r2, [pc, #96]	; (5240 <z_time_slice+0xe4>)
    51e0:	6812      	ldr	r2, [r2, #0]
    51e2:	b1ba      	cbz	r2, 5214 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    51e4:	89c2      	ldrh	r2, [r0, #14]
    51e6:	2a7f      	cmp	r2, #127	; 0x7f
    51e8:	d814      	bhi.n	5214 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    51ea:	7b42      	ldrb	r2, [r0, #13]
    51ec:	06d2      	lsls	r2, r2, #27
    51ee:	d111      	bne.n	5214 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    51f0:	4a14      	ldr	r2, [pc, #80]	; (5244 <z_time_slice+0xe8>)
    51f2:	f990 600e 	ldrsb.w	r6, [r0, #14]
    51f6:	6812      	ldr	r2, [r2, #0]
    51f8:	4296      	cmp	r6, r2
    51fa:	db0b      	blt.n	5214 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    51fc:	4a12      	ldr	r2, [pc, #72]	; (5248 <z_time_slice+0xec>)
    51fe:	4290      	cmp	r0, r2
    5200:	d008      	beq.n	5214 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    5202:	691a      	ldr	r2, [r3, #16]
    5204:	42a2      	cmp	r2, r4
    5206:	dc02      	bgt.n	520e <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    5208:	f7ff ff52 	bl	50b0 <move_thread_to_end_of_prio_q>
    520c:	e7cc      	b.n	51a8 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    520e:	1b12      	subs	r2, r2, r4
    5210:	611a      	str	r2, [r3, #16]
    5212:	e7cb      	b.n	51ac <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    5214:	2300      	movs	r3, #0
    5216:	610b      	str	r3, [r1, #16]
    5218:	e7c8      	b.n	51ac <z_time_slice+0x50>
    521a:	bf00      	nop
    521c:	20000a1c 	.word	0x20000a1c
    5220:	00007e17 	.word	0x00007e17
    5224:	00007e69 	.word	0x00007e69
    5228:	0000793c 	.word	0x0000793c
    522c:	00007e7e 	.word	0x00007e7e
    5230:	200009ec 	.word	0x200009ec
    5234:	20000a18 	.word	0x20000a18
    5238:	00007e3d 	.word	0x00007e3d
    523c:	00007e54 	.word	0x00007e54
    5240:	20000a24 	.word	0x20000a24
    5244:	20000a20 	.word	0x20000a20
    5248:	200001c8 	.word	0x200001c8

0000524c <ready_thread>:
{
    524c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    524e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5252:	7b43      	ldrb	r3, [r0, #13]
    5254:	2a00      	cmp	r2, #0
{
    5256:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5258:	db3e      	blt.n	52d8 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    525a:	06da      	lsls	r2, r3, #27
    525c:	d13c      	bne.n	52d8 <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    525e:	6985      	ldr	r5, [r0, #24]
    5260:	2d00      	cmp	r5, #0
    5262:	d139      	bne.n	52d8 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    5264:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5268:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    526a:	4b1c      	ldr	r3, [pc, #112]	; (52dc <ready_thread+0x90>)
    526c:	4298      	cmp	r0, r3
    526e:	d109      	bne.n	5284 <ready_thread+0x38>
    5270:	491b      	ldr	r1, [pc, #108]	; (52e0 <ready_thread+0x94>)
    5272:	481c      	ldr	r0, [pc, #112]	; (52e4 <ready_thread+0x98>)
    5274:	4a1c      	ldr	r2, [pc, #112]	; (52e8 <ready_thread+0x9c>)
    5276:	23ba      	movs	r3, #186	; 0xba
    5278:	f001 fe28 	bl	6ecc <printk>
    527c:	481a      	ldr	r0, [pc, #104]	; (52e8 <ready_thread+0x9c>)
    527e:	21ba      	movs	r1, #186	; 0xba
    5280:	f001 fd50 	bl	6d24 <assert_post_action>
	return list->head == list;
    5284:	4919      	ldr	r1, [pc, #100]	; (52ec <ready_thread+0xa0>)
    5286:	460b      	mov	r3, r1
    5288:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    528c:	4298      	cmp	r0, r3
    528e:	bf18      	it	ne
    5290:	4605      	movne	r5, r0
    5292:	2d00      	cmp	r5, #0
    5294:	461a      	mov	r2, r3
    5296:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5298:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    529a:	bf38      	it	cc
    529c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    529e:	b1b3      	cbz	r3, 52ce <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    52a0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    52a4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    52a8:	4286      	cmp	r6, r0
    52aa:	d00c      	beq.n	52c6 <ready_thread+0x7a>
		return b2 - b1;
    52ac:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    52ae:	2800      	cmp	r0, #0
    52b0:	dd09      	ble.n	52c6 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    52b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    52b4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    52b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    52ba:	605c      	str	r4, [r3, #4]
}
    52bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    52c0:	2000      	movs	r0, #0
    52c2:	f7ff bebd 	b.w	5040 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    52c6:	42ab      	cmp	r3, r5
    52c8:	d001      	beq.n	52ce <ready_thread+0x82>
    52ca:	681b      	ldr	r3, [r3, #0]
    52cc:	e7e7      	b.n	529e <ready_thread+0x52>
	node->prev = tail;
    52ce:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    52d2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    52d4:	624c      	str	r4, [r1, #36]	; 0x24
}
    52d6:	e7f1      	b.n	52bc <ready_thread+0x70>
}
    52d8:	bd70      	pop	{r4, r5, r6, pc}
    52da:	bf00      	nop
    52dc:	200001c8 	.word	0x200001c8
    52e0:	000086ae 	.word	0x000086ae
    52e4:	0000793c 	.word	0x0000793c
    52e8:	0000868c 	.word	0x0000868c
    52ec:	200009ec 	.word	0x200009ec

000052f0 <z_ready_thread>:
{
    52f0:	b538      	push	{r3, r4, r5, lr}
    52f2:	4604      	mov	r4, r0
	__asm__ volatile(
    52f4:	f04f 0320 	mov.w	r3, #32
    52f8:	f3ef 8511 	mrs	r5, BASEPRI
    52fc:	f383 8812 	msr	BASEPRI_MAX, r3
    5300:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5304:	4817      	ldr	r0, [pc, #92]	; (5364 <z_ready_thread+0x74>)
    5306:	f000 ffb3 	bl	6270 <z_spin_lock_valid>
    530a:	b968      	cbnz	r0, 5328 <z_ready_thread+0x38>
    530c:	4a16      	ldr	r2, [pc, #88]	; (5368 <z_ready_thread+0x78>)
    530e:	4917      	ldr	r1, [pc, #92]	; (536c <z_ready_thread+0x7c>)
    5310:	4817      	ldr	r0, [pc, #92]	; (5370 <z_ready_thread+0x80>)
    5312:	2381      	movs	r3, #129	; 0x81
    5314:	f001 fdda 	bl	6ecc <printk>
    5318:	4912      	ldr	r1, [pc, #72]	; (5364 <z_ready_thread+0x74>)
    531a:	4816      	ldr	r0, [pc, #88]	; (5374 <z_ready_thread+0x84>)
    531c:	f001 fdd6 	bl	6ecc <printk>
    5320:	4811      	ldr	r0, [pc, #68]	; (5368 <z_ready_thread+0x78>)
    5322:	2181      	movs	r1, #129	; 0x81
    5324:	f001 fcfe 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    5328:	480e      	ldr	r0, [pc, #56]	; (5364 <z_ready_thread+0x74>)
    532a:	f000 ffbf 	bl	62ac <z_spin_lock_set_owner>
			ready_thread(thread);
    532e:	4620      	mov	r0, r4
    5330:	f7ff ff8c 	bl	524c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5334:	480b      	ldr	r0, [pc, #44]	; (5364 <z_ready_thread+0x74>)
    5336:	f000 ffa9 	bl	628c <z_spin_unlock_valid>
    533a:	b968      	cbnz	r0, 5358 <z_ready_thread+0x68>
    533c:	4a0a      	ldr	r2, [pc, #40]	; (5368 <z_ready_thread+0x78>)
    533e:	490e      	ldr	r1, [pc, #56]	; (5378 <z_ready_thread+0x88>)
    5340:	480b      	ldr	r0, [pc, #44]	; (5370 <z_ready_thread+0x80>)
    5342:	23ac      	movs	r3, #172	; 0xac
    5344:	f001 fdc2 	bl	6ecc <printk>
    5348:	4906      	ldr	r1, [pc, #24]	; (5364 <z_ready_thread+0x74>)
    534a:	480c      	ldr	r0, [pc, #48]	; (537c <z_ready_thread+0x8c>)
    534c:	f001 fdbe 	bl	6ecc <printk>
    5350:	4805      	ldr	r0, [pc, #20]	; (5368 <z_ready_thread+0x78>)
    5352:	21ac      	movs	r1, #172	; 0xac
    5354:	f001 fce6 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    5358:	f385 8811 	msr	BASEPRI, r5
    535c:	f3bf 8f6f 	isb	sy
}
    5360:	bd38      	pop	{r3, r4, r5, pc}
    5362:	bf00      	nop
    5364:	20000a1c 	.word	0x20000a1c
    5368:	00007e17 	.word	0x00007e17
    536c:	00007e69 	.word	0x00007e69
    5370:	0000793c 	.word	0x0000793c
    5374:	00007e7e 	.word	0x00007e7e
    5378:	00007e3d 	.word	0x00007e3d
    537c:	00007e54 	.word	0x00007e54

00005380 <z_sched_start>:
{
    5380:	b538      	push	{r3, r4, r5, lr}
    5382:	4604      	mov	r4, r0
	__asm__ volatile(
    5384:	f04f 0320 	mov.w	r3, #32
    5388:	f3ef 8511 	mrs	r5, BASEPRI
    538c:	f383 8812 	msr	BASEPRI_MAX, r3
    5390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5394:	481d      	ldr	r0, [pc, #116]	; (540c <z_sched_start+0x8c>)
    5396:	f000 ff6b 	bl	6270 <z_spin_lock_valid>
    539a:	b968      	cbnz	r0, 53b8 <z_sched_start+0x38>
    539c:	4a1c      	ldr	r2, [pc, #112]	; (5410 <z_sched_start+0x90>)
    539e:	491d      	ldr	r1, [pc, #116]	; (5414 <z_sched_start+0x94>)
    53a0:	481d      	ldr	r0, [pc, #116]	; (5418 <z_sched_start+0x98>)
    53a2:	2381      	movs	r3, #129	; 0x81
    53a4:	f001 fd92 	bl	6ecc <printk>
    53a8:	4918      	ldr	r1, [pc, #96]	; (540c <z_sched_start+0x8c>)
    53aa:	481c      	ldr	r0, [pc, #112]	; (541c <z_sched_start+0x9c>)
    53ac:	f001 fd8e 	bl	6ecc <printk>
    53b0:	4817      	ldr	r0, [pc, #92]	; (5410 <z_sched_start+0x90>)
    53b2:	2181      	movs	r1, #129	; 0x81
    53b4:	f001 fcb6 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    53b8:	4814      	ldr	r0, [pc, #80]	; (540c <z_sched_start+0x8c>)
    53ba:	f000 ff77 	bl	62ac <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    53be:	7b63      	ldrb	r3, [r4, #13]
    53c0:	075a      	lsls	r2, r3, #29
    53c2:	d416      	bmi.n	53f2 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53c4:	4811      	ldr	r0, [pc, #68]	; (540c <z_sched_start+0x8c>)
    53c6:	f000 ff61 	bl	628c <z_spin_unlock_valid>
    53ca:	b968      	cbnz	r0, 53e8 <z_sched_start+0x68>
    53cc:	4a10      	ldr	r2, [pc, #64]	; (5410 <z_sched_start+0x90>)
    53ce:	4914      	ldr	r1, [pc, #80]	; (5420 <z_sched_start+0xa0>)
    53d0:	4811      	ldr	r0, [pc, #68]	; (5418 <z_sched_start+0x98>)
    53d2:	23ac      	movs	r3, #172	; 0xac
    53d4:	f001 fd7a 	bl	6ecc <printk>
    53d8:	490c      	ldr	r1, [pc, #48]	; (540c <z_sched_start+0x8c>)
    53da:	4812      	ldr	r0, [pc, #72]	; (5424 <z_sched_start+0xa4>)
    53dc:	f001 fd76 	bl	6ecc <printk>
    53e0:	480b      	ldr	r0, [pc, #44]	; (5410 <z_sched_start+0x90>)
    53e2:	21ac      	movs	r1, #172	; 0xac
    53e4:	f001 fc9e 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    53e8:	f385 8811 	msr	BASEPRI, r5
    53ec:	f3bf 8f6f 	isb	sy
}
    53f0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    53f2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    53f6:	4620      	mov	r0, r4
    53f8:	7363      	strb	r3, [r4, #13]
    53fa:	f7ff ff27 	bl	524c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    53fe:	4629      	mov	r1, r5
    5400:	4802      	ldr	r0, [pc, #8]	; (540c <z_sched_start+0x8c>)
}
    5402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5406:	f7ff bd1f 	b.w	4e48 <z_reschedule>
    540a:	bf00      	nop
    540c:	20000a1c 	.word	0x20000a1c
    5410:	00007e17 	.word	0x00007e17
    5414:	00007e69 	.word	0x00007e69
    5418:	0000793c 	.word	0x0000793c
    541c:	00007e7e 	.word	0x00007e7e
    5420:	00007e3d 	.word	0x00007e3d
    5424:	00007e54 	.word	0x00007e54

00005428 <z_thread_timeout>:
{
    5428:	b570      	push	{r4, r5, r6, lr}
    542a:	4604      	mov	r4, r0
	__asm__ volatile(
    542c:	f04f 0320 	mov.w	r3, #32
    5430:	f3ef 8611 	mrs	r6, BASEPRI
    5434:	f383 8812 	msr	BASEPRI_MAX, r3
    5438:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    543c:	4820      	ldr	r0, [pc, #128]	; (54c0 <z_thread_timeout+0x98>)
    543e:	f000 ff17 	bl	6270 <z_spin_lock_valid>
    5442:	b968      	cbnz	r0, 5460 <z_thread_timeout+0x38>
    5444:	4a1f      	ldr	r2, [pc, #124]	; (54c4 <z_thread_timeout+0x9c>)
    5446:	4920      	ldr	r1, [pc, #128]	; (54c8 <z_thread_timeout+0xa0>)
    5448:	4820      	ldr	r0, [pc, #128]	; (54cc <z_thread_timeout+0xa4>)
    544a:	2381      	movs	r3, #129	; 0x81
    544c:	f001 fd3e 	bl	6ecc <printk>
    5450:	491b      	ldr	r1, [pc, #108]	; (54c0 <z_thread_timeout+0x98>)
    5452:	481f      	ldr	r0, [pc, #124]	; (54d0 <z_thread_timeout+0xa8>)
    5454:	f001 fd3a 	bl	6ecc <printk>
    5458:	481a      	ldr	r0, [pc, #104]	; (54c4 <z_thread_timeout+0x9c>)
    545a:	2181      	movs	r1, #129	; 0x81
    545c:	f001 fc62 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    5460:	4817      	ldr	r0, [pc, #92]	; (54c0 <z_thread_timeout+0x98>)
    5462:	f000 ff23 	bl	62ac <z_spin_lock_set_owner>
		if (!killed) {
    5466:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    546a:	f013 0f28 	tst.w	r3, #40	; 0x28
    546e:	d110      	bne.n	5492 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5470:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5474:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    5478:	b113      	cbz	r3, 5480 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    547a:	4628      	mov	r0, r5
    547c:	f7ff fdbe 	bl	4ffc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5480:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5484:	f023 0314 	bic.w	r3, r3, #20
    5488:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    548c:	4628      	mov	r0, r5
    548e:	f7ff fedd 	bl	524c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5492:	480b      	ldr	r0, [pc, #44]	; (54c0 <z_thread_timeout+0x98>)
    5494:	f000 fefa 	bl	628c <z_spin_unlock_valid>
    5498:	b968      	cbnz	r0, 54b6 <z_thread_timeout+0x8e>
    549a:	4a0a      	ldr	r2, [pc, #40]	; (54c4 <z_thread_timeout+0x9c>)
    549c:	490d      	ldr	r1, [pc, #52]	; (54d4 <z_thread_timeout+0xac>)
    549e:	480b      	ldr	r0, [pc, #44]	; (54cc <z_thread_timeout+0xa4>)
    54a0:	23ac      	movs	r3, #172	; 0xac
    54a2:	f001 fd13 	bl	6ecc <printk>
    54a6:	4906      	ldr	r1, [pc, #24]	; (54c0 <z_thread_timeout+0x98>)
    54a8:	480b      	ldr	r0, [pc, #44]	; (54d8 <z_thread_timeout+0xb0>)
    54aa:	f001 fd0f 	bl	6ecc <printk>
    54ae:	4805      	ldr	r0, [pc, #20]	; (54c4 <z_thread_timeout+0x9c>)
    54b0:	21ac      	movs	r1, #172	; 0xac
    54b2:	f001 fc37 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    54b6:	f386 8811 	msr	BASEPRI, r6
    54ba:	f3bf 8f6f 	isb	sy
}
    54be:	bd70      	pop	{r4, r5, r6, pc}
    54c0:	20000a1c 	.word	0x20000a1c
    54c4:	00007e17 	.word	0x00007e17
    54c8:	00007e69 	.word	0x00007e69
    54cc:	0000793c 	.word	0x0000793c
    54d0:	00007e7e 	.word	0x00007e7e
    54d4:	00007e3d 	.word	0x00007e3d
    54d8:	00007e54 	.word	0x00007e54

000054dc <unready_thread>:
{
    54dc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    54de:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    54e2:	7b43      	ldrb	r3, [r0, #13]
    54e4:	2a00      	cmp	r2, #0
{
    54e6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    54e8:	da06      	bge.n	54f8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    54ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    54ee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    54f0:	4601      	mov	r1, r0
    54f2:	4806      	ldr	r0, [pc, #24]	; (550c <unready_thread+0x30>)
    54f4:	f7ff fd60 	bl	4fb8 <z_priq_dumb_remove>
	update_cache(thread == _current);
    54f8:	4b05      	ldr	r3, [pc, #20]	; (5510 <unready_thread+0x34>)
    54fa:	6898      	ldr	r0, [r3, #8]
    54fc:	1b03      	subs	r3, r0, r4
    54fe:	4258      	negs	r0, r3
}
    5500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5504:	4158      	adcs	r0, r3
    5506:	f7ff bd9b 	b.w	5040 <update_cache>
    550a:	bf00      	nop
    550c:	20000a0c 	.word	0x20000a0c
    5510:	200009ec 	.word	0x200009ec

00005514 <add_to_waitq_locked>:
{
    5514:	b538      	push	{r3, r4, r5, lr}
    5516:	4604      	mov	r4, r0
    5518:	460d      	mov	r5, r1
	unready_thread(thread);
    551a:	f7ff ffdf 	bl	54dc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    551e:	7b63      	ldrb	r3, [r4, #13]
    5520:	f043 0302 	orr.w	r3, r3, #2
    5524:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5526:	b31d      	cbz	r5, 5570 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5528:	4b17      	ldr	r3, [pc, #92]	; (5588 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    552a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    552c:	429c      	cmp	r4, r3
    552e:	d109      	bne.n	5544 <add_to_waitq_locked+0x30>
    5530:	4916      	ldr	r1, [pc, #88]	; (558c <add_to_waitq_locked+0x78>)
    5532:	4817      	ldr	r0, [pc, #92]	; (5590 <add_to_waitq_locked+0x7c>)
    5534:	4a17      	ldr	r2, [pc, #92]	; (5594 <add_to_waitq_locked+0x80>)
    5536:	23ba      	movs	r3, #186	; 0xba
    5538:	f001 fcc8 	bl	6ecc <printk>
    553c:	4815      	ldr	r0, [pc, #84]	; (5594 <add_to_waitq_locked+0x80>)
    553e:	21ba      	movs	r1, #186	; 0xba
    5540:	f001 fbf0 	bl	6d24 <assert_post_action>
	return list->head == list;
    5544:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5546:	429d      	cmp	r5, r3
    5548:	bf08      	it	eq
    554a:	2300      	moveq	r3, #0
    554c:	2b00      	cmp	r3, #0
    554e:	bf38      	it	cc
    5550:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5552:	b19b      	cbz	r3, 557c <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    5554:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5558:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    555c:	4291      	cmp	r1, r2
    555e:	d008      	beq.n	5572 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    5560:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5562:	2a00      	cmp	r2, #0
    5564:	dd05      	ble.n	5572 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    5566:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5568:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    556c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    556e:	605c      	str	r4, [r3, #4]
}
    5570:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5572:	686a      	ldr	r2, [r5, #4]
    5574:	4293      	cmp	r3, r2
    5576:	d001      	beq.n	557c <add_to_waitq_locked+0x68>
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	e7ea      	b.n	5552 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    557c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    557e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5582:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5584:	606c      	str	r4, [r5, #4]
    5586:	e7f3      	b.n	5570 <add_to_waitq_locked+0x5c>
    5588:	200001c8 	.word	0x200001c8
    558c:	000086ae 	.word	0x000086ae
    5590:	0000793c 	.word	0x0000793c
    5594:	0000868c 	.word	0x0000868c

00005598 <pend>:
{
    5598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    559c:	4604      	mov	r4, r0
    559e:	460d      	mov	r5, r1
    55a0:	4616      	mov	r6, r2
    55a2:	461f      	mov	r7, r3
	__asm__ volatile(
    55a4:	f04f 0320 	mov.w	r3, #32
    55a8:	f3ef 8811 	mrs	r8, BASEPRI
    55ac:	f383 8812 	msr	BASEPRI_MAX, r3
    55b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55b4:	481f      	ldr	r0, [pc, #124]	; (5634 <pend+0x9c>)
    55b6:	f000 fe5b 	bl	6270 <z_spin_lock_valid>
    55ba:	b968      	cbnz	r0, 55d8 <pend+0x40>
    55bc:	4a1e      	ldr	r2, [pc, #120]	; (5638 <pend+0xa0>)
    55be:	491f      	ldr	r1, [pc, #124]	; (563c <pend+0xa4>)
    55c0:	481f      	ldr	r0, [pc, #124]	; (5640 <pend+0xa8>)
    55c2:	2381      	movs	r3, #129	; 0x81
    55c4:	f001 fc82 	bl	6ecc <printk>
    55c8:	491a      	ldr	r1, [pc, #104]	; (5634 <pend+0x9c>)
    55ca:	481e      	ldr	r0, [pc, #120]	; (5644 <pend+0xac>)
    55cc:	f001 fc7e 	bl	6ecc <printk>
    55d0:	4819      	ldr	r0, [pc, #100]	; (5638 <pend+0xa0>)
    55d2:	2181      	movs	r1, #129	; 0x81
    55d4:	f001 fba6 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    55d8:	4816      	ldr	r0, [pc, #88]	; (5634 <pend+0x9c>)
    55da:	f000 fe67 	bl	62ac <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    55de:	4620      	mov	r0, r4
    55e0:	4629      	mov	r1, r5
    55e2:	f7ff ff97 	bl	5514 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55e6:	4813      	ldr	r0, [pc, #76]	; (5634 <pend+0x9c>)
    55e8:	f000 fe50 	bl	628c <z_spin_unlock_valid>
    55ec:	b968      	cbnz	r0, 560a <pend+0x72>
    55ee:	4a12      	ldr	r2, [pc, #72]	; (5638 <pend+0xa0>)
    55f0:	4915      	ldr	r1, [pc, #84]	; (5648 <pend+0xb0>)
    55f2:	4813      	ldr	r0, [pc, #76]	; (5640 <pend+0xa8>)
    55f4:	23ac      	movs	r3, #172	; 0xac
    55f6:	f001 fc69 	bl	6ecc <printk>
    55fa:	490e      	ldr	r1, [pc, #56]	; (5634 <pend+0x9c>)
    55fc:	4813      	ldr	r0, [pc, #76]	; (564c <pend+0xb4>)
    55fe:	f001 fc65 	bl	6ecc <printk>
    5602:	480d      	ldr	r0, [pc, #52]	; (5638 <pend+0xa0>)
    5604:	21ac      	movs	r1, #172	; 0xac
    5606:	f001 fb8d 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    560a:	f388 8811 	msr	BASEPRI, r8
    560e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5612:	1c7b      	adds	r3, r7, #1
    5614:	bf08      	it	eq
    5616:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    561a:	d008      	beq.n	562e <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    561c:	4632      	mov	r2, r6
    561e:	463b      	mov	r3, r7
    5620:	f104 0018 	add.w	r0, r4, #24
    5624:	490a      	ldr	r1, [pc, #40]	; (5650 <pend+0xb8>)
}
    5626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    562a:	f000 be97 	b.w	635c <z_add_timeout>
    562e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5632:	bf00      	nop
    5634:	20000a1c 	.word	0x20000a1c
    5638:	00007e17 	.word	0x00007e17
    563c:	00007e69 	.word	0x00007e69
    5640:	0000793c 	.word	0x0000793c
    5644:	00007e7e 	.word	0x00007e7e
    5648:	00007e3d 	.word	0x00007e3d
    564c:	00007e54 	.word	0x00007e54
    5650:	00005429 	.word	0x00005429

00005654 <z_pend_curr>:
{
    5654:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    5656:	4b11      	ldr	r3, [pc, #68]	; (569c <z_pend_curr+0x48>)
{
    5658:	4604      	mov	r4, r0
	pending_current = _current;
    565a:	6898      	ldr	r0, [r3, #8]
    565c:	4b10      	ldr	r3, [pc, #64]	; (56a0 <z_pend_curr+0x4c>)
{
    565e:	460d      	mov	r5, r1
	pending_current = _current;
    5660:	6018      	str	r0, [r3, #0]
{
    5662:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5668:	f7ff ff96 	bl	5598 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    566c:	4620      	mov	r0, r4
    566e:	f000 fe0d 	bl	628c <z_spin_unlock_valid>
    5672:	b968      	cbnz	r0, 5690 <z_pend_curr+0x3c>
    5674:	4a0b      	ldr	r2, [pc, #44]	; (56a4 <z_pend_curr+0x50>)
    5676:	490c      	ldr	r1, [pc, #48]	; (56a8 <z_pend_curr+0x54>)
    5678:	480c      	ldr	r0, [pc, #48]	; (56ac <z_pend_curr+0x58>)
    567a:	23c3      	movs	r3, #195	; 0xc3
    567c:	f001 fc26 	bl	6ecc <printk>
    5680:	480b      	ldr	r0, [pc, #44]	; (56b0 <z_pend_curr+0x5c>)
    5682:	4621      	mov	r1, r4
    5684:	f001 fc22 	bl	6ecc <printk>
    5688:	4806      	ldr	r0, [pc, #24]	; (56a4 <z_pend_curr+0x50>)
    568a:	21c3      	movs	r1, #195	; 0xc3
    568c:	f001 fb4a 	bl	6d24 <assert_post_action>
    5690:	4628      	mov	r0, r5
}
    5692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5696:	f7fc bbb9 	b.w	1e0c <arch_swap>
    569a:	bf00      	nop
    569c:	200009ec 	.word	0x200009ec
    56a0:	20000a18 	.word	0x20000a18
    56a4:	00007e17 	.word	0x00007e17
    56a8:	00007e3d 	.word	0x00007e3d
    56ac:	0000793c 	.word	0x0000793c
    56b0:	00007e54 	.word	0x00007e54

000056b4 <z_set_prio>:
{
    56b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56b6:	4604      	mov	r4, r0
    56b8:	460e      	mov	r6, r1
	__asm__ volatile(
    56ba:	f04f 0320 	mov.w	r3, #32
    56be:	f3ef 8711 	mrs	r7, BASEPRI
    56c2:	f383 8812 	msr	BASEPRI_MAX, r3
    56c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56ca:	483c      	ldr	r0, [pc, #240]	; (57bc <z_set_prio+0x108>)
    56cc:	f000 fdd0 	bl	6270 <z_spin_lock_valid>
    56d0:	b968      	cbnz	r0, 56ee <z_set_prio+0x3a>
    56d2:	4a3b      	ldr	r2, [pc, #236]	; (57c0 <z_set_prio+0x10c>)
    56d4:	493b      	ldr	r1, [pc, #236]	; (57c4 <z_set_prio+0x110>)
    56d6:	483c      	ldr	r0, [pc, #240]	; (57c8 <z_set_prio+0x114>)
    56d8:	2381      	movs	r3, #129	; 0x81
    56da:	f001 fbf7 	bl	6ecc <printk>
    56de:	4937      	ldr	r1, [pc, #220]	; (57bc <z_set_prio+0x108>)
    56e0:	483a      	ldr	r0, [pc, #232]	; (57cc <z_set_prio+0x118>)
    56e2:	f001 fbf3 	bl	6ecc <printk>
    56e6:	4836      	ldr	r0, [pc, #216]	; (57c0 <z_set_prio+0x10c>)
    56e8:	2181      	movs	r1, #129	; 0x81
    56ea:	f001 fb1b 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    56ee:	4833      	ldr	r0, [pc, #204]	; (57bc <z_set_prio+0x108>)
    56f0:	f000 fddc 	bl	62ac <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    56f4:	7b63      	ldrb	r3, [r4, #13]
    56f6:	06da      	lsls	r2, r3, #27
    56f8:	b276      	sxtb	r6, r6
    56fa:	d15c      	bne.n	57b6 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    56fc:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    56fe:	2d00      	cmp	r5, #0
    5700:	d159      	bne.n	57b6 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5706:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5708:	4831      	ldr	r0, [pc, #196]	; (57d0 <z_set_prio+0x11c>)
    570a:	4621      	mov	r1, r4
    570c:	f7ff fc54 	bl	4fb8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5710:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    5712:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5714:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5718:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    571a:	4b2e      	ldr	r3, [pc, #184]	; (57d4 <z_set_prio+0x120>)
    571c:	429c      	cmp	r4, r3
    571e:	d109      	bne.n	5734 <z_set_prio+0x80>
    5720:	492d      	ldr	r1, [pc, #180]	; (57d8 <z_set_prio+0x124>)
    5722:	4829      	ldr	r0, [pc, #164]	; (57c8 <z_set_prio+0x114>)
    5724:	4a2d      	ldr	r2, [pc, #180]	; (57dc <z_set_prio+0x128>)
    5726:	23ba      	movs	r3, #186	; 0xba
    5728:	f001 fbd0 	bl	6ecc <printk>
    572c:	482b      	ldr	r0, [pc, #172]	; (57dc <z_set_prio+0x128>)
    572e:	21ba      	movs	r1, #186	; 0xba
    5730:	f001 faf8 	bl	6d24 <assert_post_action>
	return list->head == list;
    5734:	492a      	ldr	r1, [pc, #168]	; (57e0 <z_set_prio+0x12c>)
    5736:	460b      	mov	r3, r1
    5738:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    573c:	4298      	cmp	r0, r3
    573e:	bf18      	it	ne
    5740:	4605      	movne	r5, r0
    5742:	2d00      	cmp	r5, #0
    5744:	461a      	mov	r2, r3
    5746:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5748:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    574a:	bf38      	it	cc
    574c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    574e:	b36b      	cbz	r3, 57ac <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    5750:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5754:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5758:	4286      	cmp	r6, r0
    575a:	d023      	beq.n	57a4 <z_set_prio+0xf0>
		return b2 - b1;
    575c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    575e:	2800      	cmp	r0, #0
    5760:	dd20      	ble.n	57a4 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    5762:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5764:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5768:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    576a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    576c:	2001      	movs	r0, #1
    576e:	f7ff fc67 	bl	5040 <update_cache>
    5772:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5774:	4811      	ldr	r0, [pc, #68]	; (57bc <z_set_prio+0x108>)
    5776:	f000 fd89 	bl	628c <z_spin_unlock_valid>
    577a:	b968      	cbnz	r0, 5798 <z_set_prio+0xe4>
    577c:	4a10      	ldr	r2, [pc, #64]	; (57c0 <z_set_prio+0x10c>)
    577e:	4919      	ldr	r1, [pc, #100]	; (57e4 <z_set_prio+0x130>)
    5780:	4811      	ldr	r0, [pc, #68]	; (57c8 <z_set_prio+0x114>)
    5782:	23ac      	movs	r3, #172	; 0xac
    5784:	f001 fba2 	bl	6ecc <printk>
    5788:	490c      	ldr	r1, [pc, #48]	; (57bc <z_set_prio+0x108>)
    578a:	4817      	ldr	r0, [pc, #92]	; (57e8 <z_set_prio+0x134>)
    578c:	f001 fb9e 	bl	6ecc <printk>
    5790:	480b      	ldr	r0, [pc, #44]	; (57c0 <z_set_prio+0x10c>)
    5792:	21ac      	movs	r1, #172	; 0xac
    5794:	f001 fac6 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    5798:	f387 8811 	msr	BASEPRI, r7
    579c:	f3bf 8f6f 	isb	sy
}
    57a0:	4620      	mov	r0, r4
    57a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    57a4:	42ab      	cmp	r3, r5
    57a6:	d001      	beq.n	57ac <z_set_prio+0xf8>
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	e7d0      	b.n	574e <z_set_prio+0x9a>
	node->prev = tail;
    57ac:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    57b0:	602c      	str	r4, [r5, #0]
	list->tail = node;
    57b2:	624c      	str	r4, [r1, #36]	; 0x24
}
    57b4:	e7da      	b.n	576c <z_set_prio+0xb8>
			thread->base.prio = prio;
    57b6:	73a6      	strb	r6, [r4, #14]
    57b8:	2400      	movs	r4, #0
    57ba:	e7db      	b.n	5774 <z_set_prio+0xc0>
    57bc:	20000a1c 	.word	0x20000a1c
    57c0:	00007e17 	.word	0x00007e17
    57c4:	00007e69 	.word	0x00007e69
    57c8:	0000793c 	.word	0x0000793c
    57cc:	00007e7e 	.word	0x00007e7e
    57d0:	20000a0c 	.word	0x20000a0c
    57d4:	200001c8 	.word	0x200001c8
    57d8:	000086ae 	.word	0x000086ae
    57dc:	0000868c 	.word	0x0000868c
    57e0:	200009ec 	.word	0x200009ec
    57e4:	00007e3d 	.word	0x00007e3d
    57e8:	00007e54 	.word	0x00007e54

000057ec <z_impl_k_thread_suspend>:
{
    57ec:	b570      	push	{r4, r5, r6, lr}
    57ee:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    57f0:	3018      	adds	r0, #24
    57f2:	f000 fe87 	bl	6504 <z_abort_timeout>
	__asm__ volatile(
    57f6:	f04f 0320 	mov.w	r3, #32
    57fa:	f3ef 8611 	mrs	r6, BASEPRI
    57fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5802:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5806:	4825      	ldr	r0, [pc, #148]	; (589c <z_impl_k_thread_suspend+0xb0>)
    5808:	f000 fd32 	bl	6270 <z_spin_lock_valid>
    580c:	b968      	cbnz	r0, 582a <z_impl_k_thread_suspend+0x3e>
    580e:	4a24      	ldr	r2, [pc, #144]	; (58a0 <z_impl_k_thread_suspend+0xb4>)
    5810:	4924      	ldr	r1, [pc, #144]	; (58a4 <z_impl_k_thread_suspend+0xb8>)
    5812:	4825      	ldr	r0, [pc, #148]	; (58a8 <z_impl_k_thread_suspend+0xbc>)
    5814:	2381      	movs	r3, #129	; 0x81
    5816:	f001 fb59 	bl	6ecc <printk>
    581a:	4920      	ldr	r1, [pc, #128]	; (589c <z_impl_k_thread_suspend+0xb0>)
    581c:	4823      	ldr	r0, [pc, #140]	; (58ac <z_impl_k_thread_suspend+0xc0>)
    581e:	f001 fb55 	bl	6ecc <printk>
    5822:	481f      	ldr	r0, [pc, #124]	; (58a0 <z_impl_k_thread_suspend+0xb4>)
    5824:	2181      	movs	r1, #129	; 0x81
    5826:	f001 fa7d 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    582a:	481c      	ldr	r0, [pc, #112]	; (589c <z_impl_k_thread_suspend+0xb0>)
    582c:	f000 fd3e 	bl	62ac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5830:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5834:	7b63      	ldrb	r3, [r4, #13]
    5836:	2a00      	cmp	r2, #0
    5838:	da06      	bge.n	5848 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    583a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    583e:	481c      	ldr	r0, [pc, #112]	; (58b0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5840:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5842:	4621      	mov	r1, r4
    5844:	f7ff fbb8 	bl	4fb8 <z_priq_dumb_remove>
		update_cache(thread == _current);
    5848:	4d1a      	ldr	r5, [pc, #104]	; (58b4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    584a:	7b63      	ldrb	r3, [r4, #13]
    584c:	68a8      	ldr	r0, [r5, #8]
    584e:	f043 0310 	orr.w	r3, r3, #16
    5852:	7363      	strb	r3, [r4, #13]
    5854:	1b03      	subs	r3, r0, r4
    5856:	4258      	negs	r0, r3
    5858:	4158      	adcs	r0, r3
    585a:	f7ff fbf1 	bl	5040 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    585e:	480f      	ldr	r0, [pc, #60]	; (589c <z_impl_k_thread_suspend+0xb0>)
    5860:	f000 fd14 	bl	628c <z_spin_unlock_valid>
    5864:	b968      	cbnz	r0, 5882 <z_impl_k_thread_suspend+0x96>
    5866:	4a0e      	ldr	r2, [pc, #56]	; (58a0 <z_impl_k_thread_suspend+0xb4>)
    5868:	4913      	ldr	r1, [pc, #76]	; (58b8 <z_impl_k_thread_suspend+0xcc>)
    586a:	480f      	ldr	r0, [pc, #60]	; (58a8 <z_impl_k_thread_suspend+0xbc>)
    586c:	23ac      	movs	r3, #172	; 0xac
    586e:	f001 fb2d 	bl	6ecc <printk>
    5872:	490a      	ldr	r1, [pc, #40]	; (589c <z_impl_k_thread_suspend+0xb0>)
    5874:	4811      	ldr	r0, [pc, #68]	; (58bc <z_impl_k_thread_suspend+0xd0>)
    5876:	f001 fb29 	bl	6ecc <printk>
    587a:	4809      	ldr	r0, [pc, #36]	; (58a0 <z_impl_k_thread_suspend+0xb4>)
    587c:	21ac      	movs	r1, #172	; 0xac
    587e:	f001 fa51 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    5882:	f386 8811 	msr	BASEPRI, r6
    5886:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    588a:	68ab      	ldr	r3, [r5, #8]
    588c:	42a3      	cmp	r3, r4
    588e:	d103      	bne.n	5898 <z_impl_k_thread_suspend+0xac>
}
    5890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5894:	f001 bd7f 	b.w	7396 <z_reschedule_unlocked>
}
    5898:	bd70      	pop	{r4, r5, r6, pc}
    589a:	bf00      	nop
    589c:	20000a1c 	.word	0x20000a1c
    58a0:	00007e17 	.word	0x00007e17
    58a4:	00007e69 	.word	0x00007e69
    58a8:	0000793c 	.word	0x0000793c
    58ac:	00007e7e 	.word	0x00007e7e
    58b0:	20000a0c 	.word	0x20000a0c
    58b4:	200009ec 	.word	0x200009ec
    58b8:	00007e3d 	.word	0x00007e3d
    58bc:	00007e54 	.word	0x00007e54

000058c0 <k_sched_unlock>:
{
    58c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    58c2:	f04f 0320 	mov.w	r3, #32
    58c6:	f3ef 8511 	mrs	r5, BASEPRI
    58ca:	f383 8812 	msr	BASEPRI_MAX, r3
    58ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58d2:	482d      	ldr	r0, [pc, #180]	; (5988 <k_sched_unlock+0xc8>)
    58d4:	f000 fccc 	bl	6270 <z_spin_lock_valid>
    58d8:	b968      	cbnz	r0, 58f6 <k_sched_unlock+0x36>
    58da:	4a2c      	ldr	r2, [pc, #176]	; (598c <k_sched_unlock+0xcc>)
    58dc:	492c      	ldr	r1, [pc, #176]	; (5990 <k_sched_unlock+0xd0>)
    58de:	482d      	ldr	r0, [pc, #180]	; (5994 <k_sched_unlock+0xd4>)
    58e0:	2381      	movs	r3, #129	; 0x81
    58e2:	f001 faf3 	bl	6ecc <printk>
    58e6:	4928      	ldr	r1, [pc, #160]	; (5988 <k_sched_unlock+0xc8>)
    58e8:	482b      	ldr	r0, [pc, #172]	; (5998 <k_sched_unlock+0xd8>)
    58ea:	f001 faef 	bl	6ecc <printk>
    58ee:	4827      	ldr	r0, [pc, #156]	; (598c <k_sched_unlock+0xcc>)
    58f0:	2181      	movs	r1, #129	; 0x81
    58f2:	f001 fa17 	bl	6d24 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    58f6:	4c29      	ldr	r4, [pc, #164]	; (599c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    58f8:	4823      	ldr	r0, [pc, #140]	; (5988 <k_sched_unlock+0xc8>)
    58fa:	f000 fcd7 	bl	62ac <z_spin_lock_set_owner>
    58fe:	68a2      	ldr	r2, [r4, #8]
    5900:	7bd2      	ldrb	r2, [r2, #15]
    5902:	b972      	cbnz	r2, 5922 <k_sched_unlock+0x62>
    5904:	4926      	ldr	r1, [pc, #152]	; (59a0 <k_sched_unlock+0xe0>)
    5906:	4a27      	ldr	r2, [pc, #156]	; (59a4 <k_sched_unlock+0xe4>)
    5908:	4822      	ldr	r0, [pc, #136]	; (5994 <k_sched_unlock+0xd4>)
    590a:	f240 3385 	movw	r3, #901	; 0x385
    590e:	f001 fadd 	bl	6ecc <printk>
    5912:	4825      	ldr	r0, [pc, #148]	; (59a8 <k_sched_unlock+0xe8>)
    5914:	f001 fada 	bl	6ecc <printk>
    5918:	4822      	ldr	r0, [pc, #136]	; (59a4 <k_sched_unlock+0xe4>)
    591a:	f240 3185 	movw	r1, #901	; 0x385
    591e:	f001 fa01 	bl	6d24 <assert_post_action>
    5922:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    5926:	b173      	cbz	r3, 5946 <k_sched_unlock+0x86>
    5928:	4920      	ldr	r1, [pc, #128]	; (59ac <k_sched_unlock+0xec>)
    592a:	4a1e      	ldr	r2, [pc, #120]	; (59a4 <k_sched_unlock+0xe4>)
    592c:	4819      	ldr	r0, [pc, #100]	; (5994 <k_sched_unlock+0xd4>)
    592e:	f240 3386 	movw	r3, #902	; 0x386
    5932:	f001 facb 	bl	6ecc <printk>
    5936:	481c      	ldr	r0, [pc, #112]	; (59a8 <k_sched_unlock+0xe8>)
    5938:	f001 fac8 	bl	6ecc <printk>
    593c:	4819      	ldr	r0, [pc, #100]	; (59a4 <k_sched_unlock+0xe4>)
    593e:	f240 3186 	movw	r1, #902	; 0x386
    5942:	f001 f9ef 	bl	6d24 <assert_post_action>
		++_current->base.sched_locked;
    5946:	68a2      	ldr	r2, [r4, #8]
    5948:	7bd3      	ldrb	r3, [r2, #15]
    594a:	3301      	adds	r3, #1
		update_cache(0);
    594c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    594e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5950:	f7ff fb76 	bl	5040 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5954:	480c      	ldr	r0, [pc, #48]	; (5988 <k_sched_unlock+0xc8>)
    5956:	f000 fc99 	bl	628c <z_spin_unlock_valid>
    595a:	b968      	cbnz	r0, 5978 <k_sched_unlock+0xb8>
    595c:	4a0b      	ldr	r2, [pc, #44]	; (598c <k_sched_unlock+0xcc>)
    595e:	4914      	ldr	r1, [pc, #80]	; (59b0 <k_sched_unlock+0xf0>)
    5960:	480c      	ldr	r0, [pc, #48]	; (5994 <k_sched_unlock+0xd4>)
    5962:	23ac      	movs	r3, #172	; 0xac
    5964:	f001 fab2 	bl	6ecc <printk>
    5968:	4907      	ldr	r1, [pc, #28]	; (5988 <k_sched_unlock+0xc8>)
    596a:	4812      	ldr	r0, [pc, #72]	; (59b4 <k_sched_unlock+0xf4>)
    596c:	f001 faae 	bl	6ecc <printk>
    5970:	4806      	ldr	r0, [pc, #24]	; (598c <k_sched_unlock+0xcc>)
    5972:	21ac      	movs	r1, #172	; 0xac
    5974:	f001 f9d6 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    5978:	f385 8811 	msr	BASEPRI, r5
    597c:	f3bf 8f6f 	isb	sy
}
    5980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    5984:	f001 bd07 	b.w	7396 <z_reschedule_unlocked>
    5988:	20000a1c 	.word	0x20000a1c
    598c:	00007e17 	.word	0x00007e17
    5990:	00007e69 	.word	0x00007e69
    5994:	0000793c 	.word	0x0000793c
    5998:	00007e7e 	.word	0x00007e7e
    599c:	200009ec 	.word	0x200009ec
    59a0:	0000870d 	.word	0x0000870d
    59a4:	0000868c 	.word	0x0000868c
    59a8:	00008658 	.word	0x00008658
    59ac:	000085df 	.word	0x000085df
    59b0:	00007e3d 	.word	0x00007e3d
    59b4:	00007e54 	.word	0x00007e54

000059b8 <z_unpend_first_thread>:
{
    59b8:	b538      	push	{r3, r4, r5, lr}
    59ba:	4604      	mov	r4, r0
	__asm__ volatile(
    59bc:	f04f 0320 	mov.w	r3, #32
    59c0:	f3ef 8511 	mrs	r5, BASEPRI
    59c4:	f383 8812 	msr	BASEPRI_MAX, r3
    59c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59cc:	481b      	ldr	r0, [pc, #108]	; (5a3c <z_unpend_first_thread+0x84>)
    59ce:	f000 fc4f 	bl	6270 <z_spin_lock_valid>
    59d2:	b968      	cbnz	r0, 59f0 <z_unpend_first_thread+0x38>
    59d4:	4a1a      	ldr	r2, [pc, #104]	; (5a40 <z_unpend_first_thread+0x88>)
    59d6:	491b      	ldr	r1, [pc, #108]	; (5a44 <z_unpend_first_thread+0x8c>)
    59d8:	481b      	ldr	r0, [pc, #108]	; (5a48 <z_unpend_first_thread+0x90>)
    59da:	2381      	movs	r3, #129	; 0x81
    59dc:	f001 fa76 	bl	6ecc <printk>
    59e0:	4916      	ldr	r1, [pc, #88]	; (5a3c <z_unpend_first_thread+0x84>)
    59e2:	481a      	ldr	r0, [pc, #104]	; (5a4c <z_unpend_first_thread+0x94>)
    59e4:	f001 fa72 	bl	6ecc <printk>
    59e8:	4815      	ldr	r0, [pc, #84]	; (5a40 <z_unpend_first_thread+0x88>)
    59ea:	2181      	movs	r1, #129	; 0x81
    59ec:	f001 f99a 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    59f0:	4812      	ldr	r0, [pc, #72]	; (5a3c <z_unpend_first_thread+0x84>)
    59f2:	f000 fc5b 	bl	62ac <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    59f6:	4620      	mov	r0, r4
    59f8:	f001 fcd7 	bl	73aa <z_priq_dumb_best>
		if (thread != NULL) {
    59fc:	4604      	mov	r4, r0
    59fe:	b128      	cbz	r0, 5a0c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    5a00:	f7ff fafc 	bl	4ffc <unpend_thread_no_timeout>
    5a04:	f104 0018 	add.w	r0, r4, #24
    5a08:	f000 fd7c 	bl	6504 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a0c:	480b      	ldr	r0, [pc, #44]	; (5a3c <z_unpend_first_thread+0x84>)
    5a0e:	f000 fc3d 	bl	628c <z_spin_unlock_valid>
    5a12:	b968      	cbnz	r0, 5a30 <z_unpend_first_thread+0x78>
    5a14:	4a0a      	ldr	r2, [pc, #40]	; (5a40 <z_unpend_first_thread+0x88>)
    5a16:	490e      	ldr	r1, [pc, #56]	; (5a50 <z_unpend_first_thread+0x98>)
    5a18:	480b      	ldr	r0, [pc, #44]	; (5a48 <z_unpend_first_thread+0x90>)
    5a1a:	23ac      	movs	r3, #172	; 0xac
    5a1c:	f001 fa56 	bl	6ecc <printk>
    5a20:	4906      	ldr	r1, [pc, #24]	; (5a3c <z_unpend_first_thread+0x84>)
    5a22:	480c      	ldr	r0, [pc, #48]	; (5a54 <z_unpend_first_thread+0x9c>)
    5a24:	f001 fa52 	bl	6ecc <printk>
    5a28:	4805      	ldr	r0, [pc, #20]	; (5a40 <z_unpend_first_thread+0x88>)
    5a2a:	21ac      	movs	r1, #172	; 0xac
    5a2c:	f001 f97a 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    5a30:	f385 8811 	msr	BASEPRI, r5
    5a34:	f3bf 8f6f 	isb	sy
}
    5a38:	4620      	mov	r0, r4
    5a3a:	bd38      	pop	{r3, r4, r5, pc}
    5a3c:	20000a1c 	.word	0x20000a1c
    5a40:	00007e17 	.word	0x00007e17
    5a44:	00007e69 	.word	0x00007e69
    5a48:	0000793c 	.word	0x0000793c
    5a4c:	00007e7e 	.word	0x00007e7e
    5a50:	00007e3d 	.word	0x00007e3d
    5a54:	00007e54 	.word	0x00007e54

00005a58 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5a58:	4b04      	ldr	r3, [pc, #16]	; (5a6c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5a5a:	2100      	movs	r1, #0
    5a5c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5a60:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5a64:	4608      	mov	r0, r1
    5a66:	f7ff b989 	b.w	4d7c <k_sched_time_slice_set>
    5a6a:	bf00      	nop
    5a6c:	200009ec 	.word	0x200009ec

00005a70 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a72:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5a76:	b173      	cbz	r3, 5a96 <z_impl_k_yield+0x26>
    5a78:	4941      	ldr	r1, [pc, #260]	; (5b80 <z_impl_k_yield+0x110>)
    5a7a:	4a42      	ldr	r2, [pc, #264]	; (5b84 <z_impl_k_yield+0x114>)
    5a7c:	4842      	ldr	r0, [pc, #264]	; (5b88 <z_impl_k_yield+0x118>)
    5a7e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    5a82:	f001 fa23 	bl	6ecc <printk>
    5a86:	4841      	ldr	r0, [pc, #260]	; (5b8c <z_impl_k_yield+0x11c>)
    5a88:	f001 fa20 	bl	6ecc <printk>
    5a8c:	483d      	ldr	r0, [pc, #244]	; (5b84 <z_impl_k_yield+0x114>)
    5a8e:	f240 41dc 	movw	r1, #1244	; 0x4dc
    5a92:	f001 f947 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    5a96:	f04f 0320 	mov.w	r3, #32
    5a9a:	f3ef 8611 	mrs	r6, BASEPRI
    5a9e:	f383 8812 	msr	BASEPRI_MAX, r3
    5aa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5aa6:	483a      	ldr	r0, [pc, #232]	; (5b90 <z_impl_k_yield+0x120>)
    5aa8:	f000 fbe2 	bl	6270 <z_spin_lock_valid>
    5aac:	b968      	cbnz	r0, 5aca <z_impl_k_yield+0x5a>
    5aae:	4a39      	ldr	r2, [pc, #228]	; (5b94 <z_impl_k_yield+0x124>)
    5ab0:	4939      	ldr	r1, [pc, #228]	; (5b98 <z_impl_k_yield+0x128>)
    5ab2:	4835      	ldr	r0, [pc, #212]	; (5b88 <z_impl_k_yield+0x118>)
    5ab4:	2381      	movs	r3, #129	; 0x81
    5ab6:	f001 fa09 	bl	6ecc <printk>
    5aba:	4935      	ldr	r1, [pc, #212]	; (5b90 <z_impl_k_yield+0x120>)
    5abc:	4837      	ldr	r0, [pc, #220]	; (5b9c <z_impl_k_yield+0x12c>)
    5abe:	f001 fa05 	bl	6ecc <printk>
    5ac2:	4834      	ldr	r0, [pc, #208]	; (5b94 <z_impl_k_yield+0x124>)
    5ac4:	2181      	movs	r1, #129	; 0x81
    5ac6:	f001 f92d 	bl	6d24 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5aca:	4d35      	ldr	r5, [pc, #212]	; (5ba0 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    5acc:	4830      	ldr	r0, [pc, #192]	; (5b90 <z_impl_k_yield+0x120>)
    5ace:	f000 fbed 	bl	62ac <z_spin_lock_set_owner>
    5ad2:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ad4:	7b4b      	ldrb	r3, [r1, #13]
    5ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ada:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5adc:	f105 0020 	add.w	r0, r5, #32
    5ae0:	f7ff fa6a 	bl	4fb8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    5ae4:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5ae6:	7b63      	ldrb	r3, [r4, #13]
    5ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5aec:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5aee:	4b2d      	ldr	r3, [pc, #180]	; (5ba4 <z_impl_k_yield+0x134>)
    5af0:	429c      	cmp	r4, r3
    5af2:	d109      	bne.n	5b08 <z_impl_k_yield+0x98>
    5af4:	492c      	ldr	r1, [pc, #176]	; (5ba8 <z_impl_k_yield+0x138>)
    5af6:	4824      	ldr	r0, [pc, #144]	; (5b88 <z_impl_k_yield+0x118>)
    5af8:	4a22      	ldr	r2, [pc, #136]	; (5b84 <z_impl_k_yield+0x114>)
    5afa:	23ba      	movs	r3, #186	; 0xba
    5afc:	f001 f9e6 	bl	6ecc <printk>
    5b00:	4820      	ldr	r0, [pc, #128]	; (5b84 <z_impl_k_yield+0x114>)
    5b02:	21ba      	movs	r1, #186	; 0xba
    5b04:	f001 f90e 	bl	6d24 <assert_post_action>
	return list->head == list;
    5b08:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b0a:	4828      	ldr	r0, [pc, #160]	; (5bac <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5b0c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b0e:	4283      	cmp	r3, r0
    5b10:	bf08      	it	eq
    5b12:	2300      	moveq	r3, #0
    5b14:	2b00      	cmp	r3, #0
    5b16:	bf38      	it	cc
    5b18:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b1a:	b35b      	cbz	r3, 5b74 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    5b1c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5b20:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5b24:	4297      	cmp	r7, r2
    5b26:	d021      	beq.n	5b6c <z_impl_k_yield+0xfc>
		return b2 - b1;
    5b28:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b2a:	2a00      	cmp	r2, #0
    5b2c:	dd1e      	ble.n	5b6c <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    5b2e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5b30:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5b34:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5b36:	605c      	str	r4, [r3, #4]
	update_cache(1);
    5b38:	2001      	movs	r0, #1
    5b3a:	f7ff fa81 	bl	5040 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b3e:	4814      	ldr	r0, [pc, #80]	; (5b90 <z_impl_k_yield+0x120>)
    5b40:	f000 fba4 	bl	628c <z_spin_unlock_valid>
    5b44:	b968      	cbnz	r0, 5b62 <z_impl_k_yield+0xf2>
    5b46:	4a13      	ldr	r2, [pc, #76]	; (5b94 <z_impl_k_yield+0x124>)
    5b48:	4919      	ldr	r1, [pc, #100]	; (5bb0 <z_impl_k_yield+0x140>)
    5b4a:	480f      	ldr	r0, [pc, #60]	; (5b88 <z_impl_k_yield+0x118>)
    5b4c:	23c3      	movs	r3, #195	; 0xc3
    5b4e:	f001 f9bd 	bl	6ecc <printk>
    5b52:	490f      	ldr	r1, [pc, #60]	; (5b90 <z_impl_k_yield+0x120>)
    5b54:	4817      	ldr	r0, [pc, #92]	; (5bb4 <z_impl_k_yield+0x144>)
    5b56:	f001 f9b9 	bl	6ecc <printk>
    5b5a:	480e      	ldr	r0, [pc, #56]	; (5b94 <z_impl_k_yield+0x124>)
    5b5c:	21c3      	movs	r1, #195	; 0xc3
    5b5e:	f001 f8e1 	bl	6d24 <assert_post_action>
    5b62:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    5b64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5b68:	f7fc b950 	b.w	1e0c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5b6c:	428b      	cmp	r3, r1
    5b6e:	d001      	beq.n	5b74 <z_impl_k_yield+0x104>
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	e7d2      	b.n	5b1a <z_impl_k_yield+0xaa>
	node->prev = tail;
    5b74:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    5b78:	600c      	str	r4, [r1, #0]
	list->tail = node;
    5b7a:	626c      	str	r4, [r5, #36]	; 0x24
}
    5b7c:	e7dc      	b.n	5b38 <z_impl_k_yield+0xc8>
    5b7e:	bf00      	nop
    5b80:	000085df 	.word	0x000085df
    5b84:	0000868c 	.word	0x0000868c
    5b88:	0000793c 	.word	0x0000793c
    5b8c:	00008658 	.word	0x00008658
    5b90:	20000a1c 	.word	0x20000a1c
    5b94:	00007e17 	.word	0x00007e17
    5b98:	00007e69 	.word	0x00007e69
    5b9c:	00007e7e 	.word	0x00007e7e
    5ba0:	200009ec 	.word	0x200009ec
    5ba4:	200001c8 	.word	0x200001c8
    5ba8:	000086ae 	.word	0x000086ae
    5bac:	20000a0c 	.word	0x20000a0c
    5bb0:	00007e3d 	.word	0x00007e3d
    5bb4:	00007e54 	.word	0x00007e54

00005bb8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    5bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bbc:	4604      	mov	r4, r0
    5bbe:	460d      	mov	r5, r1
    5bc0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5bc4:	b173      	cbz	r3, 5be4 <z_tick_sleep+0x2c>
    5bc6:	4945      	ldr	r1, [pc, #276]	; (5cdc <z_tick_sleep+0x124>)
    5bc8:	4a45      	ldr	r2, [pc, #276]	; (5ce0 <z_tick_sleep+0x128>)
    5bca:	4846      	ldr	r0, [pc, #280]	; (5ce4 <z_tick_sleep+0x12c>)
    5bcc:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    5bd0:	f001 f97c 	bl	6ecc <printk>
    5bd4:	4844      	ldr	r0, [pc, #272]	; (5ce8 <z_tick_sleep+0x130>)
    5bd6:	f001 f979 	bl	6ecc <printk>
    5bda:	4841      	ldr	r0, [pc, #260]	; (5ce0 <z_tick_sleep+0x128>)
    5bdc:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    5be0:	f001 f8a0 	bl	6d24 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5be4:	ea54 0305 	orrs.w	r3, r4, r5
    5be8:	d104      	bne.n	5bf4 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    5bea:	f7ff ff41 	bl	5a70 <z_impl_k_yield>
		k_yield();
		return 0;
    5bee:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    5bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    5bf4:	f06f 0301 	mvn.w	r3, #1
    5bf8:	1b1e      	subs	r6, r3, r4
    5bfa:	f04f 33ff 	mov.w	r3, #4294967295
    5bfe:	eb63 0705 	sbc.w	r7, r3, r5
    5c02:	2e01      	cmp	r6, #1
    5c04:	f177 0300 	sbcs.w	r3, r7, #0
    5c08:	da64      	bge.n	5cd4 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5c0a:	f001 fbde 	bl	73ca <sys_clock_tick_get_32>
    5c0e:	1906      	adds	r6, r0, r4
    5c10:	f04f 0320 	mov.w	r3, #32
    5c14:	f3ef 8811 	mrs	r8, BASEPRI
    5c18:	f383 8812 	msr	BASEPRI_MAX, r3
    5c1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c20:	4832      	ldr	r0, [pc, #200]	; (5cec <z_tick_sleep+0x134>)
    5c22:	f000 fb25 	bl	6270 <z_spin_lock_valid>
    5c26:	b968      	cbnz	r0, 5c44 <z_tick_sleep+0x8c>
    5c28:	4a31      	ldr	r2, [pc, #196]	; (5cf0 <z_tick_sleep+0x138>)
    5c2a:	4932      	ldr	r1, [pc, #200]	; (5cf4 <z_tick_sleep+0x13c>)
    5c2c:	482d      	ldr	r0, [pc, #180]	; (5ce4 <z_tick_sleep+0x12c>)
    5c2e:	2381      	movs	r3, #129	; 0x81
    5c30:	f001 f94c 	bl	6ecc <printk>
    5c34:	492d      	ldr	r1, [pc, #180]	; (5cec <z_tick_sleep+0x134>)
    5c36:	4830      	ldr	r0, [pc, #192]	; (5cf8 <z_tick_sleep+0x140>)
    5c38:	f001 f948 	bl	6ecc <printk>
    5c3c:	482c      	ldr	r0, [pc, #176]	; (5cf0 <z_tick_sleep+0x138>)
    5c3e:	2181      	movs	r1, #129	; 0x81
    5c40:	f001 f870 	bl	6d24 <assert_post_action>
	pending_current = _current;
    5c44:	4f2d      	ldr	r7, [pc, #180]	; (5cfc <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    5c46:	4829      	ldr	r0, [pc, #164]	; (5cec <z_tick_sleep+0x134>)
    5c48:	f000 fb30 	bl	62ac <z_spin_lock_set_owner>
    5c4c:	4b2c      	ldr	r3, [pc, #176]	; (5d00 <z_tick_sleep+0x148>)
    5c4e:	68b8      	ldr	r0, [r7, #8]
    5c50:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5c52:	f7ff fc43 	bl	54dc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5c56:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5c58:	492a      	ldr	r1, [pc, #168]	; (5d04 <z_tick_sleep+0x14c>)
    5c5a:	4622      	mov	r2, r4
    5c5c:	462b      	mov	r3, r5
    5c5e:	3018      	adds	r0, #24
    5c60:	f000 fb7c 	bl	635c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5c64:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c66:	4821      	ldr	r0, [pc, #132]	; (5cec <z_tick_sleep+0x134>)
    5c68:	7b53      	ldrb	r3, [r2, #13]
    5c6a:	f043 0310 	orr.w	r3, r3, #16
    5c6e:	7353      	strb	r3, [r2, #13]
    5c70:	f000 fb0c 	bl	628c <z_spin_unlock_valid>
    5c74:	b968      	cbnz	r0, 5c92 <z_tick_sleep+0xda>
    5c76:	4a1e      	ldr	r2, [pc, #120]	; (5cf0 <z_tick_sleep+0x138>)
    5c78:	4923      	ldr	r1, [pc, #140]	; (5d08 <z_tick_sleep+0x150>)
    5c7a:	481a      	ldr	r0, [pc, #104]	; (5ce4 <z_tick_sleep+0x12c>)
    5c7c:	23c3      	movs	r3, #195	; 0xc3
    5c7e:	f001 f925 	bl	6ecc <printk>
    5c82:	491a      	ldr	r1, [pc, #104]	; (5cec <z_tick_sleep+0x134>)
    5c84:	4821      	ldr	r0, [pc, #132]	; (5d0c <z_tick_sleep+0x154>)
    5c86:	f001 f921 	bl	6ecc <printk>
    5c8a:	4819      	ldr	r0, [pc, #100]	; (5cf0 <z_tick_sleep+0x138>)
    5c8c:	21c3      	movs	r1, #195	; 0xc3
    5c8e:	f001 f849 	bl	6d24 <assert_post_action>
    5c92:	4640      	mov	r0, r8
    5c94:	f7fc f8ba 	bl	1e0c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5c98:	68bb      	ldr	r3, [r7, #8]
    5c9a:	7b5b      	ldrb	r3, [r3, #13]
    5c9c:	06db      	lsls	r3, r3, #27
    5c9e:	d50e      	bpl.n	5cbe <z_tick_sleep+0x106>
    5ca0:	491b      	ldr	r1, [pc, #108]	; (5d10 <z_tick_sleep+0x158>)
    5ca2:	4a0f      	ldr	r2, [pc, #60]	; (5ce0 <z_tick_sleep+0x128>)
    5ca4:	480f      	ldr	r0, [pc, #60]	; (5ce4 <z_tick_sleep+0x12c>)
    5ca6:	f240 5319 	movw	r3, #1305	; 0x519
    5caa:	f001 f90f 	bl	6ecc <printk>
    5cae:	480e      	ldr	r0, [pc, #56]	; (5ce8 <z_tick_sleep+0x130>)
    5cb0:	f001 f90c 	bl	6ecc <printk>
    5cb4:	480a      	ldr	r0, [pc, #40]	; (5ce0 <z_tick_sleep+0x128>)
    5cb6:	f240 5119 	movw	r1, #1305	; 0x519
    5cba:	f001 f833 	bl	6d24 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5cbe:	f001 fb84 	bl	73ca <sys_clock_tick_get_32>
    5cc2:	1a30      	subs	r0, r6, r0
    5cc4:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    5cc8:	2801      	cmp	r0, #1
    5cca:	f171 0300 	sbcs.w	r3, r1, #0
    5cce:	bfb8      	it	lt
    5cd0:	2000      	movlt	r0, #0
    5cd2:	e78d      	b.n	5bf0 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5cd4:	f06f 0601 	mvn.w	r6, #1
    5cd8:	1b36      	subs	r6, r6, r4
    5cda:	e799      	b.n	5c10 <z_tick_sleep+0x58>
    5cdc:	000085df 	.word	0x000085df
    5ce0:	0000868c 	.word	0x0000868c
    5ce4:	0000793c 	.word	0x0000793c
    5ce8:	00008658 	.word	0x00008658
    5cec:	20000a1c 	.word	0x20000a1c
    5cf0:	00007e17 	.word	0x00007e17
    5cf4:	00007e69 	.word	0x00007e69
    5cf8:	00007e7e 	.word	0x00007e7e
    5cfc:	200009ec 	.word	0x200009ec
    5d00:	20000a18 	.word	0x20000a18
    5d04:	00005429 	.word	0x00005429
    5d08:	00007e3d 	.word	0x00007e3d
    5d0c:	00007e54 	.word	0x00007e54
    5d10:	0000873e 	.word	0x0000873e

00005d14 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5d14:	b538      	push	{r3, r4, r5, lr}
    5d16:	4604      	mov	r4, r0
    5d18:	460d      	mov	r5, r1
    5d1a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5d1e:	b173      	cbz	r3, 5d3e <z_impl_k_sleep+0x2a>
    5d20:	4913      	ldr	r1, [pc, #76]	; (5d70 <z_impl_k_sleep+0x5c>)
    5d22:	4a14      	ldr	r2, [pc, #80]	; (5d74 <z_impl_k_sleep+0x60>)
    5d24:	4814      	ldr	r0, [pc, #80]	; (5d78 <z_impl_k_sleep+0x64>)
    5d26:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    5d2a:	f001 f8cf 	bl	6ecc <printk>
    5d2e:	4813      	ldr	r0, [pc, #76]	; (5d7c <z_impl_k_sleep+0x68>)
    5d30:	f001 f8cc 	bl	6ecc <printk>
    5d34:	480f      	ldr	r0, [pc, #60]	; (5d74 <z_impl_k_sleep+0x60>)
    5d36:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    5d3a:	f000 fff3 	bl	6d24 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d3e:	1c6b      	adds	r3, r5, #1
    5d40:	bf08      	it	eq
    5d42:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    5d46:	d106      	bne.n	5d56 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    5d48:	4b0d      	ldr	r3, [pc, #52]	; (5d80 <z_impl_k_sleep+0x6c>)
    5d4a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5d4c:	f7ff fd4e 	bl	57ec <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5d50:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5d54:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    5d56:	4620      	mov	r0, r4
    5d58:	4629      	mov	r1, r5
    5d5a:	f7ff ff2d 	bl	5bb8 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    5d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5d62:	fb80 3403 	smull	r3, r4, r0, r3
    5d66:	0bd8      	lsrs	r0, r3, #15
    5d68:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    5d6c:	e7f2      	b.n	5d54 <z_impl_k_sleep+0x40>
    5d6e:	bf00      	nop
    5d70:	000085df 	.word	0x000085df
    5d74:	0000868c 	.word	0x0000868c
    5d78:	0000793c 	.word	0x0000793c
    5d7c:	00008658 	.word	0x00008658
    5d80:	200009ec 	.word	0x200009ec

00005d84 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5d84:	4b01      	ldr	r3, [pc, #4]	; (5d8c <z_impl_z_current_get+0x8>)
    5d86:	6898      	ldr	r0, [r3, #8]
    5d88:	4770      	bx	lr
    5d8a:	bf00      	nop
    5d8c:	200009ec 	.word	0x200009ec

00005d90 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d94:	4604      	mov	r4, r0
    5d96:	f04f 0320 	mov.w	r3, #32
    5d9a:	f3ef 8611 	mrs	r6, BASEPRI
    5d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    5da2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5da6:	4848      	ldr	r0, [pc, #288]	; (5ec8 <z_thread_abort+0x138>)
    5da8:	f000 fa62 	bl	6270 <z_spin_lock_valid>
    5dac:	b968      	cbnz	r0, 5dca <z_thread_abort+0x3a>
    5dae:	4a47      	ldr	r2, [pc, #284]	; (5ecc <z_thread_abort+0x13c>)
    5db0:	4947      	ldr	r1, [pc, #284]	; (5ed0 <z_thread_abort+0x140>)
    5db2:	4848      	ldr	r0, [pc, #288]	; (5ed4 <z_thread_abort+0x144>)
    5db4:	2381      	movs	r3, #129	; 0x81
    5db6:	f001 f889 	bl	6ecc <printk>
    5dba:	4943      	ldr	r1, [pc, #268]	; (5ec8 <z_thread_abort+0x138>)
    5dbc:	4846      	ldr	r0, [pc, #280]	; (5ed8 <z_thread_abort+0x148>)
    5dbe:	f001 f885 	bl	6ecc <printk>
    5dc2:	4842      	ldr	r0, [pc, #264]	; (5ecc <z_thread_abort+0x13c>)
    5dc4:	2181      	movs	r1, #129	; 0x81
    5dc6:	f000 ffad 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    5dca:	483f      	ldr	r0, [pc, #252]	; (5ec8 <z_thread_abort+0x138>)
    5dcc:	f000 fa6e 	bl	62ac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5dd0:	7b63      	ldrb	r3, [r4, #13]
    5dd2:	071a      	lsls	r2, r3, #28
    5dd4:	d517      	bpl.n	5e06 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5dd6:	483c      	ldr	r0, [pc, #240]	; (5ec8 <z_thread_abort+0x138>)
    5dd8:	f000 fa58 	bl	628c <z_spin_unlock_valid>
    5ddc:	b968      	cbnz	r0, 5dfa <z_thread_abort+0x6a>
    5dde:	4a3b      	ldr	r2, [pc, #236]	; (5ecc <z_thread_abort+0x13c>)
    5de0:	493e      	ldr	r1, [pc, #248]	; (5edc <z_thread_abort+0x14c>)
    5de2:	483c      	ldr	r0, [pc, #240]	; (5ed4 <z_thread_abort+0x144>)
    5de4:	23ac      	movs	r3, #172	; 0xac
    5de6:	f001 f871 	bl	6ecc <printk>
    5dea:	4937      	ldr	r1, [pc, #220]	; (5ec8 <z_thread_abort+0x138>)
    5dec:	483c      	ldr	r0, [pc, #240]	; (5ee0 <z_thread_abort+0x150>)
    5dee:	f001 f86d 	bl	6ecc <printk>
    5df2:	4836      	ldr	r0, [pc, #216]	; (5ecc <z_thread_abort+0x13c>)
    5df4:	21ac      	movs	r1, #172	; 0xac
    5df6:	f000 ff95 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    5dfa:	f386 8811 	msr	BASEPRI, r6
    5dfe:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e06:	f023 0220 	bic.w	r2, r3, #32
    5e0a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5e0e:	09d2      	lsrs	r2, r2, #7
    5e10:	d142      	bne.n	5e98 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e12:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    5e14:	68a3      	ldr	r3, [r4, #8]
    5e16:	b113      	cbz	r3, 5e1e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    5e18:	4620      	mov	r0, r4
    5e1a:	f7ff f8ef 	bl	4ffc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5e1e:	f104 0018 	add.w	r0, r4, #24
    5e22:	f000 fb6f 	bl	6504 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5e26:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5e2a:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5e2e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e30:	42bd      	cmp	r5, r7
    5e32:	d001      	beq.n	5e38 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5e34:	2d00      	cmp	r5, #0
    5e36:	d139      	bne.n	5eac <z_thread_abort+0x11c>
		update_cache(1);
    5e38:	2001      	movs	r0, #1
    5e3a:	f7ff f901 	bl	5040 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5e3e:	4b29      	ldr	r3, [pc, #164]	; (5ee4 <z_thread_abort+0x154>)
    5e40:	689b      	ldr	r3, [r3, #8]
    5e42:	42a3      	cmp	r3, r4
    5e44:	d1c7      	bne.n	5dd6 <z_thread_abort+0x46>
    5e46:	f3ef 8305 	mrs	r3, IPSR
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d1c3      	bne.n	5dd6 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e4e:	481e      	ldr	r0, [pc, #120]	; (5ec8 <z_thread_abort+0x138>)
    5e50:	f000 fa1c 	bl	628c <z_spin_unlock_valid>
    5e54:	b968      	cbnz	r0, 5e72 <z_thread_abort+0xe2>
    5e56:	4a1d      	ldr	r2, [pc, #116]	; (5ecc <z_thread_abort+0x13c>)
    5e58:	4920      	ldr	r1, [pc, #128]	; (5edc <z_thread_abort+0x14c>)
    5e5a:	481e      	ldr	r0, [pc, #120]	; (5ed4 <z_thread_abort+0x144>)
    5e5c:	23c3      	movs	r3, #195	; 0xc3
    5e5e:	f001 f835 	bl	6ecc <printk>
    5e62:	4919      	ldr	r1, [pc, #100]	; (5ec8 <z_thread_abort+0x138>)
    5e64:	481e      	ldr	r0, [pc, #120]	; (5ee0 <z_thread_abort+0x150>)
    5e66:	f001 f831 	bl	6ecc <printk>
    5e6a:	4818      	ldr	r0, [pc, #96]	; (5ecc <z_thread_abort+0x13c>)
    5e6c:	21c3      	movs	r1, #195	; 0xc3
    5e6e:	f000 ff59 	bl	6d24 <assert_post_action>
    5e72:	4630      	mov	r0, r6
    5e74:	f7fb ffca 	bl	1e0c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    5e78:	4a1b      	ldr	r2, [pc, #108]	; (5ee8 <z_thread_abort+0x158>)
    5e7a:	491c      	ldr	r1, [pc, #112]	; (5eec <z_thread_abort+0x15c>)
    5e7c:	4815      	ldr	r0, [pc, #84]	; (5ed4 <z_thread_abort+0x144>)
    5e7e:	f240 634b 	movw	r3, #1611	; 0x64b
    5e82:	f001 f823 	bl	6ecc <printk>
    5e86:	481a      	ldr	r0, [pc, #104]	; (5ef0 <z_thread_abort+0x160>)
    5e88:	f001 f820 	bl	6ecc <printk>
    5e8c:	4816      	ldr	r0, [pc, #88]	; (5ee8 <z_thread_abort+0x158>)
    5e8e:	f240 614b 	movw	r1, #1611	; 0x64b
    5e92:	f000 ff47 	bl	6d24 <assert_post_action>
    5e96:	e79e      	b.n	5dd6 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5e98:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5e9c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    5ea0:	4814      	ldr	r0, [pc, #80]	; (5ef4 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ea2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5ea4:	4621      	mov	r1, r4
    5ea6:	f7ff f887 	bl	4fb8 <z_priq_dumb_remove>
}
    5eaa:	e7b3      	b.n	5e14 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    5eac:	4628      	mov	r0, r5
    5eae:	f7ff f8a5 	bl	4ffc <unpend_thread_no_timeout>
    5eb2:	f105 0018 	add.w	r0, r5, #24
    5eb6:	f000 fb25 	bl	6504 <z_abort_timeout>
    5eba:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5ebe:	4628      	mov	r0, r5
    5ec0:	f7ff f9c4 	bl	524c <ready_thread>
    5ec4:	e7b3      	b.n	5e2e <z_thread_abort+0x9e>
    5ec6:	bf00      	nop
    5ec8:	20000a1c 	.word	0x20000a1c
    5ecc:	00007e17 	.word	0x00007e17
    5ed0:	00007e69 	.word	0x00007e69
    5ed4:	0000793c 	.word	0x0000793c
    5ed8:	00007e7e 	.word	0x00007e7e
    5edc:	00007e3d 	.word	0x00007e3d
    5ee0:	00007e54 	.word	0x00007e54
    5ee4:	200009ec 	.word	0x200009ec
    5ee8:	0000868c 	.word	0x0000868c
    5eec:	00007dff 	.word	0x00007dff
    5ef0:	0000877e 	.word	0x0000877e
    5ef4:	20000a0c 	.word	0x20000a0c

00005ef8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5ef8:	b538      	push	{r3, r4, r5, lr}
    5efa:	4604      	mov	r4, r0
	__asm__ volatile(
    5efc:	f04f 0320 	mov.w	r3, #32
    5f00:	f3ef 8511 	mrs	r5, BASEPRI
    5f04:	f383 8812 	msr	BASEPRI_MAX, r3
    5f08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f0c:	4814      	ldr	r0, [pc, #80]	; (5f60 <z_impl_k_sem_give+0x68>)
    5f0e:	f000 f9af 	bl	6270 <z_spin_lock_valid>
    5f12:	b968      	cbnz	r0, 5f30 <z_impl_k_sem_give+0x38>
    5f14:	4a13      	ldr	r2, [pc, #76]	; (5f64 <z_impl_k_sem_give+0x6c>)
    5f16:	4914      	ldr	r1, [pc, #80]	; (5f68 <z_impl_k_sem_give+0x70>)
    5f18:	4814      	ldr	r0, [pc, #80]	; (5f6c <z_impl_k_sem_give+0x74>)
    5f1a:	2381      	movs	r3, #129	; 0x81
    5f1c:	f000 ffd6 	bl	6ecc <printk>
    5f20:	490f      	ldr	r1, [pc, #60]	; (5f60 <z_impl_k_sem_give+0x68>)
    5f22:	4813      	ldr	r0, [pc, #76]	; (5f70 <z_impl_k_sem_give+0x78>)
    5f24:	f000 ffd2 	bl	6ecc <printk>
    5f28:	480e      	ldr	r0, [pc, #56]	; (5f64 <z_impl_k_sem_give+0x6c>)
    5f2a:	2181      	movs	r1, #129	; 0x81
    5f2c:	f000 fefa 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    5f30:	480b      	ldr	r0, [pc, #44]	; (5f60 <z_impl_k_sem_give+0x68>)
    5f32:	f000 f9bb 	bl	62ac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5f36:	4620      	mov	r0, r4
    5f38:	f7ff fd3e 	bl	59b8 <z_unpend_first_thread>

	if (thread != NULL) {
    5f3c:	b148      	cbz	r0, 5f52 <z_impl_k_sem_give+0x5a>
    5f3e:	2200      	movs	r2, #0
    5f40:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5f42:	f7ff f9d5 	bl	52f0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5f46:	4629      	mov	r1, r5
    5f48:	4805      	ldr	r0, [pc, #20]	; (5f60 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5f4e:	f7fe bf7b 	b.w	4e48 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5f52:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5f56:	429a      	cmp	r2, r3
    5f58:	bf18      	it	ne
    5f5a:	3301      	addne	r3, #1
    5f5c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    5f5e:	e7f2      	b.n	5f46 <z_impl_k_sem_give+0x4e>
    5f60:	20000a28 	.word	0x20000a28
    5f64:	00007e17 	.word	0x00007e17
    5f68:	00007e69 	.word	0x00007e69
    5f6c:	0000793c 	.word	0x0000793c
    5f70:	00007e7e 	.word	0x00007e7e

00005f74 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f76:	4604      	mov	r4, r0
    5f78:	4616      	mov	r6, r2
    5f7a:	461f      	mov	r7, r3
    5f7c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5f80:	b17b      	cbz	r3, 5fa2 <z_impl_k_sem_take+0x2e>
    5f82:	ea56 0307 	orrs.w	r3, r6, r7
    5f86:	d00c      	beq.n	5fa2 <z_impl_k_sem_take+0x2e>
    5f88:	4935      	ldr	r1, [pc, #212]	; (6060 <z_impl_k_sem_take+0xec>)
    5f8a:	4a36      	ldr	r2, [pc, #216]	; (6064 <z_impl_k_sem_take+0xf0>)
    5f8c:	4836      	ldr	r0, [pc, #216]	; (6068 <z_impl_k_sem_take+0xf4>)
    5f8e:	2379      	movs	r3, #121	; 0x79
    5f90:	f000 ff9c 	bl	6ecc <printk>
    5f94:	4835      	ldr	r0, [pc, #212]	; (606c <z_impl_k_sem_take+0xf8>)
    5f96:	f000 ff99 	bl	6ecc <printk>
    5f9a:	4832      	ldr	r0, [pc, #200]	; (6064 <z_impl_k_sem_take+0xf0>)
    5f9c:	2179      	movs	r1, #121	; 0x79
    5f9e:	f000 fec1 	bl	6d24 <assert_post_action>
    5fa2:	f04f 0320 	mov.w	r3, #32
    5fa6:	f3ef 8511 	mrs	r5, BASEPRI
    5faa:	f383 8812 	msr	BASEPRI_MAX, r3
    5fae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5fb2:	482f      	ldr	r0, [pc, #188]	; (6070 <z_impl_k_sem_take+0xfc>)
    5fb4:	f000 f95c 	bl	6270 <z_spin_lock_valid>
    5fb8:	b968      	cbnz	r0, 5fd6 <z_impl_k_sem_take+0x62>
    5fba:	4a2e      	ldr	r2, [pc, #184]	; (6074 <z_impl_k_sem_take+0x100>)
    5fbc:	492e      	ldr	r1, [pc, #184]	; (6078 <z_impl_k_sem_take+0x104>)
    5fbe:	482a      	ldr	r0, [pc, #168]	; (6068 <z_impl_k_sem_take+0xf4>)
    5fc0:	2381      	movs	r3, #129	; 0x81
    5fc2:	f000 ff83 	bl	6ecc <printk>
    5fc6:	492a      	ldr	r1, [pc, #168]	; (6070 <z_impl_k_sem_take+0xfc>)
    5fc8:	482c      	ldr	r0, [pc, #176]	; (607c <z_impl_k_sem_take+0x108>)
    5fca:	f000 ff7f 	bl	6ecc <printk>
    5fce:	4829      	ldr	r0, [pc, #164]	; (6074 <z_impl_k_sem_take+0x100>)
    5fd0:	2181      	movs	r1, #129	; 0x81
    5fd2:	f000 fea7 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    5fd6:	4826      	ldr	r0, [pc, #152]	; (6070 <z_impl_k_sem_take+0xfc>)
    5fd8:	f000 f968 	bl	62ac <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5fdc:	68a3      	ldr	r3, [r4, #8]
    5fde:	b1d3      	cbz	r3, 6016 <z_impl_k_sem_take+0xa2>
		sem->count--;
    5fe0:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fe2:	4823      	ldr	r0, [pc, #140]	; (6070 <z_impl_k_sem_take+0xfc>)
    5fe4:	60a3      	str	r3, [r4, #8]
    5fe6:	f000 f951 	bl	628c <z_spin_unlock_valid>
    5fea:	b968      	cbnz	r0, 6008 <z_impl_k_sem_take+0x94>
    5fec:	4a21      	ldr	r2, [pc, #132]	; (6074 <z_impl_k_sem_take+0x100>)
    5fee:	4924      	ldr	r1, [pc, #144]	; (6080 <z_impl_k_sem_take+0x10c>)
    5ff0:	481d      	ldr	r0, [pc, #116]	; (6068 <z_impl_k_sem_take+0xf4>)
    5ff2:	23ac      	movs	r3, #172	; 0xac
    5ff4:	f000 ff6a 	bl	6ecc <printk>
    5ff8:	491d      	ldr	r1, [pc, #116]	; (6070 <z_impl_k_sem_take+0xfc>)
    5ffa:	4822      	ldr	r0, [pc, #136]	; (6084 <z_impl_k_sem_take+0x110>)
    5ffc:	f000 ff66 	bl	6ecc <printk>
    6000:	481c      	ldr	r0, [pc, #112]	; (6074 <z_impl_k_sem_take+0x100>)
    6002:	21ac      	movs	r1, #172	; 0xac
    6004:	f000 fe8e 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    6008:	f385 8811 	msr	BASEPRI, r5
    600c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6010:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6012:	b003      	add	sp, #12
    6014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6016:	ea56 0307 	orrs.w	r3, r6, r7
    601a:	d118      	bne.n	604e <z_impl_k_sem_take+0xda>
    601c:	4814      	ldr	r0, [pc, #80]	; (6070 <z_impl_k_sem_take+0xfc>)
    601e:	f000 f935 	bl	628c <z_spin_unlock_valid>
    6022:	b968      	cbnz	r0, 6040 <z_impl_k_sem_take+0xcc>
    6024:	4a13      	ldr	r2, [pc, #76]	; (6074 <z_impl_k_sem_take+0x100>)
    6026:	4916      	ldr	r1, [pc, #88]	; (6080 <z_impl_k_sem_take+0x10c>)
    6028:	480f      	ldr	r0, [pc, #60]	; (6068 <z_impl_k_sem_take+0xf4>)
    602a:	23ac      	movs	r3, #172	; 0xac
    602c:	f000 ff4e 	bl	6ecc <printk>
    6030:	490f      	ldr	r1, [pc, #60]	; (6070 <z_impl_k_sem_take+0xfc>)
    6032:	4814      	ldr	r0, [pc, #80]	; (6084 <z_impl_k_sem_take+0x110>)
    6034:	f000 ff4a 	bl	6ecc <printk>
    6038:	480e      	ldr	r0, [pc, #56]	; (6074 <z_impl_k_sem_take+0x100>)
    603a:	21ac      	movs	r1, #172	; 0xac
    603c:	f000 fe72 	bl	6d24 <assert_post_action>
    6040:	f385 8811 	msr	BASEPRI, r5
    6044:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6048:	f06f 000f 	mvn.w	r0, #15
    604c:	e7e1      	b.n	6012 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    604e:	e9cd 6700 	strd	r6, r7, [sp]
    6052:	4622      	mov	r2, r4
    6054:	4629      	mov	r1, r5
    6056:	4806      	ldr	r0, [pc, #24]	; (6070 <z_impl_k_sem_take+0xfc>)
    6058:	f7ff fafc 	bl	5654 <z_pend_curr>
	return ret;
    605c:	e7d9      	b.n	6012 <z_impl_k_sem_take+0x9e>
    605e:	bf00      	nop
    6060:	000087c0 	.word	0x000087c0
    6064:	000087a0 	.word	0x000087a0
    6068:	0000793c 	.word	0x0000793c
    606c:	00008658 	.word	0x00008658
    6070:	20000a28 	.word	0x20000a28
    6074:	00007e17 	.word	0x00007e17
    6078:	00007e69 	.word	0x00007e69
    607c:	00007e7e 	.word	0x00007e7e
    6080:	00007e3d 	.word	0x00007e3d
    6084:	00007e54 	.word	0x00007e54

00006088 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    608c:	b085      	sub	sp, #20
    608e:	4604      	mov	r4, r0
    6090:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6094:	f1b8 0f0f 	cmp.w	r8, #15
{
    6098:	460f      	mov	r7, r1
    609a:	4615      	mov	r5, r2
    609c:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    609e:	d132      	bne.n	6106 <z_setup_new_thread+0x7e>
    60a0:	4b25      	ldr	r3, [pc, #148]	; (6138 <z_setup_new_thread+0xb0>)
    60a2:	4599      	cmp	r9, r3
    60a4:	d133      	bne.n	610e <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    60a6:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    60aa:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    60ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    60b0:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    60b2:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    60b4:	2304      	movs	r3, #4
    60b6:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    60b8:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    60bc:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    60c0:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    60c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    60c6:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    60ca:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    60cc:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    60d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    60d2:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    60d4:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    60d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60d8:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    60da:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    60dc:	464b      	mov	r3, r9
	node->prev = NULL;
    60de:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    60e2:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    60e4:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    60e6:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    60e8:	4642      	mov	r2, r8
    60ea:	4639      	mov	r1, r7
    60ec:	4620      	mov	r0, r4
    60ee:	f7fb fea7 	bl	1e40 <arch_new_thread>
	if (!_current) {
    60f2:	4b12      	ldr	r3, [pc, #72]	; (613c <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    60f4:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    60f6:	689b      	ldr	r3, [r3, #8]
    60f8:	b103      	cbz	r3, 60fc <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    60fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    60fc:	6723      	str	r3, [r4, #112]	; 0x70
}
    60fe:	4640      	mov	r0, r8
    6100:	b005      	add	sp, #20
    6102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6106:	f108 0310 	add.w	r3, r8, #16
    610a:	2b1e      	cmp	r3, #30
    610c:	d9cb      	bls.n	60a6 <z_setup_new_thread+0x1e>
    610e:	4a0c      	ldr	r2, [pc, #48]	; (6140 <z_setup_new_thread+0xb8>)
    6110:	490c      	ldr	r1, [pc, #48]	; (6144 <z_setup_new_thread+0xbc>)
    6112:	480d      	ldr	r0, [pc, #52]	; (6148 <z_setup_new_thread+0xc0>)
    6114:	f240 13ff 	movw	r3, #511	; 0x1ff
    6118:	f000 fed8 	bl	6ecc <printk>
    611c:	4641      	mov	r1, r8
    611e:	480b      	ldr	r0, [pc, #44]	; (614c <z_setup_new_thread+0xc4>)
    6120:	f06f 030f 	mvn.w	r3, #15
    6124:	220e      	movs	r2, #14
    6126:	f000 fed1 	bl	6ecc <printk>
    612a:	4805      	ldr	r0, [pc, #20]	; (6140 <z_setup_new_thread+0xb8>)
    612c:	f240 11ff 	movw	r1, #511	; 0x1ff
    6130:	f000 fdf8 	bl	6d24 <assert_post_action>
    6134:	e7b7      	b.n	60a6 <z_setup_new_thread+0x1e>
    6136:	bf00      	nop
    6138:	000045cd 	.word	0x000045cd
    613c:	200009ec 	.word	0x200009ec
    6140:	0000880d 	.word	0x0000880d
    6144:	00008830 	.word	0x00008830
    6148:	0000793c 	.word	0x0000793c
    614c:	000088b0 	.word	0x000088b0

00006150 <z_init_static_threads>:
{
    6150:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    6154:	4f3f      	ldr	r7, [pc, #252]	; (6254 <z_init_static_threads+0x104>)
    6156:	4d40      	ldr	r5, [pc, #256]	; (6258 <z_init_static_threads+0x108>)
    6158:	f8df 810c 	ldr.w	r8, [pc, #268]	; 6268 <z_init_static_threads+0x118>
{
    615c:	b086      	sub	sp, #24
    615e:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    6160:	42bd      	cmp	r5, r7
    6162:	d90e      	bls.n	6182 <z_init_static_threads+0x32>
    6164:	493d      	ldr	r1, [pc, #244]	; (625c <z_init_static_threads+0x10c>)
    6166:	483e      	ldr	r0, [pc, #248]	; (6260 <z_init_static_threads+0x110>)
    6168:	f240 23cf 	movw	r3, #719	; 0x2cf
    616c:	4642      	mov	r2, r8
    616e:	f000 fead 	bl	6ecc <printk>
    6172:	483c      	ldr	r0, [pc, #240]	; (6264 <z_init_static_threads+0x114>)
    6174:	f000 feaa 	bl	6ecc <printk>
    6178:	f240 21cf 	movw	r1, #719	; 0x2cf
    617c:	4640      	mov	r0, r8
    617e:	f000 fdd1 	bl	6d24 <assert_post_action>
    6182:	42b5      	cmp	r5, r6
    6184:	f105 0430 	add.w	r4, r5, #48	; 0x30
    6188:	d31f      	bcc.n	61ca <z_init_static_threads+0x7a>
	k_sched_lock();
    618a:	f7fe fea1 	bl	4ed0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    618e:	4c32      	ldr	r4, [pc, #200]	; (6258 <z_init_static_threads+0x108>)
    6190:	4d35      	ldr	r5, [pc, #212]	; (6268 <z_init_static_threads+0x118>)
    6192:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 625c <z_init_static_threads+0x10c>
    6196:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 6260 <z_init_static_threads+0x110>
    619a:	42b4      	cmp	r4, r6
    619c:	d90e      	bls.n	61bc <z_init_static_threads+0x6c>
    619e:	4641      	mov	r1, r8
    61a0:	f240 23ee 	movw	r3, #750	; 0x2ee
    61a4:	462a      	mov	r2, r5
    61a6:	4648      	mov	r0, r9
    61a8:	f000 fe90 	bl	6ecc <printk>
    61ac:	482d      	ldr	r0, [pc, #180]	; (6264 <z_init_static_threads+0x114>)
    61ae:	f000 fe8d 	bl	6ecc <printk>
    61b2:	f240 21ee 	movw	r1, #750	; 0x2ee
    61b6:	4628      	mov	r0, r5
    61b8:	f000 fdb4 	bl	6d24 <assert_post_action>
    61bc:	42b4      	cmp	r4, r6
    61be:	d321      	bcc.n	6204 <z_init_static_threads+0xb4>
}
    61c0:	b006      	add	sp, #24
    61c2:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    61c6:	f7ff bb7b 	b.w	58c0 <k_sched_unlock>
		z_setup_new_thread(
    61ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
    61ce:	9305      	str	r3, [sp, #20]
    61d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    61d4:	9304      	str	r3, [sp, #16]
    61d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    61da:	9303      	str	r3, [sp, #12]
    61dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    61e0:	9302      	str	r3, [sp, #8]
    61e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    61e6:	9301      	str	r3, [sp, #4]
    61e8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    61ec:	9300      	str	r3, [sp, #0]
    61ee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    61f2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    61f6:	f7ff ff47 	bl	6088 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    61fa:	f854 3c30 	ldr.w	r3, [r4, #-48]
    61fe:	655d      	str	r5, [r3, #84]	; 0x54
    6200:	4625      	mov	r5, r4
    6202:	e7ad      	b.n	6160 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6204:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6206:	1c4b      	adds	r3, r1, #1
    6208:	d014      	beq.n	6234 <z_init_static_threads+0xe4>
    620a:	f240 32e7 	movw	r2, #999	; 0x3e7
    620e:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    6210:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6214:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6218:	4693      	mov	fp, r2
    621a:	469c      	mov	ip, r3
    621c:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6220:	459c      	cmp	ip, r3
    6222:	bf08      	it	eq
    6224:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    6226:	6827      	ldr	r7, [r4, #0]
    6228:	4658      	mov	r0, fp
    622a:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    622c:	d104      	bne.n	6238 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    622e:	4638      	mov	r0, r7
    6230:	f7ff f8a6 	bl	5380 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6234:	3430      	adds	r4, #48	; 0x30
    6236:	e7b0      	b.n	619a <z_init_static_threads+0x4a>
    6238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    623c:	2300      	movs	r3, #0
    623e:	f7f9 ff5f 	bl	100 <__aeabi_uldivmod>
    6242:	4602      	mov	r2, r0
    6244:	460b      	mov	r3, r1
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6246:	f107 0018 	add.w	r0, r7, #24
    624a:	4908      	ldr	r1, [pc, #32]	; (626c <z_init_static_threads+0x11c>)
    624c:	f000 f886 	bl	635c <z_add_timeout>
    6250:	e7f0      	b.n	6234 <z_init_static_threads+0xe4>
    6252:	bf00      	nop
    6254:	20000154 	.word	0x20000154
    6258:	20000154 	.word	0x20000154
    625c:	000088e1 	.word	0x000088e1
    6260:	0000793c 	.word	0x0000793c
    6264:	0000859e 	.word	0x0000859e
    6268:	0000880d 	.word	0x0000880d
    626c:	00005429 	.word	0x00005429

00006270 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6270:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    6272:	b138      	cbz	r0, 6284 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6274:	4b04      	ldr	r3, [pc, #16]	; (6288 <z_spin_lock_valid+0x18>)
    6276:	7d1b      	ldrb	r3, [r3, #20]
    6278:	f000 0003 	and.w	r0, r0, #3
    627c:	1ac0      	subs	r0, r0, r3
    627e:	bf18      	it	ne
    6280:	2001      	movne	r0, #1
    6282:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6284:	2001      	movs	r0, #1
}
    6286:	4770      	bx	lr
    6288:	200009ec 	.word	0x200009ec

0000628c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    628c:	4906      	ldr	r1, [pc, #24]	; (62a8 <z_spin_unlock_valid+0x1c>)
{
    628e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6290:	688a      	ldr	r2, [r1, #8]
    6292:	7d08      	ldrb	r0, [r1, #20]
    6294:	6819      	ldr	r1, [r3, #0]
    6296:	4302      	orrs	r2, r0
    6298:	4291      	cmp	r1, r2
    629a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    629e:	bf04      	itt	eq
    62a0:	6018      	streq	r0, [r3, #0]
	return true;
    62a2:	2001      	moveq	r0, #1
}
    62a4:	4770      	bx	lr
    62a6:	bf00      	nop
    62a8:	200009ec 	.word	0x200009ec

000062ac <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    62ac:	4a02      	ldr	r2, [pc, #8]	; (62b8 <z_spin_lock_set_owner+0xc>)
    62ae:	7d11      	ldrb	r1, [r2, #20]
    62b0:	6893      	ldr	r3, [r2, #8]
    62b2:	430b      	orrs	r3, r1
    62b4:	6003      	str	r3, [r0, #0]
}
    62b6:	4770      	bx	lr
    62b8:	200009ec 	.word	0x200009ec

000062bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    62bc:	4b03      	ldr	r3, [pc, #12]	; (62cc <elapsed+0x10>)
    62be:	681b      	ldr	r3, [r3, #0]
    62c0:	b90b      	cbnz	r3, 62c6 <elapsed+0xa>
    62c2:	f7fd ba2d 	b.w	3720 <sys_clock_elapsed>
}
    62c6:	2000      	movs	r0, #0
    62c8:	4770      	bx	lr
    62ca:	bf00      	nop
    62cc:	20000a2c 	.word	0x20000a2c

000062d0 <next_timeout>:

static int32_t next_timeout(void)
{
    62d0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    62d2:	4b13      	ldr	r3, [pc, #76]	; (6320 <next_timeout+0x50>)
    62d4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62d6:	429c      	cmp	r4, r3
    62d8:	bf08      	it	eq
    62da:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    62dc:	f7ff ffee 	bl	62bc <elapsed>
    62e0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    62e2:	b1bc      	cbz	r4, 6314 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    62e4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    62e8:	1b40      	subs	r0, r0, r5
    62ea:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    62ee:	2801      	cmp	r0, #1
    62f0:	f171 0300 	sbcs.w	r3, r1, #0
    62f4:	db11      	blt.n	631a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    62f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    62fa:	2300      	movs	r3, #0
    62fc:	4282      	cmp	r2, r0
    62fe:	eb73 0401 	sbcs.w	r4, r3, r1
    6302:	da00      	bge.n	6306 <next_timeout+0x36>
    6304:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6306:	4b07      	ldr	r3, [pc, #28]	; (6324 <next_timeout+0x54>)
    6308:	691b      	ldr	r3, [r3, #16]
    630a:	b113      	cbz	r3, 6312 <next_timeout+0x42>
    630c:	4298      	cmp	r0, r3
    630e:	bfa8      	it	ge
    6310:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6312:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    6314:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6318:	e7f5      	b.n	6306 <next_timeout+0x36>
    631a:	2000      	movs	r0, #0
    631c:	e7f3      	b.n	6306 <next_timeout+0x36>
    631e:	bf00      	nop
    6320:	200000d8 	.word	0x200000d8
    6324:	200009ec 	.word	0x200009ec

00006328 <remove_timeout>:
{
    6328:	b530      	push	{r4, r5, lr}
    632a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    632c:	b168      	cbz	r0, 634a <remove_timeout+0x22>
    632e:	4a0a      	ldr	r2, [pc, #40]	; (6358 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    6330:	6852      	ldr	r2, [r2, #4]
    6332:	4290      	cmp	r0, r2
    6334:	d009      	beq.n	634a <remove_timeout+0x22>
	if (next(t) != NULL) {
    6336:	b143      	cbz	r3, 634a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6338:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    633c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6340:	1912      	adds	r2, r2, r4
    6342:	eb45 0101 	adc.w	r1, r5, r1
    6346:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    634a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    634c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    634e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6350:	2300      	movs	r3, #0
	node->prev = NULL;
    6352:	e9c0 3300 	strd	r3, r3, [r0]
}
    6356:	bd30      	pop	{r4, r5, pc}
    6358:	200000d8 	.word	0x200000d8

0000635c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    635c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6360:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6362:	1c6b      	adds	r3, r5, #1
    6364:	bf08      	it	eq
    6366:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    636a:	4682      	mov	sl, r0
    636c:	468b      	mov	fp, r1
    636e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6370:	f000 80aa 	beq.w	64c8 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6374:	6803      	ldr	r3, [r0, #0]
    6376:	b163      	cbz	r3, 6392 <z_add_timeout+0x36>
    6378:	4955      	ldr	r1, [pc, #340]	; (64d0 <z_add_timeout+0x174>)
    637a:	4a56      	ldr	r2, [pc, #344]	; (64d4 <z_add_timeout+0x178>)
    637c:	4856      	ldr	r0, [pc, #344]	; (64d8 <z_add_timeout+0x17c>)
    637e:	235d      	movs	r3, #93	; 0x5d
    6380:	f000 fda4 	bl	6ecc <printk>
    6384:	4855      	ldr	r0, [pc, #340]	; (64dc <z_add_timeout+0x180>)
    6386:	f000 fda1 	bl	6ecc <printk>
    638a:	4852      	ldr	r0, [pc, #328]	; (64d4 <z_add_timeout+0x178>)
    638c:	215d      	movs	r1, #93	; 0x5d
    638e:	f000 fcc9 	bl	6d24 <assert_post_action>
	to->fn = fn;
    6392:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    6396:	f04f 0320 	mov.w	r3, #32
    639a:	f3ef 8b11 	mrs	fp, BASEPRI
    639e:	f383 8812 	msr	BASEPRI_MAX, r3
    63a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63a6:	484e      	ldr	r0, [pc, #312]	; (64e0 <z_add_timeout+0x184>)
    63a8:	f7ff ff62 	bl	6270 <z_spin_lock_valid>
    63ac:	b968      	cbnz	r0, 63ca <z_add_timeout+0x6e>
    63ae:	4a4d      	ldr	r2, [pc, #308]	; (64e4 <z_add_timeout+0x188>)
    63b0:	494d      	ldr	r1, [pc, #308]	; (64e8 <z_add_timeout+0x18c>)
    63b2:	4849      	ldr	r0, [pc, #292]	; (64d8 <z_add_timeout+0x17c>)
    63b4:	2381      	movs	r3, #129	; 0x81
    63b6:	f000 fd89 	bl	6ecc <printk>
    63ba:	4949      	ldr	r1, [pc, #292]	; (64e0 <z_add_timeout+0x184>)
    63bc:	484b      	ldr	r0, [pc, #300]	; (64ec <z_add_timeout+0x190>)
    63be:	f000 fd85 	bl	6ecc <printk>
    63c2:	4848      	ldr	r0, [pc, #288]	; (64e4 <z_add_timeout+0x188>)
    63c4:	2181      	movs	r1, #129	; 0x81
    63c6:	f000 fcad 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    63ca:	4845      	ldr	r0, [pc, #276]	; (64e0 <z_add_timeout+0x184>)
    63cc:	f7ff ff6e 	bl	62ac <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    63d0:	f06f 0301 	mvn.w	r3, #1
    63d4:	ebb3 0804 	subs.w	r8, r3, r4
    63d8:	f04f 32ff 	mov.w	r2, #4294967295
    63dc:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    63e0:	f1b8 0f00 	cmp.w	r8, #0
    63e4:	f179 0100 	sbcs.w	r1, r9, #0
    63e8:	db1c      	blt.n	6424 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    63ea:	4841      	ldr	r0, [pc, #260]	; (64f0 <z_add_timeout+0x194>)
    63ec:	e9d0 1000 	ldrd	r1, r0, [r0]
    63f0:	1a5b      	subs	r3, r3, r1
    63f2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    63f6:	1b1e      	subs	r6, r3, r4
    63f8:	eb62 0705 	sbc.w	r7, r2, r5
    63fc:	2e01      	cmp	r6, #1
    63fe:	f177 0300 	sbcs.w	r3, r7, #0
    6402:	bfbc      	itt	lt
    6404:	2601      	movlt	r6, #1
    6406:	2700      	movlt	r7, #0
    6408:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    640c:	4a39      	ldr	r2, [pc, #228]	; (64f4 <z_add_timeout+0x198>)
    640e:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6412:	4293      	cmp	r3, r2
    6414:	d11d      	bne.n	6452 <z_add_timeout+0xf6>
	node->prev = tail;
    6416:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    641a:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    641e:	f8c2 a004 	str.w	sl, [r2, #4]
}
    6422:	e02c      	b.n	647e <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6424:	f7ff ff4a 	bl	62bc <elapsed>
    6428:	1c63      	adds	r3, r4, #1
    642a:	9300      	str	r3, [sp, #0]
    642c:	f145 0300 	adc.w	r3, r5, #0
    6430:	9301      	str	r3, [sp, #4]
    6432:	e9dd 2300 	ldrd	r2, r3, [sp]
    6436:	1812      	adds	r2, r2, r0
    6438:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    643c:	e9ca 2304 	strd	r2, r3, [sl, #16]
    6440:	e7e4      	b.n	640c <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6442:	1be0      	subs	r0, r4, r7
    6444:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    6448:	42b3      	cmp	r3, r6
    644a:	e9ca 0104 	strd	r0, r1, [sl, #16]
    644e:	d0e2      	beq.n	6416 <z_add_timeout+0xba>
    6450:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6452:	2b00      	cmp	r3, #0
    6454:	d0df      	beq.n	6416 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    6456:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    645a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    645e:	42bc      	cmp	r4, r7
    6460:	eb75 0108 	sbcs.w	r1, r5, r8
    6464:	daed      	bge.n	6442 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    6466:	1b38      	subs	r0, r7, r4
    6468:	eb68 0105 	sbc.w	r1, r8, r5
    646c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6470:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6472:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    6476:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    647a:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    647e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6480:	4293      	cmp	r3, r2
    6482:	d00b      	beq.n	649c <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6484:	459a      	cmp	sl, r3
    6486:	d109      	bne.n	649c <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6488:	f7ff ff22 	bl	62d0 <next_timeout>

			if (next_time == 0 ||
    648c:	b118      	cbz	r0, 6496 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    648e:	4b1a      	ldr	r3, [pc, #104]	; (64f8 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    6490:	691b      	ldr	r3, [r3, #16]
    6492:	4283      	cmp	r3, r0
    6494:	d002      	beq.n	649c <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    6496:	2100      	movs	r1, #0
    6498:	f7fd f912 	bl	36c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    649c:	4810      	ldr	r0, [pc, #64]	; (64e0 <z_add_timeout+0x184>)
    649e:	f7ff fef5 	bl	628c <z_spin_unlock_valid>
    64a2:	b968      	cbnz	r0, 64c0 <z_add_timeout+0x164>
    64a4:	4a0f      	ldr	r2, [pc, #60]	; (64e4 <z_add_timeout+0x188>)
    64a6:	4915      	ldr	r1, [pc, #84]	; (64fc <z_add_timeout+0x1a0>)
    64a8:	480b      	ldr	r0, [pc, #44]	; (64d8 <z_add_timeout+0x17c>)
    64aa:	23ac      	movs	r3, #172	; 0xac
    64ac:	f000 fd0e 	bl	6ecc <printk>
    64b0:	490b      	ldr	r1, [pc, #44]	; (64e0 <z_add_timeout+0x184>)
    64b2:	4813      	ldr	r0, [pc, #76]	; (6500 <z_add_timeout+0x1a4>)
    64b4:	f000 fd0a 	bl	6ecc <printk>
    64b8:	480a      	ldr	r0, [pc, #40]	; (64e4 <z_add_timeout+0x188>)
    64ba:	21ac      	movs	r1, #172	; 0xac
    64bc:	f000 fc32 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    64c0:	f38b 8811 	msr	BASEPRI, fp
    64c4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    64c8:	b003      	add	sp, #12
    64ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64ce:	bf00      	nop
    64d0:	00008932 	.word	0x00008932
    64d4:	0000890e 	.word	0x0000890e
    64d8:	0000793c 	.word	0x0000793c
    64dc:	00008658 	.word	0x00008658
    64e0:	20000a30 	.word	0x20000a30
    64e4:	00007e17 	.word	0x00007e17
    64e8:	00007e69 	.word	0x00007e69
    64ec:	00007e7e 	.word	0x00007e7e
    64f0:	200002c8 	.word	0x200002c8
    64f4:	200000d8 	.word	0x200000d8
    64f8:	200009ec 	.word	0x200009ec
    64fc:	00007e3d 	.word	0x00007e3d
    6500:	00007e54 	.word	0x00007e54

00006504 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6504:	b538      	push	{r3, r4, r5, lr}
    6506:	4604      	mov	r4, r0
	__asm__ volatile(
    6508:	f04f 0320 	mov.w	r3, #32
    650c:	f3ef 8511 	mrs	r5, BASEPRI
    6510:	f383 8812 	msr	BASEPRI_MAX, r3
    6514:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6518:	481a      	ldr	r0, [pc, #104]	; (6584 <z_abort_timeout+0x80>)
    651a:	f7ff fea9 	bl	6270 <z_spin_lock_valid>
    651e:	b968      	cbnz	r0, 653c <z_abort_timeout+0x38>
    6520:	4a19      	ldr	r2, [pc, #100]	; (6588 <z_abort_timeout+0x84>)
    6522:	491a      	ldr	r1, [pc, #104]	; (658c <z_abort_timeout+0x88>)
    6524:	481a      	ldr	r0, [pc, #104]	; (6590 <z_abort_timeout+0x8c>)
    6526:	2381      	movs	r3, #129	; 0x81
    6528:	f000 fcd0 	bl	6ecc <printk>
    652c:	4915      	ldr	r1, [pc, #84]	; (6584 <z_abort_timeout+0x80>)
    652e:	4819      	ldr	r0, [pc, #100]	; (6594 <z_abort_timeout+0x90>)
    6530:	f000 fccc 	bl	6ecc <printk>
    6534:	4814      	ldr	r0, [pc, #80]	; (6588 <z_abort_timeout+0x84>)
    6536:	2181      	movs	r1, #129	; 0x81
    6538:	f000 fbf4 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    653c:	4811      	ldr	r0, [pc, #68]	; (6584 <z_abort_timeout+0x80>)
    653e:	f7ff feb5 	bl	62ac <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6542:	6823      	ldr	r3, [r4, #0]
    6544:	b1db      	cbz	r3, 657e <z_abort_timeout+0x7a>
			remove_timeout(to);
    6546:	4620      	mov	r0, r4
    6548:	f7ff feee 	bl	6328 <remove_timeout>
			ret = 0;
    654c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    654e:	480d      	ldr	r0, [pc, #52]	; (6584 <z_abort_timeout+0x80>)
    6550:	f7ff fe9c 	bl	628c <z_spin_unlock_valid>
    6554:	b968      	cbnz	r0, 6572 <z_abort_timeout+0x6e>
    6556:	4a0c      	ldr	r2, [pc, #48]	; (6588 <z_abort_timeout+0x84>)
    6558:	490f      	ldr	r1, [pc, #60]	; (6598 <z_abort_timeout+0x94>)
    655a:	480d      	ldr	r0, [pc, #52]	; (6590 <z_abort_timeout+0x8c>)
    655c:	23ac      	movs	r3, #172	; 0xac
    655e:	f000 fcb5 	bl	6ecc <printk>
    6562:	4908      	ldr	r1, [pc, #32]	; (6584 <z_abort_timeout+0x80>)
    6564:	480d      	ldr	r0, [pc, #52]	; (659c <z_abort_timeout+0x98>)
    6566:	f000 fcb1 	bl	6ecc <printk>
    656a:	4807      	ldr	r0, [pc, #28]	; (6588 <z_abort_timeout+0x84>)
    656c:	21ac      	movs	r1, #172	; 0xac
    656e:	f000 fbd9 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    6572:	f385 8811 	msr	BASEPRI, r5
    6576:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    657a:	4620      	mov	r0, r4
    657c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    657e:	f06f 0415 	mvn.w	r4, #21
    6582:	e7e4      	b.n	654e <z_abort_timeout+0x4a>
    6584:	20000a30 	.word	0x20000a30
    6588:	00007e17 	.word	0x00007e17
    658c:	00007e69 	.word	0x00007e69
    6590:	0000793c 	.word	0x0000793c
    6594:	00007e7e 	.word	0x00007e7e
    6598:	00007e3d 	.word	0x00007e3d
    659c:	00007e54 	.word	0x00007e54

000065a0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    65a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    65a2:	f04f 0320 	mov.w	r3, #32
    65a6:	f3ef 8511 	mrs	r5, BASEPRI
    65aa:	f383 8812 	msr	BASEPRI_MAX, r3
    65ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65b2:	4818      	ldr	r0, [pc, #96]	; (6614 <z_get_next_timeout_expiry+0x74>)
    65b4:	f7ff fe5c 	bl	6270 <z_spin_lock_valid>
    65b8:	b968      	cbnz	r0, 65d6 <z_get_next_timeout_expiry+0x36>
    65ba:	4a17      	ldr	r2, [pc, #92]	; (6618 <z_get_next_timeout_expiry+0x78>)
    65bc:	4917      	ldr	r1, [pc, #92]	; (661c <z_get_next_timeout_expiry+0x7c>)
    65be:	4818      	ldr	r0, [pc, #96]	; (6620 <z_get_next_timeout_expiry+0x80>)
    65c0:	2381      	movs	r3, #129	; 0x81
    65c2:	f000 fc83 	bl	6ecc <printk>
    65c6:	4913      	ldr	r1, [pc, #76]	; (6614 <z_get_next_timeout_expiry+0x74>)
    65c8:	4816      	ldr	r0, [pc, #88]	; (6624 <z_get_next_timeout_expiry+0x84>)
    65ca:	f000 fc7f 	bl	6ecc <printk>
    65ce:	4812      	ldr	r0, [pc, #72]	; (6618 <z_get_next_timeout_expiry+0x78>)
    65d0:	2181      	movs	r1, #129	; 0x81
    65d2:	f000 fba7 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    65d6:	480f      	ldr	r0, [pc, #60]	; (6614 <z_get_next_timeout_expiry+0x74>)
    65d8:	f7ff fe68 	bl	62ac <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    65dc:	f7ff fe78 	bl	62d0 <next_timeout>
    65e0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65e2:	480c      	ldr	r0, [pc, #48]	; (6614 <z_get_next_timeout_expiry+0x74>)
    65e4:	f7ff fe52 	bl	628c <z_spin_unlock_valid>
    65e8:	b968      	cbnz	r0, 6606 <z_get_next_timeout_expiry+0x66>
    65ea:	4a0b      	ldr	r2, [pc, #44]	; (6618 <z_get_next_timeout_expiry+0x78>)
    65ec:	490e      	ldr	r1, [pc, #56]	; (6628 <z_get_next_timeout_expiry+0x88>)
    65ee:	480c      	ldr	r0, [pc, #48]	; (6620 <z_get_next_timeout_expiry+0x80>)
    65f0:	23ac      	movs	r3, #172	; 0xac
    65f2:	f000 fc6b 	bl	6ecc <printk>
    65f6:	4907      	ldr	r1, [pc, #28]	; (6614 <z_get_next_timeout_expiry+0x74>)
    65f8:	480c      	ldr	r0, [pc, #48]	; (662c <z_get_next_timeout_expiry+0x8c>)
    65fa:	f000 fc67 	bl	6ecc <printk>
    65fe:	4806      	ldr	r0, [pc, #24]	; (6618 <z_get_next_timeout_expiry+0x78>)
    6600:	21ac      	movs	r1, #172	; 0xac
    6602:	f000 fb8f 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    6606:	f385 8811 	msr	BASEPRI, r5
    660a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    660e:	4620      	mov	r0, r4
    6610:	bd38      	pop	{r3, r4, r5, pc}
    6612:	bf00      	nop
    6614:	20000a30 	.word	0x20000a30
    6618:	00007e17 	.word	0x00007e17
    661c:	00007e69 	.word	0x00007e69
    6620:	0000793c 	.word	0x0000793c
    6624:	00007e7e 	.word	0x00007e7e
    6628:	00007e3d 	.word	0x00007e3d
    662c:	00007e54 	.word	0x00007e54

00006630 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6630:	b570      	push	{r4, r5, r6, lr}
    6632:	4604      	mov	r4, r0
    6634:	460d      	mov	r5, r1
	__asm__ volatile(
    6636:	f04f 0320 	mov.w	r3, #32
    663a:	f3ef 8611 	mrs	r6, BASEPRI
    663e:	f383 8812 	msr	BASEPRI_MAX, r3
    6642:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6646:	481b      	ldr	r0, [pc, #108]	; (66b4 <z_set_timeout_expiry+0x84>)
    6648:	f7ff fe12 	bl	6270 <z_spin_lock_valid>
    664c:	b968      	cbnz	r0, 666a <z_set_timeout_expiry+0x3a>
    664e:	4a1a      	ldr	r2, [pc, #104]	; (66b8 <z_set_timeout_expiry+0x88>)
    6650:	491a      	ldr	r1, [pc, #104]	; (66bc <z_set_timeout_expiry+0x8c>)
    6652:	481b      	ldr	r0, [pc, #108]	; (66c0 <z_set_timeout_expiry+0x90>)
    6654:	2381      	movs	r3, #129	; 0x81
    6656:	f000 fc39 	bl	6ecc <printk>
    665a:	4916      	ldr	r1, [pc, #88]	; (66b4 <z_set_timeout_expiry+0x84>)
    665c:	4819      	ldr	r0, [pc, #100]	; (66c4 <z_set_timeout_expiry+0x94>)
    665e:	f000 fc35 	bl	6ecc <printk>
    6662:	4815      	ldr	r0, [pc, #84]	; (66b8 <z_set_timeout_expiry+0x88>)
    6664:	2181      	movs	r1, #129	; 0x81
    6666:	f000 fb5d 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    666a:	4812      	ldr	r0, [pc, #72]	; (66b4 <z_set_timeout_expiry+0x84>)
    666c:	f7ff fe1e 	bl	62ac <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    6670:	f7ff fe2e 	bl	62d0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6674:	2801      	cmp	r0, #1
    6676:	dd05      	ble.n	6684 <z_set_timeout_expiry+0x54>
    6678:	42a0      	cmp	r0, r4
    667a:	db03      	blt.n	6684 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    667c:	4629      	mov	r1, r5
    667e:	4620      	mov	r0, r4
    6680:	f7fd f81e 	bl	36c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6684:	480b      	ldr	r0, [pc, #44]	; (66b4 <z_set_timeout_expiry+0x84>)
    6686:	f7ff fe01 	bl	628c <z_spin_unlock_valid>
    668a:	b968      	cbnz	r0, 66a8 <z_set_timeout_expiry+0x78>
    668c:	4a0a      	ldr	r2, [pc, #40]	; (66b8 <z_set_timeout_expiry+0x88>)
    668e:	490e      	ldr	r1, [pc, #56]	; (66c8 <z_set_timeout_expiry+0x98>)
    6690:	480b      	ldr	r0, [pc, #44]	; (66c0 <z_set_timeout_expiry+0x90>)
    6692:	23ac      	movs	r3, #172	; 0xac
    6694:	f000 fc1a 	bl	6ecc <printk>
    6698:	4906      	ldr	r1, [pc, #24]	; (66b4 <z_set_timeout_expiry+0x84>)
    669a:	480c      	ldr	r0, [pc, #48]	; (66cc <z_set_timeout_expiry+0x9c>)
    669c:	f000 fc16 	bl	6ecc <printk>
    66a0:	4805      	ldr	r0, [pc, #20]	; (66b8 <z_set_timeout_expiry+0x88>)
    66a2:	21ac      	movs	r1, #172	; 0xac
    66a4:	f000 fb3e 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    66a8:	f386 8811 	msr	BASEPRI, r6
    66ac:	f3bf 8f6f 	isb	sy
		}
	}
}
    66b0:	bd70      	pop	{r4, r5, r6, pc}
    66b2:	bf00      	nop
    66b4:	20000a30 	.word	0x20000a30
    66b8:	00007e17 	.word	0x00007e17
    66bc:	00007e69 	.word	0x00007e69
    66c0:	0000793c 	.word	0x0000793c
    66c4:	00007e7e 	.word	0x00007e7e
    66c8:	00007e3d 	.word	0x00007e3d
    66cc:	00007e54 	.word	0x00007e54

000066d0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    66d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66d4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    66d6:	f7fe fd41 	bl	515c <z_time_slice>
	__asm__ volatile(
    66da:	f04f 0320 	mov.w	r3, #32
    66de:	f3ef 8711 	mrs	r7, BASEPRI
    66e2:	f383 8812 	msr	BASEPRI_MAX, r3
    66e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66ea:	4855      	ldr	r0, [pc, #340]	; (6840 <sys_clock_announce+0x170>)
    66ec:	f7ff fdc0 	bl	6270 <z_spin_lock_valid>
    66f0:	b968      	cbnz	r0, 670e <sys_clock_announce+0x3e>
    66f2:	4a54      	ldr	r2, [pc, #336]	; (6844 <sys_clock_announce+0x174>)
    66f4:	4954      	ldr	r1, [pc, #336]	; (6848 <sys_clock_announce+0x178>)
    66f6:	4855      	ldr	r0, [pc, #340]	; (684c <sys_clock_announce+0x17c>)
    66f8:	2381      	movs	r3, #129	; 0x81
    66fa:	f000 fbe7 	bl	6ecc <printk>
    66fe:	4950      	ldr	r1, [pc, #320]	; (6840 <sys_clock_announce+0x170>)
    6700:	4853      	ldr	r0, [pc, #332]	; (6850 <sys_clock_announce+0x180>)
    6702:	f000 fbe3 	bl	6ecc <printk>
    6706:	484f      	ldr	r0, [pc, #316]	; (6844 <sys_clock_announce+0x174>)
    6708:	2181      	movs	r1, #129	; 0x81
    670a:	f000 fb0b 	bl	6d24 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    670e:	4d51      	ldr	r5, [pc, #324]	; (6854 <sys_clock_announce+0x184>)
    6710:	4e51      	ldr	r6, [pc, #324]	; (6858 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    6712:	484b      	ldr	r0, [pc, #300]	; (6840 <sys_clock_announce+0x170>)
	return list->head == list;
    6714:	f8df a14c 	ldr.w	sl, [pc, #332]	; 6864 <sys_clock_announce+0x194>
    6718:	f7ff fdc8 	bl	62ac <z_spin_lock_set_owner>
    671c:	46b3      	mov	fp, r6
    671e:	602c      	str	r4, [r5, #0]
    6720:	e9d6 2300 	ldrd	r2, r3, [r6]
    6724:	f8d5 c000 	ldr.w	ip, [r5]
    6728:	f8da 4000 	ldr.w	r4, [sl]
    672c:	e9cd 2300 	strd	r2, r3, [sp]
    6730:	4662      	mov	r2, ip
    6732:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6734:	4554      	cmp	r4, sl
    6736:	46e0      	mov	r8, ip
    6738:	4699      	mov	r9, r3
    673a:	d00c      	beq.n	6756 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    673c:	b15c      	cbz	r4, 6756 <sys_clock_announce+0x86>
    673e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    6742:	458c      	cmp	ip, r1
    6744:	eb79 0302 	sbcs.w	r3, r9, r2
    6748:	da2e      	bge.n	67a8 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    674a:	ebb1 000c 	subs.w	r0, r1, ip
    674e:	eb62 0109 	sbc.w	r1, r2, r9
    6752:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    6756:	9a00      	ldr	r2, [sp, #0]
    6758:	9901      	ldr	r1, [sp, #4]
    675a:	eb18 0202 	adds.w	r2, r8, r2
    675e:	464b      	mov	r3, r9
    6760:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    6764:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6766:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    676a:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    676c:	f7ff fdb0 	bl	62d0 <next_timeout>
    6770:	4621      	mov	r1, r4
    6772:	f7fc ffa5 	bl	36c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6776:	4832      	ldr	r0, [pc, #200]	; (6840 <sys_clock_announce+0x170>)
    6778:	f7ff fd88 	bl	628c <z_spin_unlock_valid>
    677c:	b968      	cbnz	r0, 679a <sys_clock_announce+0xca>
    677e:	4a31      	ldr	r2, [pc, #196]	; (6844 <sys_clock_announce+0x174>)
    6780:	4936      	ldr	r1, [pc, #216]	; (685c <sys_clock_announce+0x18c>)
    6782:	4832      	ldr	r0, [pc, #200]	; (684c <sys_clock_announce+0x17c>)
    6784:	23ac      	movs	r3, #172	; 0xac
    6786:	f000 fba1 	bl	6ecc <printk>
    678a:	492d      	ldr	r1, [pc, #180]	; (6840 <sys_clock_announce+0x170>)
    678c:	4834      	ldr	r0, [pc, #208]	; (6860 <sys_clock_announce+0x190>)
    678e:	f000 fb9d 	bl	6ecc <printk>
    6792:	482c      	ldr	r0, [pc, #176]	; (6844 <sys_clock_announce+0x174>)
    6794:	21ac      	movs	r1, #172	; 0xac
    6796:	f000 fac5 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    679a:	f387 8811 	msr	BASEPRI, r7
    679e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    67a2:	b003      	add	sp, #12
    67a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    67a8:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    67ac:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    67b0:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    67b4:	f04f 0200 	mov.w	r2, #0
    67b8:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    67bc:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    67c0:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    67c2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    67c6:	4620      	mov	r0, r4
		curr_tick += dt;
    67c8:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    67cc:	f7ff fdac 	bl	6328 <remove_timeout>
    67d0:	481b      	ldr	r0, [pc, #108]	; (6840 <sys_clock_announce+0x170>)
    67d2:	f7ff fd5b 	bl	628c <z_spin_unlock_valid>
    67d6:	b968      	cbnz	r0, 67f4 <sys_clock_announce+0x124>
    67d8:	4a1a      	ldr	r2, [pc, #104]	; (6844 <sys_clock_announce+0x174>)
    67da:	4920      	ldr	r1, [pc, #128]	; (685c <sys_clock_announce+0x18c>)
    67dc:	481b      	ldr	r0, [pc, #108]	; (684c <sys_clock_announce+0x17c>)
    67de:	23ac      	movs	r3, #172	; 0xac
    67e0:	f000 fb74 	bl	6ecc <printk>
    67e4:	4916      	ldr	r1, [pc, #88]	; (6840 <sys_clock_announce+0x170>)
    67e6:	481e      	ldr	r0, [pc, #120]	; (6860 <sys_clock_announce+0x190>)
    67e8:	f000 fb70 	bl	6ecc <printk>
    67ec:	4815      	ldr	r0, [pc, #84]	; (6844 <sys_clock_announce+0x174>)
    67ee:	21ac      	movs	r1, #172	; 0xac
    67f0:	f000 fa98 	bl	6d24 <assert_post_action>
    67f4:	f387 8811 	msr	BASEPRI, r7
    67f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    67fc:	68a3      	ldr	r3, [r4, #8]
    67fe:	4620      	mov	r0, r4
    6800:	4798      	blx	r3
	__asm__ volatile(
    6802:	f04f 0320 	mov.w	r3, #32
    6806:	f3ef 8711 	mrs	r7, BASEPRI
    680a:	f383 8812 	msr	BASEPRI_MAX, r3
    680e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6812:	480b      	ldr	r0, [pc, #44]	; (6840 <sys_clock_announce+0x170>)
    6814:	f7ff fd2c 	bl	6270 <z_spin_lock_valid>
    6818:	b968      	cbnz	r0, 6836 <sys_clock_announce+0x166>
    681a:	4a0a      	ldr	r2, [pc, #40]	; (6844 <sys_clock_announce+0x174>)
    681c:	490a      	ldr	r1, [pc, #40]	; (6848 <sys_clock_announce+0x178>)
    681e:	480b      	ldr	r0, [pc, #44]	; (684c <sys_clock_announce+0x17c>)
    6820:	2381      	movs	r3, #129	; 0x81
    6822:	f000 fb53 	bl	6ecc <printk>
    6826:	4906      	ldr	r1, [pc, #24]	; (6840 <sys_clock_announce+0x170>)
    6828:	4809      	ldr	r0, [pc, #36]	; (6850 <sys_clock_announce+0x180>)
    682a:	f000 fb4f 	bl	6ecc <printk>
    682e:	4805      	ldr	r0, [pc, #20]	; (6844 <sys_clock_announce+0x174>)
    6830:	2181      	movs	r1, #129	; 0x81
    6832:	f000 fa77 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    6836:	4802      	ldr	r0, [pc, #8]	; (6840 <sys_clock_announce+0x170>)
    6838:	f7ff fd38 	bl	62ac <z_spin_lock_set_owner>
	return k;
    683c:	e770      	b.n	6720 <sys_clock_announce+0x50>
    683e:	bf00      	nop
    6840:	20000a30 	.word	0x20000a30
    6844:	00007e17 	.word	0x00007e17
    6848:	00007e69 	.word	0x00007e69
    684c:	0000793c 	.word	0x0000793c
    6850:	00007e7e 	.word	0x00007e7e
    6854:	20000a2c 	.word	0x20000a2c
    6858:	200002c8 	.word	0x200002c8
    685c:	00007e3d 	.word	0x00007e3d
    6860:	00007e54 	.word	0x00007e54
    6864:	200000d8 	.word	0x200000d8

00006868 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6868:	b570      	push	{r4, r5, r6, lr}
    686a:	f04f 0320 	mov.w	r3, #32
    686e:	f3ef 8611 	mrs	r6, BASEPRI
    6872:	f383 8812 	msr	BASEPRI_MAX, r3
    6876:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    687a:	481b      	ldr	r0, [pc, #108]	; (68e8 <sys_clock_tick_get+0x80>)
    687c:	f7ff fcf8 	bl	6270 <z_spin_lock_valid>
    6880:	b968      	cbnz	r0, 689e <sys_clock_tick_get+0x36>
    6882:	4a1a      	ldr	r2, [pc, #104]	; (68ec <sys_clock_tick_get+0x84>)
    6884:	491a      	ldr	r1, [pc, #104]	; (68f0 <sys_clock_tick_get+0x88>)
    6886:	481b      	ldr	r0, [pc, #108]	; (68f4 <sys_clock_tick_get+0x8c>)
    6888:	2381      	movs	r3, #129	; 0x81
    688a:	f000 fb1f 	bl	6ecc <printk>
    688e:	4916      	ldr	r1, [pc, #88]	; (68e8 <sys_clock_tick_get+0x80>)
    6890:	4819      	ldr	r0, [pc, #100]	; (68f8 <sys_clock_tick_get+0x90>)
    6892:	f000 fb1b 	bl	6ecc <printk>
    6896:	4815      	ldr	r0, [pc, #84]	; (68ec <sys_clock_tick_get+0x84>)
    6898:	2181      	movs	r1, #129	; 0x81
    689a:	f000 fa43 	bl	6d24 <assert_post_action>
	z_spin_lock_set_owner(l);
    689e:	4812      	ldr	r0, [pc, #72]	; (68e8 <sys_clock_tick_get+0x80>)
    68a0:	f7ff fd04 	bl	62ac <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    68a4:	f7fc ff3c 	bl	3720 <sys_clock_elapsed>
    68a8:	4b14      	ldr	r3, [pc, #80]	; (68fc <sys_clock_tick_get+0x94>)
    68aa:	e9d3 4500 	ldrd	r4, r5, [r3]
    68ae:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68b0:	480d      	ldr	r0, [pc, #52]	; (68e8 <sys_clock_tick_get+0x80>)
    68b2:	f145 0500 	adc.w	r5, r5, #0
    68b6:	f7ff fce9 	bl	628c <z_spin_unlock_valid>
    68ba:	b968      	cbnz	r0, 68d8 <sys_clock_tick_get+0x70>
    68bc:	4a0b      	ldr	r2, [pc, #44]	; (68ec <sys_clock_tick_get+0x84>)
    68be:	4910      	ldr	r1, [pc, #64]	; (6900 <sys_clock_tick_get+0x98>)
    68c0:	480c      	ldr	r0, [pc, #48]	; (68f4 <sys_clock_tick_get+0x8c>)
    68c2:	23ac      	movs	r3, #172	; 0xac
    68c4:	f000 fb02 	bl	6ecc <printk>
    68c8:	4907      	ldr	r1, [pc, #28]	; (68e8 <sys_clock_tick_get+0x80>)
    68ca:	480e      	ldr	r0, [pc, #56]	; (6904 <sys_clock_tick_get+0x9c>)
    68cc:	f000 fafe 	bl	6ecc <printk>
    68d0:	4806      	ldr	r0, [pc, #24]	; (68ec <sys_clock_tick_get+0x84>)
    68d2:	21ac      	movs	r1, #172	; 0xac
    68d4:	f000 fa26 	bl	6d24 <assert_post_action>
	__asm__ volatile(
    68d8:	f386 8811 	msr	BASEPRI, r6
    68dc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    68e0:	4620      	mov	r0, r4
    68e2:	4629      	mov	r1, r5
    68e4:	bd70      	pop	{r4, r5, r6, pc}
    68e6:	bf00      	nop
    68e8:	20000a30 	.word	0x20000a30
    68ec:	00007e17 	.word	0x00007e17
    68f0:	00007e69 	.word	0x00007e69
    68f4:	0000793c 	.word	0x0000793c
    68f8:	00007e7e 	.word	0x00007e7e
    68fc:	200002c8 	.word	0x200002c8
    6900:	00007e3d 	.word	0x00007e3d
    6904:	00007e54 	.word	0x00007e54

00006908 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6908:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    690a:	4806      	ldr	r0, [pc, #24]	; (6924 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    690c:	4a06      	ldr	r2, [pc, #24]	; (6928 <z_data_copy+0x20>)
    690e:	4907      	ldr	r1, [pc, #28]	; (692c <z_data_copy+0x24>)
    6910:	1a12      	subs	r2, r2, r0
    6912:	f000 fb31 	bl	6f78 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    691a:	4a05      	ldr	r2, [pc, #20]	; (6930 <z_data_copy+0x28>)
    691c:	4905      	ldr	r1, [pc, #20]	; (6934 <z_data_copy+0x2c>)
    691e:	4806      	ldr	r0, [pc, #24]	; (6938 <z_data_copy+0x30>)
    6920:	f000 bb2a 	b.w	6f78 <memcpy>
    6924:	20000000 	.word	0x20000000
    6928:	200001a4 	.word	0x200001a4
    692c:	00008988 	.word	0x00008988
    6930:	00000000 	.word	0x00000000
    6934:	00008988 	.word	0x00008988
    6938:	20000000 	.word	0x20000000

0000693c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    693c:	4a02      	ldr	r2, [pc, #8]	; (6948 <boot_banner+0xc>)
    693e:	4903      	ldr	r1, [pc, #12]	; (694c <boot_banner+0x10>)
    6940:	4803      	ldr	r0, [pc, #12]	; (6950 <boot_banner+0x14>)
    6942:	f000 bac3 	b.w	6ecc <printk>
    6946:	bf00      	nop
    6948:	0000865a 	.word	0x0000865a
    694c:	00008952 	.word	0x00008952
    6950:	00008961 	.word	0x00008961

00006954 <nrf_cc3xx_platform_init_no_rng>:
    6954:	b510      	push	{r4, lr}
    6956:	4c0a      	ldr	r4, [pc, #40]	; (6980 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6958:	6823      	ldr	r3, [r4, #0]
    695a:	b11b      	cbz	r3, 6964 <nrf_cc3xx_platform_init_no_rng+0x10>
    695c:	2301      	movs	r3, #1
    695e:	6023      	str	r3, [r4, #0]
    6960:	2000      	movs	r0, #0
    6962:	bd10      	pop	{r4, pc}
    6964:	f000 f8d6 	bl	6b14 <CC_LibInitNoRng>
    6968:	2800      	cmp	r0, #0
    696a:	d0f7      	beq.n	695c <nrf_cc3xx_platform_init_no_rng+0x8>
    696c:	3801      	subs	r0, #1
    696e:	2806      	cmp	r0, #6
    6970:	d803      	bhi.n	697a <nrf_cc3xx_platform_init_no_rng+0x26>
    6972:	4b04      	ldr	r3, [pc, #16]	; (6984 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6974:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6978:	bd10      	pop	{r4, pc}
    697a:	4803      	ldr	r0, [pc, #12]	; (6988 <nrf_cc3xx_platform_init_no_rng+0x34>)
    697c:	bd10      	pop	{r4, pc}
    697e:	bf00      	nop
    6980:	20000a34 	.word	0x20000a34
    6984:	000077a4 	.word	0x000077a4
    6988:	ffff8ffe 	.word	0xffff8ffe

0000698c <nrf_cc3xx_platform_abort>:
    698c:	f3bf 8f4f 	dsb	sy
    6990:	4905      	ldr	r1, [pc, #20]	; (69a8 <nrf_cc3xx_platform_abort+0x1c>)
    6992:	4b06      	ldr	r3, [pc, #24]	; (69ac <nrf_cc3xx_platform_abort+0x20>)
    6994:	68ca      	ldr	r2, [r1, #12]
    6996:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    699a:	4313      	orrs	r3, r2
    699c:	60cb      	str	r3, [r1, #12]
    699e:	f3bf 8f4f 	dsb	sy
    69a2:	bf00      	nop
    69a4:	e7fd      	b.n	69a2 <nrf_cc3xx_platform_abort+0x16>
    69a6:	bf00      	nop
    69a8:	e000ed00 	.word	0xe000ed00
    69ac:	05fa0004 	.word	0x05fa0004

000069b0 <CC_PalAbort>:
    69b0:	b4f0      	push	{r4, r5, r6, r7}
    69b2:	4f09      	ldr	r7, [pc, #36]	; (69d8 <CC_PalAbort+0x28>)
    69b4:	4e09      	ldr	r6, [pc, #36]	; (69dc <CC_PalAbort+0x2c>)
    69b6:	4c0a      	ldr	r4, [pc, #40]	; (69e0 <CC_PalAbort+0x30>)
    69b8:	4a0a      	ldr	r2, [pc, #40]	; (69e4 <CC_PalAbort+0x34>)
    69ba:	4d0b      	ldr	r5, [pc, #44]	; (69e8 <CC_PalAbort+0x38>)
    69bc:	490b      	ldr	r1, [pc, #44]	; (69ec <CC_PalAbort+0x3c>)
    69be:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    69c2:	603b      	str	r3, [r7, #0]
    69c4:	6852      	ldr	r2, [r2, #4]
    69c6:	6033      	str	r3, [r6, #0]
    69c8:	6023      	str	r3, [r4, #0]
    69ca:	2400      	movs	r4, #0
    69cc:	602b      	str	r3, [r5, #0]
    69ce:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    69d2:	bcf0      	pop	{r4, r5, r6, r7}
    69d4:	4710      	bx	r2
    69d6:	bf00      	nop
    69d8:	5002b400 	.word	0x5002b400
    69dc:	5002b404 	.word	0x5002b404
    69e0:	5002b408 	.word	0x5002b408
    69e4:	200000e0 	.word	0x200000e0
    69e8:	5002b40c 	.word	0x5002b40c
    69ec:	5002a000 	.word	0x5002a000

000069f0 <nrf_cc3xx_platform_set_abort>:
    69f0:	e9d0 1200 	ldrd	r1, r2, [r0]
    69f4:	4b01      	ldr	r3, [pc, #4]	; (69fc <nrf_cc3xx_platform_set_abort+0xc>)
    69f6:	e9c3 1200 	strd	r1, r2, [r3]
    69fa:	4770      	bx	lr
    69fc:	200000e0 	.word	0x200000e0

00006a00 <mutex_free>:
    6a00:	b510      	push	{r4, lr}
    6a02:	4604      	mov	r4, r0
    6a04:	b130      	cbz	r0, 6a14 <mutex_free+0x14>
    6a06:	6863      	ldr	r3, [r4, #4]
    6a08:	06db      	lsls	r3, r3, #27
    6a0a:	d502      	bpl.n	6a12 <mutex_free+0x12>
    6a0c:	2300      	movs	r3, #0
    6a0e:	6023      	str	r3, [r4, #0]
    6a10:	6063      	str	r3, [r4, #4]
    6a12:	bd10      	pop	{r4, pc}
    6a14:	4b02      	ldr	r3, [pc, #8]	; (6a20 <mutex_free+0x20>)
    6a16:	4803      	ldr	r0, [pc, #12]	; (6a24 <mutex_free+0x24>)
    6a18:	685b      	ldr	r3, [r3, #4]
    6a1a:	4798      	blx	r3
    6a1c:	e7f3      	b.n	6a06 <mutex_free+0x6>
    6a1e:	bf00      	nop
    6a20:	200000e0 	.word	0x200000e0
    6a24:	000077c0 	.word	0x000077c0

00006a28 <mutex_unlock>:
    6a28:	b168      	cbz	r0, 6a46 <mutex_unlock+0x1e>
    6a2a:	6843      	ldr	r3, [r0, #4]
    6a2c:	b13b      	cbz	r3, 6a3e <mutex_unlock+0x16>
    6a2e:	06db      	lsls	r3, r3, #27
    6a30:	d507      	bpl.n	6a42 <mutex_unlock+0x1a>
    6a32:	f3bf 8f5f 	dmb	sy
    6a36:	2300      	movs	r3, #0
    6a38:	6003      	str	r3, [r0, #0]
    6a3a:	4618      	mov	r0, r3
    6a3c:	4770      	bx	lr
    6a3e:	4803      	ldr	r0, [pc, #12]	; (6a4c <mutex_unlock+0x24>)
    6a40:	4770      	bx	lr
    6a42:	4803      	ldr	r0, [pc, #12]	; (6a50 <mutex_unlock+0x28>)
    6a44:	4770      	bx	lr
    6a46:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6a4a:	4770      	bx	lr
    6a4c:	ffff8fea 	.word	0xffff8fea
    6a50:	ffff8fe9 	.word	0xffff8fe9

00006a54 <mutex_init>:
    6a54:	b510      	push	{r4, lr}
    6a56:	4604      	mov	r4, r0
    6a58:	b120      	cbz	r0, 6a64 <mutex_init+0x10>
    6a5a:	2200      	movs	r2, #0
    6a5c:	2311      	movs	r3, #17
    6a5e:	6022      	str	r2, [r4, #0]
    6a60:	6063      	str	r3, [r4, #4]
    6a62:	bd10      	pop	{r4, pc}
    6a64:	4801      	ldr	r0, [pc, #4]	; (6a6c <mutex_init+0x18>)
    6a66:	f7ff ffa3 	bl	69b0 <CC_PalAbort>
    6a6a:	e7f6      	b.n	6a5a <mutex_init+0x6>
    6a6c:	000077e8 	.word	0x000077e8

00006a70 <mutex_lock>:
    6a70:	b1c0      	cbz	r0, 6aa4 <mutex_lock+0x34>
    6a72:	6843      	ldr	r3, [r0, #4]
    6a74:	b1a3      	cbz	r3, 6aa0 <mutex_lock+0x30>
    6a76:	06db      	lsls	r3, r3, #27
    6a78:	d510      	bpl.n	6a9c <mutex_lock+0x2c>
    6a7a:	2201      	movs	r2, #1
    6a7c:	f3bf 8f5b 	dmb	ish
    6a80:	e850 3f00 	ldrex	r3, [r0]
    6a84:	e840 2100 	strex	r1, r2, [r0]
    6a88:	2900      	cmp	r1, #0
    6a8a:	d1f9      	bne.n	6a80 <mutex_lock+0x10>
    6a8c:	f3bf 8f5b 	dmb	ish
    6a90:	2b01      	cmp	r3, #1
    6a92:	d0f3      	beq.n	6a7c <mutex_lock+0xc>
    6a94:	f3bf 8f5f 	dmb	sy
    6a98:	2000      	movs	r0, #0
    6a9a:	4770      	bx	lr
    6a9c:	4803      	ldr	r0, [pc, #12]	; (6aac <mutex_lock+0x3c>)
    6a9e:	4770      	bx	lr
    6aa0:	4803      	ldr	r0, [pc, #12]	; (6ab0 <mutex_lock+0x40>)
    6aa2:	4770      	bx	lr
    6aa4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6aa8:	4770      	bx	lr
    6aaa:	bf00      	nop
    6aac:	ffff8fe9 	.word	0xffff8fe9
    6ab0:	ffff8fea 	.word	0xffff8fea

00006ab4 <nrf_cc3xx_platform_set_mutexes>:
    6ab4:	b570      	push	{r4, r5, r6, lr}
    6ab6:	e9d0 2300 	ldrd	r2, r3, [r0]
    6aba:	4c13      	ldr	r4, [pc, #76]	; (6b08 <nrf_cc3xx_platform_set_mutexes+0x54>)
    6abc:	4d13      	ldr	r5, [pc, #76]	; (6b0c <nrf_cc3xx_platform_set_mutexes+0x58>)
    6abe:	e9c4 2300 	strd	r2, r3, [r4]
    6ac2:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    6ac6:	e9c4 6302 	strd	r6, r3, [r4, #8]
    6aca:	4b11      	ldr	r3, [pc, #68]	; (6b10 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6acc:	6808      	ldr	r0, [r1, #0]
    6ace:	6018      	str	r0, [r3, #0]
    6ad0:	6848      	ldr	r0, [r1, #4]
    6ad2:	6058      	str	r0, [r3, #4]
    6ad4:	6888      	ldr	r0, [r1, #8]
    6ad6:	6098      	str	r0, [r3, #8]
    6ad8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    6adc:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    6ae0:	60de      	str	r6, [r3, #12]
    6ae2:	6118      	str	r0, [r3, #16]
    6ae4:	06cb      	lsls	r3, r1, #27
    6ae6:	d50d      	bpl.n	6b04 <nrf_cc3xx_platform_set_mutexes+0x50>
    6ae8:	2300      	movs	r3, #0
    6aea:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    6aee:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    6af2:	f505 7088 	add.w	r0, r5, #272	; 0x110
    6af6:	4790      	blx	r2
    6af8:	6823      	ldr	r3, [r4, #0]
    6afa:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    6afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b02:	4718      	bx	r3
    6b04:	bd70      	pop	{r4, r5, r6, pc}
    6b06:	bf00      	nop
    6b08:	200000f0 	.word	0x200000f0
    6b0c:	20000e60 	.word	0x20000e60
    6b10:	20000100 	.word	0x20000100

00006b14 <CC_LibInitNoRng>:
    6b14:	b510      	push	{r4, lr}
    6b16:	f000 f833 	bl	6b80 <CC_HalInit>
    6b1a:	b120      	cbz	r0, 6b26 <CC_LibInitNoRng+0x12>
    6b1c:	2403      	movs	r4, #3
    6b1e:	f000 f867 	bl	6bf0 <CC_PalTerminate>
    6b22:	4620      	mov	r0, r4
    6b24:	bd10      	pop	{r4, pc}
    6b26:	f000 f835 	bl	6b94 <CC_PalInit>
    6b2a:	b990      	cbnz	r0, 6b52 <CC_LibInitNoRng+0x3e>
    6b2c:	f000 f8b0 	bl	6c90 <CC_PalPowerSaveModeSelect>
    6b30:	b990      	cbnz	r0, 6b58 <CC_LibInitNoRng+0x44>
    6b32:	4b0f      	ldr	r3, [pc, #60]	; (6b70 <CC_LibInitNoRng+0x5c>)
    6b34:	681b      	ldr	r3, [r3, #0]
    6b36:	0e1b      	lsrs	r3, r3, #24
    6b38:	2bf0      	cmp	r3, #240	; 0xf0
    6b3a:	d108      	bne.n	6b4e <CC_LibInitNoRng+0x3a>
    6b3c:	4a0d      	ldr	r2, [pc, #52]	; (6b74 <CC_LibInitNoRng+0x60>)
    6b3e:	4b0e      	ldr	r3, [pc, #56]	; (6b78 <CC_LibInitNoRng+0x64>)
    6b40:	6812      	ldr	r2, [r2, #0]
    6b42:	429a      	cmp	r2, r3
    6b44:	d00a      	beq.n	6b5c <CC_LibInitNoRng+0x48>
    6b46:	2407      	movs	r4, #7
    6b48:	f000 f81c 	bl	6b84 <CC_HalTerminate>
    6b4c:	e7e7      	b.n	6b1e <CC_LibInitNoRng+0xa>
    6b4e:	2406      	movs	r4, #6
    6b50:	e7fa      	b.n	6b48 <CC_LibInitNoRng+0x34>
    6b52:	2404      	movs	r4, #4
    6b54:	4620      	mov	r0, r4
    6b56:	bd10      	pop	{r4, pc}
    6b58:	2400      	movs	r4, #0
    6b5a:	e7f5      	b.n	6b48 <CC_LibInitNoRng+0x34>
    6b5c:	2001      	movs	r0, #1
    6b5e:	f000 f897 	bl	6c90 <CC_PalPowerSaveModeSelect>
    6b62:	4604      	mov	r4, r0
    6b64:	2800      	cmp	r0, #0
    6b66:	d1f7      	bne.n	6b58 <CC_LibInitNoRng+0x44>
    6b68:	4b04      	ldr	r3, [pc, #16]	; (6b7c <CC_LibInitNoRng+0x68>)
    6b6a:	6018      	str	r0, [r3, #0]
    6b6c:	e7d9      	b.n	6b22 <CC_LibInitNoRng+0xe>
    6b6e:	bf00      	nop
    6b70:	5002b928 	.word	0x5002b928
    6b74:	5002ba24 	.word	0x5002ba24
    6b78:	20e00000 	.word	0x20e00000
    6b7c:	5002ba0c 	.word	0x5002ba0c

00006b80 <CC_HalInit>:
    6b80:	2000      	movs	r0, #0
    6b82:	4770      	bx	lr

00006b84 <CC_HalTerminate>:
    6b84:	2000      	movs	r0, #0
    6b86:	4770      	bx	lr

00006b88 <CC_HalMaskInterrupt>:
    6b88:	4b01      	ldr	r3, [pc, #4]	; (6b90 <CC_HalMaskInterrupt+0x8>)
    6b8a:	6018      	str	r0, [r3, #0]
    6b8c:	4770      	bx	lr
    6b8e:	bf00      	nop
    6b90:	5002ba04 	.word	0x5002ba04

00006b94 <CC_PalInit>:
    6b94:	b510      	push	{r4, lr}
    6b96:	4811      	ldr	r0, [pc, #68]	; (6bdc <CC_PalInit+0x48>)
    6b98:	f000 f848 	bl	6c2c <CC_PalMutexCreate>
    6b9c:	b100      	cbz	r0, 6ba0 <CC_PalInit+0xc>
    6b9e:	bd10      	pop	{r4, pc}
    6ba0:	480f      	ldr	r0, [pc, #60]	; (6be0 <CC_PalInit+0x4c>)
    6ba2:	f000 f843 	bl	6c2c <CC_PalMutexCreate>
    6ba6:	2800      	cmp	r0, #0
    6ba8:	d1f9      	bne.n	6b9e <CC_PalInit+0xa>
    6baa:	4c0e      	ldr	r4, [pc, #56]	; (6be4 <CC_PalInit+0x50>)
    6bac:	4620      	mov	r0, r4
    6bae:	f000 f83d 	bl	6c2c <CC_PalMutexCreate>
    6bb2:	2800      	cmp	r0, #0
    6bb4:	d1f3      	bne.n	6b9e <CC_PalInit+0xa>
    6bb6:	4b0c      	ldr	r3, [pc, #48]	; (6be8 <CC_PalInit+0x54>)
    6bb8:	480c      	ldr	r0, [pc, #48]	; (6bec <CC_PalInit+0x58>)
    6bba:	601c      	str	r4, [r3, #0]
    6bbc:	f000 f836 	bl	6c2c <CC_PalMutexCreate>
    6bc0:	4601      	mov	r1, r0
    6bc2:	2800      	cmp	r0, #0
    6bc4:	d1eb      	bne.n	6b9e <CC_PalInit+0xa>
    6bc6:	f000 f82d 	bl	6c24 <CC_PalDmaInit>
    6bca:	4604      	mov	r4, r0
    6bcc:	b108      	cbz	r0, 6bd2 <CC_PalInit+0x3e>
    6bce:	4620      	mov	r0, r4
    6bd0:	bd10      	pop	{r4, pc}
    6bd2:	f000 f83f 	bl	6c54 <CC_PalPowerSaveModeInit>
    6bd6:	4620      	mov	r0, r4
    6bd8:	e7fa      	b.n	6bd0 <CC_PalInit+0x3c>
    6bda:	bf00      	nop
    6bdc:	20000138 	.word	0x20000138
    6be0:	2000012c 	.word	0x2000012c
    6be4:	20000134 	.word	0x20000134
    6be8:	2000013c 	.word	0x2000013c
    6bec:	20000130 	.word	0x20000130

00006bf0 <CC_PalTerminate>:
    6bf0:	b508      	push	{r3, lr}
    6bf2:	4808      	ldr	r0, [pc, #32]	; (6c14 <CC_PalTerminate+0x24>)
    6bf4:	f000 f824 	bl	6c40 <CC_PalMutexDestroy>
    6bf8:	4807      	ldr	r0, [pc, #28]	; (6c18 <CC_PalTerminate+0x28>)
    6bfa:	f000 f821 	bl	6c40 <CC_PalMutexDestroy>
    6bfe:	4807      	ldr	r0, [pc, #28]	; (6c1c <CC_PalTerminate+0x2c>)
    6c00:	f000 f81e 	bl	6c40 <CC_PalMutexDestroy>
    6c04:	4806      	ldr	r0, [pc, #24]	; (6c20 <CC_PalTerminate+0x30>)
    6c06:	f000 f81b 	bl	6c40 <CC_PalMutexDestroy>
    6c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6c0e:	f000 b80b 	b.w	6c28 <CC_PalDmaTerminate>
    6c12:	bf00      	nop
    6c14:	20000138 	.word	0x20000138
    6c18:	2000012c 	.word	0x2000012c
    6c1c:	20000134 	.word	0x20000134
    6c20:	20000130 	.word	0x20000130

00006c24 <CC_PalDmaInit>:
    6c24:	2000      	movs	r0, #0
    6c26:	4770      	bx	lr

00006c28 <CC_PalDmaTerminate>:
    6c28:	4770      	bx	lr
    6c2a:	bf00      	nop

00006c2c <CC_PalMutexCreate>:
    6c2c:	b508      	push	{r3, lr}
    6c2e:	4b03      	ldr	r3, [pc, #12]	; (6c3c <CC_PalMutexCreate+0x10>)
    6c30:	6802      	ldr	r2, [r0, #0]
    6c32:	681b      	ldr	r3, [r3, #0]
    6c34:	6810      	ldr	r0, [r2, #0]
    6c36:	4798      	blx	r3
    6c38:	2000      	movs	r0, #0
    6c3a:	bd08      	pop	{r3, pc}
    6c3c:	200000f0 	.word	0x200000f0

00006c40 <CC_PalMutexDestroy>:
    6c40:	b508      	push	{r3, lr}
    6c42:	4b03      	ldr	r3, [pc, #12]	; (6c50 <CC_PalMutexDestroy+0x10>)
    6c44:	6802      	ldr	r2, [r0, #0]
    6c46:	685b      	ldr	r3, [r3, #4]
    6c48:	6810      	ldr	r0, [r2, #0]
    6c4a:	4798      	blx	r3
    6c4c:	2000      	movs	r0, #0
    6c4e:	bd08      	pop	{r3, pc}
    6c50:	200000f0 	.word	0x200000f0

00006c54 <CC_PalPowerSaveModeInit>:
    6c54:	b570      	push	{r4, r5, r6, lr}
    6c56:	4c09      	ldr	r4, [pc, #36]	; (6c7c <CC_PalPowerSaveModeInit+0x28>)
    6c58:	4d09      	ldr	r5, [pc, #36]	; (6c80 <CC_PalPowerSaveModeInit+0x2c>)
    6c5a:	6920      	ldr	r0, [r4, #16]
    6c5c:	68ab      	ldr	r3, [r5, #8]
    6c5e:	4798      	blx	r3
    6c60:	b118      	cbz	r0, 6c6a <CC_PalPowerSaveModeInit+0x16>
    6c62:	4b08      	ldr	r3, [pc, #32]	; (6c84 <CC_PalPowerSaveModeInit+0x30>)
    6c64:	4808      	ldr	r0, [pc, #32]	; (6c88 <CC_PalPowerSaveModeInit+0x34>)
    6c66:	685b      	ldr	r3, [r3, #4]
    6c68:	4798      	blx	r3
    6c6a:	4a08      	ldr	r2, [pc, #32]	; (6c8c <CC_PalPowerSaveModeInit+0x38>)
    6c6c:	68eb      	ldr	r3, [r5, #12]
    6c6e:	6920      	ldr	r0, [r4, #16]
    6c70:	2100      	movs	r1, #0
    6c72:	6011      	str	r1, [r2, #0]
    6c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c78:	4718      	bx	r3
    6c7a:	bf00      	nop
    6c7c:	20000100 	.word	0x20000100
    6c80:	200000f0 	.word	0x200000f0
    6c84:	200000e0 	.word	0x200000e0
    6c88:	0000780c 	.word	0x0000780c
    6c8c:	20000a48 	.word	0x20000a48

00006c90 <CC_PalPowerSaveModeSelect>:
    6c90:	b570      	push	{r4, r5, r6, lr}
    6c92:	4d1a      	ldr	r5, [pc, #104]	; (6cfc <CC_PalPowerSaveModeSelect+0x6c>)
    6c94:	4e1a      	ldr	r6, [pc, #104]	; (6d00 <CC_PalPowerSaveModeSelect+0x70>)
    6c96:	4604      	mov	r4, r0
    6c98:	68b2      	ldr	r2, [r6, #8]
    6c9a:	6928      	ldr	r0, [r5, #16]
    6c9c:	4790      	blx	r2
    6c9e:	b9f0      	cbnz	r0, 6cde <CC_PalPowerSaveModeSelect+0x4e>
    6ca0:	b15c      	cbz	r4, 6cba <CC_PalPowerSaveModeSelect+0x2a>
    6ca2:	4c18      	ldr	r4, [pc, #96]	; (6d04 <CC_PalPowerSaveModeSelect+0x74>)
    6ca4:	6823      	ldr	r3, [r4, #0]
    6ca6:	b1ab      	cbz	r3, 6cd4 <CC_PalPowerSaveModeSelect+0x44>
    6ca8:	2b01      	cmp	r3, #1
    6caa:	d01a      	beq.n	6ce2 <CC_PalPowerSaveModeSelect+0x52>
    6cac:	3b01      	subs	r3, #1
    6cae:	6023      	str	r3, [r4, #0]
    6cb0:	6928      	ldr	r0, [r5, #16]
    6cb2:	68f3      	ldr	r3, [r6, #12]
    6cb4:	4798      	blx	r3
    6cb6:	2000      	movs	r0, #0
    6cb8:	bd70      	pop	{r4, r5, r6, pc}
    6cba:	4c12      	ldr	r4, [pc, #72]	; (6d04 <CC_PalPowerSaveModeSelect+0x74>)
    6cbc:	6821      	ldr	r1, [r4, #0]
    6cbe:	b939      	cbnz	r1, 6cd0 <CC_PalPowerSaveModeSelect+0x40>
    6cc0:	4b11      	ldr	r3, [pc, #68]	; (6d08 <CC_PalPowerSaveModeSelect+0x78>)
    6cc2:	4a12      	ldr	r2, [pc, #72]	; (6d0c <CC_PalPowerSaveModeSelect+0x7c>)
    6cc4:	2001      	movs	r0, #1
    6cc6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    6cca:	6813      	ldr	r3, [r2, #0]
    6ccc:	2b00      	cmp	r3, #0
    6cce:	d1fc      	bne.n	6cca <CC_PalPowerSaveModeSelect+0x3a>
    6cd0:	3101      	adds	r1, #1
    6cd2:	6021      	str	r1, [r4, #0]
    6cd4:	68f3      	ldr	r3, [r6, #12]
    6cd6:	6928      	ldr	r0, [r5, #16]
    6cd8:	4798      	blx	r3
    6cda:	2000      	movs	r0, #0
    6cdc:	bd70      	pop	{r4, r5, r6, pc}
    6cde:	480c      	ldr	r0, [pc, #48]	; (6d10 <CC_PalPowerSaveModeSelect+0x80>)
    6ce0:	bd70      	pop	{r4, r5, r6, pc}
    6ce2:	4a0a      	ldr	r2, [pc, #40]	; (6d0c <CC_PalPowerSaveModeSelect+0x7c>)
    6ce4:	6813      	ldr	r3, [r2, #0]
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d1fc      	bne.n	6ce4 <CC_PalPowerSaveModeSelect+0x54>
    6cea:	4a07      	ldr	r2, [pc, #28]	; (6d08 <CC_PalPowerSaveModeSelect+0x78>)
    6cec:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6cf0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6cf4:	f7ff ff48 	bl	6b88 <CC_HalMaskInterrupt>
    6cf8:	6823      	ldr	r3, [r4, #0]
    6cfa:	e7d7      	b.n	6cac <CC_PalPowerSaveModeSelect+0x1c>
    6cfc:	20000100 	.word	0x20000100
    6d00:	200000f0 	.word	0x200000f0
    6d04:	20000a48 	.word	0x20000a48
    6d08:	5002a000 	.word	0x5002a000
    6d0c:	5002b910 	.word	0x5002b910
    6d10:	ffff8fe9 	.word	0xffff8fe9

00006d14 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    6d14:	6883      	ldr	r3, [r0, #8]
    6d16:	69db      	ldr	r3, [r3, #28]
    6d18:	b10b      	cbz	r3, 6d1e <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    6d1a:	2201      	movs	r2, #1
    6d1c:	4718      	bx	r3
}
    6d1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6d22:	4770      	bx	lr

00006d24 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    6d24:	4040      	eors	r0, r0
    6d26:	f380 8811 	msr	BASEPRI, r0
    6d2a:	f04f 0004 	mov.w	r0, #4
    6d2e:	df02      	svc	2
}
    6d30:	4770      	bx	lr

00006d32 <encode_uint>:
{
    6d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d36:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    6d38:	78d3      	ldrb	r3, [r2, #3]
{
    6d3a:	4614      	mov	r4, r2
	switch (specifier) {
    6d3c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6d3e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    6d42:	4606      	mov	r6, r0
    6d44:	460f      	mov	r7, r1
    6d46:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    6d48:	d02d      	beq.n	6da6 <encode_uint+0x74>
    6d4a:	d828      	bhi.n	6d9e <encode_uint+0x6c>
		return 16;
    6d4c:	2b58      	cmp	r3, #88	; 0x58
    6d4e:	bf14      	ite	ne
    6d50:	250a      	movne	r5, #10
    6d52:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    6d54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    6d58:	46aa      	mov	sl, r5
    6d5a:	f04f 0b00 	mov.w	fp, #0
    6d5e:	4652      	mov	r2, sl
    6d60:	465b      	mov	r3, fp
    6d62:	4630      	mov	r0, r6
    6d64:	4639      	mov	r1, r7
    6d66:	f7f9 f9cb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6d6a:	2a09      	cmp	r2, #9
    6d6c:	b2d3      	uxtb	r3, r2
    6d6e:	d81f      	bhi.n	6db0 <encode_uint+0x7e>
    6d70:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6d72:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6d74:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    6d76:	bf08      	it	eq
    6d78:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6d7a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    6d7e:	d301      	bcc.n	6d84 <encode_uint+0x52>
    6d80:	45c8      	cmp	r8, r9
    6d82:	d812      	bhi.n	6daa <encode_uint+0x78>
	if (conv->flag_hash) {
    6d84:	7823      	ldrb	r3, [r4, #0]
    6d86:	069b      	lsls	r3, r3, #26
    6d88:	d505      	bpl.n	6d96 <encode_uint+0x64>
		if (radix == 8) {
    6d8a:	2d08      	cmp	r5, #8
    6d8c:	d116      	bne.n	6dbc <encode_uint+0x8a>
			conv->altform_0 = true;
    6d8e:	78a3      	ldrb	r3, [r4, #2]
    6d90:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6d94:	70a3      	strb	r3, [r4, #2]
}
    6d96:	4640      	mov	r0, r8
    6d98:	b003      	add	sp, #12
    6d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6d9e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6da2:	2b70      	cmp	r3, #112	; 0x70
    6da4:	e7d3      	b.n	6d4e <encode_uint+0x1c>
	switch (specifier) {
    6da6:	2508      	movs	r5, #8
    6da8:	e7d4      	b.n	6d54 <encode_uint+0x22>
		value /= radix;
    6daa:	4606      	mov	r6, r0
    6dac:	460f      	mov	r7, r1
    6dae:	e7d6      	b.n	6d5e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6db0:	9a01      	ldr	r2, [sp, #4]
    6db2:	2a19      	cmp	r2, #25
    6db4:	bf94      	ite	ls
    6db6:	3337      	addls	r3, #55	; 0x37
    6db8:	3357      	addhi	r3, #87	; 0x57
    6dba:	e7da      	b.n	6d72 <encode_uint+0x40>
		} else if (radix == 16) {
    6dbc:	2d10      	cmp	r5, #16
    6dbe:	d1ea      	bne.n	6d96 <encode_uint+0x64>
			conv->altform_0c = true;
    6dc0:	78a3      	ldrb	r3, [r4, #2]
    6dc2:	f043 0310 	orr.w	r3, r3, #16
    6dc6:	e7e5      	b.n	6d94 <encode_uint+0x62>

00006dc8 <outs>:
{
    6dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dcc:	4607      	mov	r7, r0
    6dce:	4688      	mov	r8, r1
    6dd0:	4615      	mov	r5, r2
    6dd2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6dd4:	4614      	mov	r4, r2
    6dd6:	42b4      	cmp	r4, r6
    6dd8:	eba4 0005 	sub.w	r0, r4, r5
    6ddc:	d302      	bcc.n	6de4 <outs+0x1c>
    6dde:	b93e      	cbnz	r6, 6df0 <outs+0x28>
    6de0:	7823      	ldrb	r3, [r4, #0]
    6de2:	b12b      	cbz	r3, 6df0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6de4:	f814 0b01 	ldrb.w	r0, [r4], #1
    6de8:	4641      	mov	r1, r8
    6dea:	47b8      	blx	r7
		if (rc < 0) {
    6dec:	2800      	cmp	r0, #0
    6dee:	daf2      	bge.n	6dd6 <outs+0xe>
}
    6df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006df4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6df4:	4770      	bx	lr

00006df6 <sys_notify_validate>:
	if (notify == NULL) {
    6df6:	4603      	mov	r3, r0
    6df8:	b158      	cbz	r0, 6e12 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6dfa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6dfc:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    6e00:	2a01      	cmp	r2, #1
    6e02:	d003      	beq.n	6e0c <sys_notify_validate+0x16>
    6e04:	2a03      	cmp	r2, #3
    6e06:	d104      	bne.n	6e12 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    6e08:	6802      	ldr	r2, [r0, #0]
    6e0a:	b112      	cbz	r2, 6e12 <sys_notify_validate+0x1c>
		notify->result = 0;
    6e0c:	2000      	movs	r0, #0
    6e0e:	6098      	str	r0, [r3, #8]
    6e10:	4770      	bx	lr
		return -EINVAL;
    6e12:	f06f 0015 	mvn.w	r0, #21
}
    6e16:	4770      	bx	lr

00006e18 <abort_function>:
{
    6e18:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6e1a:	2000      	movs	r0, #0
    6e1c:	f7fa fef8 	bl	1c10 <sys_reboot>

00006e20 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6e20:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    6e22:	f013 0307 	ands.w	r3, r3, #7
    6e26:	d105      	bne.n	6e34 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6e28:	6803      	ldr	r3, [r0, #0]
    6e2a:	2b00      	cmp	r3, #0
		evt = EVT_START;
    6e2c:	bf0c      	ite	eq
    6e2e:	2000      	moveq	r0, #0
    6e30:	2003      	movne	r0, #3
    6e32:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6e34:	2b02      	cmp	r3, #2
    6e36:	d105      	bne.n	6e44 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6e38:	8bc3      	ldrh	r3, [r0, #30]
    6e3a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    6e3c:	bf14      	ite	ne
    6e3e:	2000      	movne	r0, #0
    6e40:	2004      	moveq	r0, #4
    6e42:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6e44:	2b01      	cmp	r3, #1
    6e46:	d105      	bne.n	6e54 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6e48:	6803      	ldr	r3, [r0, #0]
    6e4a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    6e4c:	bf0c      	ite	eq
    6e4e:	2000      	moveq	r0, #0
    6e50:	2005      	movne	r0, #5
    6e52:	4770      	bx	lr
	int evt = EVT_NOP;
    6e54:	2000      	movs	r0, #0
}
    6e56:	4770      	bx	lr

00006e58 <notify_one>:
{
    6e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e5c:	460d      	mov	r5, r1
    6e5e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6e60:	4619      	mov	r1, r3
    6e62:	1d28      	adds	r0, r5, #4
{
    6e64:	4690      	mov	r8, r2
    6e66:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6e68:	f7fa f9c2 	bl	11f0 <sys_notify_finalize>
	if (cb) {
    6e6c:	4604      	mov	r4, r0
    6e6e:	b138      	cbz	r0, 6e80 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6e70:	4633      	mov	r3, r6
    6e72:	4642      	mov	r2, r8
    6e74:	4629      	mov	r1, r5
    6e76:	4638      	mov	r0, r7
    6e78:	46a4      	mov	ip, r4
}
    6e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6e7e:	4760      	bx	ip
}
    6e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e84 <validate_args>:
{
    6e84:	b510      	push	{r4, lr}
    6e86:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6e88:	b140      	cbz	r0, 6e9c <validate_args+0x18>
    6e8a:	b139      	cbz	r1, 6e9c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6e8c:	1d08      	adds	r0, r1, #4
    6e8e:	f7ff ffb2 	bl	6df6 <sys_notify_validate>
	if ((rv == 0)
    6e92:	b928      	cbnz	r0, 6ea0 <validate_args+0x1c>
	    && ((cli->notify.flags
    6e94:	68a3      	ldr	r3, [r4, #8]
    6e96:	f033 0303 	bics.w	r3, r3, #3
    6e9a:	d001      	beq.n	6ea0 <validate_args+0x1c>
		rv = -EINVAL;
    6e9c:	f06f 0015 	mvn.w	r0, #21
}
    6ea0:	bd10      	pop	{r4, pc}

00006ea2 <onoff_manager_init>:
{
    6ea2:	b538      	push	{r3, r4, r5, lr}
    6ea4:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6ea6:	4605      	mov	r5, r0
    6ea8:	b158      	cbz	r0, 6ec2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6eaa:	b151      	cbz	r1, 6ec2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6eac:	680b      	ldr	r3, [r1, #0]
    6eae:	b143      	cbz	r3, 6ec2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6eb0:	684b      	ldr	r3, [r1, #4]
    6eb2:	b133      	cbz	r3, 6ec2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6eb4:	2220      	movs	r2, #32
    6eb6:	2100      	movs	r1, #0
    6eb8:	f000 f869 	bl	6f8e <memset>
    6ebc:	612c      	str	r4, [r5, #16]
	return 0;
    6ebe:	2000      	movs	r0, #0
}
    6ec0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6ec2:	f06f 0015 	mvn.w	r0, #21
    6ec6:	e7fb      	b.n	6ec0 <onoff_manager_init+0x1e>

00006ec8 <arch_printk_char_out>:
}
    6ec8:	2000      	movs	r0, #0
    6eca:	4770      	bx	lr

00006ecc <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    6ecc:	b40f      	push	{r0, r1, r2, r3}
    6ece:	b507      	push	{r0, r1, r2, lr}
    6ed0:	a904      	add	r1, sp, #16
    6ed2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6ed6:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    6ed8:	f7fa fe8c 	bl	1bf4 <vprintk>
	}
	va_end(ap);
}
    6edc:	b003      	add	sp, #12
    6ede:	f85d eb04 	ldr.w	lr, [sp], #4
    6ee2:	b004      	add	sp, #16
    6ee4:	4770      	bx	lr

00006ee6 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    6ee6:	2200      	movs	r2, #0
    6ee8:	e9c0 2200 	strd	r2, r2, [r0]
    6eec:	6082      	str	r2, [r0, #8]
}
    6eee:	4770      	bx	lr

00006ef0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6ef0:	4604      	mov	r4, r0
    6ef2:	b508      	push	{r3, lr}
    6ef4:	4608      	mov	r0, r1
    6ef6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6ef8:	461a      	mov	r2, r3
    6efa:	47a0      	blx	r4
	return z_impl_z_current_get();
    6efc:	f7fe ff42 	bl	5d84 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6f00:	f7fb f9c2 	bl	2288 <z_impl_k_thread_abort>

00006f04 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6f04:	f7fd bb30 	b.w	4568 <z_fatal_error>

00006f08 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6f08:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6f0a:	6800      	ldr	r0, [r0, #0]
    6f0c:	f7fd bb2c 	b.w	4568 <z_fatal_error>

00006f10 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6f10:	2100      	movs	r1, #0
    6f12:	2001      	movs	r0, #1
    6f14:	f7ff bff6 	b.w	6f04 <z_arm_fatal_error>

00006f18 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6f18:	b508      	push	{r3, lr}
	handler();
    6f1a:	f7fa fecb 	bl	1cb4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6f22:	f7fa bfd9 	b.w	1ed8 <z_arm_exc_exit>

00006f26 <_stdout_hook_default>:
}
    6f26:	f04f 30ff 	mov.w	r0, #4294967295
    6f2a:	4770      	bx	lr

00006f2c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6f2c:	3901      	subs	r1, #1
    6f2e:	4603      	mov	r3, r0
    6f30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6f34:	b90a      	cbnz	r2, 6f3a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6f36:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6f38:	4770      	bx	lr
		*d = *s;
    6f3a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6f3e:	e7f7      	b.n	6f30 <strcpy+0x4>

00006f40 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6f40:	4603      	mov	r3, r0
	size_t n = 0;
    6f42:	2000      	movs	r0, #0

	while (*s != '\0') {
    6f44:	5c1a      	ldrb	r2, [r3, r0]
    6f46:	b902      	cbnz	r2, 6f4a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6f48:	4770      	bx	lr
		n++;
    6f4a:	3001      	adds	r0, #1
    6f4c:	e7fa      	b.n	6f44 <strlen+0x4>

00006f4e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6f4e:	4603      	mov	r3, r0
	size_t n = 0;
    6f50:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6f52:	5c1a      	ldrb	r2, [r3, r0]
    6f54:	b10a      	cbz	r2, 6f5a <strnlen+0xc>
    6f56:	4288      	cmp	r0, r1
    6f58:	d100      	bne.n	6f5c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6f5a:	4770      	bx	lr
		n++;
    6f5c:	3001      	adds	r0, #1
    6f5e:	e7f8      	b.n	6f52 <strnlen+0x4>

00006f60 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6f60:	1e43      	subs	r3, r0, #1
    6f62:	3901      	subs	r1, #1
    6f64:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6f68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    6f6c:	4282      	cmp	r2, r0
    6f6e:	d101      	bne.n	6f74 <strcmp+0x14>
    6f70:	2a00      	cmp	r2, #0
    6f72:	d1f7      	bne.n	6f64 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6f74:	1a10      	subs	r0, r2, r0
    6f76:	4770      	bx	lr

00006f78 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6f78:	b510      	push	{r4, lr}
    6f7a:	1e43      	subs	r3, r0, #1
    6f7c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6f7e:	4291      	cmp	r1, r2
    6f80:	d100      	bne.n	6f84 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6f82:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6f84:	f811 4b01 	ldrb.w	r4, [r1], #1
    6f88:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6f8c:	e7f7      	b.n	6f7e <memcpy+0x6>

00006f8e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6f8e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6f90:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6f92:	4603      	mov	r3, r0
	while (n > 0) {
    6f94:	4293      	cmp	r3, r2
    6f96:	d100      	bne.n	6f9a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6f98:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6f9a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6f9e:	e7f9      	b.n	6f94 <memset+0x6>

00006fa0 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    6fa0:	b084      	sub	sp, #16
    6fa2:	ab04      	add	r3, sp, #16
    6fa4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    6fa8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6fac:	2b06      	cmp	r3, #6
    6fae:	d108      	bne.n	6fc2 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fb4:	2201      	movs	r2, #1
    6fb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6fba:	f3bf 8f4f 	dsb	sy
        __WFE();
    6fbe:	bf20      	wfe
    while (true)
    6fc0:	e7fd      	b.n	6fbe <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    6fc2:	b004      	add	sp, #16
    6fc4:	4770      	bx	lr

00006fc6 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    6fc6:	b084      	sub	sp, #16
    6fc8:	ab04      	add	r3, sp, #16
    6fca:	e903 0007 	stmdb	r3, {r0, r1, r2}
    6fce:	2300      	movs	r3, #0
    6fd0:	f383 8811 	msr	BASEPRI, r3
    6fd4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6fd8:	b004      	add	sp, #16
    6fda:	4770      	bx	lr

00006fdc <set_starting_state>:
{
    6fdc:	b510      	push	{r4, lr}
	__asm__ volatile(
    6fde:	f04f 0320 	mov.w	r3, #32
    6fe2:	f3ef 8211 	mrs	r2, BASEPRI
    6fe6:	f383 8812 	msr	BASEPRI_MAX, r3
    6fea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6fee:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6ff0:	f003 0407 	and.w	r4, r3, #7
    6ff4:	2c01      	cmp	r4, #1
    6ff6:	d106      	bne.n	7006 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6ff8:	6001      	str	r1, [r0, #0]
	int err = 0;
    6ffa:	2000      	movs	r0, #0
	__asm__ volatile(
    6ffc:	f382 8811 	msr	BASEPRI, r2
    7000:	f3bf 8f6f 	isb	sy
}
    7004:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7006:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    700a:	428b      	cmp	r3, r1
		err = -EALREADY;
    700c:	bf14      	ite	ne
    700e:	f04f 30ff 	movne.w	r0, #4294967295
    7012:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    7016:	e7f1      	b.n	6ffc <set_starting_state+0x20>

00007018 <set_on_state>:
	__asm__ volatile(
    7018:	f04f 0320 	mov.w	r3, #32
    701c:	f3ef 8211 	mrs	r2, BASEPRI
    7020:	f383 8812 	msr	BASEPRI_MAX, r3
    7024:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7028:	6803      	ldr	r3, [r0, #0]
    702a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    702e:	f043 0302 	orr.w	r3, r3, #2
    7032:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7034:	f382 8811 	msr	BASEPRI, r2
    7038:	f3bf 8f6f 	isb	sy
}
    703c:	4770      	bx	lr

0000703e <onoff_started_callback>:
	return &data->mgr[type];
    703e:	6900      	ldr	r0, [r0, #16]
    7040:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7042:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    7046:	2100      	movs	r1, #0
    7048:	4710      	bx	r2

0000704a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    704a:	2000      	movs	r0, #0
    704c:	f7fc bbea 	b.w	3824 <nrfx_clock_start>

00007050 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7050:	2000      	movs	r0, #0
    7052:	f7fc bc3b 	b.w	38cc <nrfx_clock_stop>

00007056 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7056:	2280      	movs	r2, #128	; 0x80
    7058:	f7fb baee 	b.w	2638 <stop>

0000705c <blocking_start_callback>:
{
    705c:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    705e:	f7fe bf4b 	b.w	5ef8 <z_impl_k_sem_give>

00007062 <api_start>:
{
    7062:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7066:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    7068:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    706a:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    706c:	436f      	muls	r7, r5
{
    706e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    7070:	f107 0048 	add.w	r0, r7, #72	; 0x48
    7074:	2180      	movs	r1, #128	; 0x80
    7076:	4420      	add	r0, r4
{
    7078:	4690      	mov	r8, r2
    707a:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    707c:	f7ff ffae 	bl	6fdc <set_starting_state>
	if (err < 0) {
    7080:	2800      	cmp	r0, #0
    7082:	db07      	blt.n	7094 <api_start+0x32>
	subdata->cb = cb;
    7084:	443c      	add	r4, r7
	subdata->user_data = user_data;
    7086:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    708a:	6873      	ldr	r3, [r6, #4]
    708c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    7090:	4798      	blx	r3
	return 0;
    7092:	2000      	movs	r0, #0
}
    7094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007098 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7098:	6843      	ldr	r3, [r0, #4]
    709a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    709c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    70a0:	600b      	str	r3, [r1, #0]
}
    70a2:	2000      	movs	r0, #0
    70a4:	4770      	bx	lr

000070a6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    70a6:	6843      	ldr	r3, [r0, #4]
    70a8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    70aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    70ae:	4042      	eors	r2, r0
    70b0:	400a      	ands	r2, r1
    70b2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    70b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    70b8:	2000      	movs	r0, #0
    70ba:	4770      	bx	lr

000070bc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    70bc:	6843      	ldr	r3, [r0, #4]
    70be:	685b      	ldr	r3, [r3, #4]
}
    70c0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    70c2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    70c6:	4770      	bx	lr

000070c8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    70c8:	6843      	ldr	r3, [r0, #4]
    70ca:	685b      	ldr	r3, [r3, #4]
}
    70cc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    70ce:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    70d2:	4770      	bx	lr

000070d4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    70d4:	6843      	ldr	r3, [r0, #4]
    70d6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    70d8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    70dc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    70de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    70e2:	2000      	movs	r0, #0
    70e4:	4770      	bx	lr

000070e6 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    70e6:	6843      	ldr	r3, [r0, #4]
    70e8:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    70ea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    70ee:	05d1      	lsls	r1, r2, #23
    70f0:	d518      	bpl.n	7124 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70f2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    70f6:	b1aa      	cbz	r2, 7124 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    70f8:	f04f 0120 	mov.w	r1, #32
    70fc:	f3ef 8211 	mrs	r2, BASEPRI
    7100:	f381 8812 	msr	BASEPRI_MAX, r1
    7104:	f3bf 8f6f 	isb	sy
    7108:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    710c:	b131      	cbz	r1, 711c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    710e:	2100      	movs	r1, #0
    7110:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    7114:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7118:	2101      	movs	r1, #1
    711a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    711c:	f382 8811 	msr	BASEPRI, r2
    7120:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7124:	6842      	ldr	r2, [r0, #4]
    7126:	6852      	ldr	r2, [r2, #4]
    7128:	06d2      	lsls	r2, r2, #27
    712a:	d515      	bpl.n	7158 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    712c:	f04f 0120 	mov.w	r1, #32
    7130:	f3ef 8211 	mrs	r2, BASEPRI
    7134:	f381 8812 	msr	BASEPRI_MAX, r1
    7138:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    713c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7140:	b111      	cbz	r1, 7148 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7142:	2100      	movs	r1, #0
    7144:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    714c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7150:	f382 8811 	msr	BASEPRI, r2
    7154:	f3bf 8f6f 	isb	sy
}
    7158:	4770      	bx	lr

0000715a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    715a:	6902      	ldr	r2, [r0, #16]
{
    715c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    715e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7162:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7166:	2000      	movs	r0, #0
    7168:	4770      	bx	lr

0000716a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    716a:	6843      	ldr	r3, [r0, #4]
    716c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    716e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7172:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7176:	4770      	bx	lr

00007178 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    7178:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    717a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    717c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7180:	b940      	cbnz	r0, 7194 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7182:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7184:	0792      	lsls	r2, r2, #30
    7186:	d406      	bmi.n	7196 <is_tx_ready+0x1e>
    7188:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    718c:	3800      	subs	r0, #0
    718e:	bf18      	it	ne
    7190:	2001      	movne	r0, #1
    7192:	4770      	bx	lr
    7194:	2001      	movs	r0, #1
}
    7196:	4770      	bx	lr

00007198 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7198:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    719a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    719c:	681b      	ldr	r3, [r3, #0]
    719e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    71a2:	b148      	cbz	r0, 71b8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    71a4:	7c52      	ldrb	r2, [r2, #17]
    71a6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71a8:	2000      	movs	r0, #0
    71aa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    71ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    71b2:	2201      	movs	r2, #1
    71b4:	601a      	str	r2, [r3, #0]
	return 0;
    71b6:	4770      	bx	lr
		return -1;
    71b8:	f04f 30ff 	mov.w	r0, #4294967295
}
    71bc:	4770      	bx	lr

000071be <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    71be:	b510      	push	{r4, lr}
    71c0:	2200      	movs	r2, #0
    71c2:	4604      	mov	r4, r0
    71c4:	2101      	movs	r1, #1
    71c6:	2002      	movs	r0, #2
    71c8:	f7fa fdd0 	bl	1d6c <z_arm_irq_priority_set>
    71cc:	2002      	movs	r0, #2
    71ce:	f7fa fdaf 	bl	1d30 <arch_irq_enable>
    71d2:	4620      	mov	r0, r4
    71d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71d8:	f7fb bf8e 	b.w	30f8 <uarte_instance_init.isra.0>

000071dc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    71dc:	b510      	push	{r4, lr}
    71de:	2200      	movs	r2, #0
    71e0:	4604      	mov	r4, r0
    71e2:	2101      	movs	r1, #1
    71e4:	2028      	movs	r0, #40	; 0x28
    71e6:	f7fa fdc1 	bl	1d6c <z_arm_irq_priority_set>
    71ea:	2028      	movs	r0, #40	; 0x28
    71ec:	f7fa fda0 	bl	1d30 <arch_irq_enable>
    71f0:	4620      	mov	r0, r4
    71f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71f6:	f7fb bf7f 	b.w	30f8 <uarte_instance_init.isra.0>

000071fa <sys_clock_cycle_get_32>:
{
    71fa:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    71fc:	f7fc f8da 	bl	33b4 <z_nrf_rtc_timer_read>
}
    7200:	bd08      	pop	{r3, pc}

00007202 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7202:	4770      	bx	lr

00007204 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7204:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7206:	2000      	movs	r0, #0
    7208:	f7fb f9ae 	bl	2568 <sys_arch_reboot>

0000720c <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    720c:	f7ff bba2 	b.w	6954 <nrf_cc3xx_platform_init_no_rng>

00007210 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7210:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7212:	f7fa f80d 	bl	1230 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7216:	f7fa f8bf 	bl	1398 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    721a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    721e:	f7ff bb99 	b.w	6954 <nrf_cc3xx_platform_init_no_rng>

00007222 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7222:	4700      	bx	r0

00007224 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7224:	f000 b8d5 	b.w	73d2 <z_impl_k_busy_wait>

00007228 <nrf_gpio_pin_present_check>:
    switch (port)
    7228:	0943      	lsrs	r3, r0, #5
    722a:	d00b      	beq.n	7244 <nrf_gpio_pin_present_check+0x1c>
    722c:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    722e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7232:	bf18      	it	ne
    7234:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7236:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    723a:	fa23 f000 	lsr.w	r0, r3, r0
}
    723e:	f000 0001 	and.w	r0, r0, #1
    7242:	4770      	bx	lr
    switch (port)
    7244:	f04f 33ff 	mov.w	r3, #4294967295
    7248:	e7f5      	b.n	7236 <nrf_gpio_pin_present_check+0xe>

0000724a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    724a:	0080      	lsls	r0, r0, #2
}
    724c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7250:	4770      	bx	lr

00007252 <nrf_gpio_reconfigure>:
{
    7252:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7256:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7258:	a801      	add	r0, sp, #4
{
    725a:	460e      	mov	r6, r1
    725c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    7260:	4690      	mov	r8, r2
    7262:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7264:	f7fc fca0 	bl	3ba8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7268:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    726a:	f1b8 0f00 	cmp.w	r8, #0
    726e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7272:	bf14      	ite	ne
    7274:	2302      	movne	r3, #2
    7276:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7278:	2e00      	cmp	r6, #0
    727a:	bf18      	it	ne
    727c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7280:	2d00      	cmp	r5, #0
    7282:	bf14      	ite	ne
    7284:	210c      	movne	r1, #12
    7286:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7288:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    728a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    728e:	bf14      	ite	ne
    7290:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    7294:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7296:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7298:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    729c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    72a0:	bf14      	ite	ne
    72a2:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    72a6:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    72a8:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    72aa:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    72ae:	b106      	cbz	r6, 72b2 <nrf_gpio_reconfigure+0x60>
    72b0:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    72b2:	f1b8 0f00 	cmp.w	r8, #0
    72b6:	d003      	beq.n	72c0 <nrf_gpio_reconfigure+0x6e>
    72b8:	f898 8000 	ldrb.w	r8, [r8]
    72bc:	ea4f 0848 	mov.w	r8, r8, lsl #1
    72c0:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    72c2:	b10d      	cbz	r5, 72c8 <nrf_gpio_reconfigure+0x76>
    72c4:	782d      	ldrb	r5, [r5, #0]
    72c6:	00ad      	lsls	r5, r5, #2
    72c8:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    72cc:	b10c      	cbz	r4, 72d2 <nrf_gpio_reconfigure+0x80>
    72ce:	7822      	ldrb	r2, [r4, #0]
    72d0:	0214      	lsls	r4, r2, #8
    72d2:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    72d4:	b10f      	cbz	r7, 72da <nrf_gpio_reconfigure+0x88>
    72d6:	783f      	ldrb	r7, [r7, #0]
    72d8:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    72da:	432c      	orrs	r4, r5
    72dc:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    72de:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    72e2:	b002      	add	sp, #8
    72e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000072e8 <nrf_gpio_cfg_sense_set>:
{
    72e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    72ea:	f10d 030f 	add.w	r3, sp, #15
    72ee:	9301      	str	r3, [sp, #4]
    72f0:	2300      	movs	r3, #0
{
    72f2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    72f6:	9300      	str	r3, [sp, #0]
    72f8:	461a      	mov	r2, r3
    72fa:	4619      	mov	r1, r3
    72fc:	f7ff ffa9 	bl	7252 <nrf_gpio_reconfigure>
}
    7300:	b005      	add	sp, #20
    7302:	f85d fb04 	ldr.w	pc, [sp], #4

00007306 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7306:	f7fd b8ad 	b.w	4464 <_DoInit>

0000730a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    730a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    730c:	f7ff fffb 	bl	7306 <SEGGER_RTT_Init>

	return 0;
}
    7310:	2000      	movs	r0, #0
    7312:	bd08      	pop	{r3, pc}

00007314 <z_device_state_init>:
}
    7314:	4770      	bx	lr

00007316 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7316:	b138      	cbz	r0, 7328 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7318:	68c3      	ldr	r3, [r0, #12]
    731a:	8818      	ldrh	r0, [r3, #0]
    731c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7320:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7324:	4258      	negs	r0, r3
    7326:	4158      	adcs	r0, r3
}
    7328:	4770      	bx	lr

0000732a <z_pm_save_idle_exit>:
{
    732a:	b508      	push	{r3, lr}
	pm_system_resume();
    732c:	f7fa fb90 	bl	1a50 <pm_system_resume>
}
    7330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7334:	f7ff bf65 	b.w	7202 <sys_clock_idle_exit>

00007338 <k_mem_slab_init>:
{
    7338:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    733a:	2400      	movs	r4, #0
    733c:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    733e:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7340:	ea41 0402 	orr.w	r4, r1, r2
    7344:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7348:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    734c:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    734e:	d10c      	bne.n	736a <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    7350:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7352:	42a3      	cmp	r3, r4
    7354:	d103      	bne.n	735e <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    7356:	e9c0 0000 	strd	r0, r0, [r0]
}
    735a:	2000      	movs	r0, #0
}
    735c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    735e:	6985      	ldr	r5, [r0, #24]
    7360:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7362:	3401      	adds	r4, #1
		slab->free_list = p;
    7364:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    7366:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7368:	e7f3      	b.n	7352 <k_mem_slab_init+0x1a>
		return -EINVAL;
    736a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    736e:	e7f5      	b.n	735c <k_mem_slab_init+0x24>

00007370 <z_impl_k_mutex_init>:
{
    7370:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7372:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7374:	e9c3 0002 	strd	r0, r0, [r3, #8]
    7378:	e9c3 3300 	strd	r3, r3, [r3]
}
    737c:	4770      	bx	lr

0000737e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    737e:	4603      	mov	r3, r0
    7380:	b920      	cbnz	r0, 738c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7382:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7386:	b90a      	cbnz	r2, 738c <z_reschedule_irqlock+0xe>
    7388:	f7fa bd40 	b.w	1e0c <arch_swap>
    738c:	f383 8811 	msr	BASEPRI, r3
    7390:	f3bf 8f6f 	isb	sy
}
    7394:	4770      	bx	lr

00007396 <z_reschedule_unlocked>:
	__asm__ volatile(
    7396:	f04f 0320 	mov.w	r3, #32
    739a:	f3ef 8011 	mrs	r0, BASEPRI
    739e:	f383 8812 	msr	BASEPRI_MAX, r3
    73a2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    73a6:	f7ff bfea 	b.w	737e <z_reschedule_irqlock>

000073aa <z_priq_dumb_best>:
{
    73aa:	4603      	mov	r3, r0
	return list->head == list;
    73ac:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    73ae:	4283      	cmp	r3, r0
    73b0:	d003      	beq.n	73ba <z_priq_dumb_best+0x10>
	if (n != NULL) {
    73b2:	2800      	cmp	r0, #0
    73b4:	bf38      	it	cc
    73b6:	2000      	movcc	r0, #0
    73b8:	4770      	bx	lr
	struct k_thread *thread = NULL;
    73ba:	2000      	movs	r0, #0
}
    73bc:	4770      	bx	lr

000073be <k_is_in_isr>:
    73be:	f3ef 8005 	mrs	r0, IPSR
}
    73c2:	3800      	subs	r0, #0
    73c4:	bf18      	it	ne
    73c6:	2001      	movne	r0, #1
    73c8:	4770      	bx	lr

000073ca <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    73ca:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    73cc:	f7ff fa4c 	bl	6868 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    73d0:	bd08      	pop	{r3, pc}

000073d2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    73d2:	b108      	cbz	r0, 73d8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    73d4:	f7fb b8de 	b.w	2594 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    73d8:	4770      	bx	lr

000073da <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    73da:	4770      	bx	lr

000073dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    73dc:	f7fc bf5a 	b.w	4294 <SystemInit>
