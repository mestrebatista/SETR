
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002b40 	.word	0x20002b40
}
   4:	000030f9 	.word	0x000030f9
   8:	00009ca3 	.word	0x00009ca3
   c:	000030e5 	.word	0x000030e5
  10:	000030e5 	.word	0x000030e5
  14:	000030e5 	.word	0x000030e5
  18:	000030e5 	.word	0x000030e5
	...
  2c:	00002f01 	.word	0x00002f01
  30:	000030e5 	.word	0x000030e5
  34:	00000000 	.word	0x00000000
  38:	00002ead 	.word	0x00002ead
  3c:	000030e5 	.word	0x000030e5

00000040 <_irq_vector_table>:
  40:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  50:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  60:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  70:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  80:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  90:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  a0:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  b0:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  c0:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  d0:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  e0:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...
  f0:	00002e65 00002e65 00002e65 00002e65     e...e...e...e...

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0xb5>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0xa1>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x107>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0x35>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0x31>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0x4b>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0x99>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0x81>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x115>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0xd9>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0xf7>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2uiz>:
     89c:	004a      	lsls	r2, r1, #1
     89e:	d211      	bcs.n	8c4 <__aeabi_d2uiz+0x28>
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d211      	bcs.n	8ca <__aeabi_d2uiz+0x2e>
     8a6:	d50d      	bpl.n	8c4 <__aeabi_d2uiz+0x28>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d40e      	bmi.n	8d0 <__aeabi_d2uiz+0x34>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	fa23 f002 	lsr.w	r0, r3, r2
     8c2:	4770      	bx	lr
     8c4:	f04f 0000 	mov.w	r0, #0
     8c8:	4770      	bx	lr
     8ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8ce:	d102      	bne.n	8d6 <__aeabi_d2uiz+0x3a>
     8d0:	f04f 30ff 	mov.w	r0, #4294967295
     8d4:	4770      	bx	lr
     8d6:	f04f 0000 	mov.w	r0, #0
     8da:	4770      	bx	lr

000008dc <__aeabi_frsub>:
     8dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     8e0:	e002      	b.n	8e8 <__addsf3>
     8e2:	bf00      	nop

000008e4 <__aeabi_fsub>:
     8e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000008e8 <__addsf3>:
     8e8:	0042      	lsls	r2, r0, #1
     8ea:	bf1f      	itttt	ne
     8ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     8f0:	ea92 0f03 	teqne	r2, r3
     8f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     8f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     8fc:	d06a      	beq.n	9d4 <__addsf3+0xec>
     8fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
     902:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     906:	bfc1      	itttt	gt
     908:	18d2      	addgt	r2, r2, r3
     90a:	4041      	eorgt	r1, r0
     90c:	4048      	eorgt	r0, r1
     90e:	4041      	eorgt	r1, r0
     910:	bfb8      	it	lt
     912:	425b      	neglt	r3, r3
     914:	2b19      	cmp	r3, #25
     916:	bf88      	it	hi
     918:	4770      	bxhi	lr
     91a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     91e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     922:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     926:	bf18      	it	ne
     928:	4240      	negne	r0, r0
     92a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     92e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     932:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     936:	bf18      	it	ne
     938:	4249      	negne	r1, r1
     93a:	ea92 0f03 	teq	r2, r3
     93e:	d03f      	beq.n	9c0 <__addsf3+0xd8>
     940:	f1a2 0201 	sub.w	r2, r2, #1
     944:	fa41 fc03 	asr.w	ip, r1, r3
     948:	eb10 000c 	adds.w	r0, r0, ip
     94c:	f1c3 0320 	rsb	r3, r3, #32
     950:	fa01 f103 	lsl.w	r1, r1, r3
     954:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     958:	d502      	bpl.n	960 <__addsf3+0x78>
     95a:	4249      	negs	r1, r1
     95c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     960:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     964:	d313      	bcc.n	98e <__addsf3+0xa6>
     966:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     96a:	d306      	bcc.n	97a <__addsf3+0x92>
     96c:	0840      	lsrs	r0, r0, #1
     96e:	ea4f 0131 	mov.w	r1, r1, rrx
     972:	f102 0201 	add.w	r2, r2, #1
     976:	2afe      	cmp	r2, #254	; 0xfe
     978:	d251      	bcs.n	a1e <__addsf3+0x136>
     97a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     97e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     982:	bf08      	it	eq
     984:	f020 0001 	biceq.w	r0, r0, #1
     988:	ea40 0003 	orr.w	r0, r0, r3
     98c:	4770      	bx	lr
     98e:	0049      	lsls	r1, r1, #1
     990:	eb40 0000 	adc.w	r0, r0, r0
     994:	3a01      	subs	r2, #1
     996:	bf28      	it	cs
     998:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     99c:	d2ed      	bcs.n	97a <__addsf3+0x92>
     99e:	fab0 fc80 	clz	ip, r0
     9a2:	f1ac 0c08 	sub.w	ip, ip, #8
     9a6:	ebb2 020c 	subs.w	r2, r2, ip
     9aa:	fa00 f00c 	lsl.w	r0, r0, ip
     9ae:	bfaa      	itet	ge
     9b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     9b4:	4252      	neglt	r2, r2
     9b6:	4318      	orrge	r0, r3
     9b8:	bfbc      	itt	lt
     9ba:	40d0      	lsrlt	r0, r2
     9bc:	4318      	orrlt	r0, r3
     9be:	4770      	bx	lr
     9c0:	f092 0f00 	teq	r2, #0
     9c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     9c8:	bf06      	itte	eq
     9ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     9ce:	3201      	addeq	r2, #1
     9d0:	3b01      	subne	r3, #1
     9d2:	e7b5      	b.n	940 <__addsf3+0x58>
     9d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     9d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     9dc:	bf18      	it	ne
     9de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9e2:	d021      	beq.n	a28 <__addsf3+0x140>
     9e4:	ea92 0f03 	teq	r2, r3
     9e8:	d004      	beq.n	9f4 <__addsf3+0x10c>
     9ea:	f092 0f00 	teq	r2, #0
     9ee:	bf08      	it	eq
     9f0:	4608      	moveq	r0, r1
     9f2:	4770      	bx	lr
     9f4:	ea90 0f01 	teq	r0, r1
     9f8:	bf1c      	itt	ne
     9fa:	2000      	movne	r0, #0
     9fc:	4770      	bxne	lr
     9fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a02:	d104      	bne.n	a0e <__addsf3+0x126>
     a04:	0040      	lsls	r0, r0, #1
     a06:	bf28      	it	cs
     a08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a0c:	4770      	bx	lr
     a0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a12:	bf3c      	itt	cc
     a14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a18:	4770      	bxcc	lr
     a1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     a22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a26:	4770      	bx	lr
     a28:	ea7f 6222 	mvns.w	r2, r2, asr #24
     a2c:	bf16      	itet	ne
     a2e:	4608      	movne	r0, r1
     a30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     a34:	4601      	movne	r1, r0
     a36:	0242      	lsls	r2, r0, #9
     a38:	bf06      	itte	eq
     a3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     a3e:	ea90 0f01 	teqeq	r0, r1
     a42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     a46:	4770      	bx	lr

00000a48 <__aeabi_ui2f>:
     a48:	f04f 0300 	mov.w	r3, #0
     a4c:	e004      	b.n	a58 <__aeabi_i2f+0x8>
     a4e:	bf00      	nop

00000a50 <__aeabi_i2f>:
     a50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     a54:	bf48      	it	mi
     a56:	4240      	negmi	r0, r0
     a58:	ea5f 0c00 	movs.w	ip, r0
     a5c:	bf08      	it	eq
     a5e:	4770      	bxeq	lr
     a60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     a64:	4601      	mov	r1, r0
     a66:	f04f 0000 	mov.w	r0, #0
     a6a:	e01c      	b.n	aa6 <__aeabi_l2f+0x2a>

00000a6c <__aeabi_ul2f>:
     a6c:	ea50 0201 	orrs.w	r2, r0, r1
     a70:	bf08      	it	eq
     a72:	4770      	bxeq	lr
     a74:	f04f 0300 	mov.w	r3, #0
     a78:	e00a      	b.n	a90 <__aeabi_l2f+0x14>
     a7a:	bf00      	nop

00000a7c <__aeabi_l2f>:
     a7c:	ea50 0201 	orrs.w	r2, r0, r1
     a80:	bf08      	it	eq
     a82:	4770      	bxeq	lr
     a84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     a88:	d502      	bpl.n	a90 <__aeabi_l2f+0x14>
     a8a:	4240      	negs	r0, r0
     a8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a90:	ea5f 0c01 	movs.w	ip, r1
     a94:	bf02      	ittt	eq
     a96:	4684      	moveq	ip, r0
     a98:	4601      	moveq	r1, r0
     a9a:	2000      	moveq	r0, #0
     a9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     aa0:	bf08      	it	eq
     aa2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     aa6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     aaa:	fabc f28c 	clz	r2, ip
     aae:	3a08      	subs	r2, #8
     ab0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ab4:	db10      	blt.n	ad8 <__aeabi_l2f+0x5c>
     ab6:	fa01 fc02 	lsl.w	ip, r1, r2
     aba:	4463      	add	r3, ip
     abc:	fa00 fc02 	lsl.w	ip, r0, r2
     ac0:	f1c2 0220 	rsb	r2, r2, #32
     ac4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ac8:	fa20 f202 	lsr.w	r2, r0, r2
     acc:	eb43 0002 	adc.w	r0, r3, r2
     ad0:	bf08      	it	eq
     ad2:	f020 0001 	biceq.w	r0, r0, #1
     ad6:	4770      	bx	lr
     ad8:	f102 0220 	add.w	r2, r2, #32
     adc:	fa01 fc02 	lsl.w	ip, r1, r2
     ae0:	f1c2 0220 	rsb	r2, r2, #32
     ae4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     ae8:	fa21 f202 	lsr.w	r2, r1, r2
     aec:	eb43 0002 	adc.w	r0, r3, r2
     af0:	bf08      	it	eq
     af2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     af6:	4770      	bx	lr

00000af8 <__aeabi_fmul>:
     af8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     afc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     b00:	bf1e      	ittt	ne
     b02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     b06:	ea92 0f0c 	teqne	r2, ip
     b0a:	ea93 0f0c 	teqne	r3, ip
     b0e:	d06f      	beq.n	bf0 <__aeabi_fmul+0xf8>
     b10:	441a      	add	r2, r3
     b12:	ea80 0c01 	eor.w	ip, r0, r1
     b16:	0240      	lsls	r0, r0, #9
     b18:	bf18      	it	ne
     b1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     b1e:	d01e      	beq.n	b5e <__aeabi_fmul+0x66>
     b20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     b24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     b28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     b2c:	fba0 3101 	umull	r3, r1, r0, r1
     b30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     b34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     b38:	bf3e      	ittt	cc
     b3a:	0049      	lslcc	r1, r1, #1
     b3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     b40:	005b      	lslcc	r3, r3, #1
     b42:	ea40 0001 	orr.w	r0, r0, r1
     b46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     b4a:	2afd      	cmp	r2, #253	; 0xfd
     b4c:	d81d      	bhi.n	b8a <__aeabi_fmul+0x92>
     b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b56:	bf08      	it	eq
     b58:	f020 0001 	biceq.w	r0, r0, #1
     b5c:	4770      	bx	lr
     b5e:	f090 0f00 	teq	r0, #0
     b62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     b66:	bf08      	it	eq
     b68:	0249      	lsleq	r1, r1, #9
     b6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     b6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     b72:	3a7f      	subs	r2, #127	; 0x7f
     b74:	bfc2      	ittt	gt
     b76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     b7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     b7e:	4770      	bxgt	lr
     b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b84:	f04f 0300 	mov.w	r3, #0
     b88:	3a01      	subs	r2, #1
     b8a:	dc5d      	bgt.n	c48 <__aeabi_fmul+0x150>
     b8c:	f112 0f19 	cmn.w	r2, #25
     b90:	bfdc      	itt	le
     b92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     b96:	4770      	bxle	lr
     b98:	f1c2 0200 	rsb	r2, r2, #0
     b9c:	0041      	lsls	r1, r0, #1
     b9e:	fa21 f102 	lsr.w	r1, r1, r2
     ba2:	f1c2 0220 	rsb	r2, r2, #32
     ba6:	fa00 fc02 	lsl.w	ip, r0, r2
     baa:	ea5f 0031 	movs.w	r0, r1, rrx
     bae:	f140 0000 	adc.w	r0, r0, #0
     bb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     bb6:	bf08      	it	eq
     bb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     bbc:	4770      	bx	lr
     bbe:	f092 0f00 	teq	r2, #0
     bc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     bc6:	bf02      	ittt	eq
     bc8:	0040      	lsleq	r0, r0, #1
     bca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     bce:	3a01      	subeq	r2, #1
     bd0:	d0f9      	beq.n	bc6 <__aeabi_fmul+0xce>
     bd2:	ea40 000c 	orr.w	r0, r0, ip
     bd6:	f093 0f00 	teq	r3, #0
     bda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     bde:	bf02      	ittt	eq
     be0:	0049      	lsleq	r1, r1, #1
     be2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     be6:	3b01      	subeq	r3, #1
     be8:	d0f9      	beq.n	bde <__aeabi_fmul+0xe6>
     bea:	ea41 010c 	orr.w	r1, r1, ip
     bee:	e78f      	b.n	b10 <__aeabi_fmul+0x18>
     bf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     bf4:	ea92 0f0c 	teq	r2, ip
     bf8:	bf18      	it	ne
     bfa:	ea93 0f0c 	teqne	r3, ip
     bfe:	d00a      	beq.n	c16 <__aeabi_fmul+0x11e>
     c00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     c04:	bf18      	it	ne
     c06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     c0a:	d1d8      	bne.n	bbe <__aeabi_fmul+0xc6>
     c0c:	ea80 0001 	eor.w	r0, r0, r1
     c10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c14:	4770      	bx	lr
     c16:	f090 0f00 	teq	r0, #0
     c1a:	bf17      	itett	ne
     c1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     c20:	4608      	moveq	r0, r1
     c22:	f091 0f00 	teqne	r1, #0
     c26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     c2a:	d014      	beq.n	c56 <__aeabi_fmul+0x15e>
     c2c:	ea92 0f0c 	teq	r2, ip
     c30:	d101      	bne.n	c36 <__aeabi_fmul+0x13e>
     c32:	0242      	lsls	r2, r0, #9
     c34:	d10f      	bne.n	c56 <__aeabi_fmul+0x15e>
     c36:	ea93 0f0c 	teq	r3, ip
     c3a:	d103      	bne.n	c44 <__aeabi_fmul+0x14c>
     c3c:	024b      	lsls	r3, r1, #9
     c3e:	bf18      	it	ne
     c40:	4608      	movne	r0, r1
     c42:	d108      	bne.n	c56 <__aeabi_fmul+0x15e>
     c44:	ea80 0001 	eor.w	r0, r0, r1
     c48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c54:	4770      	bx	lr
     c56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     c5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     c5e:	4770      	bx	lr

00000c60 <__aeabi_fdiv>:
     c60:	f04f 0cff 	mov.w	ip, #255	; 0xff
     c64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     c68:	bf1e      	ittt	ne
     c6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     c6e:	ea92 0f0c 	teqne	r2, ip
     c72:	ea93 0f0c 	teqne	r3, ip
     c76:	d069      	beq.n	d4c <__aeabi_fdiv+0xec>
     c78:	eba2 0203 	sub.w	r2, r2, r3
     c7c:	ea80 0c01 	eor.w	ip, r0, r1
     c80:	0249      	lsls	r1, r1, #9
     c82:	ea4f 2040 	mov.w	r0, r0, lsl #9
     c86:	d037      	beq.n	cf8 <__aeabi_fdiv+0x98>
     c88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     c8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     c90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     c94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     c98:	428b      	cmp	r3, r1
     c9a:	bf38      	it	cc
     c9c:	005b      	lslcc	r3, r3, #1
     c9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     ca2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ca6:	428b      	cmp	r3, r1
     ca8:	bf24      	itt	cs
     caa:	1a5b      	subcs	r3, r3, r1
     cac:	ea40 000c 	orrcs.w	r0, r0, ip
     cb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     cb4:	bf24      	itt	cs
     cb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     cba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     cbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     cc2:	bf24      	itt	cs
     cc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     cc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ccc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     cd0:	bf24      	itt	cs
     cd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     cd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     cda:	011b      	lsls	r3, r3, #4
     cdc:	bf18      	it	ne
     cde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     ce2:	d1e0      	bne.n	ca6 <__aeabi_fdiv+0x46>
     ce4:	2afd      	cmp	r2, #253	; 0xfd
     ce6:	f63f af50 	bhi.w	b8a <__aeabi_fmul+0x92>
     cea:	428b      	cmp	r3, r1
     cec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     cf0:	bf08      	it	eq
     cf2:	f020 0001 	biceq.w	r0, r0, #1
     cf6:	4770      	bx	lr
     cf8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     cfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d00:	327f      	adds	r2, #127	; 0x7f
     d02:	bfc2      	ittt	gt
     d04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d0c:	4770      	bxgt	lr
     d0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d12:	f04f 0300 	mov.w	r3, #0
     d16:	3a01      	subs	r2, #1
     d18:	e737      	b.n	b8a <__aeabi_fmul+0x92>
     d1a:	f092 0f00 	teq	r2, #0
     d1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d22:	bf02      	ittt	eq
     d24:	0040      	lsleq	r0, r0, #1
     d26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d2a:	3a01      	subeq	r2, #1
     d2c:	d0f9      	beq.n	d22 <__aeabi_fdiv+0xc2>
     d2e:	ea40 000c 	orr.w	r0, r0, ip
     d32:	f093 0f00 	teq	r3, #0
     d36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d3a:	bf02      	ittt	eq
     d3c:	0049      	lsleq	r1, r1, #1
     d3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d42:	3b01      	subeq	r3, #1
     d44:	d0f9      	beq.n	d3a <__aeabi_fdiv+0xda>
     d46:	ea41 010c 	orr.w	r1, r1, ip
     d4a:	e795      	b.n	c78 <__aeabi_fdiv+0x18>
     d4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d50:	ea92 0f0c 	teq	r2, ip
     d54:	d108      	bne.n	d68 <__aeabi_fdiv+0x108>
     d56:	0242      	lsls	r2, r0, #9
     d58:	f47f af7d 	bne.w	c56 <__aeabi_fmul+0x15e>
     d5c:	ea93 0f0c 	teq	r3, ip
     d60:	f47f af70 	bne.w	c44 <__aeabi_fmul+0x14c>
     d64:	4608      	mov	r0, r1
     d66:	e776      	b.n	c56 <__aeabi_fmul+0x15e>
     d68:	ea93 0f0c 	teq	r3, ip
     d6c:	d104      	bne.n	d78 <__aeabi_fdiv+0x118>
     d6e:	024b      	lsls	r3, r1, #9
     d70:	f43f af4c 	beq.w	c0c <__aeabi_fmul+0x114>
     d74:	4608      	mov	r0, r1
     d76:	e76e      	b.n	c56 <__aeabi_fmul+0x15e>
     d78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     d7c:	bf18      	it	ne
     d7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     d82:	d1ca      	bne.n	d1a <__aeabi_fdiv+0xba>
     d84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     d88:	f47f af5c 	bne.w	c44 <__aeabi_fmul+0x14c>
     d8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     d90:	f47f af3c 	bne.w	c0c <__aeabi_fmul+0x114>
     d94:	e75f      	b.n	c56 <__aeabi_fmul+0x15e>
     d96:	bf00      	nop

00000d98 <__aeabi_f2uiz>:
     d98:	0042      	lsls	r2, r0, #1
     d9a:	d20e      	bcs.n	dba <__aeabi_f2uiz+0x22>
     d9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     da0:	d30b      	bcc.n	dba <__aeabi_f2uiz+0x22>
     da2:	f04f 039e 	mov.w	r3, #158	; 0x9e
     da6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     daa:	d409      	bmi.n	dc0 <__aeabi_f2uiz+0x28>
     dac:	ea4f 2300 	mov.w	r3, r0, lsl #8
     db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     db4:	fa23 f002 	lsr.w	r0, r3, r2
     db8:	4770      	bx	lr
     dba:	f04f 0000 	mov.w	r0, #0
     dbe:	4770      	bx	lr
     dc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
     dc4:	d101      	bne.n	dca <__aeabi_f2uiz+0x32>
     dc6:	0242      	lsls	r2, r0, #9
     dc8:	d102      	bne.n	dd0 <__aeabi_f2uiz+0x38>
     dca:	f04f 30ff 	mov.w	r0, #4294967295
     dce:	4770      	bx	lr
     dd0:	f04f 0000 	mov.w	r0, #0
     dd4:	4770      	bx	lr
     dd6:	bf00      	nop

00000dd8 <__aeabi_uldivmod>:
     dd8:	b953      	cbnz	r3, df0 <__aeabi_uldivmod+0x18>
     dda:	b94a      	cbnz	r2, df0 <__aeabi_uldivmod+0x18>
     ddc:	2900      	cmp	r1, #0
     dde:	bf08      	it	eq
     de0:	2800      	cmpeq	r0, #0
     de2:	bf1c      	itt	ne
     de4:	f04f 31ff 	movne.w	r1, #4294967295
     de8:	f04f 30ff 	movne.w	r0, #4294967295
     dec:	f000 b96c 	b.w	10c8 <__aeabi_idiv0>
     df0:	f1ad 0c08 	sub.w	ip, sp, #8
     df4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     df8:	f000 f806 	bl	e08 <__udivmoddi4>
     dfc:	f8dd e004 	ldr.w	lr, [sp, #4]
     e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e04:	b004      	add	sp, #16
     e06:	4770      	bx	lr

00000e08 <__udivmoddi4>:
     e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e0c:	9e08      	ldr	r6, [sp, #32]
     e0e:	460d      	mov	r5, r1
     e10:	4604      	mov	r4, r0
     e12:	468e      	mov	lr, r1
     e14:	2b00      	cmp	r3, #0
     e16:	f040 8082 	bne.w	f1e <__udivmoddi4+0x116>
     e1a:	428a      	cmp	r2, r1
     e1c:	4617      	mov	r7, r2
     e1e:	d946      	bls.n	eae <__udivmoddi4+0xa6>
     e20:	fab2 f282 	clz	r2, r2
     e24:	b14a      	cbz	r2, e3a <__udivmoddi4+0x32>
     e26:	f1c2 0120 	rsb	r1, r2, #32
     e2a:	fa05 f302 	lsl.w	r3, r5, r2
     e2e:	fa20 f101 	lsr.w	r1, r0, r1
     e32:	4097      	lsls	r7, r2
     e34:	ea41 0e03 	orr.w	lr, r1, r3
     e38:	4094      	lsls	r4, r2
     e3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     e3e:	0c23      	lsrs	r3, r4, #16
     e40:	fbbe fcf8 	udiv	ip, lr, r8
     e44:	b2b9      	uxth	r1, r7
     e46:	fb08 ee1c 	mls	lr, r8, ip, lr
     e4a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     e4e:	fb0c f001 	mul.w	r0, ip, r1
     e52:	4298      	cmp	r0, r3
     e54:	d90a      	bls.n	e6c <__udivmoddi4+0x64>
     e56:	18fb      	adds	r3, r7, r3
     e58:	f10c 35ff 	add.w	r5, ip, #4294967295
     e5c:	f080 8116 	bcs.w	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
     e60:	4298      	cmp	r0, r3
     e62:	f240 8113 	bls.w	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
     e66:	f1ac 0c02 	sub.w	ip, ip, #2
     e6a:	443b      	add	r3, r7
     e6c:	1a1b      	subs	r3, r3, r0
     e6e:	b2a4      	uxth	r4, r4
     e70:	fbb3 f0f8 	udiv	r0, r3, r8
     e74:	fb08 3310 	mls	r3, r8, r0, r3
     e78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     e7c:	fb00 f101 	mul.w	r1, r0, r1
     e80:	42a1      	cmp	r1, r4
     e82:	d909      	bls.n	e98 <__udivmoddi4+0x90>
     e84:	193c      	adds	r4, r7, r4
     e86:	f100 33ff 	add.w	r3, r0, #4294967295
     e8a:	f080 8101 	bcs.w	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
     e8e:	42a1      	cmp	r1, r4
     e90:	f240 80fe 	bls.w	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
     e94:	3802      	subs	r0, #2
     e96:	443c      	add	r4, r7
     e98:	1a64      	subs	r4, r4, r1
     e9a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     e9e:	2100      	movs	r1, #0
     ea0:	b11e      	cbz	r6, eaa <__udivmoddi4+0xa2>
     ea2:	40d4      	lsrs	r4, r2
     ea4:	2300      	movs	r3, #0
     ea6:	e9c6 4300 	strd	r4, r3, [r6]
     eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     eae:	b902      	cbnz	r2, eb2 <__udivmoddi4+0xaa>
     eb0:	deff      	udf	#255	; 0xff
     eb2:	fab2 f282 	clz	r2, r2
     eb6:	2a00      	cmp	r2, #0
     eb8:	d14f      	bne.n	f5a <__udivmoddi4+0x152>
     eba:	1bcb      	subs	r3, r1, r7
     ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ec0:	fa1f f887 	uxth.w	r8, r7
     ec4:	2101      	movs	r1, #1
     ec6:	fbb3 fcfe 	udiv	ip, r3, lr
     eca:	0c25      	lsrs	r5, r4, #16
     ecc:	fb0e 331c 	mls	r3, lr, ip, r3
     ed0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     ed4:	fb08 f30c 	mul.w	r3, r8, ip
     ed8:	42ab      	cmp	r3, r5
     eda:	d907      	bls.n	eec <__udivmoddi4+0xe4>
     edc:	197d      	adds	r5, r7, r5
     ede:	f10c 30ff 	add.w	r0, ip, #4294967295
     ee2:	d202      	bcs.n	eea <__udivmoddi4+0xe2>
     ee4:	42ab      	cmp	r3, r5
     ee6:	f200 80e7 	bhi.w	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     eea:	4684      	mov	ip, r0
     eec:	1aed      	subs	r5, r5, r3
     eee:	b2a3      	uxth	r3, r4
     ef0:	fbb5 f0fe 	udiv	r0, r5, lr
     ef4:	fb0e 5510 	mls	r5, lr, r0, r5
     ef8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     efc:	fb08 f800 	mul.w	r8, r8, r0
     f00:	45a0      	cmp	r8, r4
     f02:	d907      	bls.n	f14 <__udivmoddi4+0x10c>
     f04:	193c      	adds	r4, r7, r4
     f06:	f100 33ff 	add.w	r3, r0, #4294967295
     f0a:	d202      	bcs.n	f12 <__udivmoddi4+0x10a>
     f0c:	45a0      	cmp	r8, r4
     f0e:	f200 80d7 	bhi.w	10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
     f12:	4618      	mov	r0, r3
     f14:	eba4 0408 	sub.w	r4, r4, r8
     f18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     f1c:	e7c0      	b.n	ea0 <__udivmoddi4+0x98>
     f1e:	428b      	cmp	r3, r1
     f20:	d908      	bls.n	f34 <__udivmoddi4+0x12c>
     f22:	2e00      	cmp	r6, #0
     f24:	f000 80af 	beq.w	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
     f28:	2100      	movs	r1, #0
     f2a:	e9c6 0500 	strd	r0, r5, [r6]
     f2e:	4608      	mov	r0, r1
     f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f34:	fab3 f183 	clz	r1, r3
     f38:	2900      	cmp	r1, #0
     f3a:	d14b      	bne.n	fd4 <__udivmoddi4+0x1cc>
     f3c:	42ab      	cmp	r3, r5
     f3e:	d302      	bcc.n	f46 <__udivmoddi4+0x13e>
     f40:	4282      	cmp	r2, r0
     f42:	f200 80b7 	bhi.w	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
     f46:	1a84      	subs	r4, r0, r2
     f48:	eb65 0303 	sbc.w	r3, r5, r3
     f4c:	2001      	movs	r0, #1
     f4e:	469e      	mov	lr, r3
     f50:	2e00      	cmp	r6, #0
     f52:	d0aa      	beq.n	eaa <__udivmoddi4+0xa2>
     f54:	e9c6 4e00 	strd	r4, lr, [r6]
     f58:	e7a7      	b.n	eaa <__udivmoddi4+0xa2>
     f5a:	f1c2 0c20 	rsb	ip, r2, #32
     f5e:	fa01 f302 	lsl.w	r3, r1, r2
     f62:	4097      	lsls	r7, r2
     f64:	fa20 f00c 	lsr.w	r0, r0, ip
     f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     f6c:	fa21 fc0c 	lsr.w	ip, r1, ip
     f70:	4318      	orrs	r0, r3
     f72:	fbbc f1fe 	udiv	r1, ip, lr
     f76:	0c05      	lsrs	r5, r0, #16
     f78:	fb0e cc11 	mls	ip, lr, r1, ip
     f7c:	fa1f f887 	uxth.w	r8, r7
     f80:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     f84:	fb01 f308 	mul.w	r3, r1, r8
     f88:	42ab      	cmp	r3, r5
     f8a:	fa04 f402 	lsl.w	r4, r4, r2
     f8e:	d909      	bls.n	fa4 <__udivmoddi4+0x19c>
     f90:	197d      	adds	r5, r7, r5
     f92:	f101 3cff 	add.w	ip, r1, #4294967295
     f96:	f080 808b 	bcs.w	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
     f9a:	42ab      	cmp	r3, r5
     f9c:	f240 8088 	bls.w	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
     fa0:	3902      	subs	r1, #2
     fa2:	443d      	add	r5, r7
     fa4:	1aeb      	subs	r3, r5, r3
     fa6:	b285      	uxth	r5, r0
     fa8:	fbb3 f0fe 	udiv	r0, r3, lr
     fac:	fb0e 3310 	mls	r3, lr, r0, r3
     fb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     fb4:	fb00 f308 	mul.w	r3, r0, r8
     fb8:	42ab      	cmp	r3, r5
     fba:	d907      	bls.n	fcc <__udivmoddi4+0x1c4>
     fbc:	197d      	adds	r5, r7, r5
     fbe:	f100 3cff 	add.w	ip, r0, #4294967295
     fc2:	d271      	bcs.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
     fc4:	42ab      	cmp	r3, r5
     fc6:	d96f      	bls.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
     fc8:	3802      	subs	r0, #2
     fca:	443d      	add	r5, r7
     fcc:	1aeb      	subs	r3, r5, r3
     fce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     fd2:	e778      	b.n	ec6 <__udivmoddi4+0xbe>
     fd4:	f1c1 0c20 	rsb	ip, r1, #32
     fd8:	408b      	lsls	r3, r1
     fda:	fa22 f70c 	lsr.w	r7, r2, ip
     fde:	431f      	orrs	r7, r3
     fe0:	fa20 f40c 	lsr.w	r4, r0, ip
     fe4:	fa05 f301 	lsl.w	r3, r5, r1
     fe8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     fec:	fa25 f50c 	lsr.w	r5, r5, ip
     ff0:	431c      	orrs	r4, r3
     ff2:	0c23      	lsrs	r3, r4, #16
     ff4:	fbb5 f9fe 	udiv	r9, r5, lr
     ff8:	fa1f f887 	uxth.w	r8, r7
     ffc:	fb0e 5519 	mls	r5, lr, r9, r5
    1000:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1004:	fb09 fa08 	mul.w	sl, r9, r8
    1008:	45aa      	cmp	sl, r5
    100a:	fa02 f201 	lsl.w	r2, r2, r1
    100e:	fa00 f301 	lsl.w	r3, r0, r1
    1012:	d908      	bls.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
    1014:	197d      	adds	r5, r7, r5
    1016:	f109 30ff 	add.w	r0, r9, #4294967295
    101a:	d247      	bcs.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    101c:	45aa      	cmp	sl, r5
    101e:	d945      	bls.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1020:	f1a9 0902 	sub.w	r9, r9, #2
    1024:	443d      	add	r5, r7
    1026:	eba5 050a 	sub.w	r5, r5, sl
    102a:	b2a4      	uxth	r4, r4
    102c:	fbb5 f0fe 	udiv	r0, r5, lr
    1030:	fb0e 5510 	mls	r5, lr, r0, r5
    1034:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1038:	fb00 f808 	mul.w	r8, r0, r8
    103c:	45a0      	cmp	r8, r4
    103e:	d907      	bls.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    1040:	193c      	adds	r4, r7, r4
    1042:	f100 35ff 	add.w	r5, r0, #4294967295
    1046:	d22d      	bcs.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1048:	45a0      	cmp	r8, r4
    104a:	d92b      	bls.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    104c:	3802      	subs	r0, #2
    104e:	443c      	add	r4, r7
    1050:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    1054:	eba4 0408 	sub.w	r4, r4, r8
    1058:	fba0 8902 	umull	r8, r9, r0, r2
    105c:	454c      	cmp	r4, r9
    105e:	46c6      	mov	lr, r8
    1060:	464d      	mov	r5, r9
    1062:	d319      	bcc.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1064:	d016      	beq.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    1066:	b15e      	cbz	r6, 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    1068:	ebb3 020e 	subs.w	r2, r3, lr
    106c:	eb64 0405 	sbc.w	r4, r4, r5
    1070:	fa04 fc0c 	lsl.w	ip, r4, ip
    1074:	40ca      	lsrs	r2, r1
    1076:	ea4c 0202 	orr.w	r2, ip, r2
    107a:	40cc      	lsrs	r4, r1
    107c:	e9c6 2400 	strd	r2, r4, [r6]
    1080:	2100      	movs	r1, #0
    1082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1086:	4631      	mov	r1, r6
    1088:	4630      	mov	r0, r6
    108a:	e70e      	b.n	eaa <__udivmoddi4+0xa2>
    108c:	46ac      	mov	ip, r5
    108e:	e6ed      	b.n	e6c <__udivmoddi4+0x64>
    1090:	4618      	mov	r0, r3
    1092:	e701      	b.n	e98 <__udivmoddi4+0x90>
    1094:	4543      	cmp	r3, r8
    1096:	d2e6      	bcs.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
    1098:	ebb8 0e02 	subs.w	lr, r8, r2
    109c:	eb69 0507 	sbc.w	r5, r9, r7
    10a0:	3801      	subs	r0, #1
    10a2:	e7e0      	b.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
    10a4:	4628      	mov	r0, r5
    10a6:	e7d3      	b.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    10a8:	4660      	mov	r0, ip
    10aa:	e78f      	b.n	fcc <__udivmoddi4+0x1c4>
    10ac:	4681      	mov	r9, r0
    10ae:	e7ba      	b.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
    10b0:	4661      	mov	r1, ip
    10b2:	e777      	b.n	fa4 <__udivmoddi4+0x19c>
    10b4:	4608      	mov	r0, r1
    10b6:	e74b      	b.n	f50 <__udivmoddi4+0x148>
    10b8:	f1ac 0c02 	sub.w	ip, ip, #2
    10bc:	443d      	add	r5, r7
    10be:	e715      	b.n	eec <__udivmoddi4+0xe4>
    10c0:	3802      	subs	r0, #2
    10c2:	443c      	add	r4, r7
    10c4:	e726      	b.n	f14 <__udivmoddi4+0x10c>
    10c6:	bf00      	nop

000010c8 <__aeabi_idiv0>:
    10c8:	4770      	bx	lr
    10ca:	bf00      	nop
    10cc:	0000      	movs	r0, r0
	...

000010d0 <thread_B_code>:
}

/* ###################    THREAD B    ######################*/

void thread_B_code(void *argA , void *argB, void *argC)
{
    10d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int err=0;
  uint16_t count = 0;
  int i;

  printk("Thread B Init\n\r");
    10d4:	4848      	ldr	r0, [pc, #288]	; (11f8 <thread_B_code+0x128>)
   else 
   {
     var_bc = 0;
   }

   printk("adc reading %d: raw:%4u / %4u mV: \n\r", count, var_bc, (uint16_t)(3000 * var_bc / ((float) 1023)));
    10d6:	f8df b14c 	ldr.w	fp, [pc, #332]	; 1224 <thread_B_code+0x154>
  printk("Thread B Init\n\r");
    10da:	f008 fdbc 	bl	9c56 <printk>
   desvio = 0.1 * media;
    10de:	f20f 1910 	addw	r9, pc, #272	; 0x110
    10e2:	e9d9 8900 	ldrd	r8, r9, [r9]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    10e6:	f04f 32ff 	mov.w	r2, #4294967295
    10ea:	f04f 33ff 	mov.w	r3, #4294967295
    10ee:	4843      	ldr	r0, [pc, #268]	; (11fc <thread_B_code+0x12c>)
   media_2 = 0;
    10f0:	4f43      	ldr	r7, [pc, #268]	; (1200 <thread_B_code+0x130>)
    10f2:	4d44      	ldr	r5, [pc, #272]	; (1204 <thread_B_code+0x134>)
    10f4:	f007 fa36 	bl	8564 <z_impl_k_sem_take>
   printk("Thread B Activated\n\r");
    10f8:	4843      	ldr	r0, [pc, #268]	; (1208 <thread_B_code+0x138>)
    10fa:	f008 fdac 	bl	9c56 <printk>
   if(var_ab <= 900)
    10fe:	4943      	ldr	r1, [pc, #268]	; (120c <thread_B_code+0x13c>)
   media = 0;
    1100:	4a43      	ldr	r2, [pc, #268]	; (1210 <thread_B_code+0x140>)
   if(var_ab <= 900)
    1102:	6809      	ldr	r1, [r1, #0]
   media = 0;
    1104:	2300      	movs	r3, #0
   if(var_ab <= 900)
    1106:	f5b1 7f61 	cmp.w	r1, #900	; 0x384
   media = 0;
    110a:	8013      	strh	r3, [r2, #0]
   media_2 = 0;
    110c:	4616      	mov	r6, r2
    110e:	803b      	strh	r3, [r7, #0]
   if(var_ab <= 900)
    1110:	46ba      	mov	sl, r7
    1112:	dc0a      	bgt.n	112a <thread_B_code+0x5a>
       buffer[i] = buffer[i + 1];
    1114:	461c      	mov	r4, r3
    1116:	3301      	adds	r3, #1
     for (i = 0; i < WINDOW_SIZE - 1; i++) 
    1118:	2b09      	cmp	r3, #9
       buffer[i] = buffer[i + 1];
    111a:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
    111e:	b280      	uxth	r0, r0
    1120:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
     for (i = 0; i < WINDOW_SIZE - 1; i++) 
    1124:	d1f6      	bne.n	1114 <thread_B_code+0x44>
       buffer[WINDOW_SIZE - 1] = var_ab;
    1126:	b289      	uxth	r1, r1
    1128:	8269      	strh	r1, [r5, #18]
     for (i = 0; i < WINDOW_SIZE - 1; i++) 
    112a:	2100      	movs	r1, #0
     media = media + buffer[i];
    112c:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
    1130:	8833      	ldrh	r3, [r6, #0]
   for (i = 0; i < WINDOW_SIZE; i++) 
    1132:	3101      	adds	r1, #1
     media = media + buffer[i];
    1134:	4403      	add	r3, r0
    1136:	b29b      	uxth	r3, r3
   for (i = 0; i < WINDOW_SIZE; i++) 
    1138:	290a      	cmp	r1, #10
     media = media + buffer[i];
    113a:	8033      	strh	r3, [r6, #0]
   for (i = 0; i < WINDOW_SIZE; i++) 
    113c:	d1f6      	bne.n	112c <thread_B_code+0x5c>
   media = media / WINDOW_SIZE;
    113e:	8813      	ldrh	r3, [r2, #0]
    1140:	b29b      	uxth	r3, r3
    1142:	fbb3 f3f1 	udiv	r3, r3, r1
    1146:	8013      	strh	r3, [r2, #0]
   desvio = 0.1 * media;
    1148:	8810      	ldrh	r0, [r2, #0]
    114a:	b280      	uxth	r0, r0
    114c:	f7ff f92a 	bl	3a4 <__aeabi_i2d>
    1150:	4642      	mov	r2, r8
    1152:	464b      	mov	r3, r9
    1154:	f7ff f990 	bl	478 <__aeabi_dmul>
    1158:	f7ff fba0 	bl	89c <__aeabi_d2uiz>
    115c:	4a2d      	ldr	r2, [pc, #180]	; (1214 <thread_B_code+0x144>)
    115e:	b280      	uxth	r0, r0
   for (i = 0; i < WINDOW_SIZE; i++) 
    1160:	2300      	movs	r3, #0
   desvio = 0.1 * media;
    1162:	8010      	strh	r0, [r2, #0]
   count = 0;
    1164:	461c      	mov	r4, r3
     if ((media + desvio > buffer[i]) && (media - desvio < buffer[i])) {
    1166:	8830      	ldrh	r0, [r6, #0]
    1168:	f8b2 c000 	ldrh.w	ip, [r2]
    116c:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
    1170:	fa1f fc8c 	uxth.w	ip, ip
    1174:	b289      	uxth	r1, r1
    1176:	fa1c f080 	uxtah	r0, ip, r0
    117a:	4288      	cmp	r0, r1
    117c:	dd16      	ble.n	11ac <thread_B_code+0xdc>
    117e:	8830      	ldrh	r0, [r6, #0]
    1180:	f8b2 c000 	ldrh.w	ip, [r2]
    1184:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
    1188:	b280      	uxth	r0, r0
    118a:	fa1f fc8c 	uxth.w	ip, ip
    118e:	b289      	uxth	r1, r1
    1190:	eba0 000c 	sub.w	r0, r0, ip
    1194:	4288      	cmp	r0, r1
    1196:	da09      	bge.n	11ac <thread_B_code+0xdc>
       media_2 = media_2 + buffer[i];
    1198:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
    119c:	f8ba 1000 	ldrh.w	r1, [sl]
    11a0:	4401      	add	r1, r0
    11a2:	b289      	uxth	r1, r1
       count = count + 1;
    11a4:	3401      	adds	r4, #1
       media_2 = media_2 + buffer[i];
    11a6:	f8aa 1000 	strh.w	r1, [sl]
       count = count + 1;
    11aa:	b2a4      	uxth	r4, r4
   for (i = 0; i < WINDOW_SIZE; i++) 
    11ac:	3301      	adds	r3, #1
    11ae:	2b0a      	cmp	r3, #10
    11b0:	d1d9      	bne.n	1166 <thread_B_code+0x96>
   if (count != 0) 
    11b2:	b1cc      	cbz	r4, 11e8 <thread_B_code+0x118>
     var_bc = media_2 / count;
    11b4:	883d      	ldrh	r5, [r7, #0]
    11b6:	b2ad      	uxth	r5, r5
    11b8:	fbb5 f5f4 	udiv	r5, r5, r4
    11bc:	4b16      	ldr	r3, [pc, #88]	; (1218 <thread_B_code+0x148>)
   printk("adc reading %d: raw:%4u / %4u mV: \n\r", count, var_bc, (uint16_t)(3000 * var_bc / ((float) 1023)));
    11be:	f640 30b8 	movw	r0, #3000	; 0xbb8
    11c2:	601d      	str	r5, [r3, #0]
    11c4:	4368      	muls	r0, r5
    11c6:	f7ff fc43 	bl	a50 <__aeabi_i2f>
    11ca:	4659      	mov	r1, fp
    11cc:	f7ff fd48 	bl	c60 <__aeabi_fdiv>
    11d0:	f7ff fde2 	bl	d98 <__aeabi_f2uiz>
    11d4:	462a      	mov	r2, r5
    11d6:	b283      	uxth	r3, r0
    11d8:	4621      	mov	r1, r4
    11da:	4810      	ldr	r0, [pc, #64]	; (121c <thread_B_code+0x14c>)
    11dc:	f008 fd3b 	bl	9c56 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    11e0:	480f      	ldr	r0, [pc, #60]	; (1220 <thread_B_code+0x150>)
    11e2:	f007 f97b 	bl	84dc <z_impl_k_sem_give>
  {
    11e6:	e77e      	b.n	10e6 <thread_B_code+0x16>
     var_bc = 0;
    11e8:	4625      	mov	r5, r4
    11ea:	e7e7      	b.n	11bc <thread_B_code+0xec>
    11ec:	f3af 8000 	nop.w
    11f0:	9999999a 	.word	0x9999999a
    11f4:	3fb99999 	.word	0x3fb99999
    11f8:	0000ae5a 	.word	0x0000ae5a
    11fc:	20000920 	.word	0x20000920
    1200:	20001026 	.word	0x20001026
    1204:	2000100e 	.word	0x2000100e
    1208:	0000ae6a 	.word	0x0000ae6a
    120c:	20000984 	.word	0x20000984
    1210:	20001024 	.word	0x20001024
    1214:	20001022 	.word	0x20001022
    1218:	20000988 	.word	0x20000988
    121c:	0000ae7f 	.word	0x0000ae7f
    1220:	20000938 	.word	0x20000938
    1224:	447fc000 	.word	0x447fc000

00001228 <but1press_cbfunction>:
    dcToggleFlag1 = 1;
    1228:	4b01      	ldr	r3, [pc, #4]	; (1230 <but1press_cbfunction+0x8>)
    122a:	2201      	movs	r2, #1
    122c:	601a      	str	r2, [r3, #0]
}
    122e:	4770      	bx	lr
    1230:	200008ec 	.word	0x200008ec

00001234 <but2press_cbfunction>:
    dcToggleFlag2 = 1;
    1234:	4b01      	ldr	r3, [pc, #4]	; (123c <but2press_cbfunction+0x8>)
    1236:	2201      	movs	r2, #1
    1238:	601a      	str	r2, [r3, #0]
}
    123a:	4770      	bx	lr
    123c:	200008f0 	.word	0x200008f0

00001240 <but3press_cbfunction>:
    dcToggleFlag3 = 1;
    1240:	4b01      	ldr	r3, [pc, #4]	; (1248 <but3press_cbfunction+0x8>)
    1242:	2201      	movs	r2, #1
    1244:	601a      	str	r2, [r3, #0]
}
    1246:	4770      	bx	lr
    1248:	200008f4 	.word	0x200008f4

0000124c <but4press_cbfunction>:
    dcToggleFlag4 = 1;
    124c:	4b01      	ldr	r3, [pc, #4]	; (1254 <but4press_cbfunction+0x8>)
    124e:	2201      	movs	r2, #1
    1250:	601a      	str	r2, [r3, #0]
}
    1252:	4770      	bx	lr
    1254:	200008f8 	.word	0x200008f8

00001258 <z_impl_gpio_pin_configure>:
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    1258:	f412 6f40 	tst.w	r2, #3072	; 0xc00
{
    125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
    1260:	e9d0 a901 	ldrd	sl, r9, [r0, #4]
	struct gpio_driver_data *data =
    1264:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
    1268:	4605      	mov	r5, r0
    126a:	460e      	mov	r6, r1
    126c:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    126e:	d010      	beq.n	1292 <z_impl_gpio_pin_configure+0x3a>
    1270:	0593      	lsls	r3, r2, #22
    1272:	d40e      	bmi.n	1292 <z_impl_gpio_pin_configure+0x3a>
    1274:	4919      	ldr	r1, [pc, #100]	; (12dc <z_impl_gpio_pin_configure+0x84>)
    1276:	4a1a      	ldr	r2, [pc, #104]	; (12e0 <z_impl_gpio_pin_configure+0x88>)
    1278:	481a      	ldr	r0, [pc, #104]	; (12e4 <z_impl_gpio_pin_configure+0x8c>)
    127a:	f44f 733b 	mov.w	r3, #748	; 0x2ec
    127e:	f008 fcea 	bl	9c56 <printk>
    1282:	4819      	ldr	r0, [pc, #100]	; (12e8 <z_impl_gpio_pin_configure+0x90>)
    1284:	f008 fce7 	bl	9c56 <printk>
    1288:	4815      	ldr	r0, [pc, #84]	; (12e0 <z_impl_gpio_pin_configure+0x88>)
    128a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    128e:	f008 fc0b 	bl	9aa8 <assert_post_action>
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1292:	f8da 3000 	ldr.w	r3, [sl]
    1296:	2701      	movs	r7, #1
    1298:	40b7      	lsls	r7, r6
    129a:	421f      	tst	r7, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    129c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12a0:	d10e      	bne.n	12c0 <z_impl_gpio_pin_configure+0x68>
    12a2:	4912      	ldr	r1, [pc, #72]	; (12ec <z_impl_gpio_pin_configure+0x94>)
    12a4:	4a0e      	ldr	r2, [pc, #56]	; (12e0 <z_impl_gpio_pin_configure+0x88>)
    12a6:	480f      	ldr	r0, [pc, #60]	; (12e4 <z_impl_gpio_pin_configure+0x8c>)
    12a8:	f240 23fd 	movw	r3, #765	; 0x2fd
    12ac:	f008 fcd3 	bl	9c56 <printk>
    12b0:	480f      	ldr	r0, [pc, #60]	; (12f0 <z_impl_gpio_pin_configure+0x98>)
    12b2:	f008 fcd0 	bl	9c56 <printk>
    12b6:	480a      	ldr	r0, [pc, #40]	; (12e0 <z_impl_gpio_pin_configure+0x88>)
    12b8:	f240 21fd 	movw	r1, #765	; 0x2fd
    12bc:	f008 fbf4 	bl	9aa8 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    12c0:	f8d8 3000 	ldr.w	r3, [r8]
    12c4:	ea23 0707 	bic.w	r7, r3, r7
    12c8:	f8c8 7000 	str.w	r7, [r8]
	}

	return api->pin_configure(port, pin, flags);
    12cc:	f8d9 3000 	ldr.w	r3, [r9]
    12d0:	4622      	mov	r2, r4
    12d2:	4631      	mov	r1, r6
    12d4:	4628      	mov	r0, r5
}
    12d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_configure(port, pin, flags);
    12da:	4718      	bx	r3
    12dc:	0000ac3e 	.word	0x0000ac3e
    12e0:	0000ac14 	.word	0x0000ac14
    12e4:	0000ac83 	.word	0x0000ac83
    12e8:	0000aca0 	.word	0x0000aca0
    12ec:	0000acdb 	.word	0x0000acdb
    12f0:	0000ad19 	.word	0x0000ad19

000012f4 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12f4:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
    12f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12fa:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
    12fc:	6887      	ldr	r7, [r0, #8]
	const struct gpio_driver_data *const data =
    12fe:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1302:	2601      	movs	r6, #1
    1304:	408e      	lsls	r6, r1
    1306:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
    1308:	4604      	mov	r4, r0
    130a:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    130c:	d10e      	bne.n	132c <z_impl_gpio_pin_interrupt_configure.constprop.0+0x38>
    130e:	4910      	ldr	r1, [pc, #64]	; (1350 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x5c>)
    1310:	4a10      	ldr	r2, [pc, #64]	; (1354 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
    1312:	4811      	ldr	r0, [pc, #68]	; (1358 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x64>)
    1314:	f240 239d 	movw	r3, #669	; 0x29d
    1318:	f008 fc9d 	bl	9c56 <printk>
    131c:	480f      	ldr	r0, [pc, #60]	; (135c <z_impl_gpio_pin_interrupt_configure.constprop.0+0x68>)
    131e:	f008 fc9a 	bl	9c56 <printk>
    1322:	480c      	ldr	r0, [pc, #48]	; (1354 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
    1324:	f240 219d 	movw	r1, #669	; 0x29d
    1328:	f008 fbbe 	bl	9aa8 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    132c:	f8d8 3000 	ldr.w	r3, [r8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1330:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1332:	69be      	ldr	r6, [r7, #24]
    1334:	4629      	mov	r1, r5
    1336:	4620      	mov	r0, r4
    1338:	46b4      	mov	ip, r6
    133a:	bf18      	it	ne
    133c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
}
    1340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1344:	bf08      	it	eq
    1346:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    134a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    134e:	4760      	bx	ip
    1350:	0000acdb 	.word	0x0000acdb
    1354:	0000ac14 	.word	0x0000ac14
    1358:	0000ac83 	.word	0x0000ac83
    135c:	0000ad19 	.word	0x0000ad19

00001360 <thread_A_code>:
{
    1360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printk("Thread A Init\n\r");
    1364:	4829      	ldr	r0, [pc, #164]	; (140c <thread_A_code+0xac>)
	return z_impl_k_sem_take(sem, timeout);
    1366:	4e2a      	ldr	r6, [pc, #168]	; (1410 <thread_A_code+0xb0>)
    printk("Thread A Activated\n\r");
    1368:	4f2a      	ldr	r7, [pc, #168]	; (1414 <thread_A_code+0xb4>)
        printk("adc reading  raw: %4u / %4u mV: \n\r", var_ab, (uint16_t)(3000 * var_ab /((float)1023)));
    136a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 143c <thread_A_code+0xdc>
{
    136e:	b086      	sub	sp, #24
  printk("Thread A Init\n\r");
    1370:	f008 fc71 	bl	9c56 <printk>
    1374:	f04f 33ff 	mov.w	r3, #4294967295
    1378:	f04f 32ff 	mov.w	r2, #4294967295
    137c:	4630      	mov	r0, r6
    137e:	f007 f8f1 	bl	8564 <z_impl_k_sem_take>
    printk("Thread A Activated\n\r");
    1382:	4638      	mov	r0, r7
    1384:	f008 fc67 	bl	9c56 <printk>
	const struct adc_sequence sequence = {
    1388:	4d23      	ldr	r5, [pc, #140]	; (1418 <thread_A_code+0xb8>)
    138a:	2214      	movs	r2, #20
    138c:	2100      	movs	r1, #0
    138e:	a801      	add	r0, sp, #4
    1390:	f008 fcc7 	bl	9d22 <memset>
    1394:	2302      	movs	r3, #2
    1396:	e9cd 5303 	strd	r5, r3, [sp, #12]
    139a:	9302      	str	r3, [sp, #8]
    139c:	230a      	movs	r3, #10
    139e:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
    13a2:	4b1e      	ldr	r3, [pc, #120]	; (141c <thread_A_code+0xbc>)
    13a4:	6818      	ldr	r0, [r3, #0]
    13a6:	b960      	cbnz	r0, 13c2 <thread_A_code+0x62>
            printk("adc_sample(): error, must bind to adc first \n\r");
    13a8:	481d      	ldr	r0, [pc, #116]	; (1420 <thread_A_code+0xc0>)
    13aa:	f008 fc54 	bl	9c56 <printk>
            return -1;
    13ae:	f04f 34ff 	mov.w	r4, #4294967295
      printk("adc_sample() failed with error code %d\n\r", err);
    13b2:	481c      	ldr	r0, [pc, #112]	; (1424 <thread_A_code+0xc4>)
    13b4:	4621      	mov	r1, r4
    13b6:	f008 fc4e 	bl	9c56 <printk>
	z_impl_k_sem_give(sem);
    13ba:	481b      	ldr	r0, [pc, #108]	; (1428 <thread_A_code+0xc8>)
    13bc:	f007 f88e 	bl	84dc <z_impl_k_sem_give>
  {
    13c0:	e7d8      	b.n	1374 <thread_A_code+0x14>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    13c2:	6883      	ldr	r3, [r0, #8]
    13c4:	a901      	add	r1, sp, #4
    13c6:	685b      	ldr	r3, [r3, #4]
    13c8:	4798      	blx	r3
	if (ret) {
    13ca:	4604      	mov	r4, r0
    13cc:	b140      	cbz	r0, 13e0 <thread_A_code+0x80>
            printk("adc_read() failed with code %d\n", ret);
    13ce:	4601      	mov	r1, r0
    13d0:	4816      	ldr	r0, [pc, #88]	; (142c <thread_A_code+0xcc>)
    13d2:	f008 fc40 	bl	9c56 <printk>
    if (err) 
    13d6:	e7ec      	b.n	13b2 <thread_A_code+0x52>
        printk("adc reading out of range\n\r");
    13d8:	4815      	ldr	r0, [pc, #84]	; (1430 <thread_A_code+0xd0>)
    13da:	f008 fc3c 	bl	9c56 <printk>
    13de:	e7ec      	b.n	13ba <thread_A_code+0x5a>
      if (adc_sample_buffer[0] > 1023) 
    13e0:	882c      	ldrh	r4, [r5, #0]
    13e2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    13e6:	d2f7      	bcs.n	13d8 <thread_A_code+0x78>
        var_ab = adc_sample_buffer[0];
    13e8:	4b12      	ldr	r3, [pc, #72]	; (1434 <thread_A_code+0xd4>)
        printk("adc reading  raw: %4u / %4u mV: \n\r", var_ab, (uint16_t)(3000 * var_ab /((float)1023)));
    13ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
        var_ab = adc_sample_buffer[0];
    13ee:	601c      	str	r4, [r3, #0]
        printk("adc reading  raw: %4u / %4u mV: \n\r", var_ab, (uint16_t)(3000 * var_ab /((float)1023)));
    13f0:	4360      	muls	r0, r4
    13f2:	f7ff fb2d 	bl	a50 <__aeabi_i2f>
    13f6:	4641      	mov	r1, r8
    13f8:	f7ff fc32 	bl	c60 <__aeabi_fdiv>
    13fc:	f7ff fccc 	bl	d98 <__aeabi_f2uiz>
    1400:	4621      	mov	r1, r4
    1402:	b282      	uxth	r2, r0
    1404:	480c      	ldr	r0, [pc, #48]	; (1438 <thread_A_code+0xd8>)
    1406:	f008 fc26 	bl	9c56 <printk>
    140a:	e7d6      	b.n	13ba <thread_A_code+0x5a>
    140c:	0000ad2b 	.word	0x0000ad2b
    1410:	20000908 	.word	0x20000908
    1414:	0000ad3b 	.word	0x0000ad3b
    1418:	2000100c 	.word	0x2000100c
    141c:	200008b0 	.word	0x200008b0
    1420:	0000ad50 	.word	0x0000ad50
    1424:	0000ad9f 	.word	0x0000ad9f
    1428:	20000920 	.word	0x20000920
    142c:	0000ad7f 	.word	0x0000ad7f
    1430:	0000adc8 	.word	0x0000adc8
    1434:	20000984 	.word	0x20000984
    1438:	0000ade3 	.word	0x0000ade3
    143c:	447fc000 	.word	0x447fc000

00001440 <thread_C_code>:


/* ###################    THREAD C    ######################*/

void thread_C_code(void *argA , void *argB, void *argC)
{
    1440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pwm = 0;
  int nits = 0;
  int u;
  int flag = 0;

  printk("Thread C Init\n\r");
    1444:	4826      	ldr	r0, [pc, #152]	; (14e0 <thread_C_code+0xa0>)
	return z_impl_k_sem_take(sem, timeout);
    1446:	4f27      	ldr	r7, [pc, #156]	; (14e4 <thread_C_code+0xa4>)

  while(1)
  {
    k_sem_take(&sem_bc , K_FOREVER);

    printk("Thread C Activated\n\r");
    1448:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1500 <thread_C_code+0xc0>

    ret = 0;
    flag = 1;

    nits = (uint16_t)(3000 * var_bc / ((float) 1023));
    144c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1504 <thread_C_code+0xc4>
  printk("Thread C Init\n\r");
    1450:	f008 fc01 	bl	9c56 <printk>
    1454:	f04f 32ff 	mov.w	r2, #4294967295
    1458:	f04f 33ff 	mov.w	r3, #4294967295
    145c:	4638      	mov	r0, r7
    145e:	f007 f881 	bl	8564 <z_impl_k_sem_take>
    printk("Thread C Activated\n\r");
    1462:	4640      	mov	r0, r8
    1464:	f008 fbf7 	bl	9c56 <printk>
    nits = (uint16_t)(3000 * var_bc / ((float) 1023));
    1468:	4b1f      	ldr	r3, [pc, #124]	; (14e8 <thread_C_code+0xa8>)
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1470:	4358      	muls	r0, r3
    1472:	f7ff faed 	bl	a50 <__aeabi_i2f>
    1476:	4649      	mov	r1, r9
    1478:	f7ff fbf2 	bl	c60 <__aeabi_fdiv>
    147c:	f7ff fc8c 	bl	d98 <__aeabi_f2uiz>
    1480:	b280      	uxth	r0, r0
    nits = 100-((nits-900)/16);
    1482:	f5b0 7661 	subs.w	r6, r0, #900	; 0x384
    1486:	bf44      	itt	mi
    1488:	f46f 735d 	mvnmi.w	r3, #884	; 0x374
    148c:	18c6      	addmi	r6, r0, r3
    148e:	1136      	asrs	r6, r6, #4
    1490:	4276      	negs	r6, r6
    1492:	f106 0564 	add.w	r5, r6, #100	; 0x64
    1496:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    149a:	2d64      	cmp	r5, #100	; 0x64
    149c:	bfa8      	it	ge
    149e:	2564      	movge	r5, #100	; 0x64
    if(nits>=100 || nits <= 0) flag = 0;
    if(nits>=100) nits = 100;
    if(nits<= 0) nits = 0;
    printf("nits -> %d %\n",nits);
    14a0:	4629      	mov	r1, r5
    14a2:	4812      	ldr	r0, [pc, #72]	; (14ec <thread_C_code+0xac>)
    14a4:	f002 f928 	bl	36f8 <printf>
    /*
    pwm = (uint16_t)(1000 * var_bc * ((float)3 / 1023));
    if(pwm > 2800) pwm = 0;
    else if(pwm<800) pwm = 100;
    else pwm = -0.05*pwm+145; */
    if(flag){
    14a8:	3663      	adds	r6, #99	; 0x63
    14aa:	4911      	ldr	r1, [pc, #68]	; (14f0 <thread_C_code+0xb0>)
    14ac:	d308      	bcc.n	14c0 <thread_C_code+0x80>
      if(nits>ref) u--;
    14ae:	680b      	ldr	r3, [r1, #0]
    14b0:	42ab      	cmp	r3, r5
    14b2:	da12      	bge.n	14da <thread_C_code+0x9a>
    14b4:	3c01      	subs	r4, #1
      else if(nits<ref) u++;

      if(u >= 100) u = 100;
    14b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    14ba:	2c64      	cmp	r4, #100	; 0x64
    14bc:	bfa8      	it	ge
    14be:	2464      	movge	r4, #100	; 0x64
      if(u<=0) u = 0;
    }

    printk("ref -> %d | nits -> %d | u -> %d",ref,nits,u);
    14c0:	4623      	mov	r3, r4
    14c2:	462a      	mov	r2, r5
    14c4:	6809      	ldr	r1, [r1, #0]
    14c6:	480b      	ldr	r0, [pc, #44]	; (14f4 <thread_C_code+0xb4>)
    14c8:	f008 fbc5 	bl	9c56 <printk>
    var_cd = 50;
    14cc:	4b0a      	ldr	r3, [pc, #40]	; (14f8 <thread_C_code+0xb8>)
    14ce:	2232      	movs	r2, #50	; 0x32
    14d0:	601a      	str	r2, [r3, #0]
	z_impl_k_sem_give(sem);
    14d2:	480a      	ldr	r0, [pc, #40]	; (14fc <thread_C_code+0xbc>)
    14d4:	f007 f802 	bl	84dc <z_impl_k_sem_give>
  {
    14d8:	e7bc      	b.n	1454 <thread_C_code+0x14>
      else if(nits<ref) u++;
    14da:	bfc8      	it	gt
    14dc:	3401      	addgt	r4, #1
    14de:	e7ea      	b.n	14b6 <thread_C_code+0x76>
    14e0:	0000ae06 	.word	0x0000ae06
    14e4:	20000938 	.word	0x20000938
    14e8:	20000988 	.word	0x20000988
    14ec:	0000ae2b 	.word	0x0000ae2b
    14f0:	200000b0 	.word	0x200000b0
    14f4:	0000ae39 	.word	0x0000ae39
    14f8:	2000098c 	.word	0x2000098c
    14fc:	20000950 	.word	0x20000950
    1500:	0000ae16 	.word	0x0000ae16
    1504:	447fc000 	.word	0x447fc000

00001508 <thread_D_code>:
    k_sem_give(&sem_cd);
  }
}

void thread_D_code(void *argA , void *argB, void *argC)
{
    1508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i;
  int ret = 0;
  int pwm = 0;

  printk("Thread D Init\n\r");
    150c:	483e      	ldr	r0, [pc, #248]	; (1608 <thread_D_code+0x100>)
{
    150e:	b087      	sub	sp, #28
  printk("Thread D Init\n\r");
    1510:	f008 fba1 	bl	9c56 <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1514:	483d      	ldr	r0, [pc, #244]	; (160c <thread_D_code+0x104>)
    1516:	f005 f8c1 	bl	669c <z_impl_device_get_binding>

  const struct device *gpio0_dev;

  gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));

  if (gpio0_dev == NULL) {
    151a:	4604      	mov	r4, r0
    151c:	b928      	cbnz	r0, 152a <thread_D_code+0x22>
    printk("Error: Failed to bind to GPIO0\n\r");
    151e:	483c      	ldr	r0, [pc, #240]	; (1610 <thread_D_code+0x108>)
  const struct device *pwm0_dev;

  pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));

  if (pwm0_dev == NULL) {
    printk("Error: Failed to bind to PWM0\n r");
    1520:	f008 fb99 	bl	9c56 <printk>
      printk("Error %d: failed to set pulse width\n", ret);
      return;
    }

  }
}
    1524:	b007      	add	sp, #28
    1526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    printk("Bind to GPIO0 successfull \n\r");
    152a:	483a      	ldr	r0, [pc, #232]	; (1614 <thread_D_code+0x10c>)
    152c:	f008 fb93 	bl	9c56 <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    1530:	210d      	movs	r1, #13
    1532:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
    1536:	4620      	mov	r0, r4
    1538:	f7ff fe8e 	bl	1258 <z_impl_gpio_pin_configure>
  if (ret < 0) {
    153c:	1e01      	subs	r1, r0, #0
    153e:	da03      	bge.n	1548 <thread_D_code+0x40>
    printk("gpio_pin_configure() failed with error %d\n\r", ret);
    1540:	4835      	ldr	r0, [pc, #212]	; (1618 <thread_D_code+0x110>)
      printk("Error %d: failed to set pulse width\n", ret);
    1542:	f008 fb88 	bl	9c56 <printk>
      return;
    1546:	e7ed      	b.n	1524 <thread_D_code+0x1c>
    1548:	4834      	ldr	r0, [pc, #208]	; (161c <thread_D_code+0x114>)
    154a:	f005 f8a7 	bl	669c <z_impl_device_get_binding>
  if (pwm0_dev == NULL) {
    154e:	4604      	mov	r4, r0
    1550:	b908      	cbnz	r0, 1556 <thread_D_code+0x4e>
    printk("Error: Failed to bind to PWM0\n r");
    1552:	4833      	ldr	r0, [pc, #204]	; (1620 <thread_D_code+0x118>)
    1554:	e7e4      	b.n	1520 <thread_D_code+0x18>
    printk("Bind to PWM0 successful\n\r");
    1556:	4833      	ldr	r0, [pc, #204]	; (1624 <thread_D_code+0x11c>)
    1558:	f008 fb7d 	bl	9c56 <printk>
	return z_impl_k_sem_take(sem, timeout);
    155c:	f04f 32ff 	mov.w	r2, #4294967295
    1560:	f04f 33ff 	mov.w	r3, #4294967295
    1564:	4830      	ldr	r0, [pc, #192]	; (1628 <thread_D_code+0x120>)
    1566:	f006 fffd 	bl	8564 <z_impl_k_sem_take>
    printk("Thread D Activated\n\r");
    156a:	4830      	ldr	r0, [pc, #192]	; (162c <thread_D_code+0x124>)
    156c:	f008 fb73 	bl	9c56 <printk>
        pwmPeriod_us, (unsigned int)((pwmPeriod_us * var_cd) / 100), PWM_POLARITY_NORMAL);
    1570:	4b2f      	ldr	r3, [pc, #188]	; (1630 <thread_D_code+0x128>)
    1572:	681d      	ldr	r5, [r3, #0]
    1574:	f246 17a8 	movw	r7, #25000	; 0x61a8
    1578:	437d      	muls	r5, r7
    ret = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN,
    157a:	2364      	movs	r3, #100	; 0x64
    157c:	fbb5 f5f3 	udiv	r5, r5, r3
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
    1580:	68a3      	ldr	r3, [r4, #8]
    1582:	aa04      	add	r2, sp, #16
    1584:	685b      	ldr	r3, [r3, #4]
    1586:	210d      	movs	r1, #13
    1588:	4620      	mov	r0, r4
    158a:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
    158c:	4680      	mov	r8, r0
    158e:	b118      	cbz	r0, 1598 <thread_D_code+0x90>
		return -EIO;
    1590:	f06f 0104 	mvn.w	r1, #4
      printk("Error %d: failed to set pulse width\n", ret);
    1594:	4827      	ldr	r0, [pc, #156]	; (1634 <thread_D_code+0x12c>)
    1596:	e7d4      	b.n	1542 <thread_D_code+0x3a>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    1598:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
    159c:	fba6 ab07 	umull	sl, fp, r6, r7
    15a0:	fb07 bb03 	mla	fp, r7, r3, fp
    15a4:	4a24      	ldr	r2, [pc, #144]	; (1638 <thread_D_code+0x130>)
    15a6:	9303      	str	r3, [sp, #12]
    15a8:	4650      	mov	r0, sl
    15aa:	2300      	movs	r3, #0
    15ac:	4659      	mov	r1, fp
    15ae:	f7ff fc13 	bl	dd8 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
    15b2:	4b22      	ldr	r3, [pc, #136]	; (163c <thread_D_code+0x134>)
    15b4:	f04f 32ff 	mov.w	r2, #4294967295
    15b8:	455b      	cmp	r3, fp
    15ba:	bf08      	it	eq
    15bc:	4552      	cmpeq	r2, sl
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    15be:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
    15c0:	d202      	bcs.n	15c8 <thread_D_code+0xc0>
		return -ENOTSUP;
    15c2:	f06f 0185 	mvn.w	r1, #133	; 0x85
    15c6:	e7e5      	b.n	1594 <thread_D_code+0x8c>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    15c8:	9b03      	ldr	r3, [sp, #12]
    15ca:	4a1b      	ldr	r2, [pc, #108]	; (1638 <thread_D_code+0x130>)
    15cc:	fba5 6706 	umull	r6, r7, r5, r6
    15d0:	fb05 7703 	mla	r7, r5, r3, r7
    15d4:	4630      	mov	r0, r6
    15d6:	2300      	movs	r3, #0
    15d8:	4639      	mov	r1, r7
    15da:	f7ff fbfd 	bl	dd8 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    15de:	4a17      	ldr	r2, [pc, #92]	; (163c <thread_D_code+0x134>)
    15e0:	f04f 31ff 	mov.w	r1, #4294967295
    15e4:	42ba      	cmp	r2, r7
    15e6:	bf08      	it	eq
    15e8:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    15ea:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    15ec:	d3e9      	bcc.n	15c2 <thread_D_code+0xba>
	return api->pin_set(dev, pwm, period, pulse, flags);
    15ee:	68a2      	ldr	r2, [r4, #8]
    15f0:	f8cd 8000 	str.w	r8, [sp]
    15f4:	6815      	ldr	r5, [r2, #0]
    15f6:	210d      	movs	r1, #13
    15f8:	464a      	mov	r2, r9
    15fa:	4620      	mov	r0, r4
    15fc:	47a8      	blx	r5
    if (ret) 
    15fe:	4601      	mov	r1, r0
    1600:	2800      	cmp	r0, #0
    1602:	d0ab      	beq.n	155c <thread_D_code+0x54>
    1604:	e7c6      	b.n	1594 <thread_D_code+0x8c>
    1606:	bf00      	nop
    1608:	0000aea4 	.word	0x0000aea4
    160c:	0000aeb4 	.word	0x0000aeb4
    1610:	0000aebb 	.word	0x0000aebb
    1614:	0000aedc 	.word	0x0000aedc
    1618:	0000aef9 	.word	0x0000aef9
    161c:	0000af25 	.word	0x0000af25
    1620:	0000af2b 	.word	0x0000af2b
    1624:	0000af4c 	.word	0x0000af4c
    1628:	20000950 	.word	0x20000950
    162c:	0000af66 	.word	0x0000af66
    1630:	2000098c 	.word	0x2000098c
    1634:	0000af7b 	.word	0x0000af7b
    1638:	000f4240 	.word	0x000f4240
    163c:	000f423f 	.word	0x000f423f

00001640 <uart_cb>:
        return;
    }
}

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    1640:	b538      	push	{r3, r4, r5, lr}
    1642:	780b      	ldrb	r3, [r1, #0]
    1644:	460c      	mov	r4, r1
    1646:	2b06      	cmp	r3, #6
    1648:	d83c      	bhi.n	16c4 <uart_cb+0x84>
    164a:	e8df f003 	tbb	[pc, r3]
    164e:	0904      	.short	0x0904
    1650:	211f1d0b 	.word	0x211f1d0b
    1654:	39          	.byte	0x39
    1655:	00          	.byte	0x00
    int err;

    switch (evt->type) {
	
        case UART_TX_DONE:
		printk("UART_TX_DONE event \n\r");
    1656:	481c      	ldr	r0, [pc, #112]	; (16c8 <uart_cb+0x88>)
	default:
                printk("UART: unknown event \n\r");
		break;
    }

    1658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                printk("UART: unknown event \n\r");
    165c:	f008 bafb 	b.w	9c56 <printk>
		printk("UART_TX_ABORTED event \n\r");
    1660:	481a      	ldr	r0, [pc, #104]	; (16cc <uart_cb+0x8c>)
    1662:	e7f9      	b.n	1658 <uart_cb+0x18>
		printk("UART_RX_RDY event \n\r");
    1664:	481a      	ldr	r0, [pc, #104]	; (16d0 <uart_cb+0x90>)
                memcpy(rx_chars,&(rx_buf[evt->data.rx.offset]),evt->data.rx.len); 
    1666:	4d1b      	ldr	r5, [pc, #108]	; (16d4 <uart_cb+0x94>)
		printk("UART_RX_RDY event \n\r");
    1668:	f008 faf5 	bl	9c56 <printk>
                memcpy(rx_chars,&(rx_buf[evt->data.rx.offset]),evt->data.rx.len); 
    166c:	68a3      	ldr	r3, [r4, #8]
    166e:	491a      	ldr	r1, [pc, #104]	; (16d8 <uart_cb+0x98>)
    1670:	68e2      	ldr	r2, [r4, #12]
    1672:	4419      	add	r1, r3
    1674:	4628      	mov	r0, r5
    1676:	f008 fb49 	bl	9d0c <memcpy>
                rx_chars[evt->data.rx.len]=0; /* Terminate the string */
    167a:	68e3      	ldr	r3, [r4, #12]
    167c:	2200      	movs	r2, #0
    167e:	54ea      	strb	r2, [r5, r3]
                uart_rx_rdy_flag = 1;
    1680:	4b16      	ldr	r3, [pc, #88]	; (16dc <uart_cb+0x9c>)
    1682:	2201      	movs	r2, #1
    1684:	601a      	str	r2, [r3, #0]
    1686:	bd38      	pop	{r3, r4, r5, pc}
		printk("UART_RX_BUF_REQUEST event \n\r");
    1688:	4815      	ldr	r0, [pc, #84]	; (16e0 <uart_cb+0xa0>)
    168a:	e7e5      	b.n	1658 <uart_cb+0x18>
		printk("UART_RX_BUF_RELEASED event \n\r");
    168c:	4815      	ldr	r0, [pc, #84]	; (16e4 <uart_cb+0xa4>)
    168e:	e7e3      	b.n	1658 <uart_cb+0x18>
                printk("UART_RX_DISABLED event \n\r");
    1690:	4815      	ldr	r0, [pc, #84]	; (16e8 <uart_cb+0xa8>)
    1692:	f008 fae0 	bl	9c56 <printk>
		err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    1696:	4b15      	ldr	r3, [pc, #84]	; (16ec <uart_cb+0xac>)
    1698:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    169a:	6883      	ldr	r3, [r0, #8]
    169c:	490e      	ldr	r1, [pc, #56]	; (16d8 <uart_cb+0x98>)
    169e:	68dc      	ldr	r4, [r3, #12]
    16a0:	223c      	movs	r2, #60	; 0x3c
    16a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    16a6:	47a0      	blx	r4
                if (err) {
    16a8:	4601      	mov	r1, r0
    16aa:	2800      	cmp	r0, #0
    16ac:	d0eb      	beq.n	1686 <uart_cb+0x46>
                    printk("uart_rx_enable() error. Error code:%d\n\r",err);
    16ae:	4810      	ldr	r0, [pc, #64]	; (16f0 <uart_cb+0xb0>)
    16b0:	f008 fad1 	bl	9c56 <printk>
    16b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1
void _exit(int status);
static inline void exit(int status)
{
	_exit(status);
    16b8:	f04f 30ff 	mov.w	r0, #4294967295
    16bc:	f002 b814 	b.w	36e8 <_exit>
		printk("UART_RX_STOPPED event \n\r");
    16c0:	480c      	ldr	r0, [pc, #48]	; (16f4 <uart_cb+0xb4>)
    16c2:	e7c9      	b.n	1658 <uart_cb+0x18>
                printk("UART: unknown event \n\r");
    16c4:	480c      	ldr	r0, [pc, #48]	; (16f8 <uart_cb+0xb8>)
    16c6:	e7c7      	b.n	1658 <uart_cb+0x18>
    16c8:	0000afa0 	.word	0x0000afa0
    16cc:	0000afb6 	.word	0x0000afb6
    16d0:	0000afcf 	.word	0x0000afcf
    16d4:	200010a0 	.word	0x200010a0
    16d8:	20001064 	.word	0x20001064
    16dc:	20000980 	.word	0x20000980
    16e0:	0000afe4 	.word	0x0000afe4
    16e4:	0000b001 	.word	0x0000b001
    16e8:	0000b01f 	.word	0x0000b01f
    16ec:	2000097c 	.word	0x2000097c
    16f0:	0000b039 	.word	0x0000b039
    16f4:	0000b061 	.word	0x0000b061
    16f8:	0000b07a 	.word	0x0000b07a

000016fc <clock>:
  count += thread_1_period;
    16fc:	4b1b      	ldr	r3, [pc, #108]	; (176c <clock+0x70>)
    16fe:	681a      	ldr	r2, [r3, #0]
    1700:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
void clock(){
    1704:	b410      	push	{r4}
  count += thread_1_period;
    1706:	601a      	str	r2, [r3, #0]
  if (count >= 1000){
    1708:	681a      	ldr	r2, [r3, #0]
    170a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    170e:	4a18      	ldr	r2, [pc, #96]	; (1770 <clock+0x74>)
    1710:	db06      	blt.n	1720 <clock+0x24>
     seconds++;
    1712:	6811      	ldr	r1, [r2, #0]
    1714:	3101      	adds	r1, #1
    1716:	6011      	str	r1, [r2, #0]
     count -= 1000;
    1718:	6819      	ldr	r1, [r3, #0]
    171a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
    171e:	6019      	str	r1, [r3, #0]
  if (seconds >= 60){
    1720:	6813      	ldr	r3, [r2, #0]
    1722:	2b3b      	cmp	r3, #59	; 0x3b
    1724:	4b13      	ldr	r3, [pc, #76]	; (1774 <clock+0x78>)
    1726:	dd05      	ble.n	1734 <clock+0x38>
     minutes++;
    1728:	6819      	ldr	r1, [r3, #0]
    172a:	3101      	adds	r1, #1
    172c:	6019      	str	r1, [r3, #0]
     seconds -= 60;
    172e:	6811      	ldr	r1, [r2, #0]
    1730:	393c      	subs	r1, #60	; 0x3c
    1732:	6011      	str	r1, [r2, #0]
  if (minutes >= 60){
    1734:	6819      	ldr	r1, [r3, #0]
    1736:	4810      	ldr	r0, [pc, #64]	; (1778 <clock+0x7c>)
    1738:	293b      	cmp	r1, #59	; 0x3b
    173a:	dd05      	ble.n	1748 <clock+0x4c>
     hours++;
    173c:	6801      	ldr	r1, [r0, #0]
    173e:	3101      	adds	r1, #1
    1740:	6001      	str	r1, [r0, #0]
     minutes -= 60;
    1742:	6819      	ldr	r1, [r3, #0]
    1744:	393c      	subs	r1, #60	; 0x3c
    1746:	6019      	str	r1, [r3, #0]
  if (hours >= 24){
    1748:	6801      	ldr	r1, [r0, #0]
    174a:	2917      	cmp	r1, #23
    174c:	dd06      	ble.n	175c <clock+0x60>
     days++;
    174e:	4c0b      	ldr	r4, [pc, #44]	; (177c <clock+0x80>)
    1750:	6821      	ldr	r1, [r4, #0]
    1752:	3101      	adds	r1, #1
    1754:	6021      	str	r1, [r4, #0]
     minutes -= 24;
    1756:	6819      	ldr	r1, [r3, #0]
    1758:	3918      	subs	r1, #24
    175a:	6019      	str	r1, [r3, #0]
  printk("seconds -> %d | minutes -> %d | hours -> %d\n",seconds,minutes,hours);
    175c:	6811      	ldr	r1, [r2, #0]
}
    175e:	bc10      	pop	{r4}
  printk("seconds -> %d | minutes -> %d | hours -> %d\n",seconds,minutes,hours);
    1760:	681a      	ldr	r2, [r3, #0]
    1762:	6803      	ldr	r3, [r0, #0]
    1764:	4806      	ldr	r0, [pc, #24]	; (1780 <clock+0x84>)
    1766:	f008 ba76 	b.w	9c56 <printk>
    176a:	bf00      	nop
    176c:	200008e4 	.word	0x200008e4
    1770:	20000904 	.word	0x20000904
    1774:	20000900 	.word	0x20000900
    1778:	200008fc 	.word	0x200008fc
    177c:	200008e8 	.word	0x200008e8
    1780:	0000b091 	.word	0x0000b091

00001784 <thread_1_code>:
{
    1784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  printk("Thread 1 Init\n\r");
    1788:	4853      	ldr	r0, [pc, #332]	; (18d8 <thread_1_code+0x154>)
    178a:	f008 fa64 	bl	9c56 <printk>
	return z_impl_k_uptime_ticks();
    178e:	f008 ff80 	bl	a692 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    1792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1796:	460a      	mov	r2, r1
    1798:	fba0 0103 	umull	r0, r1, r0, r3
    179c:	fb03 1102 	mla	r1, r3, r2, r1
    17a0:	0bc3      	lsrs	r3, r0, #15
    17a2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    17a6:	0bca      	lsrs	r2, r1, #15
  release_time = k_uptime_get() + thread_1_period;
    17a8:	f513 74fa 	adds.w	r4, r3, #500	; 0x1f4
    printk("Thread 1 Activated\n\r");
    17ac:	f8df 8160 	ldr.w	r8, [pc, #352]	; 1910 <thread_1_code+0x18c>
    if (uart_rx_rdy_flag == 1) {
    17b0:	4f4a      	ldr	r7, [pc, #296]	; (18dc <thread_1_code+0x158>)
      sprintf(rep_mesg, "You typed [%s]\n\r", rx_chars);
    17b2:	f8df 9160 	ldr.w	r9, [pc, #352]	; 1914 <thread_1_code+0x190>
  release_time = k_uptime_get() + thread_1_period;
    17b6:	f142 0500 	adc.w	r5, r2, #0
  int toggle_mode = 1;
    17ba:	2601      	movs	r6, #1
    printk("Thread 1 Activated\n\r");
    17bc:	4640      	mov	r0, r8
    17be:	f008 fa4a 	bl	9c56 <printk>
    clock();
    17c2:	f7ff ff9b 	bl	16fc <clock>
    if (uart_rx_rdy_flag == 1) {
    17c6:	683b      	ldr	r3, [r7, #0]
    17c8:	2b01      	cmp	r3, #1
    17ca:	d11d      	bne.n	1808 <thread_1_code+0x84>
      sprintf(rep_mesg, "You typed [%s]\n\r", rx_chars);
    17cc:	464a      	mov	r2, r9
    17ce:	4944      	ldr	r1, [pc, #272]	; (18e0 <thread_1_code+0x15c>)
    17d0:	4844      	ldr	r0, [pc, #272]	; (18e4 <thread_1_code+0x160>)
      uart_rx_rdy_flag = 0;
    17d2:	2300      	movs	r3, #0
    17d4:	603b      	str	r3, [r7, #0]
      sprintf(rep_mesg, "You typed [%s]\n\r", rx_chars);
    17d6:	f001 ffa1 	bl	371c <sprintf>
      err = uart_tx(uart_dev, rep_mesg, strlen(rep_mesg), SYS_FOREVER_MS);
    17da:	4b43      	ldr	r3, [pc, #268]	; (18e8 <thread_1_code+0x164>)
    17dc:	4841      	ldr	r0, [pc, #260]	; (18e4 <thread_1_code+0x160>)
    17de:	f8d3 a000 	ldr.w	sl, [r3]
    17e2:	f008 fa77 	bl	9cd4 <strlen>
    17e6:	4602      	mov	r2, r0
	return api->tx(dev, buf, len, timeout);
    17e8:	f8da 3008 	ldr.w	r3, [sl, #8]
    17ec:	493d      	ldr	r1, [pc, #244]	; (18e4 <thread_1_code+0x160>)
    17ee:	f8d3 b004 	ldr.w	fp, [r3, #4]
    17f2:	4650      	mov	r0, sl
    17f4:	f04f 33ff 	mov.w	r3, #4294967295
    17f8:	47d8      	blx	fp
      if (err) {
    17fa:	4601      	mov	r1, r0
    17fc:	b120      	cbz	r0, 1808 <thread_1_code+0x84>
}
    17fe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        printk("uart_tx() error. Error code:%d\n\r", err);
    1802:	483a      	ldr	r0, [pc, #232]	; (18ec <thread_1_code+0x168>)
    1804:	f008 ba27 	b.w	9c56 <printk>
    if(toggle_mode) 
    1808:	b386      	cbz	r6, 186c <thread_1_code+0xe8>
        if(dcToggleFlag1 == 1) 
    180a:	4b39      	ldr	r3, [pc, #228]	; (18f0 <thread_1_code+0x16c>)
    180c:	681a      	ldr	r2, [r3, #0]
    180e:	2a01      	cmp	r2, #1
           dcToggleFlag1 = 0;
    1810:	bf04      	itt	eq
    1812:	2600      	moveq	r6, #0
    1814:	601e      	streq	r6, [r3, #0]
	z_impl_k_sem_give(sem);
    1816:	4837      	ldr	r0, [pc, #220]	; (18f4 <thread_1_code+0x170>)
    1818:	f006 fe60 	bl	84dc <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    181c:	f008 ff39 	bl	a692 <z_impl_k_uptime_ticks>
    1820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1824:	460a      	mov	r2, r1
    1826:	fba0 0103 	umull	r0, r1, r0, r3
    182a:	fb03 1102 	mla	r1, r3, r2, r1
    182e:	0bc2      	lsrs	r2, r0, #15
    1830:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    1834:	0bcb      	lsrs	r3, r1, #15
    if (fin_time < release_time) 
    1836:	42a2      	cmp	r2, r4
    1838:	eb73 0105 	sbcs.w	r1, r3, r5
    183c:	dabe      	bge.n	17bc <thread_1_code+0x38>
      k_msleep(release_time - fin_time);
    183e:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    1842:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
    1846:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    184a:	f240 30e7 	movw	r0, #999	; 0x3e7
    184e:	2100      	movs	r1, #0
    1850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1854:	2300      	movs	r3, #0
    1856:	fbce 010c 	smlal	r0, r1, lr, ip
    185a:	f7ff fabd 	bl	dd8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    185e:	f006 fcd1 	bl	8204 <z_impl_k_sleep>
      release_time += thread_1_period;
    1862:	f514 74fa 	adds.w	r4, r4, #500	; 0x1f4
    1866:	f145 0500 	adc.w	r5, r5, #0
    186a:	e7a7      	b.n	17bc <thread_1_code+0x38>
       if(dcToggleFlag2 == 1) 
    186c:	4a22      	ldr	r2, [pc, #136]	; (18f8 <thread_1_code+0x174>)
    186e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1918 <thread_1_code+0x194>
    1872:	6813      	ldr	r3, [r2, #0]
    1874:	2b01      	cmp	r3, #1
          dcToggleFlag2 = 0;
    1876:	bf08      	it	eq
    1878:	6016      	streq	r6, [r2, #0]
       if(dcToggleFlag3 == 1) 
    187a:	4a20      	ldr	r2, [pc, #128]	; (18fc <thread_1_code+0x178>)
          toggle_mode = 1;
    187c:	bf08      	it	eq
    187e:	461e      	moveq	r6, r3
       if(dcToggleFlag3 == 1) 
    1880:	6813      	ldr	r3, [r2, #0]
    1882:	2b01      	cmp	r3, #1
    1884:	d106      	bne.n	1894 <thread_1_code+0x110>
          ref-=10;
    1886:	f8da 3000 	ldr.w	r3, [sl]
    188a:	3b0a      	subs	r3, #10
    188c:	f8ca 3000 	str.w	r3, [sl]
          dcToggleFlag3 = 0;
    1890:	2300      	movs	r3, #0
    1892:	6013      	str	r3, [r2, #0]
       if(dcToggleFlag4 == 1) 
    1894:	4a1a      	ldr	r2, [pc, #104]	; (1900 <thread_1_code+0x17c>)
    1896:	6813      	ldr	r3, [r2, #0]
    1898:	2b01      	cmp	r3, #1
    189a:	d106      	bne.n	18aa <thread_1_code+0x126>
          ref+=10;
    189c:	f8da 3000 	ldr.w	r3, [sl]
    18a0:	330a      	adds	r3, #10
    18a2:	f8ca 3000 	str.w	r3, [sl]
          dcToggleFlag4 = 0;
    18a6:	2300      	movs	r3, #0
    18a8:	6013      	str	r3, [r2, #0]
       if(ref>= 100) ref = 100;
    18aa:	f8da 3000 	ldr.w	r3, [sl]
    18ae:	2b63      	cmp	r3, #99	; 0x63
    18b0:	dd0d      	ble.n	18ce <thread_1_code+0x14a>
    18b2:	2364      	movs	r3, #100	; 0x64
       if(ref<= 0) ref = 0;
    18b4:	f8ca 3000 	str.w	r3, [sl]
       printk("ref -> %d",ref);
    18b8:	f8da 1000 	ldr.w	r1, [sl]
    18bc:	4811      	ldr	r0, [pc, #68]	; (1904 <thread_1_code+0x180>)
    18be:	f008 f9ca 	bl	9c56 <printk>
        var_cd = ref;
    18c2:	4b11      	ldr	r3, [pc, #68]	; (1908 <thread_1_code+0x184>)
    18c4:	f8da 2000 	ldr.w	r2, [sl]
    18c8:	601a      	str	r2, [r3, #0]
	z_impl_k_sem_give(sem);
    18ca:	4810      	ldr	r0, [pc, #64]	; (190c <thread_1_code+0x188>)
    18cc:	e7a4      	b.n	1818 <thread_1_code+0x94>
       if(ref<= 0) ref = 0;
    18ce:	2b00      	cmp	r3, #0
    18d0:	dcf2      	bgt.n	18b8 <thread_1_code+0x134>
    18d2:	2300      	movs	r3, #0
    18d4:	e7ee      	b.n	18b4 <thread_1_code+0x130>
    18d6:	bf00      	nop
    18d8:	0000b0be 	.word	0x0000b0be
    18dc:	20000980 	.word	0x20000980
    18e0:	0000b0e3 	.word	0x0000b0e3
    18e4:	20001028 	.word	0x20001028
    18e8:	2000097c 	.word	0x2000097c
    18ec:	0000b0f4 	.word	0x0000b0f4
    18f0:	200008ec 	.word	0x200008ec
    18f4:	20000908 	.word	0x20000908
    18f8:	200008f0 	.word	0x200008f0
    18fc:	200008f4 	.word	0x200008f4
    1900:	200008f8 	.word	0x200008f8
    1904:	0000b115 	.word	0x0000b115
    1908:	2000098c 	.word	0x2000098c
    190c:	20000950 	.word	0x20000950
    1910:	0000b0ce 	.word	0x0000b0ce
    1914:	200010a0 	.word	0x200010a0
    1918:	200000b0 	.word	0x200000b0

0000191c <CONFIG_BUTTONS>:
{
    191c:	b510      	push	{r4, lr}
    191e:	482e      	ldr	r0, [pc, #184]	; (19d8 <CONFIG_BUTTONS+0xbc>)
    1920:	f004 febc 	bl	669c <z_impl_device_get_binding>
    1924:	4604      	mov	r4, r0
    1926:	f44f 7288 	mov.w	r2, #272	; 0x110
    192a:	210b      	movs	r1, #11
    192c:	f7ff fc94 	bl	1258 <z_impl_gpio_pin_configure>
    1930:	f44f 7288 	mov.w	r2, #272	; 0x110
    1934:	210c      	movs	r1, #12
    1936:	4620      	mov	r0, r4
    1938:	f7ff fc8e 	bl	1258 <z_impl_gpio_pin_configure>
    193c:	f44f 7288 	mov.w	r2, #272	; 0x110
    1940:	2118      	movs	r1, #24
    1942:	4620      	mov	r0, r4
    1944:	f7ff fc88 	bl	1258 <z_impl_gpio_pin_configure>
    1948:	2119      	movs	r1, #25
    194a:	f44f 7288 	mov.w	r2, #272	; 0x110
    194e:	4620      	mov	r0, r4
    1950:	f7ff fc82 	bl	1258 <z_impl_gpio_pin_configure>
    if (ret < 0) {
    1954:	1e01      	subs	r1, r0, #0
    1956:	da04      	bge.n	1962 <CONFIG_BUTTONS+0x46>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
    1958:	4820      	ldr	r0, [pc, #128]	; (19dc <CONFIG_BUTTONS+0xc0>)
}
    195a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
    195e:	f008 b97a 	b.w	9c56 <printk>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    1962:	210b      	movs	r1, #11
    1964:	4620      	mov	r0, r4
    1966:	f7ff fcc5 	bl	12f4 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    196a:	210c      	movs	r1, #12
    196c:	4620      	mov	r0, r4
    196e:	f7ff fcc1 	bl	12f4 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    1972:	2118      	movs	r1, #24
    1974:	4620      	mov	r0, r4
    1976:	f7ff fcbd 	bl	12f4 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    197a:	2119      	movs	r1, #25
    197c:	4620      	mov	r0, r4
    197e:	f7ff fcb9 	bl	12f4 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
    1982:	4601      	mov	r1, r0
    1984:	b108      	cbz	r0, 198a <CONFIG_BUTTONS+0x6e>
	printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
    1986:	4816      	ldr	r0, [pc, #88]	; (19e0 <CONFIG_BUTTONS+0xc4>)
    1988:	e7e7      	b.n	195a <CONFIG_BUTTONS+0x3e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    198a:	4916      	ldr	r1, [pc, #88]	; (19e4 <CONFIG_BUTTONS+0xc8>)
    198c:	4b16      	ldr	r3, [pc, #88]	; (19e8 <CONFIG_BUTTONS+0xcc>)
    198e:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but1_cb_data);
    1990:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    1992:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1996:	608b      	str	r3, [r1, #8]
    1998:	f008 f87e 	bl	9a98 <gpio_add_callback>
	callback->handler = handler;
    199c:	4913      	ldr	r1, [pc, #76]	; (19ec <CONFIG_BUTTONS+0xd0>)
    199e:	4b14      	ldr	r3, [pc, #80]	; (19f0 <CONFIG_BUTTONS+0xd4>)
    19a0:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but2_cb_data);
    19a2:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    19a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    19a8:	608b      	str	r3, [r1, #8]
    19aa:	f008 f875 	bl	9a98 <gpio_add_callback>
	callback->handler = handler;
    19ae:	4911      	ldr	r1, [pc, #68]	; (19f4 <CONFIG_BUTTONS+0xd8>)
    19b0:	4b11      	ldr	r3, [pc, #68]	; (19f8 <CONFIG_BUTTONS+0xdc>)
    19b2:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but3_cb_data);
    19b4:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    19b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    19ba:	608b      	str	r3, [r1, #8]
    19bc:	f008 f86c 	bl	9a98 <gpio_add_callback>
	callback->handler = handler;
    19c0:	490e      	ldr	r1, [pc, #56]	; (19fc <CONFIG_BUTTONS+0xe0>)
    19c2:	4b0f      	ldr	r3, [pc, #60]	; (1a00 <CONFIG_BUTTONS+0xe4>)
    19c4:	604b      	str	r3, [r1, #4]
    gpio_add_callback(gpio0_dev, &but4_cb_data);
    19c6:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    19c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
}
    19cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    19d0:	608b      	str	r3, [r1, #8]
    gpio_add_callback(gpio0_dev, &but4_cb_data);
    19d2:	f008 b861 	b.w	9a98 <gpio_add_callback>
    19d6:	bf00      	nop
    19d8:	0000aeb4 	.word	0x0000aeb4
    19dc:	0000b11f 	.word	0x0000b11f
    19e0:	0000b146 	.word	0x0000b146
    19e4:	200008b4 	.word	0x200008b4
    19e8:	00001229 	.word	0x00001229
    19ec:	200008c0 	.word	0x200008c0
    19f0:	00001235 	.word	0x00001235
    19f4:	200008cc 	.word	0x200008cc
    19f8:	00001241 	.word	0x00001241
    19fc:	200008d8 	.word	0x200008d8
    1a00:	0000124d 	.word	0x0000124d

00001a04 <CONFIG_UART>:
{
    1a04:	b538      	push	{r3, r4, r5, lr}
    1a06:	4821      	ldr	r0, [pc, #132]	; (1a8c <CONFIG_UART+0x88>)
    uart_dev= device_get_binding(DT_LABEL(UART_NID));
    1a08:	4c21      	ldr	r4, [pc, #132]	; (1a90 <CONFIG_UART+0x8c>)
    1a0a:	f004 fe47 	bl	669c <z_impl_device_get_binding>
    1a0e:	6020      	str	r0, [r4, #0]
    if (uart_dev == NULL) {
    1a10:	b928      	cbnz	r0, 1a1e <CONFIG_UART+0x1a>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NID));
    1a12:	491e      	ldr	r1, [pc, #120]	; (1a8c <CONFIG_UART+0x88>)
    1a14:	481f      	ldr	r0, [pc, #124]	; (1a94 <CONFIG_UART+0x90>)
}
    1a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("uart_tx() error. Error code:%d\n\r",err);
    1a1a:	f008 b91c 	b.w	9c56 <printk>
        printk("UART binding successful\n\r");
    1a1e:	481e      	ldr	r0, [pc, #120]	; (1a98 <CONFIG_UART+0x94>)
    1a20:	f008 f919 	bl	9c56 <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    1a24:	6820      	ldr	r0, [r4, #0]
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
    1a26:	6883      	ldr	r3, [r0, #8]
    1a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a2a:	b923      	cbnz	r3, 1a36 <CONFIG_UART+0x32>
}
    1a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("uart_configure() error. Invalid configuration\n\r");
    1a30:	481a      	ldr	r0, [pc, #104]	; (1a9c <CONFIG_UART+0x98>)
    1a32:	f008 b910 	b.w	9c56 <printk>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
    1a36:	491a      	ldr	r1, [pc, #104]	; (1aa0 <CONFIG_UART+0x9c>)
    1a38:	4798      	blx	r3
    if (err == -ENOSYS) { /* If invalid configuration */
    1a3a:	3058      	adds	r0, #88	; 0x58
    1a3c:	d0f6      	beq.n	1a2c <CONFIG_UART+0x28>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    1a3e:	6820      	ldr	r0, [r4, #0]
	if (api->callback_set == NULL) {
    1a40:	6883      	ldr	r3, [r0, #8]
    1a42:	681b      	ldr	r3, [r3, #0]
    1a44:	b133      	cbz	r3, 1a54 <CONFIG_UART+0x50>
	return api->callback_set(dev, callback, user_data);
    1a46:	4917      	ldr	r1, [pc, #92]	; (1aa4 <CONFIG_UART+0xa0>)
    1a48:	2200      	movs	r2, #0
    1a4a:	4798      	blx	r3
    if (err) {
    1a4c:	4601      	mov	r1, r0
    1a4e:	b120      	cbz	r0, 1a5a <CONFIG_UART+0x56>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    1a50:	4815      	ldr	r0, [pc, #84]	; (1aa8 <CONFIG_UART+0xa4>)
    1a52:	e7e0      	b.n	1a16 <CONFIG_UART+0x12>
		return -ENOSYS;
    1a54:	f06f 0157 	mvn.w	r1, #87	; 0x57
    1a58:	e7fa      	b.n	1a50 <CONFIG_UART+0x4c>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    1a5a:	6820      	ldr	r0, [r4, #0]
	return api->rx_enable(dev, buf, len, timeout);
    1a5c:	6883      	ldr	r3, [r0, #8]
    1a5e:	4913      	ldr	r1, [pc, #76]	; (1aac <CONFIG_UART+0xa8>)
    1a60:	68dd      	ldr	r5, [r3, #12]
    1a62:	223c      	movs	r2, #60	; 0x3c
    1a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1a68:	47a8      	blx	r5
    if (err) {
    1a6a:	4601      	mov	r1, r0
    1a6c:	b108      	cbz	r0, 1a72 <CONFIG_UART+0x6e>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    1a6e:	4810      	ldr	r0, [pc, #64]	; (1ab0 <CONFIG_UART+0xac>)
    1a70:	e7d1      	b.n	1a16 <CONFIG_UART+0x12>
    err = uart_tx(uart_dev, welcome_mesg, sizeof(welcome_mesg), SYS_FOREVER_MS);
    1a72:	6820      	ldr	r0, [r4, #0]
	return api->tx(dev, buf, len, timeout);
    1a74:	6883      	ldr	r3, [r0, #8]
    1a76:	490f      	ldr	r1, [pc, #60]	; (1ab4 <CONFIG_UART+0xb0>)
    1a78:	685c      	ldr	r4, [r3, #4]
    1a7a:	224d      	movs	r2, #77	; 0x4d
    1a7c:	f04f 33ff 	mov.w	r3, #4294967295
    1a80:	47a0      	blx	r4
    if (err) {
    1a82:	4601      	mov	r1, r0
    1a84:	b108      	cbz	r0, 1a8a <CONFIG_UART+0x86>
        printk("uart_tx() error. Error code:%d\n\r",err);
    1a86:	480c      	ldr	r0, [pc, #48]	; (1ab8 <CONFIG_UART+0xb4>)
    1a88:	e7c5      	b.n	1a16 <CONFIG_UART+0x12>
}
    1a8a:	bd38      	pop	{r3, r4, r5, pc}
    1a8c:	0000b17d 	.word	0x0000b17d
    1a90:	2000097c 	.word	0x2000097c
    1a94:	0000b184 	.word	0x0000b184
    1a98:	0000b1b0 	.word	0x0000b1b0
    1a9c:	0000b1ca 	.word	0x0000b1ca
    1aa0:	0000a9d8 	.word	0x0000a9d8
    1aa4:	00001641 	.word	0x00001641
    1aa8:	0000b1fa 	.word	0x0000b1fa
    1aac:	20001064 	.word	0x20001064
    1ab0:	0000b039 	.word	0x0000b039
    1ab4:	200001f8 	.word	0x200001f8
    1ab8:	0000b0f4 	.word	0x0000b0f4

00001abc <main>:
{    
    1abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1abe:	b089      	sub	sp, #36	; 0x24
    1ac0:	4841      	ldr	r0, [pc, #260]	; (1bc8 <main+0x10c>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
    1ac2:	4c42      	ldr	r4, [pc, #264]	; (1bcc <main+0x110>)
    1ac4:	f004 fdea 	bl	669c <z_impl_device_get_binding>
    1ac8:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
    1aca:	b910      	cbnz	r0, 1ad2 <main+0x16>
        printk("ADC device_get_binding() failed\n");
    1acc:	4840      	ldr	r0, [pc, #256]	; (1bd0 <main+0x114>)
    1ace:	f008 f8c2 	bl	9c56 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    1ad2:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
    1ad4:	6883      	ldr	r3, [r0, #8]
    1ad6:	493f      	ldr	r1, [pc, #252]	; (1bd4 <main+0x118>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	4798      	blx	r3
    if (err) {
    1adc:	4601      	mov	r1, r0
    1ade:	b110      	cbz	r0, 1ae6 <main+0x2a>
        printk("adc_channel_setup() failed with error code %d\n", err);
    1ae0:	483d      	ldr	r0, [pc, #244]	; (1bd8 <main+0x11c>)
    1ae2:	f008 f8b8 	bl	9c56 <printk>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    1ae6:	4b3d      	ldr	r3, [pc, #244]	; (1bdc <main+0x120>)
    1ae8:	2501      	movs	r5, #1
    1aea:	60dd      	str	r5, [r3, #12]
    CONFIG_BUTTONS();
    1aec:	f7ff ff16 	bl	191c <CONFIG_BUTTONS>
    CONFIG_UART();
    1af0:	f7ff ff88 	bl	1a04 <CONFIG_UART>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1af4:	2100      	movs	r1, #0
    1af6:	462a      	mov	r2, r5
    1af8:	4839      	ldr	r0, [pc, #228]	; (1be0 <main+0x124>)
    1afa:	f008 fdab 	bl	a654 <z_impl_k_sem_init>
    1afe:	2100      	movs	r1, #0
    1b00:	462a      	mov	r2, r5
    1b02:	4838      	ldr	r0, [pc, #224]	; (1be4 <main+0x128>)
    1b04:	f008 fda6 	bl	a654 <z_impl_k_sem_init>
    1b08:	2100      	movs	r1, #0
    1b0a:	462a      	mov	r2, r5
    1b0c:	4836      	ldr	r0, [pc, #216]	; (1be8 <main+0x12c>)
    1b0e:	f008 fda1 	bl	a654 <z_impl_k_sem_init>
    1b12:	2100      	movs	r1, #0
    1b14:	462a      	mov	r2, r5
    1b16:	4835      	ldr	r0, [pc, #212]	; (1bec <main+0x130>)
    1b18:	f008 fd9c 	bl	a654 <z_impl_k_sem_init>
    thread_1_tid = k_thread_create(&thread_1_data, thread_1_stack,
    1b1c:	2600      	movs	r6, #0
    1b1e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1b20:	2400      	movs	r4, #0
    1b22:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b26:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1b2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1b2e:	4b30      	ldr	r3, [pc, #192]	; (1bf0 <main+0x134>)
    1b30:	4930      	ldr	r1, [pc, #192]	; (1bf4 <main+0x138>)
    1b32:	9400      	str	r4, [sp, #0]
    1b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b38:	482f      	ldr	r0, [pc, #188]	; (1bf8 <main+0x13c>)
    1b3a:	f006 fe1b 	bl	8774 <z_impl_k_thread_create>
    1b3e:	4b2f      	ldr	r3, [pc, #188]	; (1bfc <main+0x140>)
    1b40:	6018      	str	r0, [r3, #0]
    1b42:	4b2f      	ldr	r3, [pc, #188]	; (1c00 <main+0x144>)
    1b44:	492f      	ldr	r1, [pc, #188]	; (1c04 <main+0x148>)
    1b46:	9400      	str	r4, [sp, #0]
    1b48:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b4c:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1b50:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b58:	482b      	ldr	r0, [pc, #172]	; (1c08 <main+0x14c>)
    1b5a:	f006 fe0b 	bl	8774 <z_impl_k_thread_create>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
    1b5e:	4b2b      	ldr	r3, [pc, #172]	; (1c0c <main+0x150>)
    1b60:	6018      	str	r0, [r3, #0]
    1b62:	4b2b      	ldr	r3, [pc, #172]	; (1c10 <main+0x154>)
    1b64:	492b      	ldr	r1, [pc, #172]	; (1c14 <main+0x158>)
    1b66:	9400      	str	r4, [sp, #0]
    1b68:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b6c:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1b70:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b78:	4827      	ldr	r0, [pc, #156]	; (1c18 <main+0x15c>)
    1b7a:	f006 fdfb 	bl	8774 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
    1b7e:	4b27      	ldr	r3, [pc, #156]	; (1c1c <main+0x160>)
    1b80:	6018      	str	r0, [r3, #0]
    1b82:	4b27      	ldr	r3, [pc, #156]	; (1c20 <main+0x164>)
    1b84:	4927      	ldr	r1, [pc, #156]	; (1c24 <main+0x168>)
    1b86:	9400      	str	r4, [sp, #0]
    1b88:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b8c:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1b90:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b98:	4823      	ldr	r0, [pc, #140]	; (1c28 <main+0x16c>)
    1b9a:	f006 fdeb 	bl	8774 <z_impl_k_thread_create>
    thread_C_tid = k_thread_create(&thread_C_data, thread_C_stack,
    1b9e:	4b23      	ldr	r3, [pc, #140]	; (1c2c <main+0x170>)
    1ba0:	6018      	str	r0, [r3, #0]
    1ba2:	4b23      	ldr	r3, [pc, #140]	; (1c30 <main+0x174>)
    1ba4:	4923      	ldr	r1, [pc, #140]	; (1c34 <main+0x178>)
    1ba6:	9400      	str	r4, [sp, #0]
    1ba8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1bac:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1bb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1bb8:	481f      	ldr	r0, [pc, #124]	; (1c38 <main+0x17c>)
    1bba:	f006 fddb 	bl	8774 <z_impl_k_thread_create>
    thread_D_tid = k_thread_create(&thread_D_data, thread_D_stack,
    1bbe:	4b1f      	ldr	r3, [pc, #124]	; (1c3c <main+0x180>)
    1bc0:	6018      	str	r0, [r3, #0]
}
    1bc2:	b009      	add	sp, #36	; 0x24
    1bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bc6:	bf00      	nop
    1bc8:	0000b225 	.word	0x0000b225
    1bcc:	200008b0 	.word	0x200008b0
    1bd0:	0000b22b 	.word	0x0000b22b
    1bd4:	0000ac0c 	.word	0x0000ac0c
    1bd8:	0000b24c 	.word	0x0000b24c
    1bdc:	40007000 	.word	0x40007000
    1be0:	20000908 	.word	0x20000908
    1be4:	20000920 	.word	0x20000920
    1be8:	20000938 	.word	0x20000938
    1bec:	20000950 	.word	0x20000950
    1bf0:	00001785 	.word	0x00001785
    1bf4:	200012a0 	.word	0x200012a0
    1bf8:	200002b8 	.word	0x200002b8
    1bfc:	20000968 	.word	0x20000968
    1c00:	00001361 	.word	0x00001361
    1c04:	200016c0 	.word	0x200016c0
    1c08:	20000338 	.word	0x20000338
    1c0c:	2000096c 	.word	0x2000096c
    1c10:	000010d1 	.word	0x000010d1
    1c14:	20001ae0 	.word	0x20001ae0
    1c18:	200003b8 	.word	0x200003b8
    1c1c:	20000970 	.word	0x20000970
    1c20:	00001441 	.word	0x00001441
    1c24:	20001f00 	.word	0x20001f00
    1c28:	20000438 	.word	0x20000438
    1c2c:	20000974 	.word	0x20000974
    1c30:	00001509 	.word	0x00001509
    1c34:	20002320 	.word	0x20002320
    1c38:	200004b8 	.word	0x200004b8
    1c3c:	20000978 	.word	0x20000978

00001c40 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c44:	b091      	sub	sp, #68	; 0x44
    1c46:	468b      	mov	fp, r1
    1c48:	9002      	str	r0, [sp, #8]
    1c4a:	4692      	mov	sl, r2
    1c4c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1c4e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1c50:	f89a 0000 	ldrb.w	r0, [sl]
    1c54:	b908      	cbnz	r0, 1c5a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1c56:	4628      	mov	r0, r5
    1c58:	e35e      	b.n	2318 <cbvprintf+0x6d8>
		if (*fp != '%') {
    1c5a:	2825      	cmp	r0, #37	; 0x25
    1c5c:	f10a 0701 	add.w	r7, sl, #1
    1c60:	d007      	beq.n	1c72 <cbvprintf+0x32>
			OUTC('%');
    1c62:	9b02      	ldr	r3, [sp, #8]
    1c64:	4659      	mov	r1, fp
    1c66:	4798      	blx	r3
    1c68:	2800      	cmp	r0, #0
    1c6a:	f2c0 8355 	blt.w	2318 <cbvprintf+0x6d8>
    1c6e:	3501      	adds	r5, #1
			break;
    1c70:	e210      	b.n	2094 <cbvprintf+0x454>
		} state = {
    1c72:	2218      	movs	r2, #24
    1c74:	2100      	movs	r1, #0
    1c76:	a80a      	add	r0, sp, #40	; 0x28
    1c78:	f008 f853 	bl	9d22 <memset>
	if (*sp == '%') {
    1c7c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1c80:	2b25      	cmp	r3, #37	; 0x25
    1c82:	d078      	beq.n	1d76 <cbvprintf+0x136>
    1c84:	2200      	movs	r2, #0
    1c86:	4694      	mov	ip, r2
    1c88:	4616      	mov	r6, r2
    1c8a:	4696      	mov	lr, r2
    1c8c:	4610      	mov	r0, r2
    1c8e:	4639      	mov	r1, r7
		switch (*sp) {
    1c90:	f817 3b01 	ldrb.w	r3, [r7], #1
    1c94:	2b2b      	cmp	r3, #43	; 0x2b
    1c96:	f000 809d 	beq.w	1dd4 <cbvprintf+0x194>
    1c9a:	f200 8094 	bhi.w	1dc6 <cbvprintf+0x186>
    1c9e:	2b20      	cmp	r3, #32
    1ca0:	f000 809b 	beq.w	1dda <cbvprintf+0x19a>
    1ca4:	2b23      	cmp	r3, #35	; 0x23
    1ca6:	f000 809a 	beq.w	1dde <cbvprintf+0x19e>
    1caa:	b128      	cbz	r0, 1cb8 <cbvprintf+0x78>
    1cac:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1cb0:	f040 0004 	orr.w	r0, r0, #4
    1cb4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1cb8:	f1be 0f00 	cmp.w	lr, #0
    1cbc:	d005      	beq.n	1cca <cbvprintf+0x8a>
    1cbe:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1cc2:	f040 0008 	orr.w	r0, r0, #8
    1cc6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1cca:	b12e      	cbz	r6, 1cd8 <cbvprintf+0x98>
    1ccc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1cd0:	f040 0010 	orr.w	r0, r0, #16
    1cd4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1cd8:	f1bc 0f00 	cmp.w	ip, #0
    1cdc:	d005      	beq.n	1cea <cbvprintf+0xaa>
    1cde:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1ce2:	f040 0020 	orr.w	r0, r0, #32
    1ce6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1cea:	b12a      	cbz	r2, 1cf8 <cbvprintf+0xb8>
    1cec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1cf4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1cf8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1cfc:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1d00:	2844      	cmp	r0, #68	; 0x44
    1d02:	d103      	bne.n	1d0c <cbvprintf+0xcc>
		conv->flag_zero = false;
    1d04:	f36f 1286 	bfc	r2, #6, #1
    1d08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1d0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1d10:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1d16:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1d1a:	d17b      	bne.n	1e14 <cbvprintf+0x1d4>
		conv->width_star = true;
    1d1c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1d20:	f042 0201 	orr.w	r2, r2, #1
    1d24:	1c4b      	adds	r3, r1, #1
    1d26:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1d2a:	781a      	ldrb	r2, [r3, #0]
    1d2c:	2a2e      	cmp	r2, #46	; 0x2e
    1d2e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1d32:	bf0c      	ite	eq
    1d34:	2101      	moveq	r1, #1
    1d36:	2100      	movne	r1, #0
    1d38:	f361 0241 	bfi	r2, r1, #1, #1
    1d3c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1d40:	d174      	bne.n	1e2c <cbvprintf+0x1ec>
	if (*sp == '*') {
    1d42:	785a      	ldrb	r2, [r3, #1]
    1d44:	2a2a      	cmp	r2, #42	; 0x2a
    1d46:	d06a      	beq.n	1e1e <cbvprintf+0x1de>
    1d48:	3301      	adds	r3, #1
	size_t val = 0;
    1d4a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1d4c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1d4e:	4618      	mov	r0, r3
    1d50:	f810 2b01 	ldrb.w	r2, [r0], #1
    1d54:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1d58:	2f09      	cmp	r7, #9
    1d5a:	f240 808e 	bls.w	1e7a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1d5e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1d62:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1d64:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1d68:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1d6c:	f361 0241 	bfi	r2, r1, #1, #1
    1d70:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1d74:	e05a      	b.n	1e2c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1d76:	f10a 0702 	add.w	r7, sl, #2
    1d7a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1d7e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1d82:	07d9      	lsls	r1, r3, #31
    1d84:	f140 8149 	bpl.w	201a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1d88:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1d8c:	f1b9 0f00 	cmp.w	r9, #0
    1d90:	da07      	bge.n	1da2 <cbvprintf+0x162>
				conv->flag_dash = true;
    1d92:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1d96:	f042 0204 	orr.w	r2, r2, #4
    1d9a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1d9e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1da2:	075a      	lsls	r2, r3, #29
    1da4:	f140 8142 	bpl.w	202c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1da8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1dac:	f1b8 0f00 	cmp.w	r8, #0
    1db0:	f280 8141 	bge.w	2036 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1db4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1db8:	f36f 0341 	bfc	r3, #1, #1
    1dbc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1dc0:	f04f 38ff 	mov.w	r8, #4294967295
    1dc4:	e137      	b.n	2036 <cbvprintf+0x3f6>
		switch (*sp) {
    1dc6:	2b2d      	cmp	r3, #45	; 0x2d
    1dc8:	d00c      	beq.n	1de4 <cbvprintf+0x1a4>
    1dca:	2b30      	cmp	r3, #48	; 0x30
    1dcc:	f47f af6d 	bne.w	1caa <cbvprintf+0x6a>
			conv->flag_zero = true;
    1dd0:	2201      	movs	r2, #1
	} while (loop);
    1dd2:	e75c      	b.n	1c8e <cbvprintf+0x4e>
			conv->flag_plus = true;
    1dd4:	f04f 0e01 	mov.w	lr, #1
    1dd8:	e759      	b.n	1c8e <cbvprintf+0x4e>
			conv->flag_space = true;
    1dda:	2601      	movs	r6, #1
    1ddc:	e757      	b.n	1c8e <cbvprintf+0x4e>
			conv->flag_hash = true;
    1dde:	f04f 0c01 	mov.w	ip, #1
    1de2:	e754      	b.n	1c8e <cbvprintf+0x4e>
		switch (*sp) {
    1de4:	2001      	movs	r0, #1
    1de6:	e752      	b.n	1c8e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1de8:	fb0c 0202 	mla	r2, ip, r2, r0
    1dec:	3a30      	subs	r2, #48	; 0x30
    1dee:	4633      	mov	r3, r6
    1df0:	461e      	mov	r6, r3
    1df2:	f816 0b01 	ldrb.w	r0, [r6], #1
    1df6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1dfa:	2f09      	cmp	r7, #9
    1dfc:	d9f4      	bls.n	1de8 <cbvprintf+0x1a8>
	if (sp != wp) {
    1dfe:	4299      	cmp	r1, r3
    1e00:	d093      	beq.n	1d2a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1e02:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1e06:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1e08:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1e0a:	f362 0141 	bfi	r1, r2, #1, #1
    1e0e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1e12:	e78a      	b.n	1d2a <cbvprintf+0xea>
    1e14:	460b      	mov	r3, r1
	size_t val = 0;
    1e16:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1e18:	f04f 0c0a 	mov.w	ip, #10
    1e1c:	e7e8      	b.n	1df0 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1e1e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e22:	f042 0204 	orr.w	r2, r2, #4
    1e26:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1e2a:	3302      	adds	r3, #2
	switch (*sp) {
    1e2c:	461f      	mov	r7, r3
    1e2e:	f817 2b01 	ldrb.w	r2, [r7], #1
    1e32:	2a6c      	cmp	r2, #108	; 0x6c
    1e34:	d041      	beq.n	1eba <cbvprintf+0x27a>
    1e36:	d825      	bhi.n	1e84 <cbvprintf+0x244>
    1e38:	2a68      	cmp	r2, #104	; 0x68
    1e3a:	d02b      	beq.n	1e94 <cbvprintf+0x254>
    1e3c:	2a6a      	cmp	r2, #106	; 0x6a
    1e3e:	d046      	beq.n	1ece <cbvprintf+0x28e>
    1e40:	2a4c      	cmp	r2, #76	; 0x4c
    1e42:	d04c      	beq.n	1ede <cbvprintf+0x29e>
    1e44:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1e46:	f817 2b01 	ldrb.w	r2, [r7], #1
    1e4a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1e4e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1e52:	2a78      	cmp	r2, #120	; 0x78
    1e54:	f200 80d9 	bhi.w	200a <cbvprintf+0x3ca>
    1e58:	2a57      	cmp	r2, #87	; 0x57
    1e5a:	d84d      	bhi.n	1ef8 <cbvprintf+0x2b8>
    1e5c:	2a41      	cmp	r2, #65	; 0x41
    1e5e:	d003      	beq.n	1e68 <cbvprintf+0x228>
    1e60:	3a45      	subs	r2, #69	; 0x45
    1e62:	2a02      	cmp	r2, #2
    1e64:	f200 80d1 	bhi.w	200a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1e68:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1e6c:	2204      	movs	r2, #4
    1e6e:	f362 0302 	bfi	r3, r2, #0, #3
    1e72:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1e76:	2301      	movs	r3, #1
			break;
    1e78:	e09e      	b.n	1fb8 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1e7a:	fb06 2101 	mla	r1, r6, r1, r2
    1e7e:	3930      	subs	r1, #48	; 0x30
    1e80:	4603      	mov	r3, r0
    1e82:	e764      	b.n	1d4e <cbvprintf+0x10e>
	switch (*sp) {
    1e84:	2a74      	cmp	r2, #116	; 0x74
    1e86:	d026      	beq.n	1ed6 <cbvprintf+0x296>
    1e88:	2a7a      	cmp	r2, #122	; 0x7a
    1e8a:	d1db      	bne.n	1e44 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1e8c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1e90:	2206      	movs	r2, #6
    1e92:	e00d      	b.n	1eb0 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1e94:	785a      	ldrb	r2, [r3, #1]
    1e96:	2a68      	cmp	r2, #104	; 0x68
    1e98:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e9c:	d106      	bne.n	1eac <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1e9e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1ea0:	f361 02c6 	bfi	r2, r1, #3, #4
    1ea4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1ea8:	1c9f      	adds	r7, r3, #2
    1eaa:	e7cc      	b.n	1e46 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1eac:	4613      	mov	r3, r2
    1eae:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1eb0:	f362 03c6 	bfi	r3, r2, #3, #4
    1eb4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1eb8:	e7c5      	b.n	1e46 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1eba:	785a      	ldrb	r2, [r3, #1]
    1ebc:	2a6c      	cmp	r2, #108	; 0x6c
    1ebe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1ec2:	d101      	bne.n	1ec8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1ec4:	2104      	movs	r1, #4
    1ec6:	e7eb      	b.n	1ea0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1ec8:	4613      	mov	r3, r2
    1eca:	2203      	movs	r2, #3
    1ecc:	e7f0      	b.n	1eb0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1ece:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1ed2:	2205      	movs	r2, #5
    1ed4:	e7ec      	b.n	1eb0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1ed6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1eda:	2207      	movs	r2, #7
    1edc:	e7e8      	b.n	1eb0 <cbvprintf+0x270>
		conv->unsupported = true;
    1ede:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1ee2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1ee6:	f023 0302 	bic.w	r3, r3, #2
    1eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1eee:	f043 0302 	orr.w	r3, r3, #2
    1ef2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1ef6:	e7a6      	b.n	1e46 <cbvprintf+0x206>
    1ef8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1efc:	2920      	cmp	r1, #32
    1efe:	f200 8084 	bhi.w	200a <cbvprintf+0x3ca>
    1f02:	a001      	add	r0, pc, #4	; (adr r0, 1f08 <cbvprintf+0x2c8>)
    1f04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1f08:	00001fcd 	.word	0x00001fcd
    1f0c:	0000200b 	.word	0x0000200b
    1f10:	0000200b 	.word	0x0000200b
    1f14:	0000200b 	.word	0x0000200b
    1f18:	0000200b 	.word	0x0000200b
    1f1c:	0000200b 	.word	0x0000200b
    1f20:	0000200b 	.word	0x0000200b
    1f24:	0000200b 	.word	0x0000200b
    1f28:	0000200b 	.word	0x0000200b
    1f2c:	00001e69 	.word	0x00001e69
    1f30:	0000200b 	.word	0x0000200b
    1f34:	00001fcd 	.word	0x00001fcd
    1f38:	00001f8d 	.word	0x00001f8d
    1f3c:	00001e69 	.word	0x00001e69
    1f40:	00001e69 	.word	0x00001e69
    1f44:	00001e69 	.word	0x00001e69
    1f48:	0000200b 	.word	0x0000200b
    1f4c:	00001f8d 	.word	0x00001f8d
    1f50:	0000200b 	.word	0x0000200b
    1f54:	0000200b 	.word	0x0000200b
    1f58:	0000200b 	.word	0x0000200b
    1f5c:	0000200b 	.word	0x0000200b
    1f60:	00001fd5 	.word	0x00001fd5
    1f64:	00001fcd 	.word	0x00001fcd
    1f68:	00001ff1 	.word	0x00001ff1
    1f6c:	0000200b 	.word	0x0000200b
    1f70:	0000200b 	.word	0x0000200b
    1f74:	00001ff1 	.word	0x00001ff1
    1f78:	0000200b 	.word	0x0000200b
    1f7c:	00001fcd 	.word	0x00001fcd
    1f80:	0000200b 	.word	0x0000200b
    1f84:	0000200b 	.word	0x0000200b
    1f88:	00001fcd 	.word	0x00001fcd
		conv->specifier_cat = SPECIFIER_SINT;
    1f8c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1f90:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f92:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1f96:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f9a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1f9c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1fa0:	bf02      	ittt	eq
    1fa2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1fa6:	f041 0101 	orreq.w	r1, r1, #1
    1faa:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1fae:	2a63      	cmp	r2, #99	; 0x63
    1fb0:	d131      	bne.n	2016 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1fb2:	3b00      	subs	r3, #0
    1fb4:	bf18      	it	ne
    1fb6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1fb8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1fbc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1fc0:	430b      	orrs	r3, r1
    1fc2:	f363 0241 	bfi	r2, r3, #1, #1
    1fc6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1fca:	e6d8      	b.n	1d7e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1fcc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1fd0:	2002      	movs	r0, #2
    1fd2:	e7de      	b.n	1f92 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1fd4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1fd8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1fdc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1fe0:	2103      	movs	r1, #3
    1fe2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1fe6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1fe8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1fec:	4143      	adcs	r3, r0
    1fee:	e7e3      	b.n	1fb8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1ff0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1ff4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1ff6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1ffa:	f361 0202 	bfi	r2, r1, #0, #3
    1ffe:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    2002:	bf14      	ite	ne
    2004:	2301      	movne	r3, #1
    2006:	2300      	moveq	r3, #0
    2008:	e7d6      	b.n	1fb8 <cbvprintf+0x378>
		conv->invalid = true;
    200a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    200e:	f043 0301 	orr.w	r3, r3, #1
    2012:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    2016:	2300      	movs	r3, #0
    2018:	e7ce      	b.n	1fb8 <cbvprintf+0x378>
		} else if (conv->width_present) {
    201a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    201e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2020:	bfb4      	ite	lt
    2022:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    2026:	f04f 39ff 	movge.w	r9, #4294967295
    202a:	e6ba      	b.n	1da2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    202c:	079b      	lsls	r3, r3, #30
    202e:	f57f aec7 	bpl.w	1dc0 <cbvprintf+0x180>
			precision = conv->prec_value;
    2032:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    2036:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    203a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    203c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    2040:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    2044:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2048:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    204a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    204e:	d136      	bne.n	20be <cbvprintf+0x47e>
			switch (length_mod) {
    2050:	1ed3      	subs	r3, r2, #3
    2052:	2b04      	cmp	r3, #4
    2054:	d820      	bhi.n	2098 <cbvprintf+0x458>
    2056:	e8df f003 	tbb	[pc, r3]
    205a:	0703      	.short	0x0703
    205c:	1f07      	.short	0x1f07
    205e:	1f          	.byte	0x1f
    205f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    2060:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    2064:	17c1      	asrs	r1, r0, #31
    2066:	e004      	b.n	2072 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    2068:	3407      	adds	r4, #7
    206a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    206e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    2072:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    2076:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    207a:	f013 0603 	ands.w	r6, r3, #3
    207e:	d054      	beq.n	212a <cbvprintf+0x4ea>
			OUTS(sp, fp);
    2080:	9802      	ldr	r0, [sp, #8]
    2082:	463b      	mov	r3, r7
    2084:	4652      	mov	r2, sl
    2086:	4659      	mov	r1, fp
    2088:	f007 fd60 	bl	9b4c <outs>
    208c:	2800      	cmp	r0, #0
    208e:	f2c0 8143 	blt.w	2318 <cbvprintf+0x6d8>
    2092:	4405      	add	r5, r0
			continue;
    2094:	46ba      	mov	sl, r7
    2096:	e5db      	b.n	1c50 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2098:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    209c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    209e:	ea4f 71e0 	mov.w	r1, r0, asr #31
    20a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    20a6:	d105      	bne.n	20b4 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    20a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    20ac:	930a      	str	r3, [sp, #40]	; 0x28
    20ae:	2300      	movs	r3, #0
    20b0:	930b      	str	r3, [sp, #44]	; 0x2c
    20b2:	e7e0      	b.n	2076 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    20b4:	2a02      	cmp	r2, #2
    20b6:	d1de      	bne.n	2076 <cbvprintf+0x436>
				value->sint = (short)value->sint;
    20b8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    20bc:	e7d2      	b.n	2064 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    20be:	2b02      	cmp	r3, #2
    20c0:	d123      	bne.n	210a <cbvprintf+0x4ca>
			switch (length_mod) {
    20c2:	1ed3      	subs	r3, r2, #3
    20c4:	2b04      	cmp	r3, #4
    20c6:	d813      	bhi.n	20f0 <cbvprintf+0x4b0>
    20c8:	e8df f003 	tbb	[pc, r3]
    20cc:	120a0a03 	.word	0x120a0a03
    20d0:	12          	.byte	0x12
    20d1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    20d2:	6820      	ldr	r0, [r4, #0]
    20d4:	900a      	str	r0, [sp, #40]	; 0x28
    20d6:	2100      	movs	r1, #0
    20d8:	1d23      	adds	r3, r4, #4
    20da:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    20dc:	461c      	mov	r4, r3
    20de:	e7ca      	b.n	2076 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    20e0:	3407      	adds	r4, #7
    20e2:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    20e6:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    20ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    20ee:	e7f5      	b.n	20dc <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    20f0:	f854 3b04 	ldr.w	r3, [r4], #4
    20f4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    20f6:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    20f8:	f04f 0300 	mov.w	r3, #0
    20fc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    20fe:	d0d3      	beq.n	20a8 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    2100:	2a02      	cmp	r2, #2
    2102:	d1b8      	bne.n	2076 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    2104:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    2108:	e7d0      	b.n	20ac <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    210a:	2b04      	cmp	r3, #4
    210c:	d107      	bne.n	211e <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    210e:	3407      	adds	r4, #7
    2110:	f024 0407 	bic.w	r4, r4, #7
    2114:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    2118:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    211c:	e7ab      	b.n	2076 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    211e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    2120:	bf04      	itt	eq
    2122:	f854 3b04 	ldreq.w	r3, [r4], #4
    2126:	930a      	streq	r3, [sp, #40]	; 0x28
    2128:	e7a5      	b.n	2076 <cbvprintf+0x436>
		switch (conv->specifier) {
    212a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    212e:	2878      	cmp	r0, #120	; 0x78
    2130:	d8b0      	bhi.n	2094 <cbvprintf+0x454>
    2132:	2862      	cmp	r0, #98	; 0x62
    2134:	d822      	bhi.n	217c <cbvprintf+0x53c>
    2136:	2825      	cmp	r0, #37	; 0x25
    2138:	f43f ad93 	beq.w	1c62 <cbvprintf+0x22>
    213c:	2858      	cmp	r0, #88	; 0x58
    213e:	d1a9      	bne.n	2094 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2140:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    2144:	9300      	str	r3, [sp, #0]
    2146:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    214a:	ab04      	add	r3, sp, #16
    214c:	aa0c      	add	r2, sp, #48	; 0x30
    214e:	f007 fcb2 	bl	9ab6 <encode_uint>
    2152:	4682      	mov	sl, r0
			if (precision >= 0) {
    2154:	f1b8 0f00 	cmp.w	r8, #0
    2158:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    215c:	db0c      	blt.n	2178 <cbvprintf+0x538>
				conv->flag_zero = false;
    215e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    2162:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    2166:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    216a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    216c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    2170:	d902      	bls.n	2178 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    2172:	eba8 0303 	sub.w	r3, r8, r3
    2176:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    2178:	4680      	mov	r8, r0
    217a:	e03d      	b.n	21f8 <cbvprintf+0x5b8>
    217c:	3863      	subs	r0, #99	; 0x63
    217e:	2815      	cmp	r0, #21
    2180:	d888      	bhi.n	2094 <cbvprintf+0x454>
    2182:	a101      	add	r1, pc, #4	; (adr r1, 2188 <cbvprintf+0x548>)
    2184:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    2188:	00002209 	.word	0x00002209
    218c:	0000226d 	.word	0x0000226d
    2190:	00002095 	.word	0x00002095
    2194:	00002095 	.word	0x00002095
    2198:	00002095 	.word	0x00002095
    219c:	00002095 	.word	0x00002095
    21a0:	0000226d 	.word	0x0000226d
    21a4:	00002095 	.word	0x00002095
    21a8:	00002095 	.word	0x00002095
    21ac:	00002095 	.word	0x00002095
    21b0:	00002095 	.word	0x00002095
    21b4:	000022cb 	.word	0x000022cb
    21b8:	00002299 	.word	0x00002299
    21bc:	0000229d 	.word	0x0000229d
    21c0:	00002095 	.word	0x00002095
    21c4:	00002095 	.word	0x00002095
    21c8:	000021e1 	.word	0x000021e1
    21cc:	00002095 	.word	0x00002095
    21d0:	00002299 	.word	0x00002299
    21d4:	00002095 	.word	0x00002095
    21d8:	00002095 	.word	0x00002095
    21dc:	00002299 	.word	0x00002299
			if (precision >= 0) {
    21e0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    21e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    21e8:	db0a      	blt.n	2200 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    21ea:	4641      	mov	r1, r8
    21ec:	4650      	mov	r0, sl
    21ee:	f007 fd78 	bl	9ce2 <strnlen>
			bpe = bps + len;
    21f2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    21f6:	2600      	movs	r6, #0
		if (bps == NULL) {
    21f8:	f1ba 0f00 	cmp.w	sl, #0
    21fc:	d10c      	bne.n	2218 <cbvprintf+0x5d8>
    21fe:	e749      	b.n	2094 <cbvprintf+0x454>
				len = strlen(bps);
    2200:	4650      	mov	r0, sl
    2202:	f007 fd67 	bl	9cd4 <strlen>
    2206:	e7f4      	b.n	21f2 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    220a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    220e:	2600      	movs	r6, #0
			bpe = buf + 1;
    2210:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    2214:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    2218:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    221c:	b106      	cbz	r6, 2220 <cbvprintf+0x5e0>
			nj_len += 1U;
    221e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2220:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2224:	06d0      	lsls	r0, r2, #27
    2226:	d56b      	bpl.n	2300 <cbvprintf+0x6c0>
			nj_len += 2U;
    2228:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    222a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    222c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    222e:	bf48      	it	mi
    2230:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    2232:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2234:	bf48      	it	mi
    2236:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    2238:	f1b9 0f00 	cmp.w	r9, #0
    223c:	dd79      	ble.n	2332 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    223e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    2242:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    2246:	f3c2 0380 	ubfx	r3, r2, #2, #1
    224a:	9303      	str	r3, [sp, #12]
    224c:	0753      	lsls	r3, r2, #29
    224e:	d470      	bmi.n	2332 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    2250:	0650      	lsls	r0, r2, #25
    2252:	d564      	bpl.n	231e <cbvprintf+0x6de>
					if (sign != 0) {
    2254:	b146      	cbz	r6, 2268 <cbvprintf+0x628>
						OUTC(sign);
    2256:	9b02      	ldr	r3, [sp, #8]
    2258:	4659      	mov	r1, fp
    225a:	4630      	mov	r0, r6
    225c:	4798      	blx	r3
    225e:	2800      	cmp	r0, #0
    2260:	db5a      	blt.n	2318 <cbvprintf+0x6d8>
						sign = 0;
    2262:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    2264:	3501      	adds	r5, #1
						sign = 0;
    2266:	461e      	mov	r6, r3
					pad = '0';
    2268:	2330      	movs	r3, #48	; 0x30
    226a:	e059      	b.n	2320 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    226c:	071e      	lsls	r6, r3, #28
    226e:	d411      	bmi.n	2294 <cbvprintf+0x654>
				sign = ' ';
    2270:	f013 0610 	ands.w	r6, r3, #16
    2274:	bf18      	it	ne
    2276:	2620      	movne	r6, #32
			sint = value->sint;
    2278:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    227c:	2a00      	cmp	r2, #0
    227e:	f173 0100 	sbcs.w	r1, r3, #0
    2282:	f6bf af5d 	bge.w	2140 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    2286:	4252      	negs	r2, r2
    2288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    228c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    2290:	262d      	movs	r6, #45	; 0x2d
    2292:	e755      	b.n	2140 <cbvprintf+0x500>
				sign = '+';
    2294:	262b      	movs	r6, #43	; 0x2b
    2296:	e7ef      	b.n	2278 <cbvprintf+0x638>
		switch (conv->specifier) {
    2298:	2600      	movs	r6, #0
    229a:	e751      	b.n	2140 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    229c:	980a      	ldr	r0, [sp, #40]	; 0x28
    229e:	b348      	cbz	r0, 22f4 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    22a0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    22a4:	9300      	str	r3, [sp, #0]
    22a6:	aa0c      	add	r2, sp, #48	; 0x30
    22a8:	ab04      	add	r3, sp, #16
    22aa:	2100      	movs	r1, #0
    22ac:	f007 fc03 	bl	9ab6 <encode_uint>
				conv->altform_0c = true;
    22b0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    22b4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    22b8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    22bc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    22c0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    22c2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    22c6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    22c8:	e744      	b.n	2154 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    22ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    22cc:	2a07      	cmp	r2, #7
    22ce:	f63f aee1 	bhi.w	2094 <cbvprintf+0x454>
    22d2:	e8df f002 	tbb	[pc, r2]
    22d6:	040d      	.short	0x040d
    22d8:	08080d06 	.word	0x08080d06
    22dc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    22de:	701d      	strb	r5, [r3, #0]
		break;
    22e0:	e6d8      	b.n	2094 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    22e2:	801d      	strh	r5, [r3, #0]
		break;
    22e4:	e6d6      	b.n	2094 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    22e6:	4628      	mov	r0, r5
    22e8:	17e9      	asrs	r1, r5, #31
    22ea:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    22ee:	e6d1      	b.n	2094 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    22f0:	601d      	str	r5, [r3, #0]
		break;
    22f2:	e6cf      	b.n	2094 <cbvprintf+0x454>
			bpe = bps + 5;
    22f4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 23bc <cbvprintf+0x77c>
    22f8:	4606      	mov	r6, r0
			bps = "(nil)";
    22fa:	f1a8 0a05 	sub.w	sl, r8, #5
    22fe:	e78b      	b.n	2218 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    2300:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    2302:	bf48      	it	mi
    2304:	3301      	addmi	r3, #1
    2306:	e790      	b.n	222a <cbvprintf+0x5ea>
					OUTC(pad);
    2308:	4618      	mov	r0, r3
    230a:	9303      	str	r3, [sp, #12]
    230c:	4659      	mov	r1, fp
    230e:	9b02      	ldr	r3, [sp, #8]
    2310:	4798      	blx	r3
    2312:	2800      	cmp	r0, #0
    2314:	9b03      	ldr	r3, [sp, #12]
    2316:	da04      	bge.n	2322 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    2318:	b011      	add	sp, #68	; 0x44
    231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    231e:	2320      	movs	r3, #32
    2320:	444d      	add	r5, r9
    2322:	464a      	mov	r2, r9
				while (width-- > 0) {
    2324:	2a00      	cmp	r2, #0
    2326:	eba5 0109 	sub.w	r1, r5, r9
    232a:	f109 39ff 	add.w	r9, r9, #4294967295
    232e:	dceb      	bgt.n	2308 <cbvprintf+0x6c8>
    2330:	460d      	mov	r5, r1
		if (sign != 0) {
    2332:	b136      	cbz	r6, 2342 <cbvprintf+0x702>
			OUTC(sign);
    2334:	9b02      	ldr	r3, [sp, #8]
    2336:	4659      	mov	r1, fp
    2338:	4630      	mov	r0, r6
    233a:	4798      	blx	r3
    233c:	2800      	cmp	r0, #0
    233e:	dbeb      	blt.n	2318 <cbvprintf+0x6d8>
    2340:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2342:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2346:	06d9      	lsls	r1, r3, #27
    2348:	d401      	bmi.n	234e <cbvprintf+0x70e>
    234a:	071a      	lsls	r2, r3, #28
    234c:	d506      	bpl.n	235c <cbvprintf+0x71c>
				OUTC('0');
    234e:	9b02      	ldr	r3, [sp, #8]
    2350:	4659      	mov	r1, fp
    2352:	2030      	movs	r0, #48	; 0x30
    2354:	4798      	blx	r3
    2356:	2800      	cmp	r0, #0
    2358:	dbde      	blt.n	2318 <cbvprintf+0x6d8>
    235a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    235c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2360:	06db      	lsls	r3, r3, #27
    2362:	d507      	bpl.n	2374 <cbvprintf+0x734>
				OUTC(conv->specifier);
    2364:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    2368:	9b02      	ldr	r3, [sp, #8]
    236a:	4659      	mov	r1, fp
    236c:	4798      	blx	r3
    236e:	2800      	cmp	r0, #0
    2370:	dbd2      	blt.n	2318 <cbvprintf+0x6d8>
    2372:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2374:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2376:	442e      	add	r6, r5
    2378:	1b73      	subs	r3, r6, r5
    237a:	2b00      	cmp	r3, #0
    237c:	dc16      	bgt.n	23ac <cbvprintf+0x76c>
			OUTS(bps, bpe);
    237e:	9802      	ldr	r0, [sp, #8]
    2380:	4643      	mov	r3, r8
    2382:	4652      	mov	r2, sl
    2384:	4659      	mov	r1, fp
    2386:	f007 fbe1 	bl	9b4c <outs>
    238a:	2800      	cmp	r0, #0
    238c:	dbc4      	blt.n	2318 <cbvprintf+0x6d8>
    238e:	4405      	add	r5, r0
		while (width > 0) {
    2390:	44a9      	add	r9, r5
    2392:	eba9 0305 	sub.w	r3, r9, r5
    2396:	2b00      	cmp	r3, #0
    2398:	f77f ae7c 	ble.w	2094 <cbvprintf+0x454>
			OUTC(' ');
    239c:	9b02      	ldr	r3, [sp, #8]
    239e:	4659      	mov	r1, fp
    23a0:	2020      	movs	r0, #32
    23a2:	4798      	blx	r3
    23a4:	2800      	cmp	r0, #0
    23a6:	dbb7      	blt.n	2318 <cbvprintf+0x6d8>
    23a8:	3501      	adds	r5, #1
			--width;
    23aa:	e7f2      	b.n	2392 <cbvprintf+0x752>
				OUTC('0');
    23ac:	9b02      	ldr	r3, [sp, #8]
    23ae:	4659      	mov	r1, fp
    23b0:	2030      	movs	r0, #48	; 0x30
    23b2:	4798      	blx	r3
    23b4:	2800      	cmp	r0, #0
    23b6:	dbaf      	blt.n	2318 <cbvprintf+0x6d8>
    23b8:	3501      	adds	r5, #1
    23ba:	e7dd      	b.n	2378 <cbvprintf+0x738>
    23bc:	0000b280 	.word	0x0000b280

000023c0 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    23c0:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    23c2:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    23c6:	2b02      	cmp	r3, #2
{
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	4604      	mov	r4, r0
    23cc:	460e      	mov	r6, r1
	notify->result = res;
    23ce:	6081      	str	r1, [r0, #8]
	switch (method) {
    23d0:	d010      	beq.n	23f4 <sys_notify_finalize+0x34>
    23d2:	2b03      	cmp	r3, #3
    23d4:	d004      	beq.n	23e0 <sys_notify_finalize+0x20>
    23d6:	2b01      	cmp	r3, #1
    23d8:	d10f      	bne.n	23fa <sys_notify_finalize+0x3a>
    23da:	2500      	movs	r5, #0
    23dc:	4628      	mov	r0, r5
    23de:	e001      	b.n	23e4 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    23e0:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    23e2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    23e4:	2300      	movs	r3, #0
    23e6:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    23e8:	b110      	cbz	r0, 23f0 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    23ea:	4631      	mov	r1, r6
    23ec:	f004 fdec 	bl	6fc8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    23f0:	4628      	mov	r0, r5
    23f2:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    23f4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    23f6:	2500      	movs	r5, #0
		break;
    23f8:	e7f4      	b.n	23e4 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    23fa:	4a06      	ldr	r2, [pc, #24]	; (2414 <sys_notify_finalize+0x54>)
    23fc:	4906      	ldr	r1, [pc, #24]	; (2418 <sys_notify_finalize+0x58>)
    23fe:	4807      	ldr	r0, [pc, #28]	; (241c <sys_notify_finalize+0x5c>)
    2400:	2345      	movs	r3, #69	; 0x45
    2402:	f007 fc28 	bl	9c56 <printk>
    2406:	4803      	ldr	r0, [pc, #12]	; (2414 <sys_notify_finalize+0x54>)
    2408:	2145      	movs	r1, #69	; 0x45
    240a:	f007 fb4d 	bl	9aa8 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    240e:	2500      	movs	r5, #0
    2410:	e7e7      	b.n	23e2 <sys_notify_finalize+0x22>
    2412:	bf00      	nop
    2414:	0000b281 	.word	0x0000b281
    2418:	0000ac81 	.word	0x0000ac81
    241c:	0000ac83 	.word	0x0000ac83

00002420 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2420:	4801      	ldr	r0, [pc, #4]	; (2428 <nrf_cc3xx_platform_abort_init+0x8>)
    2422:	f007 b9a7 	b.w	9774 <nrf_cc3xx_platform_set_abort>
    2426:	bf00      	nop
    2428:	0000a9e0 	.word	0x0000a9e0

0000242c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    242c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    242e:	b1d0      	cbz	r0, 2466 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2430:	6843      	ldr	r3, [r0, #4]
    2432:	2b04      	cmp	r3, #4
    2434:	d111      	bne.n	245a <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2436:	2200      	movs	r2, #0
    2438:	6803      	ldr	r3, [r0, #0]
    243a:	f3bf 8f5b 	dmb	ish
    243e:	e853 1f00 	ldrex	r1, [r3]
    2442:	2901      	cmp	r1, #1
    2444:	d103      	bne.n	244e <mutex_unlock_platform+0x22>
    2446:	e843 2000 	strex	r0, r2, [r3]
    244a:	2800      	cmp	r0, #0
    244c:	d1f7      	bne.n	243e <mutex_unlock_platform+0x12>
    244e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2452:	4807      	ldr	r0, [pc, #28]	; (2470 <mutex_unlock_platform+0x44>)
    2454:	bf08      	it	eq
    2456:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2458:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    245a:	b13b      	cbz	r3, 246c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    245c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    245e:	f004 fc75 	bl	6d4c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2462:	2000      	movs	r0, #0
    2464:	e7f8      	b.n	2458 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2466:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    246a:	e7f5      	b.n	2458 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    246c:	4801      	ldr	r0, [pc, #4]	; (2474 <mutex_unlock_platform+0x48>)
    246e:	e7f3      	b.n	2458 <mutex_unlock_platform+0x2c>
    2470:	ffff8fe9 	.word	0xffff8fe9
    2474:	ffff8fea 	.word	0xffff8fea

00002478 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2478:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    247a:	4604      	mov	r4, r0
    247c:	b918      	cbnz	r0, 2486 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    247e:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <mutex_free_platform+0x3c>)
    2480:	480d      	ldr	r0, [pc, #52]	; (24b8 <mutex_free_platform+0x40>)
    2482:	685b      	ldr	r3, [r3, #4]
    2484:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2486:	6861      	ldr	r1, [r4, #4]
    2488:	2908      	cmp	r1, #8
    248a:	d00d      	beq.n	24a8 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    248c:	f031 0304 	bics.w	r3, r1, #4
    2490:	d00a      	beq.n	24a8 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2492:	f011 0102 	ands.w	r1, r1, #2
    2496:	d008      	beq.n	24aa <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2498:	4808      	ldr	r0, [pc, #32]	; (24bc <mutex_free_platform+0x44>)
    249a:	4621      	mov	r1, r4
    249c:	f004 faf2 	bl	6a84 <k_mem_slab_free>
        mutex->mutex = NULL;
    24a0:	2300      	movs	r3, #0
    24a2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    24a4:	2300      	movs	r3, #0
    24a6:	6063      	str	r3, [r4, #4]
}
    24a8:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    24aa:	6820      	ldr	r0, [r4, #0]
    24ac:	2214      	movs	r2, #20
    24ae:	f007 fc38 	bl	9d22 <memset>
    24b2:	e7f7      	b.n	24a4 <mutex_free_platform+0x2c>
    24b4:	20000198 	.word	0x20000198
    24b8:	0000b2a4 	.word	0x0000b2a4
    24bc:	20000990 	.word	0x20000990

000024c0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24c0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    24c2:	4604      	mov	r4, r0
    24c4:	b918      	cbnz	r0, 24ce <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    24c6:	4b16      	ldr	r3, [pc, #88]	; (2520 <mutex_init_platform+0x60>)
    24c8:	4816      	ldr	r0, [pc, #88]	; (2524 <mutex_init_platform+0x64>)
    24ca:	685b      	ldr	r3, [r3, #4]
    24cc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    24ce:	6863      	ldr	r3, [r4, #4]
    24d0:	2b04      	cmp	r3, #4
    24d2:	d023      	beq.n	251c <mutex_init_platform+0x5c>
    24d4:	2b08      	cmp	r3, #8
    24d6:	d021      	beq.n	251c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    24d8:	b9cb      	cbnz	r3, 250e <mutex_init_platform+0x4e>
    24da:	6823      	ldr	r3, [r4, #0]
    24dc:	b9bb      	cbnz	r3, 250e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    24de:	4812      	ldr	r0, [pc, #72]	; (2528 <mutex_init_platform+0x68>)
    24e0:	f04f 32ff 	mov.w	r2, #4294967295
    24e4:	f04f 33ff 	mov.w	r3, #4294967295
    24e8:	4621      	mov	r1, r4
    24ea:	f004 fa5f 	bl	69ac <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    24ee:	b908      	cbnz	r0, 24f4 <mutex_init_platform+0x34>
    24f0:	6823      	ldr	r3, [r4, #0]
    24f2:	b91b      	cbnz	r3, 24fc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    24f4:	4b0a      	ldr	r3, [pc, #40]	; (2520 <mutex_init_platform+0x60>)
    24f6:	480d      	ldr	r0, [pc, #52]	; (252c <mutex_init_platform+0x6c>)
    24f8:	685b      	ldr	r3, [r3, #4]
    24fa:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    24fc:	6820      	ldr	r0, [r4, #0]
    24fe:	2214      	movs	r2, #20
    2500:	2100      	movs	r1, #0
    2502:	f007 fc0e 	bl	9d22 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2506:	6863      	ldr	r3, [r4, #4]
    2508:	f043 0302 	orr.w	r3, r3, #2
    250c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    250e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2510:	f008 f86b 	bl	a5ea <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2514:	6863      	ldr	r3, [r4, #4]
    2516:	f043 0301 	orr.w	r3, r3, #1
    251a:	6063      	str	r3, [r4, #4]
}
    251c:	bd10      	pop	{r4, pc}
    251e:	bf00      	nop
    2520:	20000198 	.word	0x20000198
    2524:	0000b2a4 	.word	0x0000b2a4
    2528:	20000990 	.word	0x20000990
    252c:	0000b2ca 	.word	0x0000b2ca

00002530 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2530:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2532:	b308      	cbz	r0, 2578 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    2534:	6843      	ldr	r3, [r0, #4]
    2536:	2b04      	cmp	r3, #4
    2538:	d110      	bne.n	255c <mutex_lock_platform+0x2c>
    253a:	2201      	movs	r2, #1
    253c:	6803      	ldr	r3, [r0, #0]
    253e:	f3bf 8f5b 	dmb	ish
    2542:	e853 1f00 	ldrex	r1, [r3]
    2546:	2900      	cmp	r1, #0
    2548:	d103      	bne.n	2552 <mutex_lock_platform+0x22>
    254a:	e843 2000 	strex	r0, r2, [r3]
    254e:	2800      	cmp	r0, #0
    2550:	d1f7      	bne.n	2542 <mutex_lock_platform+0x12>
    2552:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2556:	d10b      	bne.n	2570 <mutex_lock_platform+0x40>
    2558:	2000      	movs	r0, #0
}
    255a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    255c:	b153      	cbz	r3, 2574 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    255e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2560:	f04f 32ff 	mov.w	r2, #4294967295
    2564:	f04f 33ff 	mov.w	r3, #4294967295
    2568:	f004 faf0 	bl	6b4c <z_impl_k_mutex_lock>
        if (ret == 0) {
    256c:	2800      	cmp	r0, #0
    256e:	d0f3      	beq.n	2558 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2570:	4803      	ldr	r0, [pc, #12]	; (2580 <mutex_lock_platform+0x50>)
    2572:	e7f2      	b.n	255a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2574:	4803      	ldr	r0, [pc, #12]	; (2584 <mutex_lock_platform+0x54>)
    2576:	e7f0      	b.n	255a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2578:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    257c:	e7ed      	b.n	255a <mutex_lock_platform+0x2a>
    257e:	bf00      	nop
    2580:	ffff8fe9 	.word	0xffff8fe9
    2584:	ffff8fea 	.word	0xffff8fea

00002588 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2588:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    258a:	4906      	ldr	r1, [pc, #24]	; (25a4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    258c:	4806      	ldr	r0, [pc, #24]	; (25a8 <nrf_cc3xx_platform_mutex_init+0x20>)
    258e:	2340      	movs	r3, #64	; 0x40
    2590:	2214      	movs	r2, #20
    2592:	f008 f80e 	bl	a5b2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    259a:	4904      	ldr	r1, [pc, #16]	; (25ac <nrf_cc3xx_platform_mutex_init+0x24>)
    259c:	4804      	ldr	r0, [pc, #16]	; (25b0 <nrf_cc3xx_platform_mutex_init+0x28>)
    259e:	f007 b94b 	b.w	9838 <nrf_cc3xx_platform_set_mutexes>
    25a2:	bf00      	nop
    25a4:	200009b0 	.word	0x200009b0
    25a8:	20000990 	.word	0x20000990
    25ac:	0000a9f8 	.word	0x0000a9f8
    25b0:	0000a9e8 	.word	0x0000a9e8

000025b4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    25b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    25b8:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    25bc:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    25be:	f019 0f08 	tst.w	r9, #8
{
    25c2:	4604      	mov	r4, r0
    25c4:	9203      	str	r2, [sp, #12]
	if (processing) {
    25c6:	d022      	beq.n	260e <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    25c8:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    25ca:	bf0c      	ite	eq
    25cc:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    25d0:	f049 0920 	orrne.w	r9, r9, #32
    25d4:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    25d8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    25da:	4620      	mov	r0, r4
    25dc:	f006 f9b6 	bl	894c <z_spin_unlock_valid>
    25e0:	b968      	cbnz	r0, 25fe <process_event+0x4a>
    25e2:	4a9f      	ldr	r2, [pc, #636]	; (2860 <process_event+0x2ac>)
    25e4:	499f      	ldr	r1, [pc, #636]	; (2864 <process_event+0x2b0>)
    25e6:	48a0      	ldr	r0, [pc, #640]	; (2868 <process_event+0x2b4>)
    25e8:	23ac      	movs	r3, #172	; 0xac
    25ea:	f007 fb34 	bl	9c56 <printk>
    25ee:	489f      	ldr	r0, [pc, #636]	; (286c <process_event+0x2b8>)
    25f0:	4621      	mov	r1, r4
    25f2:	f007 fb30 	bl	9c56 <printk>
    25f6:	489a      	ldr	r0, [pc, #616]	; (2860 <process_event+0x2ac>)
    25f8:	21ac      	movs	r1, #172	; 0xac
    25fa:	f007 fa55 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    25fe:	9b03      	ldr	r3, [sp, #12]
    2600:	f383 8811 	msr	BASEPRI, r3
    2604:	f3bf 8f6f 	isb	sy
}
    2608:	b005      	add	sp, #20
    260a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    260e:	4f98      	ldr	r7, [pc, #608]	; (2870 <process_event+0x2bc>)
    2610:	f8df 8254 	ldr.w	r8, [pc, #596]	; 2868 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2614:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    2618:	2902      	cmp	r1, #2
    261a:	d106      	bne.n	262a <process_event+0x76>
			evt = process_recheck(mgr);
    261c:	4620      	mov	r0, r4
    261e:	f007 fac4 	bl	9baa <process_recheck>
		if (evt == EVT_NOP) {
    2622:	2800      	cmp	r0, #0
    2624:	d0d8      	beq.n	25d8 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    2626:	2801      	cmp	r0, #1
    2628:	d168      	bne.n	26fc <process_event+0x148>
			res = mgr->last_res;
    262a:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    262e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    2630:	f1bb 0f00 	cmp.w	fp, #0
    2634:	da0a      	bge.n	264c <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2636:	2600      	movs	r6, #0
		*clients = mgr->clients;
    2638:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    263a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    263e:	e9c4 6600 	strd	r6, r6, [r4]
    2642:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2646:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    2648:	9601      	str	r6, [sp, #4]
    264a:	e027      	b.n	269c <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    264c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2650:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2652:	2901      	cmp	r1, #1
    2654:	d834      	bhi.n	26c0 <process_event+0x10c>
	list->head = NULL;
    2656:	2100      	movs	r1, #0
    2658:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    265c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    265e:	6825      	ldr	r5, [r4, #0]
    2660:	b29b      	uxth	r3, r3
	list->tail = NULL;
    2662:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2666:	d10c      	bne.n	2682 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2668:	428d      	cmp	r5, r1
    266a:	462a      	mov	r2, r5
    266c:	bf38      	it	cc
    266e:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2670:	b12a      	cbz	r2, 267e <process_event+0xca>
				mgr->refs += 1U;
    2672:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2674:	6812      	ldr	r2, [r2, #0]
    2676:	3101      	adds	r1, #1
    2678:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    267a:	2a00      	cmp	r2, #0
    267c:	d1f8      	bne.n	2670 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    267e:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2682:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2684:	4620      	mov	r0, r4
    2686:	f007 fa90 	bl	9baa <process_recheck>
    268a:	4606      	mov	r6, r0
    268c:	2800      	cmp	r0, #0
    268e:	d0db      	beq.n	2648 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2690:	8ba3      	ldrh	r3, [r4, #28]
    2692:	f043 0320 	orr.w	r3, r3, #32
    2696:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    2698:	2300      	movs	r3, #0
    269a:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    269c:	8ba3      	ldrh	r3, [r4, #28]
    269e:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    26a2:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    26a4:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    26a6:	d003      	beq.n	26b0 <process_event+0xfc>
		if (do_monitors
    26a8:	68a2      	ldr	r2, [r4, #8]
    26aa:	2a00      	cmp	r2, #0
    26ac:	f040 80f0 	bne.w	2890 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    26b0:	b91d      	cbnz	r5, 26ba <process_event+0x106>
		    || (transit != NULL)) {
    26b2:	9a01      	ldr	r2, [sp, #4]
    26b4:	2a00      	cmp	r2, #0
    26b6:	f000 8136 	beq.w	2926 <process_event+0x372>
    26ba:	f04f 0900 	mov.w	r9, #0
    26be:	e0e9      	b.n	2894 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    26c0:	2a04      	cmp	r2, #4
    26c2:	d10e      	bne.n	26e2 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    26c4:	f023 0307 	bic.w	r3, r3, #7
    26c8:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    26ca:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    26cc:	4620      	mov	r0, r4
    26ce:	f007 fa6c 	bl	9baa <process_recheck>
    26d2:	4605      	mov	r5, r0
    26d4:	b118      	cbz	r0, 26de <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    26d6:	f042 0220 	orr.w	r2, r2, #32
    26da:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    26dc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    26de:	9501      	str	r5, [sp, #4]
    26e0:	e7dc      	b.n	269c <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    26e2:	4640      	mov	r0, r8
    26e4:	4963      	ldr	r1, [pc, #396]	; (2874 <process_event+0x2c0>)
    26e6:	f240 131b 	movw	r3, #283	; 0x11b
    26ea:	463a      	mov	r2, r7
    26ec:	f007 fab3 	bl	9c56 <printk>
    26f0:	f240 111b 	movw	r1, #283	; 0x11b
    26f4:	4638      	mov	r0, r7
    26f6:	f007 f9d7 	bl	9aa8 <assert_post_action>
    26fa:	e7ef      	b.n	26dc <process_event+0x128>
		} else if (evt == EVT_START) {
    26fc:	2803      	cmp	r0, #3
    26fe:	d135      	bne.n	276c <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2700:	f1b9 0f00 	cmp.w	r9, #0
    2704:	d00b      	beq.n	271e <process_event+0x16a>
    2706:	495c      	ldr	r1, [pc, #368]	; (2878 <process_event+0x2c4>)
    2708:	4640      	mov	r0, r8
    270a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    270e:	463a      	mov	r2, r7
    2710:	f007 faa1 	bl	9c56 <printk>
    2714:	f44f 71ab 	mov.w	r1, #342	; 0x156
    2718:	4638      	mov	r0, r7
    271a:	f007 f9c5 	bl	9aa8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    271e:	6823      	ldr	r3, [r4, #0]
    2720:	b95b      	cbnz	r3, 273a <process_event+0x186>
    2722:	4956      	ldr	r1, [pc, #344]	; (287c <process_event+0x2c8>)
    2724:	4640      	mov	r0, r8
    2726:	f240 1357 	movw	r3, #343	; 0x157
    272a:	463a      	mov	r2, r7
    272c:	f007 fa93 	bl	9c56 <printk>
    2730:	f240 1157 	movw	r1, #343	; 0x157
    2734:	4638      	mov	r0, r7
    2736:	f007 f9b7 	bl	9aa8 <assert_post_action>
			transit = mgr->transitions->start;
    273a:	6923      	ldr	r3, [r4, #16]
    273c:	681b      	ldr	r3, [r3, #0]
    273e:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2740:	b95b      	cbnz	r3, 275a <process_event+0x1a6>
    2742:	494f      	ldr	r1, [pc, #316]	; (2880 <process_event+0x2cc>)
    2744:	4640      	mov	r0, r8
    2746:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    274a:	463a      	mov	r2, r7
    274c:	f007 fa83 	bl	9c56 <printk>
    2750:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    2754:	4638      	mov	r0, r7
    2756:	f007 f9a7 	bl	9aa8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    275a:	8ba3      	ldrh	r3, [r4, #28]
    275c:	f023 0307 	bic.w	r3, r3, #7
    2760:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    2764:	83a3      	strh	r3, [r4, #28]
}
    2766:	2500      	movs	r5, #0
		res = 0;
    2768:	46ab      	mov	fp, r5
}
    276a:	e797      	b.n	269c <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    276c:	2804      	cmp	r0, #4
    276e:	d132      	bne.n	27d6 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    2770:	f1b9 0f02 	cmp.w	r9, #2
    2774:	d00b      	beq.n	278e <process_event+0x1da>
    2776:	4943      	ldr	r1, [pc, #268]	; (2884 <process_event+0x2d0>)
    2778:	4640      	mov	r0, r8
    277a:	f240 135d 	movw	r3, #349	; 0x15d
    277e:	463a      	mov	r2, r7
    2780:	f007 fa69 	bl	9c56 <printk>
    2784:	f240 115d 	movw	r1, #349	; 0x15d
    2788:	4638      	mov	r0, r7
    278a:	f007 f98d 	bl	9aa8 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    278e:	8be3      	ldrh	r3, [r4, #30]
    2790:	b15b      	cbz	r3, 27aa <process_event+0x1f6>
    2792:	493d      	ldr	r1, [pc, #244]	; (2888 <process_event+0x2d4>)
    2794:	4640      	mov	r0, r8
    2796:	f44f 73af 	mov.w	r3, #350	; 0x15e
    279a:	463a      	mov	r2, r7
    279c:	f007 fa5b 	bl	9c56 <printk>
    27a0:	f44f 71af 	mov.w	r1, #350	; 0x15e
    27a4:	4638      	mov	r0, r7
    27a6:	f007 f97f 	bl	9aa8 <assert_post_action>
			transit = mgr->transitions->stop;
    27aa:	6923      	ldr	r3, [r4, #16]
    27ac:	685b      	ldr	r3, [r3, #4]
    27ae:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    27b0:	b95b      	cbnz	r3, 27ca <process_event+0x216>
    27b2:	4933      	ldr	r1, [pc, #204]	; (2880 <process_event+0x2cc>)
    27b4:	4640      	mov	r0, r8
    27b6:	f240 1361 	movw	r3, #353	; 0x161
    27ba:	463a      	mov	r2, r7
    27bc:	f007 fa4b 	bl	9c56 <printk>
    27c0:	f240 1161 	movw	r1, #353	; 0x161
    27c4:	4638      	mov	r0, r7
    27c6:	f007 f96f 	bl	9aa8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    27ca:	8ba3      	ldrh	r3, [r4, #28]
    27cc:	f023 0307 	bic.w	r3, r3, #7
    27d0:	f043 0304 	orr.w	r3, r3, #4
    27d4:	e7c6      	b.n	2764 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    27d6:	2805      	cmp	r0, #5
    27d8:	d132      	bne.n	2840 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    27da:	f1b9 0f01 	cmp.w	r9, #1
    27de:	d00b      	beq.n	27f8 <process_event+0x244>
    27e0:	492a      	ldr	r1, [pc, #168]	; (288c <process_event+0x2d8>)
    27e2:	4640      	mov	r0, r8
    27e4:	f44f 73b2 	mov.w	r3, #356	; 0x164
    27e8:	463a      	mov	r2, r7
    27ea:	f007 fa34 	bl	9c56 <printk>
    27ee:	f44f 71b2 	mov.w	r1, #356	; 0x164
    27f2:	4638      	mov	r0, r7
    27f4:	f007 f958 	bl	9aa8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    27f8:	6823      	ldr	r3, [r4, #0]
    27fa:	b95b      	cbnz	r3, 2814 <process_event+0x260>
    27fc:	491f      	ldr	r1, [pc, #124]	; (287c <process_event+0x2c8>)
    27fe:	4640      	mov	r0, r8
    2800:	f240 1365 	movw	r3, #357	; 0x165
    2804:	463a      	mov	r2, r7
    2806:	f007 fa26 	bl	9c56 <printk>
    280a:	f240 1165 	movw	r1, #357	; 0x165
    280e:	4638      	mov	r0, r7
    2810:	f007 f94a 	bl	9aa8 <assert_post_action>
			transit = mgr->transitions->reset;
    2814:	6923      	ldr	r3, [r4, #16]
    2816:	689b      	ldr	r3, [r3, #8]
    2818:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    281a:	b95b      	cbnz	r3, 2834 <process_event+0x280>
    281c:	4918      	ldr	r1, [pc, #96]	; (2880 <process_event+0x2cc>)
    281e:	4640      	mov	r0, r8
    2820:	f44f 73b4 	mov.w	r3, #360	; 0x168
    2824:	463a      	mov	r2, r7
    2826:	f007 fa16 	bl	9c56 <printk>
    282a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    282e:	4638      	mov	r0, r7
    2830:	f007 f93a 	bl	9aa8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2834:	8ba3      	ldrh	r3, [r4, #28]
    2836:	f023 0307 	bic.w	r3, r3, #7
    283a:	f043 0305 	orr.w	r3, r3, #5
    283e:	e791      	b.n	2764 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    2840:	490c      	ldr	r1, [pc, #48]	; (2874 <process_event+0x2c0>)
    2842:	f240 136b 	movw	r3, #363	; 0x16b
    2846:	463a      	mov	r2, r7
    2848:	4640      	mov	r0, r8
    284a:	f007 fa04 	bl	9c56 <printk>
    284e:	2500      	movs	r5, #0
    2850:	f240 116b 	movw	r1, #363	; 0x16b
    2854:	4638      	mov	r0, r7
    2856:	f007 f927 	bl	9aa8 <assert_post_action>
		onoff_transition_fn transit = NULL;
    285a:	9501      	str	r5, [sp, #4]
    285c:	e784      	b.n	2768 <process_event+0x1b4>
    285e:	bf00      	nop
    2860:	0000b39a 	.word	0x0000b39a
    2864:	0000b3c0 	.word	0x0000b3c0
    2868:	0000ac83 	.word	0x0000ac83
    286c:	0000b3d7 	.word	0x0000b3d7
    2870:	0000b2f7 	.word	0x0000b2f7
    2874:	0000ac81 	.word	0x0000ac81
    2878:	0000b319 	.word	0x0000b319
    287c:	0000b325 	.word	0x0000b325
    2880:	0000b348 	.word	0x0000b348
    2884:	0000b35f 	.word	0x0000b35f
    2888:	0000b375 	.word	0x0000b375
    288c:	0000b384 	.word	0x0000b384
				   && !sys_slist_is_empty(&mgr->monitors);
    2890:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2894:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    2898:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    289c:	83a3      	strh	r3, [r4, #28]
    289e:	4650      	mov	r0, sl
    28a0:	f006 f854 	bl	894c <z_spin_unlock_valid>
    28a4:	b968      	cbnz	r0, 28c2 <process_event+0x30e>
    28a6:	4a3a      	ldr	r2, [pc, #232]	; (2990 <process_event+0x3dc>)
    28a8:	493a      	ldr	r1, [pc, #232]	; (2994 <process_event+0x3e0>)
    28aa:	23ac      	movs	r3, #172	; 0xac
    28ac:	4640      	mov	r0, r8
    28ae:	f007 f9d2 	bl	9c56 <printk>
    28b2:	4839      	ldr	r0, [pc, #228]	; (2998 <process_event+0x3e4>)
    28b4:	4651      	mov	r1, sl
    28b6:	f007 f9ce 	bl	9c56 <printk>
    28ba:	4835      	ldr	r0, [pc, #212]	; (2990 <process_event+0x3dc>)
    28bc:	21ac      	movs	r1, #172	; 0xac
    28be:	f007 f8f3 	bl	9aa8 <assert_post_action>
    28c2:	9b03      	ldr	r3, [sp, #12]
    28c4:	f383 8811 	msr	BASEPRI, r3
    28c8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    28cc:	f1b9 0f00 	cmp.w	r9, #0
    28d0:	d138      	bne.n	2944 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    28d2:	2d00      	cmp	r5, #0
    28d4:	d14b      	bne.n	296e <process_event+0x3ba>
			if (transit != NULL) {
    28d6:	9b01      	ldr	r3, [sp, #4]
    28d8:	b113      	cbz	r3, 28e0 <process_event+0x32c>
				transit(mgr, transition_complete);
    28da:	4930      	ldr	r1, [pc, #192]	; (299c <process_event+0x3e8>)
    28dc:	4620      	mov	r0, r4
    28de:	4798      	blx	r3
	__asm__ volatile(
    28e0:	f04f 0320 	mov.w	r3, #32
    28e4:	f3ef 8b11 	mrs	fp, BASEPRI
    28e8:	f383 8812 	msr	BASEPRI_MAX, r3
    28ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28f0:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    28f2:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28f6:	f006 f81b 	bl	8930 <z_spin_lock_valid>
    28fa:	b968      	cbnz	r0, 2918 <process_event+0x364>
    28fc:	4a24      	ldr	r2, [pc, #144]	; (2990 <process_event+0x3dc>)
    28fe:	4928      	ldr	r1, [pc, #160]	; (29a0 <process_event+0x3ec>)
    2900:	2381      	movs	r3, #129	; 0x81
    2902:	4640      	mov	r0, r8
    2904:	f007 f9a7 	bl	9c56 <printk>
    2908:	4826      	ldr	r0, [pc, #152]	; (29a4 <process_event+0x3f0>)
    290a:	4651      	mov	r1, sl
    290c:	f007 f9a3 	bl	9c56 <printk>
    2910:	481f      	ldr	r0, [pc, #124]	; (2990 <process_event+0x3dc>)
    2912:	2181      	movs	r1, #129	; 0x81
    2914:	f007 f8c8 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    2918:	4650      	mov	r0, sl
    291a:	f006 f827 	bl	896c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    291e:	8ba3      	ldrh	r3, [r4, #28]
    2920:	f023 0308 	bic.w	r3, r3, #8
    2924:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2926:	8ba3      	ldrh	r3, [r4, #28]
    2928:	06da      	lsls	r2, r3, #27
    292a:	d528      	bpl.n	297e <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    292c:	f023 0310 	bic.w	r3, r3, #16
    2930:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    2932:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2934:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    2938:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    293c:	2900      	cmp	r1, #0
    293e:	f47f ae6b 	bne.w	2618 <process_event+0x64>
out:
    2942:	e649      	b.n	25d8 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2944:	68a1      	ldr	r1, [r4, #8]
    2946:	2900      	cmp	r1, #0
    2948:	d0c3      	beq.n	28d2 <process_event+0x31e>
	return node->next;
    294a:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    294c:	9a02      	ldr	r2, [sp, #8]
    294e:	2b00      	cmp	r3, #0
    2950:	bf38      	it	cc
    2952:	2300      	movcc	r3, #0
    2954:	4699      	mov	r9, r3
    2956:	684b      	ldr	r3, [r1, #4]
    2958:	4620      	mov	r0, r4
    295a:	461e      	mov	r6, r3
    295c:	465b      	mov	r3, fp
    295e:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2960:	f1b9 0f00 	cmp.w	r9, #0
    2964:	d0b5      	beq.n	28d2 <process_event+0x31e>
    2966:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    296a:	4649      	mov	r1, r9
    296c:	e7ee      	b.n	294c <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    296e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    2970:	9a02      	ldr	r2, [sp, #8]
    2972:	682d      	ldr	r5, [r5, #0]
    2974:	465b      	mov	r3, fp
    2976:	4620      	mov	r0, r4
    2978:	f007 f933 	bl	9be2 <notify_one>
    297c:	e7a9      	b.n	28d2 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    297e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2982:	bf1e      	ittt	ne
    2984:	f023 0320 	bicne.w	r3, r3, #32
    2988:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    298a:	2102      	movne	r1, #2
    298c:	e7d2      	b.n	2934 <process_event+0x380>
    298e:	bf00      	nop
    2990:	0000b39a 	.word	0x0000b39a
    2994:	0000b3c0 	.word	0x0000b3c0
    2998:	0000b3d7 	.word	0x0000b3d7
    299c:	000029a9 	.word	0x000029a9
    29a0:	0000b3ec 	.word	0x0000b3ec
    29a4:	0000b401 	.word	0x0000b401

000029a8 <transition_complete>:
{
    29a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29aa:	4604      	mov	r4, r0
    29ac:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    29ae:	f100 0614 	add.w	r6, r0, #20
    29b2:	f04f 0320 	mov.w	r3, #32
    29b6:	f3ef 8711 	mrs	r7, BASEPRI
    29ba:	f383 8812 	msr	BASEPRI_MAX, r3
    29be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    29c2:	4630      	mov	r0, r6
    29c4:	f005 ffb4 	bl	8930 <z_spin_lock_valid>
    29c8:	b968      	cbnz	r0, 29e6 <transition_complete+0x3e>
    29ca:	4a0c      	ldr	r2, [pc, #48]	; (29fc <transition_complete+0x54>)
    29cc:	490c      	ldr	r1, [pc, #48]	; (2a00 <transition_complete+0x58>)
    29ce:	480d      	ldr	r0, [pc, #52]	; (2a04 <transition_complete+0x5c>)
    29d0:	2381      	movs	r3, #129	; 0x81
    29d2:	f007 f940 	bl	9c56 <printk>
    29d6:	480c      	ldr	r0, [pc, #48]	; (2a08 <transition_complete+0x60>)
    29d8:	4631      	mov	r1, r6
    29da:	f007 f93c 	bl	9c56 <printk>
    29de:	4807      	ldr	r0, [pc, #28]	; (29fc <transition_complete+0x54>)
    29e0:	2181      	movs	r1, #129	; 0x81
    29e2:	f007 f861 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    29e6:	4630      	mov	r0, r6
    29e8:	f005 ffc0 	bl	896c <z_spin_lock_set_owner>
	mgr->last_res = res;
    29ec:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    29ee:	463a      	mov	r2, r7
    29f0:	4620      	mov	r0, r4
    29f2:	2101      	movs	r1, #1
}
    29f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    29f8:	f7ff bddc 	b.w	25b4 <process_event>
    29fc:	0000b39a 	.word	0x0000b39a
    2a00:	0000b3ec 	.word	0x0000b3ec
    2a04:	0000ac83 	.word	0x0000ac83
    2a08:	0000b401 	.word	0x0000b401

00002a0c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a10:	4604      	mov	r4, r0
    2a12:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2a14:	f007 f8fb 	bl	9c0e <validate_args>

	if (rv < 0) {
    2a18:	1e05      	subs	r5, r0, #0
    2a1a:	db5e      	blt.n	2ada <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2a1c:	f104 0914 	add.w	r9, r4, #20
    2a20:	f04f 0320 	mov.w	r3, #32
    2a24:	f3ef 8a11 	mrs	sl, BASEPRI
    2a28:	f383 8812 	msr	BASEPRI_MAX, r3
    2a2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2a30:	4648      	mov	r0, r9
    2a32:	f005 ff7d 	bl	8930 <z_spin_lock_valid>
    2a36:	b968      	cbnz	r0, 2a54 <onoff_request+0x48>
    2a38:	4a38      	ldr	r2, [pc, #224]	; (2b1c <onoff_request+0x110>)
    2a3a:	4939      	ldr	r1, [pc, #228]	; (2b20 <onoff_request+0x114>)
    2a3c:	4839      	ldr	r0, [pc, #228]	; (2b24 <onoff_request+0x118>)
    2a3e:	2381      	movs	r3, #129	; 0x81
    2a40:	f007 f909 	bl	9c56 <printk>
    2a44:	4838      	ldr	r0, [pc, #224]	; (2b28 <onoff_request+0x11c>)
    2a46:	4649      	mov	r1, r9
    2a48:	f007 f905 	bl	9c56 <printk>
    2a4c:	4833      	ldr	r0, [pc, #204]	; (2b1c <onoff_request+0x110>)
    2a4e:	2181      	movs	r1, #129	; 0x81
    2a50:	f007 f82a 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    2a54:	4648      	mov	r0, r9
    2a56:	f005 ff89 	bl	896c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    2a5a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a5c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    2a5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2a62:	428b      	cmp	r3, r1
    2a64:	f002 0607 	and.w	r6, r2, #7
    2a68:	d050      	beq.n	2b0c <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    2a6a:	2e02      	cmp	r6, #2
    2a6c:	d124      	bne.n	2ab8 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    2a6e:	3301      	adds	r3, #1
    2a70:	83e3      	strh	r3, [r4, #30]
	rv = state;
    2a72:	4635      	mov	r5, r6
		notify = true;
    2a74:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2a78:	4648      	mov	r0, r9
    2a7a:	f005 ff67 	bl	894c <z_spin_unlock_valid>
    2a7e:	b968      	cbnz	r0, 2a9c <onoff_request+0x90>
    2a80:	4a26      	ldr	r2, [pc, #152]	; (2b1c <onoff_request+0x110>)
    2a82:	492a      	ldr	r1, [pc, #168]	; (2b2c <onoff_request+0x120>)
    2a84:	4827      	ldr	r0, [pc, #156]	; (2b24 <onoff_request+0x118>)
    2a86:	23ac      	movs	r3, #172	; 0xac
    2a88:	f007 f8e5 	bl	9c56 <printk>
    2a8c:	4828      	ldr	r0, [pc, #160]	; (2b30 <onoff_request+0x124>)
    2a8e:	4649      	mov	r1, r9
    2a90:	f007 f8e1 	bl	9c56 <printk>
    2a94:	4821      	ldr	r0, [pc, #132]	; (2b1c <onoff_request+0x110>)
    2a96:	21ac      	movs	r1, #172	; 0xac
    2a98:	f007 f806 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    2a9c:	f38a 8811 	msr	BASEPRI, sl
    2aa0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    2aa4:	f1b8 0f00 	cmp.w	r8, #0
    2aa8:	d017      	beq.n	2ada <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    2aaa:	2300      	movs	r3, #0
    2aac:	4632      	mov	r2, r6
    2aae:	4639      	mov	r1, r7
    2ab0:	4620      	mov	r0, r4
    2ab2:	f007 f896 	bl	9be2 <notify_one>
    2ab6:	e010      	b.n	2ada <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    2ab8:	0793      	lsls	r3, r2, #30
    2aba:	d001      	beq.n	2ac0 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    2abc:	2e06      	cmp	r6, #6
    2abe:	d10f      	bne.n	2ae0 <onoff_request+0xd4>
	parent->next = child;
    2ac0:	2300      	movs	r3, #0
    2ac2:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    2ac4:	6863      	ldr	r3, [r4, #4]
    2ac6:	b9f3      	cbnz	r3, 2b06 <onoff_request+0xfa>
	list->head = node;
    2ac8:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    2acc:	4635      	mov	r5, r6
    2ace:	b9fe      	cbnz	r6, 2b10 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    2ad0:	4652      	mov	r2, sl
    2ad2:	2102      	movs	r1, #2
    2ad4:	4620      	mov	r0, r4
    2ad6:	f7ff fd6d 	bl	25b4 <process_event>
		}
	}

	return rv;
}
    2ada:	4628      	mov	r0, r5
    2adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    2ae0:	2e05      	cmp	r6, #5
    2ae2:	d018      	beq.n	2b16 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2ae4:	2e01      	cmp	r6, #1
    2ae6:	d00b      	beq.n	2b00 <onoff_request+0xf4>
    2ae8:	4912      	ldr	r1, [pc, #72]	; (2b34 <onoff_request+0x128>)
    2aea:	480e      	ldr	r0, [pc, #56]	; (2b24 <onoff_request+0x118>)
    2aec:	4a12      	ldr	r2, [pc, #72]	; (2b38 <onoff_request+0x12c>)
    2aee:	f240 13c9 	movw	r3, #457	; 0x1c9
    2af2:	f007 f8b0 	bl	9c56 <printk>
    2af6:	4810      	ldr	r0, [pc, #64]	; (2b38 <onoff_request+0x12c>)
    2af8:	f240 11c9 	movw	r1, #457	; 0x1c9
    2afc:	f006 ffd4 	bl	9aa8 <assert_post_action>
		rv = -EIO;
    2b00:	f06f 0504 	mvn.w	r5, #4
    2b04:	e004      	b.n	2b10 <onoff_request+0x104>
	parent->next = child;
    2b06:	601f      	str	r7, [r3, #0]
	list->tail = node;
    2b08:	6067      	str	r7, [r4, #4]
}
    2b0a:	e7df      	b.n	2acc <onoff_request+0xc0>
		rv = -EAGAIN;
    2b0c:	f06f 050a 	mvn.w	r5, #10
    2b10:	f04f 0800 	mov.w	r8, #0
    2b14:	e7b0      	b.n	2a78 <onoff_request+0x6c>
		rv = -ENOTSUP;
    2b16:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2b1a:	e7f9      	b.n	2b10 <onoff_request+0x104>
    2b1c:	0000b39a 	.word	0x0000b39a
    2b20:	0000b3ec 	.word	0x0000b3ec
    2b24:	0000ac83 	.word	0x0000ac83
    2b28:	0000b401 	.word	0x0000b401
    2b2c:	0000b3c0 	.word	0x0000b3c0
    2b30:	0000b3d7 	.word	0x0000b3d7
    2b34:	0000b384 	.word	0x0000b384
    2b38:	0000b2f7 	.word	0x0000b2f7

00002b3c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2b40:	4605      	mov	r5, r0
	__asm__ volatile(
    2b42:	f04f 0320 	mov.w	r3, #32
    2b46:	f3ef 8611 	mrs	r6, BASEPRI
    2b4a:	f383 8812 	msr	BASEPRI_MAX, r3
    2b4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b52:	4823      	ldr	r0, [pc, #140]	; (2be0 <pm_state_notify+0xa4>)
    2b54:	f005 feec 	bl	8930 <z_spin_lock_valid>
    2b58:	b968      	cbnz	r0, 2b76 <pm_state_notify+0x3a>
    2b5a:	4a22      	ldr	r2, [pc, #136]	; (2be4 <pm_state_notify+0xa8>)
    2b5c:	4922      	ldr	r1, [pc, #136]	; (2be8 <pm_state_notify+0xac>)
    2b5e:	4823      	ldr	r0, [pc, #140]	; (2bec <pm_state_notify+0xb0>)
    2b60:	2381      	movs	r3, #129	; 0x81
    2b62:	f007 f878 	bl	9c56 <printk>
    2b66:	491e      	ldr	r1, [pc, #120]	; (2be0 <pm_state_notify+0xa4>)
    2b68:	4821      	ldr	r0, [pc, #132]	; (2bf0 <pm_state_notify+0xb4>)
    2b6a:	f007 f874 	bl	9c56 <printk>
    2b6e:	481d      	ldr	r0, [pc, #116]	; (2be4 <pm_state_notify+0xa8>)
    2b70:	2181      	movs	r1, #129	; 0x81
    2b72:	f006 ff99 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    2b76:	481a      	ldr	r0, [pc, #104]	; (2be0 <pm_state_notify+0xa4>)
    2b78:	f005 fef8 	bl	896c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2b7c:	4b1d      	ldr	r3, [pc, #116]	; (2bf4 <pm_state_notify+0xb8>)
    2b7e:	681c      	ldr	r4, [r3, #0]
    2b80:	2c00      	cmp	r4, #0
    2b82:	bf38      	it	cc
    2b84:	2400      	movcc	r4, #0
    2b86:	b19c      	cbz	r4, 2bb0 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    2b88:	4f1b      	ldr	r7, [pc, #108]	; (2bf8 <pm_state_notify+0xbc>)
    2b8a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2c04 <pm_state_notify+0xc8>
    2b8e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2b92:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2b96:	2d00      	cmp	r5, #0
    2b98:	bf08      	it	eq
    2b9a:	4613      	moveq	r3, r2
		if (callback) {
    2b9c:	b12b      	cbz	r3, 2baa <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    2b9e:	f898 2014 	ldrb.w	r2, [r8, #20]
    2ba2:	fb09 f202 	mul.w	r2, r9, r2
    2ba6:	5cb8      	ldrb	r0, [r7, r2]
    2ba8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2baa:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2bac:	2c00      	cmp	r4, #0
    2bae:	d1f0      	bne.n	2b92 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2bb0:	480b      	ldr	r0, [pc, #44]	; (2be0 <pm_state_notify+0xa4>)
    2bb2:	f005 fecb 	bl	894c <z_spin_unlock_valid>
    2bb6:	b968      	cbnz	r0, 2bd4 <pm_state_notify+0x98>
    2bb8:	4a0a      	ldr	r2, [pc, #40]	; (2be4 <pm_state_notify+0xa8>)
    2bba:	4910      	ldr	r1, [pc, #64]	; (2bfc <pm_state_notify+0xc0>)
    2bbc:	480b      	ldr	r0, [pc, #44]	; (2bec <pm_state_notify+0xb0>)
    2bbe:	23ac      	movs	r3, #172	; 0xac
    2bc0:	f007 f849 	bl	9c56 <printk>
    2bc4:	4906      	ldr	r1, [pc, #24]	; (2be0 <pm_state_notify+0xa4>)
    2bc6:	480e      	ldr	r0, [pc, #56]	; (2c00 <pm_state_notify+0xc4>)
    2bc8:	f007 f845 	bl	9c56 <printk>
    2bcc:	4805      	ldr	r0, [pc, #20]	; (2be4 <pm_state_notify+0xa8>)
    2bce:	21ac      	movs	r1, #172	; 0xac
    2bd0:	f006 ff6a 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    2bd4:	f386 8811 	msr	BASEPRI, r6
    2bd8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2be0:	20000eb0 	.word	0x20000eb0
    2be4:	0000b39a 	.word	0x0000b39a
    2be8:	0000b3ec 	.word	0x0000b3ec
    2bec:	0000ac83 	.word	0x0000ac83
    2bf0:	0000b401 	.word	0x0000b401
    2bf4:	20000eb4 	.word	0x20000eb4
    2bf8:	20000ec0 	.word	0x20000ec0
    2bfc:	0000b3c0 	.word	0x0000b3c0
    2c00:	0000b3d7 	.word	0x0000b3d7
    2c04:	20000f98 	.word	0x20000f98

00002c08 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c08:	f000 031f 	and.w	r3, r0, #31
    2c0c:	2201      	movs	r2, #1
    2c0e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2c10:	4b0a      	ldr	r3, [pc, #40]	; (2c3c <atomic_test_and_set_bit.constprop.0+0x34>)
    2c12:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c16:	0940      	lsrs	r0, r0, #5
    2c18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c1c:	e850 3f00 	ldrex	r3, [r0]
    2c20:	ea43 0102 	orr.w	r1, r3, r2
    2c24:	e840 1c00 	strex	ip, r1, [r0]
    2c28:	f1bc 0f00 	cmp.w	ip, #0
    2c2c:	d1f6      	bne.n	2c1c <atomic_test_and_set_bit.constprop.0+0x14>
    2c2e:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    2c32:	421a      	tst	r2, r3
}
    2c34:	bf14      	ite	ne
    2c36:	2001      	movne	r0, #1
    2c38:	2000      	moveq	r0, #0
    2c3a:	4770      	bx	lr
    2c3c:	20000ecc 	.word	0x20000ecc

00002c40 <pm_system_resume>:

void pm_system_resume(void)
{
    2c40:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2c42:	4b1d      	ldr	r3, [pc, #116]	; (2cb8 <pm_system_resume+0x78>)
    2c44:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2c46:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c4a:	f005 031f 	and.w	r3, r5, #31
    2c4e:	2201      	movs	r2, #1
    2c50:	409a      	lsls	r2, r3
    2c52:	4b1a      	ldr	r3, [pc, #104]	; (2cbc <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c54:	0969      	lsrs	r1, r5, #5
{
    2c56:	b085      	sub	sp, #20
    2c58:	43d0      	mvns	r0, r2
    2c5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2c5e:	e853 1f00 	ldrex	r1, [r3]
    2c62:	ea01 0400 	and.w	r4, r1, r0
    2c66:	e843 4c00 	strex	ip, r4, [r3]
    2c6a:	f1bc 0f00 	cmp.w	ip, #0
    2c6e:	d1f6      	bne.n	2c5e <pm_system_resume+0x1e>
    2c70:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2c74:	4211      	tst	r1, r2
    2c76:	d017      	beq.n	2ca8 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    2c78:	4c11      	ldr	r4, [pc, #68]	; (2cc0 <pm_system_resume+0x80>)
    2c7a:	220c      	movs	r2, #12
    2c7c:	fb02 4205 	mla	r2, r2, r5, r4
    2c80:	ca07      	ldmia	r2, {r0, r1, r2}
    2c82:	ab01      	add	r3, sp, #4
    2c84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2c88:	4a0e      	ldr	r2, [pc, #56]	; (2cc4 <pm_system_resume+0x84>)
    2c8a:	b17a      	cbz	r2, 2cac <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2c8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2c90:	f007 f863 	bl	9d5a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2c94:	2000      	movs	r0, #0
    2c96:	f7ff ff51 	bl	2b3c <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2c9a:	230c      	movs	r3, #12
    2c9c:	436b      	muls	r3, r5
    2c9e:	2200      	movs	r2, #0
    2ca0:	18e1      	adds	r1, r4, r3
    2ca2:	50e2      	str	r2, [r4, r3]
    2ca4:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    2ca8:	b005      	add	sp, #20
    2caa:	bd30      	pop	{r4, r5, pc}
    2cac:	f382 8811 	msr	BASEPRI, r2
    2cb0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2cb4:	e7ee      	b.n	2c94 <pm_system_resume+0x54>
    2cb6:	bf00      	nop
    2cb8:	20000f98 	.word	0x20000f98
    2cbc:	20000ebc 	.word	0x20000ebc
    2cc0:	20000ec0 	.word	0x20000ec0
    2cc4:	00009d5b 	.word	0x00009d5b

00002cc8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2ccc:	4b37      	ldr	r3, [pc, #220]	; (2dac <pm_system_suspend+0xe4>)
    2cce:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2dc4 <pm_system_suspend+0xfc>
    2cd2:	7d1c      	ldrb	r4, [r3, #20]
{
    2cd4:	b088      	sub	sp, #32
    2cd6:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2cd8:	4620      	mov	r0, r4
    2cda:	f7ff ff95 	bl	2c08 <atomic_test_and_set_bit.constprop.0>
    2cde:	b960      	cbnz	r0, 2cfa <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2ce0:	466e      	mov	r6, sp
    2ce2:	463a      	mov	r2, r7
    2ce4:	4621      	mov	r1, r4
    2ce6:	4630      	mov	r0, r6
    2ce8:	f006 ffc2 	bl	9c70 <pm_policy_next_state>
    2cec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2cf0:	250c      	movs	r5, #12
    2cf2:	fb05 8504 	mla	r5, r5, r4, r8
    2cf6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    2cfa:	230c      	movs	r3, #12
    2cfc:	4363      	muls	r3, r4
    2cfe:	eb08 0203 	add.w	r2, r8, r3
    2d02:	f818 0003 	ldrb.w	r0, [r8, r3]
    2d06:	0965      	lsrs	r5, r4, #5
    2d08:	f004 061f 	and.w	r6, r4, #31
    2d0c:	b3c8      	cbz	r0, 2d82 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2d0e:	1c7b      	adds	r3, r7, #1
    2d10:	d00f      	beq.n	2d32 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2d12:	f8d2 e008 	ldr.w	lr, [r2, #8]
    2d16:	4826      	ldr	r0, [pc, #152]	; (2db0 <pm_system_suspend+0xe8>)
    2d18:	4a26      	ldr	r2, [pc, #152]	; (2db4 <pm_system_suspend+0xec>)
    2d1a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2d1e:	2100      	movs	r1, #0
    2d20:	2300      	movs	r3, #0
    2d22:	fbec 010e 	umlal	r0, r1, ip, lr
    2d26:	f7fe f857 	bl	dd8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2d2a:	2101      	movs	r1, #1
    2d2c:	1a38      	subs	r0, r7, r0
    2d2e:	f005 ffdf 	bl	8cf0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2d32:	f004 faad 	bl	7290 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2d36:	2001      	movs	r0, #1
    2d38:	f7ff ff00 	bl	2b3c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2d3c:	f3bf 8f5b 	dmb	ish
    2d40:	4b1d      	ldr	r3, [pc, #116]	; (2db8 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2d42:	2201      	movs	r2, #1
    2d44:	40b2      	lsls	r2, r6
    2d46:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2d4a:	e853 1f00 	ldrex	r1, [r3]
    2d4e:	4311      	orrs	r1, r2
    2d50:	e843 1000 	strex	r0, r1, [r3]
    2d54:	2800      	cmp	r0, #0
    2d56:	d1f8      	bne.n	2d4a <pm_system_suspend+0x82>
    2d58:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2d5c:	230c      	movs	r3, #12
    2d5e:	fb03 8404 	mla	r4, r3, r4, r8
    2d62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2d66:	ab05      	add	r3, sp, #20
    2d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2d6c:	4a13      	ldr	r2, [pc, #76]	; (2dbc <pm_system_suspend+0xf4>)
    2d6e:	b11a      	cbz	r2, 2d78 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    2d70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2d74:	f006 ffde 	bl	9d34 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2d78:	f7ff ff62 	bl	2c40 <pm_system_resume>
	k_sched_unlock();
    2d7c:	f004 ffcc 	bl	7d18 <k_sched_unlock>
	bool ret = true;
    2d80:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2d82:	4a0f      	ldr	r2, [pc, #60]	; (2dc0 <pm_system_suspend+0xf8>)
    2d84:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2d88:	2301      	movs	r3, #1
    2d8a:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d8c:	43db      	mvns	r3, r3
    2d8e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2d92:	e855 2f00 	ldrex	r2, [r5]
    2d96:	401a      	ands	r2, r3
    2d98:	e845 2100 	strex	r1, r2, [r5]
    2d9c:	2900      	cmp	r1, #0
    2d9e:	d1f8      	bne.n	2d92 <pm_system_suspend+0xca>
    2da0:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2da4:	b008      	add	sp, #32
    2da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2daa:	bf00      	nop
    2dac:	20000f98 	.word	0x20000f98
    2db0:	000f423f 	.word	0x000f423f
    2db4:	000f4240 	.word	0x000f4240
    2db8:	20000ebc 	.word	0x20000ebc
    2dbc:	00009d35 	.word	0x00009d35
    2dc0:	20000ecc 	.word	0x20000ecc
    2dc4:	20000ec0 	.word	0x20000ec0

00002dc8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2dc8:	680b      	ldr	r3, [r1, #0]
    2dca:	3301      	adds	r3, #1
    2dcc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2dce:	4b01      	ldr	r3, [pc, #4]	; (2dd4 <char_out+0xc>)
    2dd0:	681b      	ldr	r3, [r3, #0]
    2dd2:	4718      	bx	r3
    2dd4:	200000d4 	.word	0x200000d4

00002dd8 <__printk_hook_install>:
	_char_out = fn;
    2dd8:	4b01      	ldr	r3, [pc, #4]	; (2de0 <__printk_hook_install+0x8>)
    2dda:	6018      	str	r0, [r3, #0]
}
    2ddc:	4770      	bx	lr
    2dde:	bf00      	nop
    2de0:	200000d4 	.word	0x200000d4

00002de4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2de4:	b507      	push	{r0, r1, r2, lr}
    2de6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2de8:	2100      	movs	r1, #0
{
    2dea:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2dec:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2dee:	4803      	ldr	r0, [pc, #12]	; (2dfc <vprintk+0x18>)
    2df0:	a901      	add	r1, sp, #4
    2df2:	f7fe ff25 	bl	1c40 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2df6:	b003      	add	sp, #12
    2df8:	f85d fb04 	ldr.w	pc, [sp], #4
    2dfc:	00002dc9 	.word	0x00002dc9

00002e00 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2e00:	b508      	push	{r3, lr}
	__asm__ volatile(
    2e02:	f04f 0220 	mov.w	r2, #32
    2e06:	f3ef 8311 	mrs	r3, BASEPRI
    2e0a:	f382 8812 	msr	BASEPRI_MAX, r2
    2e0e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2e12:	f000 fcdf 	bl	37d4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2e16:	4803      	ldr	r0, [pc, #12]	; (2e24 <sys_reboot+0x24>)
    2e18:	f006 ff1d 	bl	9c56 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2e1c:	f000 f80a 	bl	2e34 <arch_cpu_idle>
    2e20:	e7fc      	b.n	2e1c <sys_reboot+0x1c>
    2e22:	bf00      	nop
    2e24:	0000b419 	.word	0x0000b419

00002e28 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2e28:	4901      	ldr	r1, [pc, #4]	; (2e30 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2e2a:	2210      	movs	r2, #16
	str	r2, [r1]
    2e2c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2e2e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2e30:	e000ed10 	.word	0xe000ed10

00002e34 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2e34:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2e36:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2e38:	f380 8811 	msr	BASEPRI, r0
	isb
    2e3c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2e40:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2e44:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2e46:	b662      	cpsie	i
	isb
    2e48:	f3bf 8f6f 	isb	sy

	bx	lr
    2e4c:	4770      	bx	lr
    2e4e:	bf00      	nop

00002e50 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2e50:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2e52:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2e54:	f381 8811 	msr	BASEPRI, r1

	wfe
    2e58:	bf20      	wfe

	msr	BASEPRI, r0
    2e5a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2e5e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2e60:	4770      	bx	lr
    2e62:	bf00      	nop

00002e64 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2e64:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2e66:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2e68:	4a0b      	ldr	r2, [pc, #44]	; (2e98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2e6a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2e6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2e6e:	bf1e      	ittt	ne
	movne	r1, #0
    2e70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2e72:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2e74:	f007 fb96 	blne	a5a4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2e78:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2e7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2e7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2e82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2e86:	4905      	ldr	r1, [pc, #20]	; (2e9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2e88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2e8a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2e8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2e8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2e92:	4903      	ldr	r1, [pc, #12]	; (2ea0 <_isr_wrapper+0x3c>)
	bx r1
    2e94:	4708      	bx	r1
    2e96:	0000      	.short	0x0000
	ldr r2, =_kernel
    2e98:	20000f98 	.word	0x20000f98
	ldr r1, =_sw_isr_table
    2e9c:	0000a824 	.word	0x0000a824
	ldr r1, =z_arm_int_exit
    2ea0:	000030c9 	.word	0x000030c9

00002ea4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2ea4:	bf30      	wfi
    b z_SysNmiOnReset
    2ea6:	f7ff bffd 	b.w	2ea4 <z_SysNmiOnReset>
    2eaa:	bf00      	nop

00002eac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2eac:	4912      	ldr	r1, [pc, #72]	; (2ef8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2eae:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2eb0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2eb4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2eb6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2eba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ebe:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2ec0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ec4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ec8:	4f0c      	ldr	r7, [pc, #48]	; (2efc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2eca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2ece:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2ed0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2ed2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2ed4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2ed6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2ed8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2eda:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2ede:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2ee0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2ee2:	f000 fae7 	bl	34b4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2ee6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2eea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2eee:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2ef2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2ef6:	4770      	bx	lr
    ldr r1, =_kernel
    2ef8:	20000f98 	.word	0x20000f98
    ldr v4, =_SCS_ICSR
    2efc:	e000ed04 	.word	0xe000ed04

00002f00 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2f00:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2f04:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2f06:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2f0a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2f0e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2f10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2f14:	2902      	cmp	r1, #2
    beq _oops
    2f16:	d0ff      	beq.n	2f18 <_oops>

00002f18 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2f18:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2f1a:	f006 feba 	bl	9c92 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2f1e:	bd01      	pop	{r0, pc}

00002f20 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2f20:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2f22:	2b00      	cmp	r3, #0
    2f24:	db08      	blt.n	2f38 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f26:	2201      	movs	r2, #1
    2f28:	f000 001f 	and.w	r0, r0, #31
    2f2c:	fa02 f000 	lsl.w	r0, r2, r0
    2f30:	095b      	lsrs	r3, r3, #5
    2f32:	4a02      	ldr	r2, [pc, #8]	; (2f3c <arch_irq_enable+0x1c>)
    2f34:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2f38:	4770      	bx	lr
    2f3a:	bf00      	nop
    2f3c:	e000e100 	.word	0xe000e100

00002f40 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2f40:	4b05      	ldr	r3, [pc, #20]	; (2f58 <arch_irq_is_enabled+0x18>)
    2f42:	0942      	lsrs	r2, r0, #5
    2f44:	f000 001f 	and.w	r0, r0, #31
    2f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f4c:	2301      	movs	r3, #1
    2f4e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2f52:	4010      	ands	r0, r2
    2f54:	4770      	bx	lr
    2f56:	bf00      	nop
    2f58:	e000e100 	.word	0xe000e100

00002f5c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2f5c:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2f5e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2f60:	2c07      	cmp	r4, #7
{
    2f62:	4605      	mov	r5, r0
    2f64:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2f66:	d90f      	bls.n	2f88 <z_arm_irq_priority_set+0x2c>
    2f68:	4a11      	ldr	r2, [pc, #68]	; (2fb0 <z_arm_irq_priority_set+0x54>)
    2f6a:	4912      	ldr	r1, [pc, #72]	; (2fb4 <z_arm_irq_priority_set+0x58>)
    2f6c:	4812      	ldr	r0, [pc, #72]	; (2fb8 <z_arm_irq_priority_set+0x5c>)
    2f6e:	2359      	movs	r3, #89	; 0x59
    2f70:	f006 fe71 	bl	9c56 <printk>
    2f74:	4811      	ldr	r0, [pc, #68]	; (2fbc <z_arm_irq_priority_set+0x60>)
    2f76:	4631      	mov	r1, r6
    2f78:	2307      	movs	r3, #7
    2f7a:	462a      	mov	r2, r5
    2f7c:	f006 fe6b 	bl	9c56 <printk>
    2f80:	480b      	ldr	r0, [pc, #44]	; (2fb0 <z_arm_irq_priority_set+0x54>)
    2f82:	2159      	movs	r1, #89	; 0x59
    2f84:	f006 fd90 	bl	9aa8 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2f88:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2f8a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f8c:	bfac      	ite	ge
    2f8e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f92:	4b0b      	ldrlt	r3, [pc, #44]	; (2fc0 <z_arm_irq_priority_set+0x64>)
    2f94:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2f98:	bfb8      	it	lt
    2f9a:	f005 050f 	andlt.w	r5, r5, #15
    2f9e:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2fa0:	bfaa      	itet	ge
    2fa2:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2fa6:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2fa8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2fac:	bd70      	pop	{r4, r5, r6, pc}
    2fae:	bf00      	nop
    2fb0:	0000b442 	.word	0x0000b442
    2fb4:	0000b478 	.word	0x0000b478
    2fb8:	0000ac83 	.word	0x0000ac83
    2fbc:	0000b493 	.word	0x0000b493
    2fc0:	e000ed14 	.word	0xe000ed14

00002fc4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2fc4:	4a0b      	ldr	r2, [pc, #44]	; (2ff4 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2fc6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2fc8:	4b0b      	ldr	r3, [pc, #44]	; (2ff8 <z_arm_prep_c+0x34>)
    2fca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2fce:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fd4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2fd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2fdc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2fe4:	f003 fc2a 	bl	683c <z_bss_zero>
	z_data_copy();
    2fe8:	f006 fb50 	bl	968c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2fec:	f000 f9f6 	bl	33dc <z_arm_interrupt_init>
	z_cstart();
    2ff0:	f003 fc2e 	bl	6850 <z_cstart>
    2ff4:	00000000 	.word	0x00000000
    2ff8:	e000ed00 	.word	0xe000ed00

00002ffc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ffc:	4a09      	ldr	r2, [pc, #36]	; (3024 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2ffe:	490a      	ldr	r1, [pc, #40]	; (3028 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3000:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3002:	6809      	ldr	r1, [r1, #0]
    3004:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3006:	4909      	ldr	r1, [pc, #36]	; (302c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3008:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    300a:	684b      	ldr	r3, [r1, #4]
    300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3010:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3012:	2300      	movs	r3, #0
    3014:	f383 8811 	msr	BASEPRI, r3
    3018:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    301c:	6893      	ldr	r3, [r2, #8]
}
    301e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3020:	4770      	bx	lr
    3022:	bf00      	nop
    3024:	20000f98 	.word	0x20000f98
    3028:	0000ab80 	.word	0x0000ab80
    302c:	e000ed00 	.word	0xe000ed00

00003030 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3030:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3034:	9b00      	ldr	r3, [sp, #0]
    3036:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    303a:	490a      	ldr	r1, [pc, #40]	; (3064 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    303c:	9b01      	ldr	r3, [sp, #4]
    303e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3042:	9b02      	ldr	r3, [sp, #8]
    3044:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3048:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3050:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3054:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3058:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    305a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    305c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    305e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3060:	4770      	bx	lr
    3062:	bf00      	nop
    3064:	00009c7b 	.word	0x00009c7b

00003068 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3068:	4a0b      	ldr	r2, [pc, #44]	; (3098 <z_check_thread_stack_fail+0x30>)
{
    306a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    306c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    306e:	b190      	cbz	r0, 3096 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3070:	f113 0f16 	cmn.w	r3, #22
    3074:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3076:	d005      	beq.n	3084 <z_check_thread_stack_fail+0x1c>
    3078:	f1a0 0220 	sub.w	r2, r0, #32
    307c:	429a      	cmp	r2, r3
    307e:	d806      	bhi.n	308e <z_check_thread_stack_fail+0x26>
    3080:	4283      	cmp	r3, r0
    3082:	d204      	bcs.n	308e <z_check_thread_stack_fail+0x26>
    3084:	4281      	cmp	r1, r0
    3086:	bf2c      	ite	cs
    3088:	2100      	movcs	r1, #0
    308a:	2101      	movcc	r1, #1
    308c:	e000      	b.n	3090 <z_check_thread_stack_fail+0x28>
    308e:	2100      	movs	r1, #0
    3090:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3092:	bf08      	it	eq
    3094:	2000      	moveq	r0, #0
}
    3096:	4770      	bx	lr
    3098:	20000f98 	.word	0x20000f98

0000309c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    309c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    309e:	4b09      	ldr	r3, [pc, #36]	; (30c4 <arch_switch_to_main_thread+0x28>)
    30a0:	6098      	str	r0, [r3, #8]
{
    30a2:	460d      	mov	r5, r1
    30a4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    30a6:	f000 fa05 	bl	34b4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    30aa:	4620      	mov	r0, r4
    30ac:	f385 8809 	msr	PSP, r5
    30b0:	2100      	movs	r1, #0
    30b2:	b663      	cpsie	if
    30b4:	f381 8811 	msr	BASEPRI, r1
    30b8:	f3bf 8f6f 	isb	sy
    30bc:	2200      	movs	r2, #0
    30be:	2300      	movs	r3, #0
    30c0:	f006 fddb 	bl	9c7a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    30c4:	20000f98 	.word	0x20000f98

000030c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    30c8:	4b04      	ldr	r3, [pc, #16]	; (30dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    30ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    30cc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    30ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    30d0:	d003      	beq.n	30da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    30d2:	4903      	ldr	r1, [pc, #12]	; (30e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    30d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    30d8:	600a      	str	r2, [r1, #0]

000030da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    30da:	4770      	bx	lr
	ldr r3, =_kernel
    30dc:	20000f98 	.word	0x20000f98
	ldr r1, =_SCS_ICSR
    30e0:	e000ed04 	.word	0xe000ed04

000030e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    30e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    30e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    30ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    30ee:	4672      	mov	r2, lr
	bl z_arm_fault
    30f0:	f000 f8ae 	bl	3250 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    30f4:	bd01      	pop	{r0, pc}
    30f6:	bf00      	nop

000030f8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    30f8:	2000      	movs	r0, #0
    msr CONTROL, r0
    30fa:	f380 8814 	msr	CONTROL, r0
    isb
    30fe:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3102:	f007 fafd 	bl	a700 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3106:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3108:	490d      	ldr	r1, [pc, #52]	; (3140 <__start+0x48>)
    str r0, [r1]
    310a:	6008      	str	r0, [r1, #0]
    dsb
    310c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3110:	480c      	ldr	r0, [pc, #48]	; (3144 <__start+0x4c>)
    msr msp, r0
    3112:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3116:	f000 f97d 	bl	3414 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    311a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    311c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3120:	4809      	ldr	r0, [pc, #36]	; (3148 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3122:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3126:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3128:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    312c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3130:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3132:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3134:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3138:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    313c:	f7ff ff42 	bl	2fc4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3140:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3144:	20002b40 	.word	0x20002b40
    ldr r0, =z_interrupt_stacks
    3148:	20002cc0 	.word	0x20002cc0

0000314c <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    314c:	4b23      	ldr	r3, [pc, #140]	; (31dc <mem_manage_fault+0x90>)
{
    314e:	b570      	push	{r4, r5, r6, lr}
    3150:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    3158:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    315a:	0790      	lsls	r0, r2, #30
    315c:	d51a      	bpl.n	3194 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    315e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3162:	0612      	lsls	r2, r2, #24
    3164:	d516      	bpl.n	3194 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    3166:	b119      	cbz	r1, 3170 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    316a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    316e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3176:	06d6      	lsls	r6, r2, #27
    3178:	d40f      	bmi.n	319a <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    317c:	0799      	lsls	r1, r3, #30
    317e:	d40c      	bmi.n	319a <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3180:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3182:	4a16      	ldr	r2, [pc, #88]	; (31dc <mem_manage_fault+0x90>)
    3184:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3186:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    318a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    318c:	2300      	movs	r3, #0
    318e:	702b      	strb	r3, [r5, #0]

	return reason;
}
    3190:	4620      	mov	r0, r4
    3192:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    3194:	f06f 0015 	mvn.w	r0, #21
    3198:	e7ea      	b.n	3170 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    319a:	4e10      	ldr	r6, [pc, #64]	; (31dc <mem_manage_fault+0x90>)
    319c:	6873      	ldr	r3, [r6, #4]
    319e:	051a      	lsls	r2, r3, #20
    31a0:	d5ee      	bpl.n	3180 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    31a2:	4621      	mov	r1, r4
    31a4:	f7ff ff60 	bl	3068 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    31a8:	4604      	mov	r4, r0
    31aa:	b118      	cbz	r0, 31b4 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    31ac:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    31b0:	2402      	movs	r4, #2
    31b2:	e7e6      	b.n	3182 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    31b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    31b6:	06db      	lsls	r3, r3, #27
    31b8:	d5e2      	bpl.n	3180 <mem_manage_fault+0x34>
    31ba:	4a09      	ldr	r2, [pc, #36]	; (31e0 <mem_manage_fault+0x94>)
    31bc:	4909      	ldr	r1, [pc, #36]	; (31e4 <mem_manage_fault+0x98>)
    31be:	480a      	ldr	r0, [pc, #40]	; (31e8 <mem_manage_fault+0x9c>)
    31c0:	f240 1349 	movw	r3, #329	; 0x149
    31c4:	f006 fd47 	bl	9c56 <printk>
    31c8:	4808      	ldr	r0, [pc, #32]	; (31ec <mem_manage_fault+0xa0>)
    31ca:	f006 fd44 	bl	9c56 <printk>
    31ce:	4804      	ldr	r0, [pc, #16]	; (31e0 <mem_manage_fault+0x94>)
    31d0:	f240 1149 	movw	r1, #329	; 0x149
    31d4:	f006 fc68 	bl	9aa8 <assert_post_action>
    31d8:	e7d3      	b.n	3182 <mem_manage_fault+0x36>
    31da:	bf00      	nop
    31dc:	e000ed00 	.word	0xe000ed00
    31e0:	0000b4d3 	.word	0x0000b4d3
    31e4:	0000b50d 	.word	0x0000b50d
    31e8:	0000ac83 	.word	0x0000ac83
    31ec:	0000b557 	.word	0x0000b557

000031f0 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    31f0:	4b0d      	ldr	r3, [pc, #52]	; (3228 <bus_fault.isra.0+0x38>)
    31f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    31f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    31f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31f8:	0592      	lsls	r2, r2, #22
    31fa:	d508      	bpl.n	320e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    31fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    31fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3200:	0412      	lsls	r2, r2, #16
    3202:	d504      	bpl.n	320e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3204:	b118      	cbz	r0, 320e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    320c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    320e:	4b06      	ldr	r3, [pc, #24]	; (3228 <bus_fault.isra.0+0x38>)
    3210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3214:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3216:	bf58      	it	pl
    3218:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    321a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    321c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    321e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    3222:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3224:	7008      	strb	r0, [r1, #0]

	return reason;
}
    3226:	4770      	bx	lr
    3228:	e000ed00 	.word	0xe000ed00

0000322c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    322c:	4b07      	ldr	r3, [pc, #28]	; (324c <usage_fault.isra.0+0x20>)
    322e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    323a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    323c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3240:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3244:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    3246:	2000      	movs	r0, #0
    3248:	4770      	bx	lr
    324a:	bf00      	nop
    324c:	e000ed00 	.word	0xe000ed00

00003250 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3250:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3252:	4b54      	ldr	r3, [pc, #336]	; (33a4 <z_arm_fault+0x154>)
    3254:	685c      	ldr	r4, [r3, #4]
{
    3256:	b08a      	sub	sp, #40	; 0x28
    3258:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    325a:	f3c4 0408 	ubfx	r4, r4, #0, #9
    325e:	2600      	movs	r6, #0
    3260:	f386 8811 	msr	BASEPRI, r6
    3264:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3268:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    326c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3270:	d108      	bne.n	3284 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3272:	f002 030c 	and.w	r3, r2, #12
    3276:	2b08      	cmp	r3, #8
    3278:	d004      	beq.n	3284 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    327a:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    327c:	bf5c      	itt	pl
    327e:	4605      	movpl	r5, r0
			*nested_exc = true;
    3280:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3282:	b97d      	cbnz	r5, 32a4 <z_arm_fault+0x54>
    3284:	4a48      	ldr	r2, [pc, #288]	; (33a8 <z_arm_fault+0x158>)
    3286:	4949      	ldr	r1, [pc, #292]	; (33ac <z_arm_fault+0x15c>)
    3288:	4849      	ldr	r0, [pc, #292]	; (33b0 <z_arm_fault+0x160>)
    328a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    328e:	f006 fce2 	bl	9c56 <printk>
    3292:	4848      	ldr	r0, [pc, #288]	; (33b4 <z_arm_fault+0x164>)
    3294:	f006 fcdf 	bl	9c56 <printk>
    3298:	4843      	ldr	r0, [pc, #268]	; (33a8 <z_arm_fault+0x158>)
    329a:	f240 31f2 	movw	r1, #1010	; 0x3f2
    329e:	f006 fc03 	bl	9aa8 <assert_post_action>
    32a2:	2500      	movs	r5, #0
	*recoverable = false;
    32a4:	2300      	movs	r3, #0
    32a6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    32aa:	1ee3      	subs	r3, r4, #3
    32ac:	2b03      	cmp	r3, #3
    32ae:	d872      	bhi.n	3396 <z_arm_fault+0x146>
    32b0:	e8df f003 	tbb	[pc, r3]
    32b4:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    32b8:	4b3a      	ldr	r3, [pc, #232]	; (33a4 <z_arm_fault+0x154>)
    32ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    32bc:	f014 0402 	ands.w	r4, r4, #2
    32c0:	d169      	bne.n	3396 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    32c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    32c4:	2a00      	cmp	r2, #0
    32c6:	db18      	blt.n	32fa <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    32c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32ca:	005b      	lsls	r3, r3, #1
    32cc:	d54e      	bpl.n	336c <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    32ce:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    32d0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    32d4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    32d8:	429a      	cmp	r2, r3
    32da:	d00d      	beq.n	32f8 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    32dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    32e0:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	b30b      	cbz	r3, 332c <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    32e8:	f10d 0207 	add.w	r2, sp, #7
    32ec:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    32ee:	4628      	mov	r0, r5
    32f0:	f7ff ff2c 	bl	314c <mem_manage_fault>
		reason = usage_fault(esf);
    32f4:	4604      	mov	r4, r0
		break;
    32f6:	e000      	b.n	32fa <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    32f8:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    32fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    32fe:	b99b      	cbnz	r3, 3328 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3300:	2220      	movs	r2, #32
    3302:	4629      	mov	r1, r5
    3304:	a802      	add	r0, sp, #8
    3306:	f006 fd01 	bl	9d0c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    330a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    330c:	2e00      	cmp	r6, #0
    330e:	d044      	beq.n	339a <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3310:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3314:	b922      	cbnz	r2, 3320 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3316:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    331a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    331e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3320:	a902      	add	r1, sp, #8
    3322:	4620      	mov	r0, r4
    3324:	f006 fcb3 	bl	9c8e <z_arm_fatal_error>
}
    3328:	b00a      	add	sp, #40	; 0x28
    332a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    332c:	4b22      	ldr	r3, [pc, #136]	; (33b8 <z_arm_fault+0x168>)
    332e:	781b      	ldrb	r3, [r3, #0]
    3330:	b12b      	cbz	r3, 333e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    3332:	f10d 0107 	add.w	r1, sp, #7
    3336:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3338:	f7ff ff5a 	bl	31f0 <bus_fault.isra.0>
    333c:	e7da      	b.n	32f4 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    333e:	4b1f      	ldr	r3, [pc, #124]	; (33bc <z_arm_fault+0x16c>)
    3340:	881b      	ldrh	r3, [r3, #0]
    3342:	b29b      	uxth	r3, r3
    3344:	b113      	cbz	r3, 334c <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    3346:	f7ff ff71 	bl	322c <usage_fault.isra.0>
    334a:	e7d3      	b.n	32f4 <z_arm_fault+0xa4>
			__ASSERT(0,
    334c:	491c      	ldr	r1, [pc, #112]	; (33c0 <z_arm_fault+0x170>)
    334e:	4a16      	ldr	r2, [pc, #88]	; (33a8 <z_arm_fault+0x158>)
    3350:	4817      	ldr	r0, [pc, #92]	; (33b0 <z_arm_fault+0x160>)
    3352:	f240 23c3 	movw	r3, #707	; 0x2c3
    3356:	f006 fc7e 	bl	9c56 <printk>
    335a:	481a      	ldr	r0, [pc, #104]	; (33c4 <z_arm_fault+0x174>)
    335c:	f006 fc7b 	bl	9c56 <printk>
    3360:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    3364:	4810      	ldr	r0, [pc, #64]	; (33a8 <z_arm_fault+0x158>)
    3366:	f006 fb9f 	bl	9aa8 <assert_post_action>
    336a:	e7c6      	b.n	32fa <z_arm_fault+0xaa>
    336c:	4914      	ldr	r1, [pc, #80]	; (33c0 <z_arm_fault+0x170>)
    336e:	4a0e      	ldr	r2, [pc, #56]	; (33a8 <z_arm_fault+0x158>)
    3370:	480f      	ldr	r0, [pc, #60]	; (33b0 <z_arm_fault+0x160>)
    3372:	f240 23c7 	movw	r3, #711	; 0x2c7
    3376:	f006 fc6e 	bl	9c56 <printk>
    337a:	4813      	ldr	r0, [pc, #76]	; (33c8 <z_arm_fault+0x178>)
    337c:	f006 fc6b 	bl	9c56 <printk>
    3380:	f240 21c7 	movw	r1, #711	; 0x2c7
    3384:	e7ee      	b.n	3364 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    3386:	f10d 0207 	add.w	r2, sp, #7
    338a:	2100      	movs	r1, #0
    338c:	e7af      	b.n	32ee <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    338e:	f10d 0107 	add.w	r1, sp, #7
    3392:	2000      	movs	r0, #0
    3394:	e7d0      	b.n	3338 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3396:	2400      	movs	r4, #0
    3398:	e7af      	b.n	32fa <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    339a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    339e:	f023 0301 	bic.w	r3, r3, #1
    33a2:	e7bc      	b.n	331e <z_arm_fault+0xce>
    33a4:	e000ed00 	.word	0xe000ed00
    33a8:	0000b4d3 	.word	0x0000b4d3
    33ac:	0000b57a 	.word	0x0000b57a
    33b0:	0000ac83 	.word	0x0000ac83
    33b4:	0000b58d 	.word	0x0000b58d
    33b8:	e000ed29 	.word	0xe000ed29
    33bc:	e000ed2a 	.word	0xe000ed2a
    33c0:	0000ac81 	.word	0x0000ac81
    33c4:	0000b5cb 	.word	0x0000b5cb
    33c8:	0000b5ef 	.word	0x0000b5ef

000033cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    33cc:	4a02      	ldr	r2, [pc, #8]	; (33d8 <z_arm_fault_init+0xc>)
    33ce:	6953      	ldr	r3, [r2, #20]
    33d0:	f043 0310 	orr.w	r3, r3, #16
    33d4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    33d6:	4770      	bx	lr
    33d8:	e000ed00 	.word	0xe000ed00

000033dc <z_arm_interrupt_init>:
    33dc:	4804      	ldr	r0, [pc, #16]	; (33f0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    33de:	2300      	movs	r3, #0
    33e0:	2120      	movs	r1, #32
    33e2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    33e4:	3301      	adds	r3, #1
    33e6:	2b30      	cmp	r3, #48	; 0x30
    33e8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    33ec:	d1f9      	bne.n	33e2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    33ee:	4770      	bx	lr
    33f0:	e000e100 	.word	0xe000e100

000033f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    33f4:	4a06      	ldr	r2, [pc, #24]	; (3410 <z_arm_clear_arm_mpu_config+0x1c>)
    33f6:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    33f8:	2300      	movs	r3, #0
	int num_regions =
    33fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    33fe:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3400:	428b      	cmp	r3, r1
    3402:	d100      	bne.n	3406 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    3404:	4770      	bx	lr
  MPU->RNR = rnr;
    3406:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    3408:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    340a:	3301      	adds	r3, #1
    340c:	e7f8      	b.n	3400 <z_arm_clear_arm_mpu_config+0xc>
    340e:	bf00      	nop
    3410:	e000ed90 	.word	0xe000ed90

00003414 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3414:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3416:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3418:	2300      	movs	r3, #0
    341a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    341e:	f7ff ffe9 	bl	33f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3422:	4b14      	ldr	r3, [pc, #80]	; (3474 <z_arm_init_arch_hw_at_boot+0x60>)
    3424:	f04f 32ff 	mov.w	r2, #4294967295
    3428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    342c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    343c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3440:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3444:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3448:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    344c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3450:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3454:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3458:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    345c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3460:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3464:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3468:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    346a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    346e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3472:	bd08      	pop	{r3, pc}
    3474:	e000e100 	.word	0xe000e100

00003478 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3478:	4b06      	ldr	r3, [pc, #24]	; (3494 <z_impl_k_thread_abort+0x1c>)
    347a:	689b      	ldr	r3, [r3, #8]
    347c:	4283      	cmp	r3, r0
    347e:	d107      	bne.n	3490 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3480:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3484:	b123      	cbz	r3, 3490 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3486:	4a04      	ldr	r2, [pc, #16]	; (3498 <z_impl_k_thread_abort+0x20>)
    3488:	6853      	ldr	r3, [r2, #4]
    348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    348e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3490:	f004 bf06 	b.w	82a0 <z_thread_abort>
    3494:	20000f98 	.word	0x20000f98
    3498:	e000ed00 	.word	0xe000ed00

0000349c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    349c:	4b02      	ldr	r3, [pc, #8]	; (34a8 <z_arm_configure_static_mpu_regions+0xc>)
    349e:	4a03      	ldr	r2, [pc, #12]	; (34ac <z_arm_configure_static_mpu_regions+0x10>)
    34a0:	4803      	ldr	r0, [pc, #12]	; (34b0 <z_arm_configure_static_mpu_regions+0x14>)
    34a2:	2101      	movs	r1, #1
    34a4:	f000 b868 	b.w	3578 <arm_core_mpu_configure_static_mpu_regions>
    34a8:	20040000 	.word	0x20040000
    34ac:	20000000 	.word	0x20000000
    34b0:	0000aa0c 	.word	0x0000aa0c

000034b4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    34b4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    34b6:	4b05      	ldr	r3, [pc, #20]	; (34cc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    34b8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    34ba:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    34bc:	4a04      	ldr	r2, [pc, #16]	; (34d0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    34be:	2120      	movs	r1, #32
    34c0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    34c4:	4618      	mov	r0, r3
    34c6:	2101      	movs	r1, #1
    34c8:	f000 b87e 	b.w	35c8 <arm_core_mpu_configure_dynamic_mpu_regions>
    34cc:	20000ed0 	.word	0x20000ed0
    34d0:	150b0000 	.word	0x150b0000

000034d4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    34d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    34d6:	4f1e      	ldr	r7, [pc, #120]	; (3550 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    34d8:	2600      	movs	r6, #0
    34da:	428e      	cmp	r6, r1
    34dc:	db01      	blt.n	34e2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    34de:	4610      	mov	r0, r2
    34e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    34e2:	6844      	ldr	r4, [r0, #4]
    34e4:	b384      	cbz	r4, 3548 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    34e6:	b153      	cbz	r3, 34fe <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    34e8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    34ec:	ea14 0f0c 	tst.w	r4, ip
    34f0:	d118      	bne.n	3524 <mpu_configure_regions+0x50>
		&&
    34f2:	2c1f      	cmp	r4, #31
    34f4:	d916      	bls.n	3524 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    34f6:	6805      	ldr	r5, [r0, #0]
		&&
    34f8:	ea1c 0f05 	tst.w	ip, r5
    34fc:	d112      	bne.n	3524 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    34fe:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3500:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    3502:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3506:	b2d2      	uxtb	r2, r2
    3508:	d90f      	bls.n	352a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    350a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    350e:	d80e      	bhi.n	352e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3510:	3c01      	subs	r4, #1
    3512:	fab4 f484 	clz	r4, r4
    3516:	f1c4 041f 	rsb	r4, r4, #31
    351a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    351c:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    351e:	ea4c 0404 	orr.w	r4, ip, r4
    3522:	d906      	bls.n	3532 <mpu_configure_regions+0x5e>
			return -EINVAL;
    3524:	f06f 0215 	mvn.w	r2, #21
    3528:	e7d9      	b.n	34de <mpu_configure_regions+0xa>
		return REGION_32B;
    352a:	2408      	movs	r4, #8
    352c:	e7f6      	b.n	351c <mpu_configure_regions+0x48>
		return REGION_4G;
    352e:	243e      	movs	r4, #62	; 0x3e
    3530:	e7f4      	b.n	351c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3532:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    3536:	4315      	orrs	r5, r2
    3538:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    353c:	f044 0401 	orr.w	r4, r4, #1
    3540:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3542:	60fd      	str	r5, [r7, #12]
		reg_index++;
    3544:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3546:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    3548:	3601      	adds	r6, #1
    354a:	300c      	adds	r0, #12
    354c:	e7c5      	b.n	34da <mpu_configure_regions+0x6>
    354e:	bf00      	nop
    3550:	e000ed90 	.word	0xe000ed90

00003554 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3554:	4b03      	ldr	r3, [pc, #12]	; (3564 <arm_core_mpu_enable+0x10>)
    3556:	2205      	movs	r2, #5
    3558:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    355a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    355e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3562:	4770      	bx	lr
    3564:	e000ed90 	.word	0xe000ed90

00003568 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3568:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    356c:	4b01      	ldr	r3, [pc, #4]	; (3574 <arm_core_mpu_disable+0xc>)
    356e:	2200      	movs	r2, #0
    3570:	605a      	str	r2, [r3, #4]
}
    3572:	4770      	bx	lr
    3574:	e000ed90 	.word	0xe000ed90

00003578 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3578:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    357a:	4d0e      	ldr	r5, [pc, #56]	; (35b4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    357c:	2301      	movs	r3, #1
    357e:	782a      	ldrb	r2, [r5, #0]
    3580:	460c      	mov	r4, r1
    3582:	f7ff ffa7 	bl	34d4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3586:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3588:	3016      	adds	r0, #22
    358a:	d111      	bne.n	35b0 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    358c:	f240 1311 	movw	r3, #273	; 0x111
    3590:	4a09      	ldr	r2, [pc, #36]	; (35b8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3592:	490a      	ldr	r1, [pc, #40]	; (35bc <arm_core_mpu_configure_static_mpu_regions+0x44>)
    3594:	480a      	ldr	r0, [pc, #40]	; (35c0 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    3596:	f006 fb5e 	bl	9c56 <printk>
    359a:	4621      	mov	r1, r4
    359c:	4809      	ldr	r0, [pc, #36]	; (35c4 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    359e:	f006 fb5a 	bl	9c56 <printk>
			regions_num);
	}
}
    35a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    35a6:	4804      	ldr	r0, [pc, #16]	; (35b8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    35a8:	f240 1111 	movw	r1, #273	; 0x111
    35ac:	f006 ba7c 	b.w	9aa8 <assert_post_action>
}
    35b0:	bd38      	pop	{r3, r4, r5, pc}
    35b2:	bf00      	nop
    35b4:	200010dc 	.word	0x200010dc
    35b8:	0000b61f 	.word	0x0000b61f
    35bc:	0000ac81 	.word	0x0000ac81
    35c0:	0000ac83 	.word	0x0000ac83
    35c4:	0000b656 	.word	0x0000b656

000035c8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    35c8:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    35ca:	4a12      	ldr	r2, [pc, #72]	; (3614 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    35cc:	2300      	movs	r3, #0
    35ce:	7812      	ldrb	r2, [r2, #0]
    35d0:	460c      	mov	r4, r1
    35d2:	f7ff ff7f 	bl	34d4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    35d6:	f110 0f16 	cmn.w	r0, #22
    35da:	d008      	beq.n	35ee <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    35dc:	4b0e      	ldr	r3, [pc, #56]	; (3618 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    35de:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    35e0:	2807      	cmp	r0, #7
    35e2:	dd00      	ble.n	35e6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    35e4:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    35e6:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    35e8:	611a      	str	r2, [r3, #16]
    35ea:	3001      	adds	r0, #1
    35ec:	e7f8      	b.n	35e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    35ee:	4a0b      	ldr	r2, [pc, #44]	; (361c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    35f0:	490b      	ldr	r1, [pc, #44]	; (3620 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    35f2:	480c      	ldr	r0, [pc, #48]	; (3624 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    35f4:	f44f 7398 	mov.w	r3, #304	; 0x130
    35f8:	f006 fb2d 	bl	9c56 <printk>
    35fc:	4621      	mov	r1, r4
    35fe:	480a      	ldr	r0, [pc, #40]	; (3628 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    3600:	f006 fb29 	bl	9c56 <printk>
}
    3604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3608:	4804      	ldr	r0, [pc, #16]	; (361c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    360a:	f44f 7198 	mov.w	r1, #304	; 0x130
    360e:	f006 ba4b 	b.w	9aa8 <assert_post_action>
    3612:	bf00      	nop
    3614:	200010dc 	.word	0x200010dc
    3618:	e000ed90 	.word	0xe000ed90
    361c:	0000b61f 	.word	0x0000b61f
    3620:	0000ac81 	.word	0x0000ac81
    3624:	0000ac83 	.word	0x0000ac83
    3628:	0000b682 	.word	0x0000b682

0000362c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    362c:	4925      	ldr	r1, [pc, #148]	; (36c4 <z_arm_mpu_init+0x98>)
{
    362e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3630:	680c      	ldr	r4, [r1, #0]
    3632:	2c08      	cmp	r4, #8
    3634:	d913      	bls.n	365e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    3636:	f44f 73a4 	mov.w	r3, #328	; 0x148
    363a:	4a23      	ldr	r2, [pc, #140]	; (36c8 <z_arm_mpu_init+0x9c>)
    363c:	4923      	ldr	r1, [pc, #140]	; (36cc <z_arm_mpu_init+0xa0>)
    363e:	4824      	ldr	r0, [pc, #144]	; (36d0 <z_arm_mpu_init+0xa4>)
    3640:	f006 fb09 	bl	9c56 <printk>
    3644:	4823      	ldr	r0, [pc, #140]	; (36d4 <z_arm_mpu_init+0xa8>)
    3646:	2208      	movs	r2, #8
    3648:	4621      	mov	r1, r4
    364a:	f006 fb04 	bl	9c56 <printk>
    364e:	481e      	ldr	r0, [pc, #120]	; (36c8 <z_arm_mpu_init+0x9c>)
    3650:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3654:	f006 fa28 	bl	9aa8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    3658:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    365c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    365e:	f7ff ff83 	bl	3568 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3662:	6848      	ldr	r0, [r1, #4]
    3664:	491c      	ldr	r1, [pc, #112]	; (36d8 <z_arm_mpu_init+0xac>)
    3666:	2200      	movs	r2, #0
    3668:	4294      	cmp	r4, r2
    366a:	f100 000c 	add.w	r0, r0, #12
    366e:	d119      	bne.n	36a4 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    3670:	4b1a      	ldr	r3, [pc, #104]	; (36dc <z_arm_mpu_init+0xb0>)
    3672:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3674:	f7ff ff6e 	bl	3554 <arm_core_mpu_enable>
	__ASSERT(
    3678:	680b      	ldr	r3, [r1, #0]
    367a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    367e:	2b08      	cmp	r3, #8
    3680:	d00e      	beq.n	36a0 <z_arm_mpu_init+0x74>
    3682:	4917      	ldr	r1, [pc, #92]	; (36e0 <z_arm_mpu_init+0xb4>)
    3684:	4a10      	ldr	r2, [pc, #64]	; (36c8 <z_arm_mpu_init+0x9c>)
    3686:	4812      	ldr	r0, [pc, #72]	; (36d0 <z_arm_mpu_init+0xa4>)
    3688:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    368c:	f006 fae3 	bl	9c56 <printk>
    3690:	4814      	ldr	r0, [pc, #80]	; (36e4 <z_arm_mpu_init+0xb8>)
    3692:	f006 fae0 	bl	9c56 <printk>
    3696:	480c      	ldr	r0, [pc, #48]	; (36c8 <z_arm_mpu_init+0x9c>)
    3698:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    369c:	f006 fa04 	bl	9aa8 <assert_post_action>
	return 0;
    36a0:	2000      	movs	r0, #0
    36a2:	e7db      	b.n	365c <z_arm_mpu_init+0x30>
    36a4:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36a6:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    36aa:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    36ae:	4313      	orrs	r3, r2
    36b0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36b4:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    36ba:	f043 0301 	orr.w	r3, r3, #1
    36be:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36c0:	3201      	adds	r2, #1
    36c2:	e7d1      	b.n	3668 <z_arm_mpu_init+0x3c>
    36c4:	0000aa18 	.word	0x0000aa18
    36c8:	0000b61f 	.word	0x0000b61f
    36cc:	0000ac81 	.word	0x0000ac81
    36d0:	0000ac83 	.word	0x0000ac83
    36d4:	0000b6af 	.word	0x0000b6af
    36d8:	e000ed90 	.word	0xe000ed90
    36dc:	200010dc 	.word	0x200010dc
    36e0:	0000b6e3 	.word	0x0000b6e3
    36e4:	0000b733 	.word	0x0000b733

000036e8 <_exit>:

#include <stdlib.h>
#include <zephyr.h>

void _exit(int status)
{
    36e8:	b508      	push	{r3, lr}
	printk("exit\n");
    36ea:	4802      	ldr	r0, [pc, #8]	; (36f4 <_exit+0xc>)
    36ec:	f006 fab3 	bl	9c56 <printk>
	while (1) {
    36f0:	e7fe      	b.n	36f0 <_exit+0x8>
    36f2:	bf00      	nop
    36f4:	0000b754 	.word	0x0000b754

000036f8 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    36f8:	b40f      	push	{r0, r1, r2, r3}
    36fa:	b507      	push	{r0, r1, r2, lr}
    36fc:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    36fe:	2102      	movs	r1, #2
{
    3700:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    3704:	4804      	ldr	r0, [pc, #16]	; (3718 <printf+0x20>)
	va_start(vargs, format);
    3706:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    3708:	f7fe fa9a 	bl	1c40 <cbvprintf>
	va_end(vargs);

	return r;
}
    370c:	b003      	add	sp, #12
    370e:	f85d eb04 	ldr.w	lr, [sp], #4
    3712:	b004      	add	sp, #16
    3714:	4770      	bx	lr
    3716:	bf00      	nop
    3718:	00009cd1 	.word	0x00009cd1

0000371c <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
    371c:	b40e      	push	{r1, r2, r3}
    371e:	b50f      	push	{r0, r1, r2, r3, lr}
    3720:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    3722:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    3726:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
    372a:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    372c:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    372e:	4806      	ldr	r0, [pc, #24]	; (3748 <sprintf+0x2c>)
	va_start(vargs, format);
    3730:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    3732:	a902      	add	r1, sp, #8
    3734:	f7fe fa84 	bl	1c40 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    3738:	9b02      	ldr	r3, [sp, #8]
    373a:	2200      	movs	r2, #0
    373c:	701a      	strb	r2, [r3, #0]
	return r;
}
    373e:	b004      	add	sp, #16
    3740:	f85d eb04 	ldr.w	lr, [sp], #4
    3744:	b003      	add	sp, #12
    3746:	4770      	bx	lr
    3748:	00009cb1 	.word	0x00009cb1

0000374c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    374c:	4b01      	ldr	r3, [pc, #4]	; (3754 <__stdout_hook_install+0x8>)
    374e:	6018      	str	r0, [r3, #0]
}
    3750:	4770      	bx	lr
    3752:	bf00      	nop
    3754:	200000d8 	.word	0x200000d8

00003758 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    3758:	3902      	subs	r1, #2
    375a:	2901      	cmp	r1, #1
    375c:	d802      	bhi.n	3764 <z_impl_zephyr_fputc+0xc>
    375e:	4b03      	ldr	r3, [pc, #12]	; (376c <z_impl_zephyr_fputc+0x14>)
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	4718      	bx	r3
}
    3764:	f04f 30ff 	mov.w	r0, #4294967295
    3768:	4770      	bx	lr
    376a:	bf00      	nop
    376c:	200000d8 	.word	0x200000d8

00003770 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3770:	f04f 0320 	mov.w	r3, #32
    3774:	f3ef 8111 	mrs	r1, BASEPRI
    3778:	f383 8812 	msr	BASEPRI_MAX, r3
    377c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3780:	4a0f      	ldr	r2, [pc, #60]	; (37c0 <nordicsemi_nrf52_init+0x50>)
    3782:	2301      	movs	r3, #1
    3784:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    378c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3790:	4a0c      	ldr	r2, [pc, #48]	; (37c4 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3792:	6812      	ldr	r2, [r2, #0]
    3794:	2a08      	cmp	r2, #8
    3796:	d108      	bne.n	37aa <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3798:	4a0b      	ldr	r2, [pc, #44]	; (37c8 <nordicsemi_nrf52_init+0x58>)
    379a:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    379c:	2a05      	cmp	r2, #5
    379e:	d804      	bhi.n	37aa <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    37a0:	480a      	ldr	r0, [pc, #40]	; (37cc <nordicsemi_nrf52_init+0x5c>)
    37a2:	5c82      	ldrb	r2, [r0, r2]
    37a4:	b10a      	cbz	r2, 37aa <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    37a6:	4a0a      	ldr	r2, [pc, #40]	; (37d0 <nordicsemi_nrf52_init+0x60>)
    37a8:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    37aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37ae:	2201      	movs	r2, #1
    37b0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    37b4:	f381 8811 	msr	BASEPRI, r1
    37b8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    37bc:	2000      	movs	r0, #0
    37be:	4770      	bx	lr
    37c0:	4001e000 	.word	0x4001e000
    37c4:	10000130 	.word	0x10000130
    37c8:	10000134 	.word	0x10000134
    37cc:	0000b769 	.word	0x0000b769
    37d0:	40000638 	.word	0x40000638

000037d4 <sys_arch_reboot>:
    *p_gpregret = val;
    37d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37d8:	b2c0      	uxtb	r0, r0
    37da:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    37de:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    37e2:	4905      	ldr	r1, [pc, #20]	; (37f8 <sys_arch_reboot+0x24>)
    37e4:	4b05      	ldr	r3, [pc, #20]	; (37fc <sys_arch_reboot+0x28>)
    37e6:	68ca      	ldr	r2, [r1, #12]
    37e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    37ec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    37ee:	60cb      	str	r3, [r1, #12]
    37f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    37f4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    37f6:	e7fd      	b.n	37f4 <sys_arch_reboot+0x20>
    37f8:	e000ed00 	.word	0xe000ed00
    37fc:	05fa0004 	.word	0x05fa0004

00003800 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3800:	b120      	cbz	r0, 380c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3802:	4b03      	ldr	r3, [pc, #12]	; (3810 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3804:	0180      	lsls	r0, r0, #6
    3806:	f043 0301 	orr.w	r3, r3, #1
    380a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    380c:	4770      	bx	lr
    380e:	bf00      	nop
    3810:	0000a9d0 	.word	0x0000a9d0

00003814 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3814:	4a05      	ldr	r2, [pc, #20]	; (382c <adc_context_start_sampling.isra.0+0x18>)
    3816:	2301      	movs	r3, #1
    3818:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    381c:	b108      	cbz	r0, 3822 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    381e:	60d3      	str	r3, [r2, #12]
}
    3820:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3822:	6013      	str	r3, [r2, #0]
    3824:	4a02      	ldr	r2, [pc, #8]	; (3830 <adc_context_start_sampling.isra.0+0x1c>)
    3826:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3828:	4770      	bx	lr
    382a:	bf00      	nop
    382c:	40007000 	.word	0x40007000
    3830:	40007004 	.word	0x40007004

00003834 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    3834:	7908      	ldrb	r0, [r1, #4]
{
    3836:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    3838:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    383c:	2c07      	cmp	r4, #7
    383e:	d81f      	bhi.n	3880 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    3840:	780b      	ldrb	r3, [r1, #0]
    3842:	2b09      	cmp	r3, #9
    3844:	d81c      	bhi.n	3880 <adc_nrfx_channel_setup+0x4c>
    3846:	e8df f003 	tbb	[pc, r3]
    384a:	0606      	.short	0x0606
    384c:	1b060606 	.word	0x1b060606
    3850:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    3854:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    3856:	784a      	ldrb	r2, [r1, #1]
    3858:	2a03      	cmp	r2, #3
    385a:	d018      	beq.n	388e <adc_nrfx_channel_setup+0x5a>
    385c:	2a04      	cmp	r2, #4
    385e:	d10f      	bne.n	3880 <adc_nrfx_channel_setup+0x4c>
    3860:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    3862:	884a      	ldrh	r2, [r1, #2]
    3864:	f244 060a 	movw	r6, #16394	; 0x400a
    3868:	42b2      	cmp	r2, r6
    386a:	d044      	beq.n	38f6 <adc_nrfx_channel_setup+0xc2>
    386c:	d811      	bhi.n	3892 <adc_nrfx_channel_setup+0x5e>
    386e:	f244 0603 	movw	r6, #16387	; 0x4003
    3872:	42b2      	cmp	r2, r6
    3874:	d03b      	beq.n	38ee <adc_nrfx_channel_setup+0xba>
    3876:	f244 0605 	movw	r6, #16389	; 0x4005
    387a:	42b2      	cmp	r2, r6
    387c:	d039      	beq.n	38f2 <adc_nrfx_channel_setup+0xbe>
    387e:	b3d2      	cbz	r2, 38f6 <adc_nrfx_channel_setup+0xc2>
    3880:	f06f 0015 	mvn.w	r0, #21
    3884:	e032      	b.n	38ec <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    3886:	2306      	movs	r3, #6
		break;
    3888:	e7e5      	b.n	3856 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    388a:	2307      	movs	r3, #7
		break;
    388c:	e7e3      	b.n	3856 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    388e:	2501      	movs	r5, #1
    3890:	e7e7      	b.n	3862 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    3892:	f244 0614 	movw	r6, #16404	; 0x4014
    3896:	42b2      	cmp	r2, r6
    3898:	d02f      	beq.n	38fa <adc_nrfx_channel_setup+0xc6>
    389a:	f244 0628 	movw	r6, #16424	; 0x4028
    389e:	42b2      	cmp	r2, r6
    38a0:	d02d      	beq.n	38fe <adc_nrfx_channel_setup+0xca>
    38a2:	f244 060f 	movw	r6, #16399	; 0x400f
    38a6:	42b2      	cmp	r2, r6
    38a8:	d1ea      	bne.n	3880 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    38aa:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    38ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    38b0:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    38b2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    38b6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    38ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    38be:	0122      	lsls	r2, r4, #4
    38c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    38c4:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    38c8:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    38ca:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    38ce:	0123      	lsls	r3, r4, #4
    38d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    38d4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    38d8:	798a      	ldrb	r2, [r1, #6]
    38da:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    38de:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    38e2:	4b08      	ldr	r3, [pc, #32]	; (3904 <adc_nrfx_channel_setup+0xd0>)
    38e4:	441c      	add	r4, r3
    38e6:	794b      	ldrb	r3, [r1, #5]
    38e8:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    38ec:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    38ee:	2200      	movs	r2, #0
    38f0:	e7dc      	b.n	38ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    38f2:	2201      	movs	r2, #1
    38f4:	e7da      	b.n	38ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    38f6:	2202      	movs	r2, #2
    38f8:	e7d8      	b.n	38ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    38fa:	2204      	movs	r2, #4
    38fc:	e7d6      	b.n	38ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    38fe:	2205      	movs	r2, #5
    3900:	e7d4      	b.n	38ac <adc_nrfx_channel_setup+0x78>
    3902:	bf00      	nop
    3904:	20000000 	.word	0x20000000

00003908 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    3908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    390a:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    390c:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    390e:	b910      	cbnz	r0, 3916 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    3910:	f06f 0015 	mvn.w	r0, #21
    3914:	e09c      	b.n	3a50 <start_read.isra.0+0x148>
	if (!selected_channels ||
    3916:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    391a:	d1f9      	bne.n	3910 <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    391c:	4c57      	ldr	r4, [pc, #348]	; (3a7c <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    391e:	4f58      	ldr	r7, [pc, #352]	; (3a80 <start_read.isra.0+0x178>)
	active_channels = 0U;
    3920:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    3922:	fa20 f302 	lsr.w	r3, r0, r2
    3926:	f013 0301 	ands.w	r3, r3, #1
    392a:	d033      	beq.n	3994 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    392c:	18bb      	adds	r3, r7, r2
    392e:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    3932:	f1bc 0f00 	cmp.w	ip, #0
    3936:	d0eb      	beq.n	3910 <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    3938:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    393c:	7c6e      	ldrb	r6, [r5, #17]
    393e:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    3942:	3e00      	subs	r6, #0
    3944:	bf18      	it	ne
    3946:	2601      	movne	r6, #1
    3948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    394c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    3950:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    3954:	f102 0351 	add.w	r3, r2, #81	; 0x51
    3958:	011b      	lsls	r3, r3, #4
			++active_channels;
    395a:	3101      	adds	r1, #1
    395c:	f844 c003 	str.w	ip, [r4, r3]
    3960:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    3962:	3201      	adds	r2, #1
    3964:	2a08      	cmp	r2, #8
    3966:	d1dc      	bne.n	3922 <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    3968:	7c2b      	ldrb	r3, [r5, #16]
    396a:	3b08      	subs	r3, #8
    396c:	2b06      	cmp	r3, #6
    396e:	d8cf      	bhi.n	3910 <start_read.isra.0+0x8>
    3970:	a201      	add	r2, pc, #4	; (adr r2, 3978 <start_read.isra.0+0x70>)
    3972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3976:	bf00      	nop
    3978:	00003a5d 	.word	0x00003a5d
    397c:	00003911 	.word	0x00003911
    3980:	0000399f 	.word	0x0000399f
    3984:	00003911 	.word	0x00003911
    3988:	00003a55 	.word	0x00003a55
    398c:	00003911 	.word	0x00003911
    3990:	00003a59 	.word	0x00003a59
    3994:	f102 0651 	add.w	r6, r2, #81	; 0x51
    3998:	0136      	lsls	r6, r6, #4
    399a:	51a3      	str	r3, [r4, r6]
}
    399c:	e7e1      	b.n	3962 <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    399e:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    39a0:	4b36      	ldr	r3, [pc, #216]	; (3a7c <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    39a2:	2901      	cmp	r1, #1
    39a4:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    39a8:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    39aa:	d959      	bls.n	3a60 <start_read.isra.0+0x158>
    39ac:	2a00      	cmp	r2, #0
    39ae:	d1af      	bne.n	3910 <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    39b0:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    39b4:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    39b6:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    39b8:	b112      	cbz	r2, 39c0 <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    39ba:	8992      	ldrh	r2, [r2, #12]
    39bc:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    39c0:	68ea      	ldr	r2, [r5, #12]
    39c2:	429a      	cmp	r2, r3
    39c4:	d356      	bcc.n	3a74 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    39c6:	4b2d      	ldr	r3, [pc, #180]	; (3a7c <start_read.isra.0+0x174>)
    39c8:	68aa      	ldr	r2, [r5, #8]
    39ca:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    39ce:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    39d0:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    39d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    39d6:	4c2a      	ldr	r4, [pc, #168]	; (3a80 <start_read.isra.0+0x178>)
    39d8:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    39dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    39de:	683b      	ldr	r3, [r7, #0]
    39e0:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    39e2:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    39e4:	2600      	movs	r6, #0
    39e6:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    39e8:	2b00      	cmp	r3, #0
    39ea:	d03c      	beq.n	3a66 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    39ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    39ee:	f104 0590 	add.w	r5, r4, #144	; 0x90
    39f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    39f6:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    39f8:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    39fc:	b398      	cbz	r0, 3a66 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    39fe:	f3bf 8f5b 	dmb	ish
    3a02:	e854 3f00 	ldrex	r3, [r4]
    3a06:	e844 6200 	strex	r2, r6, [r4]
    3a0a:	2a00      	cmp	r2, #0
    3a0c:	d1f9      	bne.n	3a02 <start_read.isra.0+0xfa>
    3a0e:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    3a12:	481c      	ldr	r0, [pc, #112]	; (3a84 <start_read.isra.0+0x17c>)
    3a14:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    3a18:	4a1b      	ldr	r2, [pc, #108]	; (3a88 <start_read.isra.0+0x180>)
    3a1a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3a1e:	2100      	movs	r1, #0
    3a20:	2300      	movs	r3, #0
    3a22:	fbe5 0106 	umlal	r0, r1, r5, r6
    3a26:	f7fd f9d7 	bl	dd8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    3a2a:	2200      	movs	r2, #0
    3a2c:	e9cd 0100 	strd	r0, r1, [sp]
    3a30:	2300      	movs	r3, #0
    3a32:	f104 0008 	add.w	r0, r4, #8
    3a36:	f005 fb7b 	bl	9130 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    3a3a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3a3e:	b9bb      	cbnz	r3, 3a70 <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    3a40:	4812      	ldr	r0, [pc, #72]	; (3a8c <start_read.isra.0+0x184>)
    3a42:	f04f 32ff 	mov.w	r2, #4294967295
    3a46:	f04f 33ff 	mov.w	r3, #4294967295
    3a4a:	f004 fd8b 	bl	8564 <z_impl_k_sem_take>
	return ctx->status;
    3a4e:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    3a50:	b003      	add	sp, #12
    3a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3a54:	2202      	movs	r2, #2
		break;
    3a56:	e7a3      	b.n	39a0 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3a58:	2203      	movs	r2, #3
		break;
    3a5a:	e7a1      	b.n	39a0 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3a5c:	2200      	movs	r2, #0
    3a5e:	e79f      	b.n	39a0 <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    3a60:	2a08      	cmp	r2, #8
    3a62:	d9a5      	bls.n	39b0 <start_read.isra.0+0xa8>
    3a64:	e754      	b.n	3910 <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3a66:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    3a6a:	f7ff fed3 	bl	3814 <adc_context_start_sampling.isra.0>
    3a6e:	e7e4      	b.n	3a3a <start_read.isra.0+0x132>
		return 0;
    3a70:	2000      	movs	r0, #0
	return error;
    3a72:	e7ed      	b.n	3a50 <start_read.isra.0+0x148>
		return -ENOMEM;
    3a74:	f06f 000b 	mvn.w	r0, #11
    3a78:	e7ea      	b.n	3a50 <start_read.isra.0+0x148>
    3a7a:	bf00      	nop
    3a7c:	40007000 	.word	0x40007000
    3a80:	20000000 	.word	0x20000000
    3a84:	000f423f 	.word	0x000f423f
    3a88:	000f4240 	.word	0x000f4240
    3a8c:	20000058 	.word	0x20000058

00003a90 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	460c      	mov	r4, r1
    3a94:	4616      	mov	r6, r2
    3a96:	4d0d      	ldr	r5, [pc, #52]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3a98:	f04f 32ff 	mov.w	r2, #4294967295
    3a9c:	f04f 33ff 	mov.w	r3, #4294967295
    3aa0:	f105 0040 	add.w	r0, r5, #64	; 0x40
    3aa4:	f004 fd5e 	bl	8564 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3aa8:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    3aaa:	4620      	mov	r0, r4
    3aac:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    3ab0:	676e      	str	r6, [r5, #116]	; 0x74
    3ab2:	f7ff ff29 	bl	3908 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3ab6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3aba:	4604      	mov	r4, r0
    3abc:	b103      	cbz	r3, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3abe:	b110      	cbz	r0, 3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
	z_impl_k_sem_give(sem);
    3ac0:	4803      	ldr	r0, [pc, #12]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3ac2:	f004 fd0b 	bl	84dc <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    3ac6:	4620      	mov	r0, r4
    3ac8:	bd70      	pop	{r4, r5, r6, pc}
    3aca:	bf00      	nop
    3acc:	20000000 	.word	0x20000000
    3ad0:	20000040 	.word	0x20000040

00003ad4 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ad4:	4b0d      	ldr	r3, [pc, #52]	; (3b0c <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3ad6:	b510      	push	{r4, lr}
    3ad8:	2400      	movs	r4, #0
    3ada:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3adc:	681b      	ldr	r3, [r3, #0]
    3ade:	4b0c      	ldr	r3, [pc, #48]	; (3b10 <init_saadc+0x3c>)
    3ae0:	601c      	str	r4, [r3, #0]
    3ae2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3ae4:	4b0b      	ldr	r3, [pc, #44]	; (3b14 <init_saadc+0x40>)
    3ae6:	2212      	movs	r2, #18
    3ae8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3aec:	2007      	movs	r0, #7
    3aee:	f7ff fa17 	bl	2f20 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3af2:	4622      	mov	r2, r4
    3af4:	2101      	movs	r1, #1
    3af6:	2007      	movs	r0, #7
    3af8:	f7ff fa30 	bl	2f5c <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    3afc:	4806      	ldr	r0, [pc, #24]	; (3b18 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    3afe:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3b00:	b913      	cbnz	r3, 3b08 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    3b02:	3040      	adds	r0, #64	; 0x40
    3b04:	f004 fcea 	bl	84dc <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3b08:	2000      	movs	r0, #0
    3b0a:	bd10      	pop	{r4, pc}
    3b0c:	40007104 	.word	0x40007104
    3b10:	40007110 	.word	0x40007110
    3b14:	40007000 	.word	0x40007000
    3b18:	20000000 	.word	0x20000000

00003b1c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b1c:	4b34      	ldr	r3, [pc, #208]	; (3bf0 <saadc_irq_handler+0xd4>)
    3b1e:	681a      	ldr	r2, [r3, #0]
{
    3b20:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3b22:	2a00      	cmp	r2, #0
    3b24:	d055      	beq.n	3bd2 <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b26:	2200      	movs	r2, #0
    3b28:	601a      	str	r2, [r3, #0]
    3b2a:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3b2c:	4c31      	ldr	r4, [pc, #196]	; (3bf4 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b2e:	4b32      	ldr	r3, [pc, #200]	; (3bf8 <saadc_irq_handler+0xdc>)
    3b30:	2101      	movs	r1, #1
    3b32:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3b34:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    3b38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    3b3a:	b3db      	cbz	r3, 3bb4 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    3b3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    3b40:	b143      	cbz	r3, 3b54 <saadc_irq_handler+0x38>
			action = callback(dev,
    3b42:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    3b46:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    3b4a:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3b4c:	2801      	cmp	r0, #1
    3b4e:	d014      	beq.n	3b7a <saadc_irq_handler+0x5e>
    3b50:	2802      	cmp	r0, #2
    3b52:	d029      	beq.n	3ba8 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3b54:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    3b58:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    3b5c:	429a      	cmp	r2, r3
    3b5e:	d923      	bls.n	3ba8 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3b60:	3301      	adds	r3, #1
    3b62:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3b66:	4b25      	ldr	r3, [pc, #148]	; (3bfc <saadc_irq_handler+0xe0>)
    3b68:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3b6c:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3b70:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3b72:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3b76:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    3b7a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3b7e:	b92b      	cbnz	r3, 3b8c <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3b80:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    3b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b88:	f7ff be44 	b.w	3814 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3b8c:	f3bf 8f5b 	dmb	ish
    3b90:	e854 3f00 	ldrex	r3, [r4]
    3b94:	1e5a      	subs	r2, r3, #1
    3b96:	e844 2100 	strex	r1, r2, [r4]
    3b9a:	2900      	cmp	r1, #0
    3b9c:	d1f8      	bne.n	3b90 <saadc_irq_handler+0x74>
    3b9e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3ba2:	2b01      	cmp	r3, #1
    3ba4:	dcec      	bgt.n	3b80 <saadc_irq_handler+0x64>
    3ba6:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3ba8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3bac:	b113      	cbz	r3, 3bb4 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    3bae:	4814      	ldr	r0, [pc, #80]	; (3c00 <saadc_irq_handler+0xe4>)
    3bb0:	f006 fd81 	bl	a6b6 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    3bb4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3bb8:	b14b      	cbz	r3, 3bce <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    3bba:	6f60      	ldr	r0, [r4, #116]	; 0x74
    3bbc:	b110      	cbz	r0, 3bc4 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    3bbe:	2100      	movs	r1, #0
    3bc0:	f003 fa02 	bl	6fc8 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    3bc4:	480f      	ldr	r0, [pc, #60]	; (3c04 <saadc_irq_handler+0xe8>)
    3bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bca:	f004 bc87 	b.w	84dc <z_impl_k_sem_give>
    3bce:	480e      	ldr	r0, [pc, #56]	; (3c08 <saadc_irq_handler+0xec>)
    3bd0:	e7f9      	b.n	3bc6 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bd2:	4b0e      	ldr	r3, [pc, #56]	; (3c0c <saadc_irq_handler+0xf0>)
    3bd4:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3bd6:	2900      	cmp	r1, #0
    3bd8:	d0e5      	beq.n	3ba6 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bda:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bdc:	4a06      	ldr	r2, [pc, #24]	; (3bf8 <saadc_irq_handler+0xdc>)
    3bde:	681b      	ldr	r3, [r3, #0]
    3be0:	2301      	movs	r3, #1
    3be2:	6013      	str	r3, [r2, #0]
    3be4:	f842 3c08 	str.w	r3, [r2, #-8]
    3be8:	f842 3c04 	str.w	r3, [r2, #-4]
}
    3bec:	e7db      	b.n	3ba6 <saadc_irq_handler+0x8a>
    3bee:	bf00      	nop
    3bf0:	40007104 	.word	0x40007104
    3bf4:	20000000 	.word	0x20000000
    3bf8:	40007008 	.word	0x40007008
    3bfc:	40007000 	.word	0x40007000
    3c00:	20000008 	.word	0x20000008
    3c04:	20000040 	.word	0x20000040
    3c08:	20000058 	.word	0x20000058
    3c0c:	40007110 	.word	0x40007110

00003c10 <adc_nrfx_read>:
{
    3c10:	b538      	push	{r3, r4, r5, lr}
    3c12:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    3c14:	4d0c      	ldr	r5, [pc, #48]	; (3c48 <adc_nrfx_read+0x38>)
    3c16:	f04f 32ff 	mov.w	r2, #4294967295
    3c1a:	f04f 33ff 	mov.w	r3, #4294967295
    3c1e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    3c22:	f004 fc9f 	bl	8564 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3c26:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    3c28:	4620      	mov	r0, r4
    3c2a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    3c2e:	676b      	str	r3, [r5, #116]	; 0x74
    3c30:	f7ff fe6a 	bl	3908 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3c34:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3c38:	4604      	mov	r4, r0
    3c3a:	b103      	cbz	r3, 3c3e <adc_nrfx_read+0x2e>
    3c3c:	b110      	cbz	r0, 3c44 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    3c3e:	4803      	ldr	r0, [pc, #12]	; (3c4c <adc_nrfx_read+0x3c>)
    3c40:	f004 fc4c 	bl	84dc <z_impl_k_sem_give>
}
    3c44:	4620      	mov	r0, r4
    3c46:	bd38      	pop	{r3, r4, r5, pc}
    3c48:	20000000 	.word	0x20000000
    3c4c:	20000040 	.word	0x20000040

00003c50 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3c54:	4c10      	ldr	r4, [pc, #64]	; (3c98 <onoff_start+0x48>)
    3c56:	1b07      	subs	r7, r0, r4
    3c58:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    3c5c:	f04f 080c 	mov.w	r8, #12
    3c60:	fb08 f807 	mul.w	r8, r8, r7
{
    3c64:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    3c66:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    3c6a:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    3c6c:	4420      	add	r0, r4
    3c6e:	2140      	movs	r1, #64	; 0x40
    3c70:	f006 f895 	bl	9d9e <set_starting_state>
	if (err < 0) {
    3c74:	1e01      	subs	r1, r0, #0
    3c76:	db09      	blt.n	3c8c <onoff_start+0x3c>
	subdata->cb = cb;
    3c78:	4b08      	ldr	r3, [pc, #32]	; (3c9c <onoff_start+0x4c>)
    3c7a:	4444      	add	r4, r8
	subdata->user_data = user_data;
    3c7c:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    3c80:	4b07      	ldr	r3, [pc, #28]	; (3ca0 <onoff_start+0x50>)
    3c82:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3c8a:	4718      	bx	r3
		notify(mgr, err);
    3c8c:	4630      	mov	r0, r6
    3c8e:	462b      	mov	r3, r5
}
    3c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3c94:	4718      	bx	r3
    3c96:	bf00      	nop
    3c98:	20000eec 	.word	0x20000eec
    3c9c:	00009e01 	.word	0x00009e01
    3ca0:	0000aa60 	.word	0x0000aa60

00003ca4 <get_status>:
{
    3ca4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3ca6:	b2cc      	uxtb	r4, r1
    3ca8:	2c01      	cmp	r4, #1
{
    3caa:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3cac:	d909      	bls.n	3cc2 <get_status+0x1e>
    3cae:	4909      	ldr	r1, [pc, #36]	; (3cd4 <get_status+0x30>)
    3cb0:	4809      	ldr	r0, [pc, #36]	; (3cd8 <get_status+0x34>)
    3cb2:	4a0a      	ldr	r2, [pc, #40]	; (3cdc <get_status+0x38>)
    3cb4:	2379      	movs	r3, #121	; 0x79
    3cb6:	f005 ffce 	bl	9c56 <printk>
    3cba:	4808      	ldr	r0, [pc, #32]	; (3cdc <get_status+0x38>)
    3cbc:	2179      	movs	r1, #121	; 0x79
    3cbe:	f005 fef3 	bl	9aa8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3cc2:	692b      	ldr	r3, [r5, #16]
    3cc4:	210c      	movs	r1, #12
    3cc6:	fb04 3401 	mla	r4, r4, r1, r3
    3cca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    3ccc:	f000 0007 	and.w	r0, r0, #7
    3cd0:	bd38      	pop	{r3, r4, r5, pc}
    3cd2:	bf00      	nop
    3cd4:	0000b7ac 	.word	0x0000b7ac
    3cd8:	0000ac83 	.word	0x0000ac83
    3cdc:	0000b76f 	.word	0x0000b76f

00003ce0 <stop>:
{
    3ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ce2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3ce4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3ce6:	6907      	ldr	r7, [r0, #16]
{
    3ce8:	4605      	mov	r5, r0
    3cea:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3cec:	d90b      	bls.n	3d06 <stop+0x26>
    3cee:	4918      	ldr	r1, [pc, #96]	; (3d50 <stop+0x70>)
    3cf0:	4818      	ldr	r0, [pc, #96]	; (3d54 <stop+0x74>)
    3cf2:	4a19      	ldr	r2, [pc, #100]	; (3d58 <stop+0x78>)
    3cf4:	f240 134d 	movw	r3, #333	; 0x14d
    3cf8:	f005 ffad 	bl	9c56 <printk>
    3cfc:	4816      	ldr	r0, [pc, #88]	; (3d58 <stop+0x78>)
    3cfe:	f240 114d 	movw	r1, #333	; 0x14d
    3d02:	f005 fed1 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    3d06:	f04f 0320 	mov.w	r3, #32
    3d0a:	f3ef 8211 	mrs	r2, BASEPRI
    3d0e:	f383 8812 	msr	BASEPRI_MAX, r3
    3d12:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3d16:	230c      	movs	r3, #12
    3d18:	fb03 7104 	mla	r1, r3, r4, r7
    3d1c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3d1e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    3d22:	d001      	beq.n	3d28 <stop+0x48>
    3d24:	428e      	cmp	r6, r1
    3d26:	d110      	bne.n	3d4a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3d28:	fb03 7304 	mla	r3, r3, r4, r7
    3d2c:	2101      	movs	r1, #1
    3d2e:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    3d30:	2000      	movs	r0, #0
	__asm__ volatile(
    3d32:	f382 8811 	msr	BASEPRI, r2
    3d36:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3d3a:	b928      	cbnz	r0, 3d48 <stop+0x68>
	get_sub_config(dev, type)->stop();
    3d3c:	6869      	ldr	r1, [r5, #4]
    3d3e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    3d42:	6863      	ldr	r3, [r4, #4]
    3d44:	4798      	blx	r3
	return 0;
    3d46:	2000      	movs	r0, #0
}
    3d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3d4a:	f04f 30ff 	mov.w	r0, #4294967295
    3d4e:	e7f0      	b.n	3d32 <stop+0x52>
    3d50:	0000b7ac 	.word	0x0000b7ac
    3d54:	0000ac83 	.word	0x0000ac83
    3d58:	0000b76f 	.word	0x0000b76f

00003d5c <onoff_stop>:
{
    3d5c:	b570      	push	{r4, r5, r6, lr}
    3d5e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3d60:	4906      	ldr	r1, [pc, #24]	; (3d7c <onoff_stop+0x20>)
    3d62:	1a41      	subs	r1, r0, r1
{
    3d64:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3d66:	1149      	asrs	r1, r1, #5
    3d68:	4805      	ldr	r0, [pc, #20]	; (3d80 <onoff_stop+0x24>)
    3d6a:	2240      	movs	r2, #64	; 0x40
    3d6c:	f7ff ffb8 	bl	3ce0 <stop>
	notify(mgr, res);
    3d70:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3d72:	4601      	mov	r1, r0
	notify(mgr, res);
    3d74:	4620      	mov	r0, r4
}
    3d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3d7a:	4718      	bx	r3
    3d7c:	20000eec 	.word	0x20000eec
    3d80:	0000a77c 	.word	0x0000a77c

00003d84 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3d84:	2200      	movs	r2, #0
{
    3d86:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3d88:	2101      	movs	r1, #1
{
    3d8a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3d8c:	4610      	mov	r0, r2
    3d8e:	f7ff f8e5 	bl	2f5c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3d92:	2000      	movs	r0, #0
    3d94:	f7ff f8c4 	bl	2f20 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3d98:	480f      	ldr	r0, [pc, #60]	; (3dd8 <clk_init+0x54>)
    3d9a:	f001 fb9d 	bl	54d8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3d9e:	4b0f      	ldr	r3, [pc, #60]	; (3ddc <clk_init+0x58>)
    3da0:	4298      	cmp	r0, r3
    3da2:	d115      	bne.n	3dd0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3da4:	f001 fbbc 	bl	5520 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3da8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3daa:	490d      	ldr	r1, [pc, #52]	; (3de0 <clk_init+0x5c>)
    3dac:	4630      	mov	r0, r6
    3dae:	f005 ff3d 	bl	9c2c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3db2:	2800      	cmp	r0, #0
    3db4:	db0b      	blt.n	3dce <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3db6:	2501      	movs	r5, #1
    3db8:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    3dba:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3dbc:	4908      	ldr	r1, [pc, #32]	; (3de0 <clk_init+0x5c>)
    3dbe:	f104 0020 	add.w	r0, r4, #32
    3dc2:	f005 ff33 	bl	9c2c <onoff_manager_init>
		if (err < 0) {
    3dc6:	2800      	cmp	r0, #0
    3dc8:	db01      	blt.n	3dce <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3dca:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3dcc:	2000      	movs	r0, #0
}
    3dce:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3dd0:	f06f 0004 	mvn.w	r0, #4
    3dd4:	e7fb      	b.n	3dce <clk_init+0x4a>
    3dd6:	bf00      	nop
    3dd8:	00003e19 	.word	0x00003e19
    3ddc:	0bad0000 	.word	0x0bad0000
    3de0:	0000aa70 	.word	0x0000aa70

00003de4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3de4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3de6:	230c      	movs	r3, #12
    3de8:	4809      	ldr	r0, [pc, #36]	; (3e10 <clkstarted_handle.constprop.0+0x2c>)
    3dea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3dec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3dee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3df0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3df4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3df6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3df8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    3dfa:	4418      	add	r0, r3
    3dfc:	f005 ffed 	bl	9dda <set_on_state>
	if (callback) {
    3e00:	b12d      	cbz	r5, 3e0e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3e02:	4632      	mov	r2, r6
    3e04:	462b      	mov	r3, r5
    3e06:	4803      	ldr	r0, [pc, #12]	; (3e14 <clkstarted_handle.constprop.0+0x30>)
}
    3e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3e0c:	4718      	bx	r3
}
    3e0e:	bd70      	pop	{r4, r5, r6, pc}
    3e10:	20000eec 	.word	0x20000eec
    3e14:	0000a77c 	.word	0x0000a77c

00003e18 <clock_event_handler>:
	switch (event) {
    3e18:	2801      	cmp	r0, #1
{
    3e1a:	b508      	push	{r3, lr}
	switch (event) {
    3e1c:	d006      	beq.n	3e2c <clock_event_handler+0x14>
    3e1e:	2803      	cmp	r0, #3
    3e20:	d008      	beq.n	3e34 <clock_event_handler+0x1c>
    3e22:	b9a8      	cbnz	r0, 3e50 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3e24:	4b10      	ldr	r3, [pc, #64]	; (3e68 <clock_event_handler+0x50>)
    3e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e28:	075b      	lsls	r3, r3, #29
    3e2a:	d11b      	bne.n	3e64 <clock_event_handler+0x4c>
}
    3e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e30:	f7ff bfd8 	b.w	3de4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3e34:	490d      	ldr	r1, [pc, #52]	; (3e6c <clock_event_handler+0x54>)
    3e36:	4a0e      	ldr	r2, [pc, #56]	; (3e70 <clock_event_handler+0x58>)
    3e38:	480e      	ldr	r0, [pc, #56]	; (3e74 <clock_event_handler+0x5c>)
    3e3a:	f240 235e 	movw	r3, #606	; 0x25e
    3e3e:	f005 ff0a 	bl	9c56 <printk>
    3e42:	f240 215e 	movw	r1, #606	; 0x25e
}
    3e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3e4a:	4809      	ldr	r0, [pc, #36]	; (3e70 <clock_event_handler+0x58>)
    3e4c:	f005 be2c 	b.w	9aa8 <assert_post_action>
    3e50:	4906      	ldr	r1, [pc, #24]	; (3e6c <clock_event_handler+0x54>)
    3e52:	4a07      	ldr	r2, [pc, #28]	; (3e70 <clock_event_handler+0x58>)
    3e54:	4807      	ldr	r0, [pc, #28]	; (3e74 <clock_event_handler+0x5c>)
    3e56:	f240 2362 	movw	r3, #610	; 0x262
    3e5a:	f005 fefc 	bl	9c56 <printk>
    3e5e:	f240 2162 	movw	r1, #610	; 0x262
    3e62:	e7f0      	b.n	3e46 <clock_event_handler+0x2e>
}
    3e64:	bd08      	pop	{r3, pc}
    3e66:	bf00      	nop
    3e68:	20000eec 	.word	0x20000eec
    3e6c:	0000ac81 	.word	0x0000ac81
    3e70:	0000b76f 	.word	0x0000b76f
    3e74:	0000ac83 	.word	0x0000ac83

00003e78 <generic_hfclk_start>:
{
    3e78:	b508      	push	{r3, lr}
	__asm__ volatile(
    3e7a:	f04f 0320 	mov.w	r3, #32
    3e7e:	f3ef 8111 	mrs	r1, BASEPRI
    3e82:	f383 8812 	msr	BASEPRI_MAX, r3
    3e86:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3e8a:	4a12      	ldr	r2, [pc, #72]	; (3ed4 <generic_hfclk_start+0x5c>)
    3e8c:	6813      	ldr	r3, [r2, #0]
    3e8e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3e92:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3e96:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3e98:	d00c      	beq.n	3eb4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3e9e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3ea2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3ea6:	f013 0301 	ands.w	r3, r3, #1
    3eaa:	d003      	beq.n	3eb4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3eac:	480a      	ldr	r0, [pc, #40]	; (3ed8 <generic_hfclk_start+0x60>)
    3eae:	f005 ff94 	bl	9dda <set_on_state>
			already_started = true;
    3eb2:	2301      	movs	r3, #1
	__asm__ volatile(
    3eb4:	f381 8811 	msr	BASEPRI, r1
    3eb8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3ebc:	b123      	cbz	r3, 3ec8 <generic_hfclk_start+0x50>
}
    3ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3ec2:	2000      	movs	r0, #0
    3ec4:	f7ff bf8e 	b.w	3de4 <clkstarted_handle.constprop.0>
}
    3ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3ecc:	2001      	movs	r0, #1
    3ece:	f001 bb47 	b.w	5560 <nrfx_clock_start>
    3ed2:	bf00      	nop
    3ed4:	20000f44 	.word	0x20000f44
    3ed8:	20000f34 	.word	0x20000f34

00003edc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3edc:	4b09      	ldr	r3, [pc, #36]	; (3f04 <generic_hfclk_stop+0x28>)
    3ede:	f3bf 8f5b 	dmb	ish
    3ee2:	e853 2f00 	ldrex	r2, [r3]
    3ee6:	f022 0102 	bic.w	r1, r2, #2
    3eea:	e843 1000 	strex	r0, r1, [r3]
    3eee:	2800      	cmp	r0, #0
    3ef0:	d1f7      	bne.n	3ee2 <generic_hfclk_stop+0x6>
    3ef2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3ef6:	07d3      	lsls	r3, r2, #31
    3ef8:	d402      	bmi.n	3f00 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3efa:	2001      	movs	r0, #1
    3efc:	f001 bb84 	b.w	5608 <nrfx_clock_stop>
}
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop
    3f04:	20000f44 	.word	0x20000f44

00003f08 <api_blocking_start>:
{
    3f08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f0a:	2200      	movs	r2, #0
    3f0c:	2301      	movs	r3, #1
    3f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3f12:	ab04      	add	r3, sp, #16
    3f14:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f18:	4a09      	ldr	r2, [pc, #36]	; (3f40 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f1a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f1e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3f20:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f24:	f005 ff7e 	bl	9e24 <api_start>
	if (err < 0) {
    3f28:	2800      	cmp	r0, #0
    3f2a:	db05      	blt.n	3f38 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3f30:	2300      	movs	r3, #0
    3f32:	4668      	mov	r0, sp
    3f34:	f004 fb16 	bl	8564 <z_impl_k_sem_take>
}
    3f38:	b007      	add	sp, #28
    3f3a:	f85d fb04 	ldr.w	pc, [sp], #4
    3f3e:	bf00      	nop
    3f40:	00009e1f 	.word	0x00009e1f

00003f44 <z_nrf_clock_control_lf_on>:
{
    3f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3f48:	4949      	ldr	r1, [pc, #292]	; (4070 <z_nrf_clock_control_lf_on+0x12c>)
    3f4a:	f3bf 8f5b 	dmb	ish
    3f4e:	4605      	mov	r5, r0
    3f50:	2201      	movs	r2, #1
    3f52:	e851 3f00 	ldrex	r3, [r1]
    3f56:	e841 2000 	strex	r0, r2, [r1]
    3f5a:	2800      	cmp	r0, #0
    3f5c:	d1f9      	bne.n	3f52 <z_nrf_clock_control_lf_on+0xe>
    3f5e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3f62:	b9a3      	cbnz	r3, 3f8e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3f64:	4943      	ldr	r1, [pc, #268]	; (4074 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    3f66:	4844      	ldr	r0, [pc, #272]	; (4078 <z_nrf_clock_control_lf_on+0x134>)
    3f68:	604b      	str	r3, [r1, #4]
    3f6a:	60cb      	str	r3, [r1, #12]
    3f6c:	608a      	str	r2, [r1, #8]
    3f6e:	f7fe fd4d 	bl	2a0c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3f72:	2800      	cmp	r0, #0
    3f74:	da0b      	bge.n	3f8e <z_nrf_clock_control_lf_on+0x4a>
    3f76:	4941      	ldr	r1, [pc, #260]	; (407c <z_nrf_clock_control_lf_on+0x138>)
    3f78:	4841      	ldr	r0, [pc, #260]	; (4080 <z_nrf_clock_control_lf_on+0x13c>)
    3f7a:	4a42      	ldr	r2, [pc, #264]	; (4084 <z_nrf_clock_control_lf_on+0x140>)
    3f7c:	f44f 7308 	mov.w	r3, #544	; 0x220
    3f80:	f005 fe69 	bl	9c56 <printk>
    3f84:	483f      	ldr	r0, [pc, #252]	; (4084 <z_nrf_clock_control_lf_on+0x140>)
    3f86:	f44f 7108 	mov.w	r1, #544	; 0x220
    3f8a:	f005 fd8d 	bl	9aa8 <assert_post_action>
	switch (start_mode) {
    3f8e:	b3ad      	cbz	r5, 3ffc <z_nrf_clock_control_lf_on+0xb8>
    3f90:	1e6b      	subs	r3, r5, #1
    3f92:	2b01      	cmp	r3, #1
    3f94:	d856      	bhi.n	4044 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3f96:	2d01      	cmp	r5, #1
    3f98:	d107      	bne.n	3faa <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f9e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3fa2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3fa6:	2b01      	cmp	r3, #1
    3fa8:	d028      	beq.n	3ffc <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3faa:	f006 fb63 	bl	a674 <k_is_in_isr>
    3fae:	4604      	mov	r4, r0
    3fb0:	b918      	cbnz	r0, 3fba <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    3fb2:	4b35      	ldr	r3, [pc, #212]	; (4088 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    3fb4:	781b      	ldrb	r3, [r3, #0]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d152      	bne.n	4060 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    3fba:	f04f 0320 	mov.w	r3, #32
    3fbe:	f3ef 8611 	mrs	r6, BASEPRI
    3fc2:	f383 8812 	msr	BASEPRI_MAX, r3
    3fc6:	f3bf 8f6f 	isb	sy
    3fca:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3fcc:	4f2f      	ldr	r7, [pc, #188]	; (408c <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fce:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 4094 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fd2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4098 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3fda:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3fde:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3fe2:	03d2      	lsls	r2, r2, #15
    3fe4:	d50c      	bpl.n	4000 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3fe6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3fea:	2b01      	cmp	r3, #1
    3fec:	d001      	beq.n	3ff2 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3fee:	2d01      	cmp	r5, #1
    3ff0:	d106      	bne.n	4000 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    3ff2:	b30c      	cbz	r4, 4038 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    3ff4:	f386 8811 	msr	BASEPRI, r6
    3ff8:	f3bf 8f6f 	isb	sy
}
    3ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4000:	b1ac      	cbz	r4, 402e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4002:	4630      	mov	r0, r6
    4004:	f7fe ff24 	bl	2e50 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    400c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4010:	2b00      	cmp	r3, #0
    4012:	d1e0      	bne.n	3fd6 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4014:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4016:	2900      	cmp	r1, #0
    4018:	d0dd      	beq.n	3fd6 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    401a:	603b      	str	r3, [r7, #0]
    401c:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    401e:	2301      	movs	r3, #1
    4020:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    4024:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4028:	f8c9 3000 	str.w	r3, [r9]
}
    402c:	e7d3      	b.n	3fd6 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    402e:	2100      	movs	r1, #0
    4030:	2021      	movs	r0, #33	; 0x21
    4032:	f004 f8e7 	bl	8204 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4036:	e7e7      	b.n	4008 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    4038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    403c:	2202      	movs	r2, #2
    403e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4042:	e7db      	b.n	3ffc <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    4044:	4912      	ldr	r1, [pc, #72]	; (4090 <z_nrf_clock_control_lf_on+0x14c>)
    4046:	480e      	ldr	r0, [pc, #56]	; (4080 <z_nrf_clock_control_lf_on+0x13c>)
    4048:	4a0e      	ldr	r2, [pc, #56]	; (4084 <z_nrf_clock_control_lf_on+0x140>)
    404a:	f240 2332 	movw	r3, #562	; 0x232
    404e:	f005 fe02 	bl	9c56 <printk>
}
    4052:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    4056:	480b      	ldr	r0, [pc, #44]	; (4084 <z_nrf_clock_control_lf_on+0x140>)
    4058:	f240 2132 	movw	r1, #562	; 0x232
    405c:	f005 bd24 	b.w	9aa8 <assert_post_action>
    p_reg->INTENCLR = mask;
    4060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4064:	2202      	movs	r2, #2
    4066:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    406a:	4606      	mov	r6, r0
}
    406c:	e7ae      	b.n	3fcc <z_nrf_clock_control_lf_on+0x88>
    406e:	bf00      	nop
    4070:	20000f48 	.word	0x20000f48
    4074:	20000edc 	.word	0x20000edc
    4078:	20000f0c 	.word	0x20000f0c
    407c:	0000b7d0 	.word	0x0000b7d0
    4080:	0000ac83 	.word	0x0000ac83
    4084:	0000b76f 	.word	0x0000b76f
    4088:	200010dd 	.word	0x200010dd
    408c:	40000104 	.word	0x40000104
    4090:	0000ac81 	.word	0x0000ac81
    4094:	e000e100 	.word	0xe000e100
    4098:	40000008 	.word	0x40000008

0000409c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    409c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    409e:	4b08      	ldr	r3, [pc, #32]	; (40c0 <uart_console_init+0x24>)
    40a0:	4808      	ldr	r0, [pc, #32]	; (40c4 <uart_console_init+0x28>)
    40a2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    40a4:	f006 fa74 	bl	a590 <z_device_ready>
    40a8:	b138      	cbz	r0, 40ba <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    40aa:	4807      	ldr	r0, [pc, #28]	; (40c8 <uart_console_init+0x2c>)
    40ac:	f7ff fb4e 	bl	374c <__stdout_hook_install>
	__printk_hook_install(console_out);
    40b0:	4805      	ldr	r0, [pc, #20]	; (40c8 <uart_console_init+0x2c>)
    40b2:	f7fe fe91 	bl	2dd8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    40b6:	2000      	movs	r0, #0
}
    40b8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    40ba:	f06f 0012 	mvn.w	r0, #18
    40be:	e7fb      	b.n	40b8 <uart_console_init+0x1c>
    40c0:	20000f4c 	.word	0x20000f4c
    40c4:	0000a7dc 	.word	0x0000a7dc
    40c8:	000040cd 	.word	0x000040cd

000040cc <console_out>:
	if ('\n' == c) {
    40cc:	280a      	cmp	r0, #10
{
    40ce:	b538      	push	{r3, r4, r5, lr}
    40d0:	4d07      	ldr	r5, [pc, #28]	; (40f0 <console_out+0x24>)
    40d2:	4604      	mov	r4, r0
	if ('\n' == c) {
    40d4:	d104      	bne.n	40e0 <console_out+0x14>
    40d6:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    40d8:	6883      	ldr	r3, [r0, #8]
    40da:	210d      	movs	r1, #13
    40dc:	69db      	ldr	r3, [r3, #28]
    40de:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    40e0:	6828      	ldr	r0, [r5, #0]
    40e2:	6883      	ldr	r3, [r0, #8]
    40e4:	b2e1      	uxtb	r1, r4
    40e6:	69db      	ldr	r3, [r3, #28]
    40e8:	4798      	blx	r3
}
    40ea:	4620      	mov	r0, r4
    40ec:	bd38      	pop	{r3, r4, r5, pc}
    40ee:	bf00      	nop
    40f0:	20000f4c 	.word	0x20000f4c

000040f4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    40f4:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    40f6:	6905      	ldr	r5, [r0, #16]
{
    40f8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    40fa:	460c      	mov	r4, r1
    40fc:	b961      	cbnz	r1, 4118 <gpio_nrfx_manage_callback+0x24>
    40fe:	4922      	ldr	r1, [pc, #136]	; (4188 <gpio_nrfx_manage_callback+0x94>)
    4100:	4a22      	ldr	r2, [pc, #136]	; (418c <gpio_nrfx_manage_callback+0x98>)
    4102:	4823      	ldr	r0, [pc, #140]	; (4190 <gpio_nrfx_manage_callback+0x9c>)
    4104:	2324      	movs	r3, #36	; 0x24
    4106:	f005 fda6 	bl	9c56 <printk>
    410a:	4822      	ldr	r0, [pc, #136]	; (4194 <gpio_nrfx_manage_callback+0xa0>)
    410c:	f005 fda3 	bl	9c56 <printk>
    4110:	481e      	ldr	r0, [pc, #120]	; (418c <gpio_nrfx_manage_callback+0x98>)
    4112:	2124      	movs	r1, #36	; 0x24
    4114:	f005 fcc8 	bl	9aa8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    4118:	6863      	ldr	r3, [r4, #4]
    411a:	b963      	cbnz	r3, 4136 <gpio_nrfx_manage_callback+0x42>
    411c:	491e      	ldr	r1, [pc, #120]	; (4198 <gpio_nrfx_manage_callback+0xa4>)
    411e:	4a1b      	ldr	r2, [pc, #108]	; (418c <gpio_nrfx_manage_callback+0x98>)
    4120:	481b      	ldr	r0, [pc, #108]	; (4190 <gpio_nrfx_manage_callback+0x9c>)
    4122:	2325      	movs	r3, #37	; 0x25
    4124:	f005 fd97 	bl	9c56 <printk>
    4128:	481c      	ldr	r0, [pc, #112]	; (419c <gpio_nrfx_manage_callback+0xa8>)
    412a:	f005 fd94 	bl	9c56 <printk>
    412e:	4817      	ldr	r0, [pc, #92]	; (418c <gpio_nrfx_manage_callback+0x98>)
    4130:	2125      	movs	r1, #37	; 0x25
    4132:	f005 fcb9 	bl	9aa8 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    4136:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4138:	b15b      	cbz	r3, 4152 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    413a:	2200      	movs	r2, #0
    413c:	429c      	cmp	r4, r3
    413e:	d113      	bne.n	4168 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    4140:	6823      	ldr	r3, [r4, #0]
    4142:	b95a      	cbnz	r2, 415c <gpio_nrfx_manage_callback+0x68>
    4144:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    4146:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    4148:	4294      	cmp	r4, r2
    414a:	d100      	bne.n	414e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    414c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    414e:	2300      	movs	r3, #0
    4150:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4152:	b976      	cbnz	r6, 4172 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4154:	2000      	movs	r0, #0
				     callback, set);
}
    4156:	bd70      	pop	{r4, r5, r6, pc}
    4158:	460b      	mov	r3, r1
    415a:	e7ef      	b.n	413c <gpio_nrfx_manage_callback+0x48>
    415c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    415e:	68ab      	ldr	r3, [r5, #8]
    4160:	429c      	cmp	r4, r3
	list->tail = node;
    4162:	bf08      	it	eq
    4164:	60aa      	streq	r2, [r5, #8]
}
    4166:	e7f2      	b.n	414e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4168:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    416a:	461a      	mov	r2, r3
    416c:	2900      	cmp	r1, #0
    416e:	d1f3      	bne.n	4158 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    4170:	b13e      	cbz	r6, 4182 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    4172:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    4174:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    4176:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    4178:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    417a:	2800      	cmp	r0, #0
    417c:	d1ea      	bne.n	4154 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    417e:	60ac      	str	r4, [r5, #8]
}
    4180:	e7e9      	b.n	4156 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    4182:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4186:	e7e6      	b.n	4156 <gpio_nrfx_manage_callback+0x62>
    4188:	0000b80c 	.word	0x0000b80c
    418c:	0000b7df 	.word	0x0000b7df
    4190:	0000ac83 	.word	0x0000ac83
    4194:	0000b815 	.word	0x0000b815
    4198:	0000b824 	.word	0x0000b824
    419c:	0000b836 	.word	0x0000b836

000041a0 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41a0:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    41a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41a6:	d003      	beq.n	41b0 <nrfx_gpio_handler+0x10>
    41a8:	2b01      	cmp	r3, #1
    41aa:	d036      	beq.n	421a <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    41ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41b0:	4f1b      	ldr	r7, [pc, #108]	; (4220 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    41b2:	693b      	ldr	r3, [r7, #16]
    41b4:	685c      	ldr	r4, [r3, #4]
    41b6:	2c00      	cmp	r4, #0
    41b8:	d0f8      	beq.n	41ac <nrfx_gpio_handler+0xc>
    41ba:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    41bc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 422c <nrfx_gpio_handler+0x8c>
    41c0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4230 <nrfx_gpio_handler+0x90>
    41c4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 4234 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    41c8:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    41cc:	2601      	movs	r6, #1
    41ce:	2d00      	cmp	r5, #0
    41d0:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    41d4:	bf38      	it	cc
    41d6:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    41d8:	68a3      	ldr	r3, [r4, #8]
    41da:	421e      	tst	r6, r3
    41dc:	d014      	beq.n	4208 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    41de:	6863      	ldr	r3, [r4, #4]
    41e0:	b963      	cbnz	r3, 41fc <nrfx_gpio_handler+0x5c>
    41e2:	4649      	mov	r1, r9
    41e4:	2345      	movs	r3, #69	; 0x45
    41e6:	4642      	mov	r2, r8
    41e8:	4650      	mov	r0, sl
    41ea:	f005 fd34 	bl	9c56 <printk>
    41ee:	480d      	ldr	r0, [pc, #52]	; (4224 <nrfx_gpio_handler+0x84>)
    41f0:	f005 fd31 	bl	9c56 <printk>
    41f4:	2145      	movs	r1, #69	; 0x45
    41f6:	4640      	mov	r0, r8
    41f8:	f005 fc56 	bl	9aa8 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    41fc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4200:	4621      	mov	r1, r4
    4202:	4032      	ands	r2, r6
    4204:	4638      	mov	r0, r7
    4206:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4208:	2d00      	cmp	r5, #0
    420a:	d0cf      	beq.n	41ac <nrfx_gpio_handler+0xc>
    420c:	682b      	ldr	r3, [r5, #0]
    420e:	2b00      	cmp	r3, #0
    4210:	bf38      	it	cc
    4212:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4214:	462c      	mov	r4, r5
    4216:	461d      	mov	r5, r3
    4218:	e7de      	b.n	41d8 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    421a:	4f03      	ldr	r7, [pc, #12]	; (4228 <nrfx_gpio_handler+0x88>)
    421c:	e7c9      	b.n	41b2 <nrfx_gpio_handler+0x12>
    421e:	bf00      	nop
    4220:	0000a794 	.word	0x0000a794
    4224:	0000b836 	.word	0x0000b836
    4228:	0000a7ac 	.word	0x0000a7ac
    422c:	0000b7df 	.word	0x0000b7df
    4230:	0000b84d 	.word	0x0000b84d
    4234:	0000ac83 	.word	0x0000ac83

00004238 <gpio_nrfx_pin_interrupt_configure>:
{
    4238:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    423a:	6840      	ldr	r0, [r0, #4]
    423c:	7b05      	ldrb	r5, [r0, #12]
    423e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4242:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4246:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    424a:	f04f 0500 	mov.w	r5, #0
    424e:	d104      	bne.n	425a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    4250:	4620      	mov	r0, r4
    4252:	f001 fd71 	bl	5d38 <nrfx_gpiote_trigger_disable>
	return 0;
    4256:	2000      	movs	r0, #0
    4258:	e054      	b.n	4304 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    425a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    425e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4262:	d151      	bne.n	4308 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    4268:	bf0c      	ite	eq
    426a:	2304      	moveq	r3, #4
    426c:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    426e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4272:	6883      	ldr	r3, [r0, #8]
    4274:	fa23 f101 	lsr.w	r1, r3, r1
    4278:	f011 0101 	ands.w	r1, r1, #1
    427c:	d155      	bne.n	432a <gpio_nrfx_pin_interrupt_configure+0xf2>
    427e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4282:	d152      	bne.n	432a <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    4284:	0966      	lsrs	r6, r4, #5
    4286:	d04a      	beq.n	431e <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    4288:	f64f 73ff 	movw	r3, #65535	; 0xffff
    428c:	2e01      	cmp	r6, #1
    428e:	bf08      	it	eq
    4290:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    4292:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4296:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4298:	07ca      	lsls	r2, r1, #31
    429a:	d40b      	bmi.n	42b4 <gpio_nrfx_pin_interrupt_configure+0x7c>
    429c:	492b      	ldr	r1, [pc, #172]	; (434c <gpio_nrfx_pin_interrupt_configure+0x114>)
    429e:	482c      	ldr	r0, [pc, #176]	; (4350 <gpio_nrfx_pin_interrupt_configure+0x118>)
    42a0:	4a2c      	ldr	r2, [pc, #176]	; (4354 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    42a2:	f240 2329 	movw	r3, #553	; 0x229
    42a6:	f005 fcd6 	bl	9c56 <printk>
    42aa:	482a      	ldr	r0, [pc, #168]	; (4354 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    42ac:	f240 2129 	movw	r1, #553	; 0x229
    42b0:	f005 fbfa 	bl	9aa8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    42b4:	b16e      	cbz	r6, 42d2 <gpio_nrfx_pin_interrupt_configure+0x9a>
    42b6:	2e01      	cmp	r6, #1
    42b8:	d034      	beq.n	4324 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    42ba:	4927      	ldr	r1, [pc, #156]	; (4358 <gpio_nrfx_pin_interrupt_configure+0x120>)
    42bc:	4824      	ldr	r0, [pc, #144]	; (4350 <gpio_nrfx_pin_interrupt_configure+0x118>)
    42be:	4a25      	ldr	r2, [pc, #148]	; (4354 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    42c0:	f240 232e 	movw	r3, #558	; 0x22e
    42c4:	f005 fcc7 	bl	9c56 <printk>
    42c8:	4822      	ldr	r0, [pc, #136]	; (4354 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    42ca:	f240 212e 	movw	r1, #558	; 0x22e
    42ce:	f005 fbeb 	bl	9aa8 <assert_post_action>
        case 0: return NRF_P0;
    42d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    42d6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    42da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    42de:	07db      	lsls	r3, r3, #31
    42e0:	d423      	bmi.n	432a <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    42e2:	f10d 0507 	add.w	r5, sp, #7
    42e6:	4629      	mov	r1, r5
    42e8:	4620      	mov	r0, r4
    42ea:	f001 fc4f 	bl	5b8c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    42ee:	4b1b      	ldr	r3, [pc, #108]	; (435c <gpio_nrfx_pin_interrupt_configure+0x124>)
    42f0:	4298      	cmp	r0, r3
    42f2:	d119      	bne.n	4328 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    42f4:	4628      	mov	r0, r5
    42f6:	f001 fca9 	bl	5c4c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    42fa:	4b19      	ldr	r3, [pc, #100]	; (4360 <gpio_nrfx_pin_interrupt_configure+0x128>)
    42fc:	4298      	cmp	r0, r3
    42fe:	d013      	beq.n	4328 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    4300:	f06f 000b 	mvn.w	r0, #11
}
    4304:	b004      	add	sp, #16
    4306:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4308:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    430c:	d005      	beq.n	431a <gpio_nrfx_pin_interrupt_configure+0xe2>
    430e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    4312:	bf0c      	ite	eq
    4314:	2302      	moveq	r3, #2
    4316:	2301      	movne	r3, #1
    4318:	e7a9      	b.n	426e <gpio_nrfx_pin_interrupt_configure+0x36>
    431a:	2303      	movs	r3, #3
    431c:	e7a7      	b.n	426e <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    431e:	f04f 31ff 	mov.w	r1, #4294967295
    4322:	e7b6      	b.n	4292 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4324:	4b0f      	ldr	r3, [pc, #60]	; (4364 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    4326:	e7d6      	b.n	42d6 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    4328:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    432a:	2300      	movs	r3, #0
    432c:	4619      	mov	r1, r3
    432e:	aa02      	add	r2, sp, #8
    4330:	4620      	mov	r0, r4
    4332:	f001 fb0d 	bl	5950 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4336:	4b0a      	ldr	r3, [pc, #40]	; (4360 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4338:	4298      	cmp	r0, r3
    433a:	d104      	bne.n	4346 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    433c:	2101      	movs	r1, #1
    433e:	4620      	mov	r0, r4
    4340:	f001 fc8a 	bl	5c58 <nrfx_gpiote_trigger_enable>
    4344:	e787      	b.n	4256 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    4346:	f06f 0004 	mvn.w	r0, #4
    434a:	e7db      	b.n	4304 <gpio_nrfx_pin_interrupt_configure+0xcc>
    434c:	0000b88c 	.word	0x0000b88c
    4350:	0000ac83 	.word	0x0000ac83
    4354:	0000b859 	.word	0x0000b859
    4358:	0000ac81 	.word	0x0000ac81
    435c:	0bad0004 	.word	0x0bad0004
    4360:	0bad0000 	.word	0x0bad0000
    4364:	50000300 	.word	0x50000300

00004368 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4368:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    436a:	f001 fc5f 	bl	5c2c <nrfx_gpiote_is_init>
    436e:	4604      	mov	r4, r0
    4370:	b968      	cbnz	r0, 438e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4372:	f001 fc33 	bl	5bdc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4376:	4b08      	ldr	r3, [pc, #32]	; (4398 <gpio_nrfx_init+0x30>)
    4378:	4298      	cmp	r0, r3
    437a:	d10a      	bne.n	4392 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    437c:	4807      	ldr	r0, [pc, #28]	; (439c <gpio_nrfx_init+0x34>)
    437e:	4621      	mov	r1, r4
    4380:	f001 fbfe 	bl	5b80 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4384:	4622      	mov	r2, r4
    4386:	2105      	movs	r1, #5
    4388:	2006      	movs	r0, #6
    438a:	f7fe fde7 	bl	2f5c <z_arm_irq_priority_set>
		return 0;
    438e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4390:	bd10      	pop	{r4, pc}
		return -EIO;
    4392:	f06f 0004 	mvn.w	r0, #4
    4396:	e7fb      	b.n	4390 <gpio_nrfx_init+0x28>
    4398:	0bad0000 	.word	0x0bad0000
    439c:	000041a1 	.word	0x000041a1

000043a0 <gpio_nrfx_pin_configure>:
{
    43a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    43a4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    43a6:	7b3b      	ldrb	r3, [r7, #12]
    43a8:	f001 051f 	and.w	r5, r1, #31
{
    43ac:	b085      	sub	sp, #20
    43ae:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    43b0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    43b4:	4614      	mov	r4, r2
    43b6:	b9ca      	cbnz	r2, 43ec <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    43b8:	a902      	add	r1, sp, #8
    43ba:	4628      	mov	r0, r5
    43bc:	f001 fbe6 	bl	5b8c <nrfx_gpiote_channel_get>
    43c0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    43c2:	4628      	mov	r0, r5
    43c4:	f001 fcda 	bl	5d7c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    43c8:	4b48      	ldr	r3, [pc, #288]	; (44ec <gpio_nrfx_pin_configure+0x14c>)
    43ca:	4298      	cmp	r0, r3
    43cc:	d004      	beq.n	43d8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    43ce:	f06f 0004 	mvn.w	r0, #4
}
    43d2:	b005      	add	sp, #20
    43d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    43d8:	4284      	cmp	r4, r0
    43da:	d105      	bne.n	43e8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    43dc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    43e0:	f001 fc2e 	bl	5c40 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    43e4:	42a0      	cmp	r0, r4
    43e6:	d1f2      	bne.n	43ce <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    43e8:	2000      	movs	r0, #0
    43ea:	e7f2      	b.n	43d2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    43ec:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    43f0:	f10d 0103 	add.w	r1, sp, #3
    43f4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    43f6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    43fa:	f001 fbc7 	bl	5b8c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    43fe:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4400:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4402:	aa02      	add	r2, sp, #8
    4404:	4649      	mov	r1, r9
    4406:	4628      	mov	r0, r5
    4408:	f001 faa2 	bl	5950 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    440c:	4b37      	ldr	r3, [pc, #220]	; (44ec <gpio_nrfx_pin_configure+0x14c>)
    440e:	4298      	cmp	r0, r3
    4410:	d002      	beq.n	4418 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4412:	f06f 0015 	mvn.w	r0, #21
    4416:	e7dc      	b.n	43d2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    4418:	4580      	cmp	r8, r0
    441a:	d103      	bne.n	4424 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    441c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4420:	f001 fc0e 	bl	5c40 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4424:	05a3      	lsls	r3, r4, #22
    4426:	d54e      	bpl.n	44c6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4428:	4b31      	ldr	r3, [pc, #196]	; (44f0 <gpio_nrfx_pin_configure+0x150>)
    442a:	4a32      	ldr	r2, [pc, #200]	; (44f4 <gpio_nrfx_pin_configure+0x154>)
    442c:	4023      	ands	r3, r4
    442e:	4293      	cmp	r3, r2
    4430:	d03a      	beq.n	44a8 <gpio_nrfx_pin_configure+0x108>
    4432:	d80c      	bhi.n	444e <gpio_nrfx_pin_configure+0xae>
    4434:	2b06      	cmp	r3, #6
    4436:	d014      	beq.n	4462 <gpio_nrfx_pin_configure+0xc2>
    4438:	d804      	bhi.n	4444 <gpio_nrfx_pin_configure+0xa4>
    443a:	b193      	cbz	r3, 4462 <gpio_nrfx_pin_configure+0xc2>
    443c:	2b02      	cmp	r3, #2
    443e:	d1e8      	bne.n	4412 <gpio_nrfx_pin_configure+0x72>
    4440:	2304      	movs	r3, #4
    4442:	e00e      	b.n	4462 <gpio_nrfx_pin_configure+0xc2>
    4444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4448:	d1e3      	bne.n	4412 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    444a:	2301      	movs	r3, #1
    444c:	e009      	b.n	4462 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    444e:	4a2a      	ldr	r2, [pc, #168]	; (44f8 <gpio_nrfx_pin_configure+0x158>)
    4450:	4293      	cmp	r3, r2
    4452:	d02b      	beq.n	44ac <gpio_nrfx_pin_configure+0x10c>
    4454:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4458:	d02a      	beq.n	44b0 <gpio_nrfx_pin_configure+0x110>
    445a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    445e:	d1d8      	bne.n	4412 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4460:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4462:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4466:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    446a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    446e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4470:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    4474:	bf54      	ite	pl
    4476:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    447a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    447c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    447e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4482:	d517      	bpl.n	44b4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	2101      	movs	r1, #1
    4488:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    448c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4490:	2200      	movs	r2, #0
    4492:	a901      	add	r1, sp, #4
    4494:	4628      	mov	r0, r5
    4496:	f001 fb03 	bl	5aa0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    449a:	4b14      	ldr	r3, [pc, #80]	; (44ec <gpio_nrfx_pin_configure+0x14c>)
    449c:	4298      	cmp	r0, r3
    449e:	bf14      	ite	ne
    44a0:	f06f 0015 	mvnne.w	r0, #21
    44a4:	2000      	moveq	r0, #0
    44a6:	e794      	b.n	43d2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    44a8:	2307      	movs	r3, #7
    44aa:	e7da      	b.n	4462 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    44ac:	2305      	movs	r3, #5
    44ae:	e7d8      	b.n	4462 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    44b0:	2303      	movs	r3, #3
    44b2:	e7d6      	b.n	4462 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    44b4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    44b6:	bf41      	itttt	mi
    44b8:	687b      	ldrmi	r3, [r7, #4]
    44ba:	2101      	movmi	r1, #1
    44bc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    44c0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    44c4:	e7e4      	b.n	4490 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    44c6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    44c8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    44cc:	bf54      	ite	pl
    44ce:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    44d2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    44d4:	461a      	mov	r2, r3
    44d6:	a901      	add	r1, sp, #4
    44d8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    44da:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    44de:	f001 fa37 	bl	5950 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    44e2:	4b02      	ldr	r3, [pc, #8]	; (44ec <gpio_nrfx_pin_configure+0x14c>)
    44e4:	4298      	cmp	r0, r3
    44e6:	f43f af7f 	beq.w	43e8 <gpio_nrfx_pin_configure+0x48>
    44ea:	e792      	b.n	4412 <gpio_nrfx_pin_configure+0x72>
    44ec:	0bad0000 	.word	0x0bad0000
    44f0:	00f00006 	.word	0x00f00006
    44f4:	00100006 	.word	0x00100006
    44f8:	00400002 	.word	0x00400002

000044fc <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    44fc:	4802      	ldr	r0, [pc, #8]	; (4508 <pwm_nrfx_get_cycles_per_sec+0xc>)
    44fe:	2100      	movs	r1, #0
    4500:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    4504:	2000      	movs	r0, #0
    4506:	4770      	bx	lr
    4508:	00f42400 	.word	0x00f42400

0000450c <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    450c:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    450e:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    4510:	6912      	ldr	r2, [r2, #16]
{
    4512:	b538      	push	{r3, r4, r5, lr}
    4514:	f100 0308 	add.w	r3, r0, #8
    4518:	3204      	adds	r2, #4
    451a:	f100 040c 	add.w	r4, r0, #12
    451e:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    4520:	f913 5b01 	ldrsb.w	r5, [r3], #1
    4524:	2d00      	cmp	r5, #0
    4526:	bfb4      	ite	lt
    4528:	2500      	movlt	r5, #0
    452a:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    452e:	42a3      	cmp	r3, r4

		data->current[i] = value;
    4530:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    4534:	d1f4      	bne.n	4520 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    4536:	2300      	movs	r3, #0
    4538:	461a      	mov	r2, r3
    453a:	f001 fde1 	bl	6100 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    453e:	4b03      	ldr	r3, [pc, #12]	; (454c <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    4540:	4298      	cmp	r0, r3
	}

	return 0;
}
    4542:	bf14      	ite	ne
    4544:	f06f 000f 	mvnne.w	r0, #15
    4548:	2000      	moveq	r0, #0
    454a:	bd38      	pop	{r3, r4, r5, pc}
    454c:	0bad0000 	.word	0x0bad0000

00004550 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4550:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4552:	0953      	lsrs	r3, r2, #5
{
    4554:	b510      	push	{r4, lr}
    4556:	4604      	mov	r4, r0
    switch (port)
    4558:	d02c      	beq.n	45b4 <nrf_gpio_pin_port_decode+0x64>
    455a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    455c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4560:	bf18      	it	ne
    4562:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4564:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4568:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    456a:	07db      	lsls	r3, r3, #31
    456c:	d40b      	bmi.n	4586 <nrf_gpio_pin_port_decode+0x36>
    456e:	4914      	ldr	r1, [pc, #80]	; (45c0 <nrf_gpio_pin_port_decode+0x70>)
    4570:	4814      	ldr	r0, [pc, #80]	; (45c4 <nrf_gpio_pin_port_decode+0x74>)
    4572:	4a15      	ldr	r2, [pc, #84]	; (45c8 <nrf_gpio_pin_port_decode+0x78>)
    4574:	f240 2329 	movw	r3, #553	; 0x229
    4578:	f005 fb6d 	bl	9c56 <printk>
    457c:	4812      	ldr	r0, [pc, #72]	; (45c8 <nrf_gpio_pin_port_decode+0x78>)
    457e:	f240 2129 	movw	r1, #553	; 0x229
    4582:	f005 fa91 	bl	9aa8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4586:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4588:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    458c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    458e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4590:	d00d      	beq.n	45ae <nrf_gpio_pin_port_decode+0x5e>
    4592:	2b01      	cmp	r3, #1
    4594:	d011      	beq.n	45ba <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    4596:	490d      	ldr	r1, [pc, #52]	; (45cc <nrf_gpio_pin_port_decode+0x7c>)
    4598:	480a      	ldr	r0, [pc, #40]	; (45c4 <nrf_gpio_pin_port_decode+0x74>)
    459a:	4a0b      	ldr	r2, [pc, #44]	; (45c8 <nrf_gpio_pin_port_decode+0x78>)
    459c:	f240 232e 	movw	r3, #558	; 0x22e
    45a0:	f005 fb59 	bl	9c56 <printk>
    45a4:	4808      	ldr	r0, [pc, #32]	; (45c8 <nrf_gpio_pin_port_decode+0x78>)
    45a6:	f240 212e 	movw	r1, #558	; 0x22e
    45aa:	f005 fa7d 	bl	9aa8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    45ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    45b2:	bd10      	pop	{r4, pc}
    switch (port)
    45b4:	f04f 33ff 	mov.w	r3, #4294967295
    45b8:	e7d4      	b.n	4564 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    45ba:	4805      	ldr	r0, [pc, #20]	; (45d0 <nrf_gpio_pin_port_decode+0x80>)
    45bc:	e7f9      	b.n	45b2 <nrf_gpio_pin_port_decode+0x62>
    45be:	bf00      	nop
    45c0:	0000b88c 	.word	0x0000b88c
    45c4:	0000ac83 	.word	0x0000ac83
    45c8:	0000b859 	.word	0x0000b859
    45cc:	0000ac81 	.word	0x0000ac81
    45d0:	50000300 	.word	0x50000300

000045d4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    45d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    45d6:	794b      	ldrb	r3, [r1, #5]
    45d8:	2b01      	cmp	r3, #1
    45da:	d026      	beq.n	462a <uarte_nrfx_configure+0x56>
    45dc:	2b03      	cmp	r3, #3
    45de:	d121      	bne.n	4624 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    45e0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    45e2:	798b      	ldrb	r3, [r1, #6]
    45e4:	2b03      	cmp	r3, #3
    45e6:	d11d      	bne.n	4624 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    45e8:	79cc      	ldrb	r4, [r1, #7]
    45ea:	b10c      	cbz	r4, 45f0 <uarte_nrfx_configure+0x1c>
    45ec:	2c01      	cmp	r4, #1
    45ee:	d119      	bne.n	4624 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    45f0:	790a      	ldrb	r2, [r1, #4]
    45f2:	b112      	cbz	r2, 45fa <uarte_nrfx_configure+0x26>
    45f4:	2a02      	cmp	r2, #2
    45f6:	d115      	bne.n	4624 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    45f8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    45fa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    45fc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    45fe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4602:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4604:	d065      	beq.n	46d2 <uarte_nrfx_configure+0xfe>
    4606:	d82d      	bhi.n	4664 <uarte_nrfx_configure+0x90>
    4608:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    460c:	d064      	beq.n	46d8 <uarte_nrfx_configure+0x104>
    460e:	d816      	bhi.n	463e <uarte_nrfx_configure+0x6a>
    4610:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4614:	d062      	beq.n	46dc <uarte_nrfx_configure+0x108>
    4616:	d80a      	bhi.n	462e <uarte_nrfx_configure+0x5a>
    4618:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    461c:	d061      	beq.n	46e2 <uarte_nrfx_configure+0x10e>
    461e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4622:	d061      	beq.n	46e8 <uarte_nrfx_configure+0x114>
    4624:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4628:	e052      	b.n	46d0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    462a:	2600      	movs	r6, #0
    462c:	e7d9      	b.n	45e2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    462e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4632:	d05c      	beq.n	46ee <uarte_nrfx_configure+0x11a>
    4634:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4638:	d1f4      	bne.n	4624 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    463a:	4b37      	ldr	r3, [pc, #220]	; (4718 <uarte_nrfx_configure+0x144>)
    463c:	e03c      	b.n	46b8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    463e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4642:	d057      	beq.n	46f4 <uarte_nrfx_configure+0x120>
    4644:	d807      	bhi.n	4656 <uarte_nrfx_configure+0x82>
    4646:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    464a:	d055      	beq.n	46f8 <uarte_nrfx_configure+0x124>
    464c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4650:	d1e8      	bne.n	4624 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4652:	4b32      	ldr	r3, [pc, #200]	; (471c <uarte_nrfx_configure+0x148>)
    4654:	e030      	b.n	46b8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4656:	f647 2712 	movw	r7, #31250	; 0x7a12
    465a:	42bb      	cmp	r3, r7
    465c:	d1e2      	bne.n	4624 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    465e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4662:	e029      	b.n	46b8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4664:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4668:	d048      	beq.n	46fc <uarte_nrfx_configure+0x128>
    466a:	d813      	bhi.n	4694 <uarte_nrfx_configure+0xc0>
    466c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4670:	d047      	beq.n	4702 <uarte_nrfx_configure+0x12e>
    4672:	d809      	bhi.n	4688 <uarte_nrfx_configure+0xb4>
    4674:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    4678:	42bb      	cmp	r3, r7
    467a:	d044      	beq.n	4706 <uarte_nrfx_configure+0x132>
    467c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4680:	d1d0      	bne.n	4624 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4682:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4686:	e017      	b.n	46b8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4688:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    468c:	d1ca      	bne.n	4624 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    468e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4692:	e011      	b.n	46b8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4694:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4698:	d038      	beq.n	470c <uarte_nrfx_configure+0x138>
    469a:	d808      	bhi.n	46ae <uarte_nrfx_configure+0xda>
    469c:	4f20      	ldr	r7, [pc, #128]	; (4720 <uarte_nrfx_configure+0x14c>)
    469e:	42bb      	cmp	r3, r7
    46a0:	d037      	beq.n	4712 <uarte_nrfx_configure+0x13e>
    46a2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    46a6:	d1bd      	bne.n	4624 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    46a8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    46ac:	e004      	b.n	46b8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    46ae:	4f1d      	ldr	r7, [pc, #116]	; (4724 <uarte_nrfx_configure+0x150>)
    46b0:	42bb      	cmp	r3, r7
    46b2:	d1b7      	bne.n	4624 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    46b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    46b8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    46bc:	6903      	ldr	r3, [r0, #16]
    46be:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    46c0:	4334      	orrs	r4, r6
    46c2:	4322      	orrs	r2, r4
    46c4:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    46c6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    46ca:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    46ce:	2000      	movs	r0, #0
}
    46d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    46d2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    46d6:	e7ef      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    46d8:	4b13      	ldr	r3, [pc, #76]	; (4728 <uarte_nrfx_configure+0x154>)
    46da:	e7ed      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    46dc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    46e0:	e7ea      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    46e2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    46e6:	e7e7      	b.n	46b8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    46e8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    46ec:	e7e4      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    46ee:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    46f2:	e7e1      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    46f4:	4b0d      	ldr	r3, [pc, #52]	; (472c <uarte_nrfx_configure+0x158>)
    46f6:	e7df      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    46f8:	4b0d      	ldr	r3, [pc, #52]	; (4730 <uarte_nrfx_configure+0x15c>)
    46fa:	e7dd      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    46fc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4700:	e7da      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4702:	4b0c      	ldr	r3, [pc, #48]	; (4734 <uarte_nrfx_configure+0x160>)
    4704:	e7d8      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4706:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    470a:	e7d5      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    470c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4710:	e7d2      	b.n	46b8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4712:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4716:	e7cf      	b.n	46b8 <uarte_nrfx_configure+0xe4>
    4718:	0013b000 	.word	0x0013b000
    471c:	004ea000 	.word	0x004ea000
    4720:	0003d090 	.word	0x0003d090
    4724:	000f4240 	.word	0x000f4240
    4728:	00275000 	.word	0x00275000
    472c:	0075c000 	.word	0x0075c000
    4730:	003af000 	.word	0x003af000
    4734:	013a9000 	.word	0x013a9000

00004738 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
    4738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    473c:	4614      	mov	r4, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    473e:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4740:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
    4744:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
    4746:	7a12      	ldrb	r2, [r2, #8]
{
    4748:	4605      	mov	r5, r0
    474a:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
    474c:	b192      	cbz	r2, 4774 <uarte_nrfx_rx_enable+0x3c>
		__ASSERT(false, "TX only UARTE instance");
    474e:	4a44      	ldr	r2, [pc, #272]	; (4860 <uarte_nrfx_rx_enable+0x128>)
    4750:	4944      	ldr	r1, [pc, #272]	; (4864 <uarte_nrfx_rx_enable+0x12c>)
    4752:	4845      	ldr	r0, [pc, #276]	; (4868 <uarte_nrfx_rx_enable+0x130>)
    4754:	f240 337f 	movw	r3, #895	; 0x37f
    4758:	f005 fa7d 	bl	9c56 <printk>
    475c:	4843      	ldr	r0, [pc, #268]	; (486c <uarte_nrfx_rx_enable+0x134>)
    475e:	f005 fa7a 	bl	9c56 <printk>
    4762:	483f      	ldr	r0, [pc, #252]	; (4860 <uarte_nrfx_rx_enable+0x128>)
    4764:	f240 317f 	movw	r1, #895	; 0x37f
    4768:	f005 f99e 	bl	9aa8 <assert_post_action>
		return -ENOTSUP;
    476c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
    4770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
    4774:	f8d9 100c 	ldr.w	r1, [r9, #12]
    4778:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    477c:	2a00      	cmp	r2, #0
    477e:	d16b      	bne.n	4858 <uarte_nrfx_rx_enable+0x120>
		MAX(timeout / RX_TIMEOUT_DIV,
    4780:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    4784:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    4786:	bfd2      	itee	le
    4788:	235c      	movle	r3, #92	; 0x5c
    478a:	2205      	movgt	r2, #5
    478c:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    4790:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    4794:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
    4796:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
    479a:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    479e:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    47a0:	6843      	ldr	r3, [r0, #4]
    47a2:	685b      	ldr	r3, [r3, #4]
    47a4:	06da      	lsls	r2, r3, #27
    47a6:	d524      	bpl.n	47f2 <uarte_nrfx_rx_enable+0xba>
		if (data->async->rx_flush_cnt) {
    47a8:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    47ac:	b30e      	cbz	r6, 47f2 <uarte_nrfx_rx_enable+0xba>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    47ae:	42a6      	cmp	r6, r4
    47b0:	bf28      	it	cs
    47b2:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    47b4:	4640      	mov	r0, r8
    47b6:	4632      	mov	r2, r6
    47b8:	31cc      	adds	r1, #204	; 0xcc
    47ba:	f005 faa7 	bl	9d0c <memcpy>
			if (!len) {
    47be:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
    47c0:	44b0      	add	r8, r6
			if (!len) {
    47c2:	d116      	bne.n	47f2 <uarte_nrfx_rx_enable+0xba>
				data->async->rx_flush_cnt -= cpy_len;
    47c4:	f8d9 200c 	ldr.w	r2, [r9, #12]
    47c8:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    47cc:	1b9b      	subs	r3, r3, r6
    47ce:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    47d2:	4631      	mov	r1, r6
    47d4:	4628      	mov	r0, r5
    47d6:	f005 fc5a 	bl	a08e <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
    47da:	f8d9 100c 	ldr.w	r1, [r9, #12]
    47de:	4628      	mov	r0, r5
    47e0:	2201      	movs	r2, #1
    47e2:	3160      	adds	r1, #96	; 0x60
    47e4:	f005 fc6c 	bl	a0c0 <notify_rx_buf_release>
				notify_rx_disable(dev);
    47e8:	4628      	mov	r0, r5
    47ea:	f005 fc83 	bl	a0f4 <notify_rx_disable>
	return 0;
    47ee:	2000      	movs	r0, #0
    47f0:	e7be      	b.n	4770 <uarte_nrfx_rx_enable+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47f2:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    47f4:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    47f8:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    4800:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    4804:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    4808:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
    480c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    4810:	2201      	movs	r2, #1
    4812:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4816:	686b      	ldr	r3, [r5, #4]
    4818:	685b      	ldr	r3, [r3, #4]
    481a:	06db      	lsls	r3, r3, #27
    481c:	d519      	bpl.n	4852 <uarte_nrfx_rx_enable+0x11a>
	__asm__ volatile(
    481e:	f04f 0320 	mov.w	r3, #32
    4822:	f3ef 8111 	mrs	r1, BASEPRI
    4826:	f383 8812 	msr	BASEPRI_MAX, r3
    482a:	f3bf 8f6f 	isb	sy
	if (data->async) {
    482e:	692b      	ldr	r3, [r5, #16]
    4830:	68db      	ldr	r3, [r3, #12]
    4832:	b12b      	cbz	r3, 4840 <uarte_nrfx_rx_enable+0x108>
		data->async->low_power_mask |= mask;
    4834:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    4838:	f042 0202 	orr.w	r2, r2, #2
    483c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    4840:	686b      	ldr	r3, [r5, #4]
    4842:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4844:	2208      	movs	r2, #8
    4846:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    484a:	f381 8811 	msr	BASEPRI, r1
    484e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4852:	2301      	movs	r3, #1
    4854:	603b      	str	r3, [r7, #0]
    4856:	e7ca      	b.n	47ee <uarte_nrfx_rx_enable+0xb6>
		return -EBUSY;
    4858:	f06f 000f 	mvn.w	r0, #15
    485c:	e788      	b.n	4770 <uarte_nrfx_rx_enable+0x38>
    485e:	bf00      	nop
    4860:	0000b8b6 	.word	0x0000b8b6
    4864:	0000ac81 	.word	0x0000ac81
    4868:	0000ac83 	.word	0x0000ac83
    486c:	0000b8ea 	.word	0x0000b8ea

00004870 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4870:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4872:	0953      	lsrs	r3, r2, #5
{
    4874:	b510      	push	{r4, lr}
    4876:	4604      	mov	r4, r0
    switch (port)
    4878:	d02c      	beq.n	48d4 <nrf_gpio_pin_port_decode+0x64>
    487a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    487c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4880:	bf18      	it	ne
    4882:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4884:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4888:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    488a:	07db      	lsls	r3, r3, #31
    488c:	d40b      	bmi.n	48a6 <nrf_gpio_pin_port_decode+0x36>
    488e:	4914      	ldr	r1, [pc, #80]	; (48e0 <nrf_gpio_pin_port_decode+0x70>)
    4890:	4814      	ldr	r0, [pc, #80]	; (48e4 <nrf_gpio_pin_port_decode+0x74>)
    4892:	4a15      	ldr	r2, [pc, #84]	; (48e8 <nrf_gpio_pin_port_decode+0x78>)
    4894:	f240 2329 	movw	r3, #553	; 0x229
    4898:	f005 f9dd 	bl	9c56 <printk>
    489c:	4812      	ldr	r0, [pc, #72]	; (48e8 <nrf_gpio_pin_port_decode+0x78>)
    489e:	f240 2129 	movw	r1, #553	; 0x229
    48a2:	f005 f901 	bl	9aa8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    48a6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    48a8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48ac:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    48ae:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48b0:	d00d      	beq.n	48ce <nrf_gpio_pin_port_decode+0x5e>
    48b2:	2b01      	cmp	r3, #1
    48b4:	d011      	beq.n	48da <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    48b6:	490d      	ldr	r1, [pc, #52]	; (48ec <nrf_gpio_pin_port_decode+0x7c>)
    48b8:	480a      	ldr	r0, [pc, #40]	; (48e4 <nrf_gpio_pin_port_decode+0x74>)
    48ba:	4a0b      	ldr	r2, [pc, #44]	; (48e8 <nrf_gpio_pin_port_decode+0x78>)
    48bc:	f240 232e 	movw	r3, #558	; 0x22e
    48c0:	f005 f9c9 	bl	9c56 <printk>
    48c4:	4808      	ldr	r0, [pc, #32]	; (48e8 <nrf_gpio_pin_port_decode+0x78>)
    48c6:	f240 212e 	movw	r1, #558	; 0x22e
    48ca:	f005 f8ed 	bl	9aa8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    48ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    48d2:	bd10      	pop	{r4, pc}
    switch (port)
    48d4:	f04f 33ff 	mov.w	r3, #4294967295
    48d8:	e7d4      	b.n	4884 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    48da:	4805      	ldr	r0, [pc, #20]	; (48f0 <nrf_gpio_pin_port_decode+0x80>)
    48dc:	e7f9      	b.n	48d2 <nrf_gpio_pin_port_decode+0x62>
    48de:	bf00      	nop
    48e0:	0000b88c 	.word	0x0000b88c
    48e4:	0000ac83 	.word	0x0000ac83
    48e8:	0000b859 	.word	0x0000b859
    48ec:	0000ac81 	.word	0x0000ac81
    48f0:	50000300 	.word	0x50000300

000048f4 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    48f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    48f8:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    48fc:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    48fe:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4902:	2300      	movs	r3, #0
    4904:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    4908:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    490a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    490c:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    490e:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4910:	1c58      	adds	r0, r3, #1
    4912:	d013      	beq.n	493c <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4914:	a801      	add	r0, sp, #4
    4916:	9301      	str	r3, [sp, #4]
    4918:	f7ff ffaa 	bl	4870 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    491c:	9a01      	ldr	r2, [sp, #4]
    491e:	2301      	movs	r3, #1
    4920:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    4922:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    4926:	68eb      	ldr	r3, [r5, #12]
    4928:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    492a:	a801      	add	r0, sp, #4
    492c:	f7ff ffa0 	bl	4870 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4930:	9b01      	ldr	r3, [sp, #4]
    4932:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4936:	2203      	movs	r2, #3
    4938:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    493c:	692b      	ldr	r3, [r5, #16]
    493e:	1c59      	adds	r1, r3, #1
    4940:	d011      	beq.n	4966 <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    4942:	7f2a      	ldrb	r2, [r5, #28]
    4944:	9301      	str	r3, [sp, #4]
    4946:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4948:	a801      	add	r0, sp, #4
    494a:	bf14      	ite	ne
    494c:	f04f 0903 	movne.w	r9, #3
    4950:	f04f 0900 	moveq.w	r9, #0
    4954:	f7ff ff8c 	bl	4870 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4958:	9b01      	ldr	r3, [sp, #4]
    495a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    495e:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4962:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4966:	696b      	ldr	r3, [r5, #20]
    4968:	1c5a      	adds	r2, r3, #1
    496a:	d013      	beq.n	4994 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    496c:	a801      	add	r0, sp, #4
    496e:	9301      	str	r3, [sp, #4]
    4970:	f7ff ff7e 	bl	4870 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4974:	9a01      	ldr	r2, [sp, #4]
    4976:	2301      	movs	r3, #1
    4978:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    497a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    497e:	696b      	ldr	r3, [r5, #20]
    4980:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4982:	a801      	add	r0, sp, #4
    4984:	f7ff ff74 	bl	4870 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4988:	9b01      	ldr	r3, [sp, #4]
    498a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    498e:	2203      	movs	r2, #3
    4990:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4994:	69ab      	ldr	r3, [r5, #24]
    4996:	1c58      	adds	r0, r3, #1
    4998:	d011      	beq.n	49be <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    499a:	7f6a      	ldrb	r2, [r5, #29]
    499c:	9301      	str	r3, [sp, #4]
    499e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49a0:	a801      	add	r0, sp, #4
    49a2:	bf14      	ite	ne
    49a4:	f04f 0903 	movne.w	r9, #3
    49a8:	f04f 0900 	moveq.w	r9, #0
    49ac:	f7ff ff60 	bl	4870 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    49b0:	9b01      	ldr	r3, [sp, #4]
    49b2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    49b6:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    49ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    49be:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    49c2:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    49c4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    49c8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    49cc:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    49d0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    49d4:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    49d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    49da:	3104      	adds	r1, #4
    49dc:	4630      	mov	r0, r6
    49de:	f7ff fdf9 	bl	45d4 <uarte_nrfx_configure>
	if (err) {
    49e2:	4681      	mov	r9, r0
    49e4:	2800      	cmp	r0, #0
    49e6:	d16f      	bne.n	4ac8 <uarte_instance_init.isra.0+0x1d4>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    49e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    49ec:	0799      	lsls	r1, r3, #30
    49ee:	d519      	bpl.n	4a24 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    49f0:	f107 0016 	add.w	r0, r7, #22
    49f4:	f001 fac0 	bl	5f78 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    49f8:	4b41      	ldr	r3, [pc, #260]	; (4b00 <uarte_instance_init.isra.0+0x20c>)
    49fa:	4298      	cmp	r0, r3
    49fc:	d17c      	bne.n	4af8 <uarte_instance_init.isra.0+0x204>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    49fe:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4a00:	00c3      	lsls	r3, r0, #3
    4a02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a06:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    4a0a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4a0e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4a12:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4a16:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    4a1a:	4a3a      	ldr	r2, [pc, #232]	; (4b04 <uarte_instance_init.isra.0+0x210>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4a1c:	2301      	movs	r3, #1
    4a1e:	4083      	lsls	r3, r0
    4a20:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
    4a24:	68fb      	ldr	r3, [r7, #12]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d052      	beq.n	4ad0 <uarte_instance_init.isra.0+0x1dc>
	return config->uarte_regs;
    4a2a:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4a2c:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
    4a2e:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    4a30:	68e8      	ldr	r0, [r5, #12]
    p_reg->INTENSET = mask;
    4a32:	4935      	ldr	r1, [pc, #212]	; (4b08 <uarte_instance_init.isra.0+0x214>)
    4a34:	2204      	movs	r2, #4
    4a36:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    4a3a:	2201      	movs	r2, #1
    4a3c:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    4a40:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4a44:	2108      	movs	r1, #8
    4a46:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a4a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4a4e:	b1a1      	cbz	r1, 4a7a <uarte_instance_init.isra.0+0x186>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a50:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a52:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4a56:	b91a      	cbnz	r2, 4a60 <uarte_instance_init.isra.0+0x16c>
    4a58:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    4a5c:	2a00      	cmp	r2, #0
    4a5e:	d0f8      	beq.n	4a52 <uarte_instance_init.isra.0+0x15e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a60:	2200      	movs	r2, #0
    4a62:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    4a66:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    4a6a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4a6e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    4a72:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    4a76:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    4a7a:	4924      	ldr	r1, [pc, #144]	; (4b0c <uarte_instance_init.isra.0+0x218>)
    4a7c:	2200      	movs	r2, #0
    4a7e:	3088      	adds	r0, #136	; 0x88
    4a80:	f005 fe0d 	bl	a69e <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    4a84:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    4a86:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    4a8a:	68e8      	ldr	r0, [r5, #12]
    4a8c:	4920      	ldr	r1, [pc, #128]	; (4b10 <uarte_instance_init.isra.0+0x21c>)
    4a8e:	2200      	movs	r2, #0
    4a90:	3028      	adds	r0, #40	; 0x28
    4a92:	f005 fe04 	bl	a69e <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    4a96:	68eb      	ldr	r3, [r5, #12]
    4a98:	65dd      	str	r5, [r3, #92]	; 0x5c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4a9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4a9e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    4aa0:	bf5c      	itt	pl
    4aa2:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4aa6:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4aaa:	06db      	lsls	r3, r3, #27
    4aac:	bf44      	itt	mi
    4aae:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4ab2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4ab6:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
    4ab8:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4aba:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4abe:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ac2:	2301      	movs	r3, #1
    4ac4:	60a3      	str	r3, [r4, #8]
    4ac6:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4ac8:	4648      	mov	r0, r9
    4aca:	b003      	add	sp, #12
    4acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4ad0:	2308      	movs	r3, #8
    4ad2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    4ad6:	f898 3008 	ldrb.w	r3, [r8, #8]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d1dd      	bne.n	4a9a <uarte_instance_init.isra.0+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ade:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4ae2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4ae6:	f107 0315 	add.w	r3, r7, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4aea:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4aee:	2301      	movs	r3, #1
    4af0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4af4:	6023      	str	r3, [r4, #0]
}
    4af6:	e7d0      	b.n	4a9a <uarte_instance_init.isra.0+0x1a6>
		return -EIO;
    4af8:	f06f 0904 	mvn.w	r9, #4
    4afc:	e7e4      	b.n	4ac8 <uarte_instance_init.isra.0+0x1d4>
    4afe:	bf00      	nop
    4b00:	0bad0000 	.word	0x0bad0000
    4b04:	4001f000 	.word	0x4001f000
    4b08:	000a0210 	.word	0x000a0210
    4b0c:	0000a1ab 	.word	0x0000a1ab
    4b10:	0000a343 	.word	0x0000a343

00004b14 <uarte_nrfx_poll_out>:
{
    4b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4b16:	6906      	ldr	r6, [r0, #16]
{
    4b18:	4604      	mov	r4, r0
    4b1a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4b1c:	f005 fdaa 	bl	a674 <k_is_in_isr>
    4b20:	b910      	cbnz	r0, 4b28 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4b22:	4b28      	ldr	r3, [pc, #160]	; (4bc4 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
    4b24:	781b      	ldrb	r3, [r3, #0]
    4b26:	bb5b      	cbnz	r3, 4b80 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    4b28:	f04f 0320 	mov.w	r3, #32
    4b2c:	f3ef 8111 	mrs	r1, BASEPRI
    4b30:	f383 8812 	msr	BASEPRI_MAX, r3
    4b34:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4b38:	4620      	mov	r0, r4
			key = irq_lock();
    4b3a:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
    4b3c:	f005 fa90 	bl	a060 <is_tx_ready>
    4b40:	b1c8      	cbz	r0, 4b76 <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
    4b42:	68f3      	ldr	r3, [r6, #12]
    4b44:	b15b      	cbz	r3, 4b5e <uarte_nrfx_poll_out+0x4a>
    4b46:	68da      	ldr	r2, [r3, #12]
    4b48:	b14a      	cbz	r2, 4b5e <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
    4b4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    4b4e:	2a00      	cmp	r2, #0
    4b50:	da05      	bge.n	4b5e <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
    4b52:	6862      	ldr	r2, [r4, #4]
    4b54:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
    4b56:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    4b5a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    4b5e:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    4b60:	2201      	movs	r2, #1
	data->char_out = c;
    4b62:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    4b66:	4620      	mov	r0, r4
    4b68:	f005 fc2e 	bl	a3c8 <tx_start>
	__asm__ volatile(
    4b6c:	f385 8811 	msr	BASEPRI, r5
    4b70:	f3bf 8f6f 	isb	sy
}
    4b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b76:	f381 8811 	msr	BASEPRI, r1
    4b7a:	f3bf 8f6f 	isb	sy
}
    4b7e:	e7d3      	b.n	4b28 <uarte_nrfx_poll_out+0x14>
{
    4b80:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4b82:	4620      	mov	r0, r4
    4b84:	f005 fa6c 	bl	a060 <is_tx_ready>
    4b88:	b948      	cbnz	r0, 4b9e <uarte_nrfx_poll_out+0x8a>
    4b8a:	2001      	movs	r0, #1
    4b8c:	f005 fc6b 	bl	a466 <nrfx_busy_wait>
    4b90:	3d01      	subs	r5, #1
    4b92:	d1f6      	bne.n	4b82 <uarte_nrfx_poll_out+0x6e>
    4b94:	2100      	movs	r1, #0
    4b96:	2021      	movs	r0, #33	; 0x21
    4b98:	f003 fb34 	bl	8204 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4b9c:	e7f0      	b.n	4b80 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    4b9e:	f04f 0320 	mov.w	r3, #32
    4ba2:	f3ef 8511 	mrs	r5, BASEPRI
    4ba6:	f383 8812 	msr	BASEPRI_MAX, r3
    4baa:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4bae:	4620      	mov	r0, r4
    4bb0:	f005 fa56 	bl	a060 <is_tx_ready>
    4bb4:	2800      	cmp	r0, #0
    4bb6:	d1d2      	bne.n	4b5e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    4bb8:	f385 8811 	msr	BASEPRI, r5
    4bbc:	f3bf 8f6f 	isb	sy
}
    4bc0:	e7e8      	b.n	4b94 <uarte_nrfx_poll_out+0x80>
    4bc2:	bf00      	nop
    4bc4:	200010dd 	.word	0x200010dd

00004bc8 <uarte_nrfx_tx>:
{
    4bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4bca:	461c      	mov	r4, r3
	return config->uarte_regs;
    4bcc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4bce:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4bd0:	f8d3 c000 	ldr.w	ip, [r3]
{
    4bd4:	4605      	mov	r5, r0
	__asm__ volatile(
    4bd6:	f04f 0320 	mov.w	r3, #32
    4bda:	f3ef 8711 	mrs	r7, BASEPRI
    4bde:	f383 8812 	msr	BASEPRI_MAX, r3
    4be2:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    4be6:	68f0      	ldr	r0, [r6, #12]
    4be8:	68c3      	ldr	r3, [r0, #12]
    4bea:	b13b      	cbz	r3, 4bfc <uarte_nrfx_tx+0x34>
	__asm__ volatile(
    4bec:	f387 8811 	msr	BASEPRI, r7
    4bf0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4bf4:	f06f 000f 	mvn.w	r0, #15
}
    4bf8:	b003      	add	sp, #12
    4bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
    4bfc:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
    4c00:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    4c02:	6081      	str	r1, [r0, #8]
    4c04:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4c08:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    4c0c:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
    4c10:	d128      	bne.n	4c64 <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
    4c12:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
    4c16:	f106 010c 	add.w	r1, r6, #12
    4c1a:	4628      	mov	r0, r5
    4c1c:	f005 fbfa 	bl	a414 <start_tx_locked.isra.0>
    4c20:	f387 8811 	msr	BASEPRI, r7
    4c24:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    4c28:	7af3      	ldrb	r3, [r6, #11]
    4c2a:	2b01      	cmp	r3, #1
    4c2c:	d118      	bne.n	4c60 <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
    4c2e:	1c63      	adds	r3, r4, #1
    4c30:	d016      	beq.n	4c60 <uarte_nrfx_tx+0x98>
    4c32:	480e      	ldr	r0, [pc, #56]	; (4c6c <uarte_nrfx_tx+0xa4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    4c34:	68f5      	ldr	r5, [r6, #12]
    4c36:	4a0e      	ldr	r2, [pc, #56]	; (4c70 <uarte_nrfx_tx+0xa8>)
    4c38:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    4c3c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4c40:	2100      	movs	r1, #0
    4c42:	2300      	movs	r3, #0
    4c44:	fbc6 0104 	smlal	r0, r1, r6, r4
    4c48:	f7fc f8c6 	bl	dd8 <__aeabi_uldivmod>
    4c4c:	3528      	adds	r5, #40	; 0x28
    4c4e:	4602      	mov	r2, r0
    4c50:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    4c52:	2000      	movs	r0, #0
    4c54:	2100      	movs	r1, #0
    4c56:	e9cd 0100 	strd	r0, r1, [sp]
    4c5a:	4628      	mov	r0, r5
    4c5c:	f004 fa68 	bl	9130 <z_impl_k_timer_start>
	return 0;
    4c60:	2000      	movs	r0, #0
    4c62:	e7c9      	b.n	4bf8 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
    4c64:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    4c66:	f005 fb44 	bl	a2f2 <setup_tx_cache.isra.0>
    4c6a:	e7d4      	b.n	4c16 <uarte_nrfx_tx+0x4e>
    4c6c:	000f423f 	.word	0x000f423f
    4c70:	000f4240 	.word	0x000f4240

00004c74 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    4c74:	6843      	ldr	r3, [r0, #4]
{
    4c76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
    4c7a:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c7c:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    4c80:	b089      	sub	sp, #36	; 0x24
    4c82:	4604      	mov	r4, r0
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
    4c84:	b171      	cbz	r1, 4ca4 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4c86:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c88:	2200      	movs	r2, #0
    4c8a:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    4c8e:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    4c92:	68da      	ldr	r2, [r3, #12]
    4c94:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    4c98:	3301      	adds	r3, #1
    4c9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    4c9e:	b009      	add	sp, #36	; 0x24
    4ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4ca4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    4ca8:	b313      	cbz	r3, 4cf0 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4caa:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    4cae:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4cb2:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4cb6:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    4cba:	2214      	movs	r2, #20
    4cbc:	a803      	add	r0, sp, #12
    4cbe:	f005 f830 	bl	9d22 <memset>
    4cc2:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4cc4:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
    4cc6:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4cca:	f100 8104 	bmi.w	4ed6 <uarte_nrfx_isr_async+0x262>
    4cce:	07b1      	lsls	r1, r6, #30
    4cd0:	f100 8103 	bmi.w	4eda <uarte_nrfx_isr_async+0x266>
    4cd4:	0772      	lsls	r2, r6, #29
    4cd6:	f100 8102 	bmi.w	4ede <uarte_nrfx_isr_async+0x26a>
    4cda:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    4cde:	4620      	mov	r0, r4
    4ce0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    4ce2:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    4ce6:	f005 f9cb 	bl	a080 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    4cea:	4620      	mov	r0, r4
    4cec:	f005 fb2d 	bl	a34a <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4cf0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    4cf4:	b37b      	cbz	r3, 4d56 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    4cf6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    4cfa:	06db      	lsls	r3, r3, #27
    4cfc:	d52b      	bpl.n	4d56 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cfe:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4d02:	6927      	ldr	r7, [r4, #16]
    4d04:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    4d08:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    4d0c:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    4d0e:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    4d10:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    4d12:	2301      	movs	r3, #1
    4d14:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    4d18:	3088      	adds	r0, #136	; 0x88
    4d1a:	f005 fccc 	bl	a6b6 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    4d1e:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    4d20:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    4d24:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    4d28:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    4d2a:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    4d2e:	1a1b      	subs	r3, r3, r0
    4d30:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    4d32:	6f90      	ldr	r0, [r2, #120]	; 0x78
    4d34:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    4d38:	4408      	add	r0, r1
	if (rx_len > 0) {
    4d3a:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    4d3c:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    4d3e:	dd02      	ble.n	4d46 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    4d40:	4620      	mov	r0, r4
    4d42:	f005 f9a4 	bl	a08e <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    4d46:	68f9      	ldr	r1, [r7, #12]
    4d48:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	f040 80c8 	bne.w	4ee2 <uarte_nrfx_isr_async+0x26e>
		data->async->is_in_irq = false;
    4d52:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d56:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    4d5a:	b393      	cbz	r3, 4dc2 <uarte_nrfx_isr_async+0x14e>
    4d5c:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
    4d60:	bb79      	cbnz	r1, 4dc2 <uarte_nrfx_isr_async+0x14e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d62:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4d66:	6926      	ldr	r6, [r4, #16]
    4d68:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
    4d6c:	2214      	movs	r2, #20
    4d6e:	a803      	add	r0, sp, #12
    4d70:	f004 ffd7 	bl	9d22 <memset>
    4d74:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    4d76:	a903      	add	r1, sp, #12
    4d78:	4620      	mov	r0, r4
	struct uart_event evt = {
    4d7a:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    4d7e:	f005 f97f 	bl	a080 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    4d82:	68f6      	ldr	r6, [r6, #12]
    4d84:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    4d86:	1c5f      	adds	r7, r3, #1
    4d88:	d01b      	beq.n	4dc2 <uarte_nrfx_isr_async+0x14e>
		data->async->rx_timeout_left = data->async->rx_timeout;
    4d8a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    4d8e:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    4d92:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4fc8 <uarte_nrfx_isr_async+0x354>
    4d96:	4a8b      	ldr	r2, [pc, #556]	; (4fc4 <uarte_nrfx_isr_async+0x350>)
    4d98:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    4d9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4da0:	f04f 0900 	mov.w	r9, #0
    4da4:	fbc0 8901 	smlal	r8, r9, r0, r1
    4da8:	2300      	movs	r3, #0
    4daa:	4640      	mov	r0, r8
    4dac:	4649      	mov	r1, r9
    4dae:	f7fc f813 	bl	dd8 <__aeabi_uldivmod>
    4db2:	4602      	mov	r2, r0
    4db4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    4db6:	e9cd 0100 	strd	r0, r1, [sp]
    4dba:	f106 0088 	add.w	r0, r6, #136	; 0x88
    4dbe:	f004 f9b7 	bl	9130 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dc2:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4dc6:	b333      	cbz	r3, 4e16 <uarte_nrfx_isr_async+0x1a2>
    4dc8:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    4dcc:	bb1e      	cbnz	r6, 4e16 <uarte_nrfx_isr_async+0x1a2>
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4dce:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4dd0:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
    4dd4:	68f9      	ldr	r1, [r7, #12]
    4dd6:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    4dda:	2201      	movs	r2, #1
    4ddc:	3160      	adds	r1, #96	; 0x60
    4dde:	4620      	mov	r0, r4
    4de0:	f005 f96e 	bl	a0c0 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
    4de4:	68f9      	ldr	r1, [r7, #12]
    4de6:	2201      	movs	r2, #1
    4de8:	316c      	adds	r1, #108	; 0x6c
    4dea:	4620      	mov	r0, r4
    4dec:	f005 f968 	bl	a0c0 <notify_rx_buf_release>
	if (data->async->rx_enabled) {
    4df0:	68fb      	ldr	r3, [r7, #12]
    4df2:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    4df6:	2a00      	cmp	r2, #0
    4df8:	f000 80a1 	beq.w	4f3e <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_enabled = false;
    4dfc:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4e00:	6863      	ldr	r3, [r4, #4]
    4e02:	685b      	ldr	r3, [r3, #4]
    4e04:	06d8      	lsls	r0, r3, #27
    4e06:	d503      	bpl.n	4e10 <uarte_nrfx_isr_async+0x19c>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    4e08:	2102      	movs	r1, #2
    4e0a:	4620      	mov	r0, r4
    4e0c:	f005 fa4b 	bl	a2a6 <async_uart_release>
	notify_rx_disable(dev);
    4e10:	4620      	mov	r0, r4
    4e12:	f005 f96f 	bl	a0f4 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e16:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    4e1a:	b1db      	cbz	r3, 4e54 <uarte_nrfx_isr_async+0x1e0>
    return p_reg->INTENSET & mask;
    4e1c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    4e20:	05d9      	lsls	r1, r3, #23
    4e22:	d517      	bpl.n	4e54 <uarte_nrfx_isr_async+0x1e0>
	return config->uarte_regs;
    4e24:	6863      	ldr	r3, [r4, #4]
    4e26:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    4e28:	f04f 0120 	mov.w	r1, #32
    4e2c:	f3ef 8211 	mrs	r2, BASEPRI
    4e30:	f381 8812 	msr	BASEPRI_MAX, r1
    4e34:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e38:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4e3c:	b131      	cbz	r1, 4e4c <uarte_nrfx_isr_async+0x1d8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e3e:	2100      	movs	r1, #0
    4e40:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    4e44:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e48:	2101      	movs	r1, #1
    4e4a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    4e4c:	f382 8811 	msr	BASEPRI, r2
    4e50:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e54:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    4e58:	2b00      	cmp	r3, #0
    4e5a:	f43f af20 	beq.w	4c9e <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    4e5e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    4e62:	025a      	lsls	r2, r3, #9
    4e64:	f57f af1b 	bpl.w	4c9e <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    4e68:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4e6a:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4e6c:	e9d3 7300 	ldrd	r7, r3, [r3]
    4e70:	06db      	lsls	r3, r3, #27
    4e72:	d469      	bmi.n	4f48 <uarte_nrfx_isr_async+0x2d4>
	if (!data->async->tx_buf) {
    4e74:	68f3      	ldr	r3, [r6, #12]
    4e76:	689b      	ldr	r3, [r3, #8]
    4e78:	2b00      	cmp	r3, #0
    4e7a:	f43f af10 	beq.w	4c9e <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    4e7e:	f04f 0320 	mov.w	r3, #32
    4e82:	f3ef 8211 	mrs	r2, BASEPRI
    4e86:	f383 8812 	msr	BASEPRI_MAX, r3
    4e8a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    4e8e:	68f3      	ldr	r3, [r6, #12]
    4e90:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    4e94:	2900      	cmp	r1, #0
    4e96:	bfac      	ite	ge
    4e98:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    4e9c:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
    4ea0:	f382 8811 	msr	BASEPRI, r2
    4ea4:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    4ea8:	68f0      	ldr	r0, [r6, #12]
    4eaa:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    4eae:	2b00      	cmp	r3, #0
    4eb0:	d057      	beq.n	4f62 <uarte_nrfx_isr_async+0x2ee>
	__asm__ volatile(
    4eb2:	f04f 0320 	mov.w	r3, #32
    4eb6:	f3ef 8511 	mrs	r5, BASEPRI
    4eba:	f383 8812 	msr	BASEPRI_MAX, r3
    4ebe:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    4ec2:	f106 010c 	add.w	r1, r6, #12
    4ec6:	4620      	mov	r0, r4
    4ec8:	f005 faa4 	bl	a414 <start_tx_locked.isra.0>
	__asm__ volatile(
    4ecc:	f385 8811 	msr	BASEPRI, r5
    4ed0:	f3bf 8f6f 	isb	sy
				return;
    4ed4:	e6e3      	b.n	4c9e <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    4ed6:	2601      	movs	r6, #1
    4ed8:	e701      	b.n	4cde <uarte_nrfx_isr_async+0x6a>
    4eda:	2602      	movs	r6, #2
    4edc:	e6ff      	b.n	4cde <uarte_nrfx_isr_async+0x6a>
    4ede:	2604      	movs	r6, #4
    4ee0:	e6fd      	b.n	4cde <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
    4ee2:	2200      	movs	r2, #0
    4ee4:	3160      	adds	r1, #96	; 0x60
    4ee6:	4620      	mov	r0, r4
    4ee8:	f005 f8ea 	bl	a0c0 <notify_rx_buf_release>
	__asm__ volatile(
    4eec:	f04f 0320 	mov.w	r3, #32
    4ef0:	f3ef 8111 	mrs	r1, BASEPRI
    4ef4:	f383 8812 	msr	BASEPRI_MAX, r3
    4ef8:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    4efc:	68fb      	ldr	r3, [r7, #12]
    4efe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    4f00:	b1d2      	cbz	r2, 4f38 <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_buf = data->async->rx_next_buf;
    4f02:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    4f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4f06:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    4f08:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    4f0a:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    4f0e:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f10:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4f14:	b90b      	cbnz	r3, 4f1a <uarte_nrfx_isr_async+0x2a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f16:	2301      	movs	r3, #1
    4f18:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    4f1a:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    4f1e:	f023 0320 	bic.w	r3, r3, #32
    4f22:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    4f26:	f381 8811 	msr	BASEPRI, r1
    4f2a:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    4f2e:	68fb      	ldr	r3, [r7, #12]
    4f30:	2200      	movs	r2, #0
    4f32:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    4f36:	e70e      	b.n	4d56 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f38:	2301      	movs	r3, #1
    4f3a:	6073      	str	r3, [r6, #4]
}
    4f3c:	e7f3      	b.n	4f26 <uarte_nrfx_isr_async+0x2b2>
		(void)rx_flush(dev, NULL, 0);
    4f3e:	4611      	mov	r1, r2
    4f40:	4620      	mov	r0, r4
    4f42:	f005 f97b 	bl	a23c <rx_flush>
    4f46:	e75b      	b.n	4e00 <uarte_nrfx_isr_async+0x18c>
    p_reg->INTENCLR = mask;
    4f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4f4c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    4f50:	2101      	movs	r1, #1
    4f52:	4620      	mov	r0, r4
    4f54:	f005 f9a7 	bl	a2a6 <async_uart_release>
		if (!data->async->tx_size) {
    4f58:	68f3      	ldr	r3, [r6, #12]
    4f5a:	68db      	ldr	r3, [r3, #12]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d189      	bne.n	4e74 <uarte_nrfx_isr_async+0x200>
    4f60:	e69d      	b.n	4c9e <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    4f62:	6882      	ldr	r2, [r0, #8]
    4f64:	6903      	ldr	r3, [r0, #16]
    4f66:	429a      	cmp	r2, r3
    4f68:	d00b      	beq.n	4f82 <uarte_nrfx_isr_async+0x30e>
		if (amount == data->async->xfer_len) {
    4f6a:	6942      	ldr	r2, [r0, #20]
    4f6c:	6a03      	ldr	r3, [r0, #32]
    4f6e:	42aa      	cmp	r2, r5
    4f70:	442b      	add	r3, r5
    4f72:	d125      	bne.n	4fc0 <uarte_nrfx_isr_async+0x34c>
			data->async->tx_cache_offset += amount;
    4f74:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    4f76:	f005 f9bc 	bl	a2f2 <setup_tx_cache.isra.0>
    4f7a:	2800      	cmp	r0, #0
    4f7c:	d199      	bne.n	4eb2 <uarte_nrfx_isr_async+0x23e>
			amount = data->async->tx_cache_offset;
    4f7e:	68f3      	ldr	r3, [r6, #12]
    4f80:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    4f82:	68f0      	ldr	r0, [r6, #12]
    4f84:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    4f86:	f005 fb96 	bl	a6b6 <z_impl_k_timer_stop>
	struct uart_event evt = {
    4f8a:	2214      	movs	r2, #20
    4f8c:	2100      	movs	r1, #0
    4f8e:	a803      	add	r0, sp, #12
    4f90:	f004 fec7 	bl	9d22 <memset>
		.data.tx.buf = data->async->tx_buf,
    4f94:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    4f96:	689a      	ldr	r2, [r3, #8]
    4f98:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
    4f9c:	68da      	ldr	r2, [r3, #12]
    4f9e:	1aad      	subs	r5, r5, r2
    4fa0:	bf18      	it	ne
    4fa2:	2501      	movne	r5, #1
    4fa4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    4fa8:	f88d 500c 	strb.w	r5, [sp, #12]
    4fac:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    4fb0:	2200      	movs	r2, #0
    4fb2:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    4fb4:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    4fb6:	a903      	add	r1, sp, #12
    4fb8:	4620      	mov	r0, r4
    4fba:	f005 f861 	bl	a080 <user_callback>
    4fbe:	e66e      	b.n	4c9e <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    4fc0:	461d      	mov	r5, r3
    4fc2:	e7de      	b.n	4f82 <uarte_nrfx_isr_async+0x30e>
    4fc4:	000f4240 	.word	0x000f4240
    4fc8:	000f423f 	.word	0x000f423f

00004fcc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4fcc:	4919      	ldr	r1, [pc, #100]	; (5034 <sys_clock_timeout_handler+0x68>)
{
    4fce:	b570      	push	{r4, r5, r6, lr}
    4fd0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4fd2:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4fd6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4fd8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4fdc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4fe0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4fe2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4fe6:	f04f 0500 	mov.w	r5, #0
    4fea:	d20a      	bcs.n	5002 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4fec:	4b12      	ldr	r3, [pc, #72]	; (5038 <sys_clock_timeout_handler+0x6c>)
    4fee:	6819      	ldr	r1, [r3, #0]
    4ff0:	060a      	lsls	r2, r1, #24
    4ff2:	0a0b      	lsrs	r3, r1, #8
    4ff4:	1992      	adds	r2, r2, r6
    4ff6:	4911      	ldr	r1, [pc, #68]	; (503c <sys_clock_timeout_handler+0x70>)
    4ff8:	f143 0300 	adc.w	r3, r3, #0
    4ffc:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5000:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5002:	f003 fec5 	bl	8d90 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5006:	00a3      	lsls	r3, r4, #2
    5008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    500c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5010:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5014:	42b2      	cmp	r2, r6
    5016:	d10b      	bne.n	5030 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    5018:	b91d      	cbnz	r5, 5022 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    501a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    501e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5022:	4b07      	ldr	r3, [pc, #28]	; (5040 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5024:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    5028:	fa00 f404 	lsl.w	r4, r0, r4
    502c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5030:	bd70      	pop	{r4, r5, r6, pc}
    5032:	bf00      	nop
    5034:	20000700 	.word	0x20000700
    5038:	20000f80 	.word	0x20000f80
    503c:	200006e8 	.word	0x200006e8
    5040:	40011000 	.word	0x40011000

00005044 <compare_int_lock>:
{
    5044:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5046:	2301      	movs	r3, #1
    5048:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    504a:	4a11      	ldr	r2, [pc, #68]	; (5090 <compare_int_lock+0x4c>)
    504c:	f3bf 8f5b 	dmb	ish
    5050:	43dc      	mvns	r4, r3
    5052:	e852 1f00 	ldrex	r1, [r2]
    5056:	ea01 0c04 	and.w	ip, r1, r4
    505a:	e842 ce00 	strex	lr, ip, [r2]
    505e:	f1be 0f00 	cmp.w	lr, #0
    5062:	d1f6      	bne.n	5052 <compare_int_lock+0xe>
    5064:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    506c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5070:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5074:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5078:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    507c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5080:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    5084:	420b      	tst	r3, r1
}
    5086:	bf14      	ite	ne
    5088:	2001      	movne	r0, #1
    508a:	2000      	moveq	r0, #0
    508c:	bd10      	pop	{r4, pc}
    508e:	bf00      	nop
    5090:	20000f7c 	.word	0x20000f7c

00005094 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    5094:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5096:	4a12      	ldr	r2, [pc, #72]	; (50e0 <compare_int_unlock.part.0+0x4c>)
    5098:	f3bf 8f5b 	dmb	ish
    509c:	4083      	lsls	r3, r0
    509e:	e852 1f00 	ldrex	r1, [r2]
    50a2:	4319      	orrs	r1, r3
    50a4:	e842 1c00 	strex	ip, r1, [r2]
    50a8:	f1bc 0f00 	cmp.w	ip, #0
    50ac:	d1f7      	bne.n	509e <compare_int_unlock.part.0+0xa>
    50ae:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    50b2:	4a0c      	ldr	r2, [pc, #48]	; (50e4 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    50b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    50b8:	4083      	lsls	r3, r0
    50ba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    50be:	4b0a      	ldr	r3, [pc, #40]	; (50e8 <compare_int_unlock.part.0+0x54>)
    50c0:	f3bf 8f5b 	dmb	ish
    50c4:	681b      	ldr	r3, [r3, #0]
    50c6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    50ca:	fa23 f000 	lsr.w	r0, r3, r0
    50ce:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50d0:	bf42      	ittt	mi
    50d2:	4b06      	ldrmi	r3, [pc, #24]	; (50ec <compare_int_unlock.part.0+0x58>)
    50d4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    50d8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
    50e0:	20000f7c 	.word	0x20000f7c
    50e4:	40011000 	.word	0x40011000
    50e8:	20000f78 	.word	0x20000f78
    50ec:	e000e100 	.word	0xe000e100

000050f0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    50f0:	4b0d      	ldr	r3, [pc, #52]	; (5128 <z_nrf_rtc_timer_read+0x38>)
    50f2:	681b      	ldr	r3, [r3, #0]
    50f4:	0a19      	lsrs	r1, r3, #8
    50f6:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    50f8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    50fc:	4b0b      	ldr	r3, [pc, #44]	; (512c <z_nrf_rtc_timer_read+0x3c>)
    50fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5102:	18c0      	adds	r0, r0, r3
    5104:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    510c:	d20a      	bcs.n	5124 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    510e:	4b08      	ldr	r3, [pc, #32]	; (5130 <z_nrf_rtc_timer_read+0x40>)
    5110:	e9d3 2300 	ldrd	r2, r3, [r3]
    5114:	4299      	cmp	r1, r3
    5116:	bf08      	it	eq
    5118:	4290      	cmpeq	r0, r2
    511a:	d203      	bcs.n	5124 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    511c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5120:	f141 0100 	adc.w	r1, r1, #0
}
    5124:	4770      	bx	lr
    5126:	bf00      	nop
    5128:	20000f80 	.word	0x20000f80
    512c:	40011000 	.word	0x40011000
    5130:	200006e8 	.word	0x200006e8

00005134 <compare_set>:
{
    5134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5138:	b085      	sub	sp, #20
    513a:	4616      	mov	r6, r2
    513c:	461f      	mov	r7, r3
    513e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    5140:	f7ff ff80 	bl	5044 <compare_int_lock>
    5144:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5146:	f7ff ffd3 	bl	50f0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    514a:	42b9      	cmp	r1, r7
    514c:	bf08      	it	eq
    514e:	42b0      	cmpeq	r0, r6
    5150:	d27f      	bcs.n	5252 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5152:	ebb6 0800 	subs.w	r8, r6, r0
    5156:	eb67 0901 	sbc.w	r9, r7, r1
    515a:	2300      	movs	r3, #0
    515c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5160:	454b      	cmp	r3, r9
    5162:	bf08      	it	eq
    5164:	4542      	cmpeq	r2, r8
    5166:	f0c0 8085 	bcc.w	5274 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    516a:	4b44      	ldr	r3, [pc, #272]	; (527c <compare_set+0x148>)
    516c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    5170:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5174:	429f      	cmp	r7, r3
    5176:	bf08      	it	eq
    5178:	4296      	cmpeq	r6, r2
    517a:	d054      	beq.n	5226 <compare_set+0xf2>
    517c:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5180:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    5184:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5188:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    518c:	fa0b f205 	lsl.w	r2, fp, r5
    5190:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5194:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5198:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    519c:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    519e:	4a38      	ldr	r2, [pc, #224]	; (5280 <compare_set+0x14c>)
    return p_reg->CC[ch];
    51a0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    51a4:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    51a8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    51ac:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    51b0:	461c      	mov	r4, r3
    51b2:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    51b4:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    51b8:	eba0 000a 	sub.w	r0, r0, sl
    51bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    51c0:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    51c4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    51c6:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    51ca:	d105      	bne.n	51d8 <compare_set+0xa4>
    51cc:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    51ce:	2013      	movs	r0, #19
    51d0:	f005 fa61 	bl	a696 <z_impl_k_busy_wait>
    51d4:	4a2a      	ldr	r2, [pc, #168]	; (5280 <compare_set+0x14c>)
    51d6:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    51d8:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    51da:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    51de:	eba4 000c 	sub.w	r0, r4, ip
    51e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    51e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    51ea:	bf88      	it	hi
    51ec:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    51ee:	2000      	movs	r0, #0
    51f0:	f8c8 0000 	str.w	r0, [r8]
    51f4:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    51f8:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    51fc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5200:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    5204:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5208:	4582      	cmp	sl, r0
    520a:	d006      	beq.n	521a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    520c:	1a20      	subs	r0, r4, r0
    520e:	3802      	subs	r0, #2
    5210:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5214:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5218:	d819      	bhi.n	524e <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    521a:	1ae4      	subs	r4, r4, r3
    521c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5220:	1932      	adds	r2, r6, r4
    5222:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    5226:	4c15      	ldr	r4, [pc, #84]	; (527c <compare_set+0x148>)
    5228:	0129      	lsls	r1, r5, #4
    522a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    522e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    5232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    5234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    5236:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    5238:	6043      	str	r3, [r0, #4]
	return ret;
    523a:	2400      	movs	r4, #0
	if (key) {
    523c:	9b01      	ldr	r3, [sp, #4]
    523e:	b113      	cbz	r3, 5246 <compare_set+0x112>
    5240:	4628      	mov	r0, r5
    5242:	f7ff ff27 	bl	5094 <compare_int_unlock.part.0>
}
    5246:	4620      	mov	r0, r4
    5248:	b005      	add	sp, #20
    524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    524e:	4620      	mov	r0, r4
    5250:	e7b0      	b.n	51b4 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    5252:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5254:	4a0b      	ldr	r2, [pc, #44]	; (5284 <compare_set+0x150>)
    5256:	f3bf 8f5b 	dmb	ish
    525a:	40ab      	lsls	r3, r5
    525c:	e852 1f00 	ldrex	r1, [r2]
    5260:	4319      	orrs	r1, r3
    5262:	e842 1000 	strex	r0, r1, [r2]
    5266:	2800      	cmp	r0, #0
    5268:	d1f8      	bne.n	525c <compare_set+0x128>
    526a:	f3bf 8f5b 	dmb	ish
    526e:	4632      	mov	r2, r6
    5270:	463b      	mov	r3, r7
    5272:	e7d8      	b.n	5226 <compare_set+0xf2>
			return -EINVAL;
    5274:	f06f 0415 	mvn.w	r4, #21
    5278:	e7e0      	b.n	523c <compare_set+0x108>
    527a:	bf00      	nop
    527c:	200006f0 	.word	0x200006f0
    5280:	40011000 	.word	0x40011000
    5284:	20000f78 	.word	0x20000f78

00005288 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5288:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    528a:	4b19      	ldr	r3, [pc, #100]	; (52f0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    528c:	4d19      	ldr	r5, [pc, #100]	; (52f4 <sys_clock_driver_init+0x6c>)
    528e:	2400      	movs	r4, #0
    5290:	f04f 30ff 	mov.w	r0, #4294967295
    5294:	f04f 31ff 	mov.w	r1, #4294967295
    5298:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    529c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    52a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    52a4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52a8:	4b13      	ldr	r3, [pc, #76]	; (52f8 <sys_clock_driver_init+0x70>)
    52aa:	2602      	movs	r6, #2
    52ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    52b0:	2101      	movs	r1, #1
    52b2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    52b6:	2011      	movs	r0, #17
    52b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    52bc:	4622      	mov	r2, r4
    52be:	f7fd fe4d 	bl	2f5c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    52c2:	2011      	movs	r0, #17
    52c4:	f7fd fe2c 	bl	2f20 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    52c8:	4a0c      	ldr	r2, [pc, #48]	; (52fc <sys_clock_driver_init+0x74>)
    52ca:	2301      	movs	r3, #1
    52cc:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    52ce:	4a0c      	ldr	r2, [pc, #48]	; (5300 <sys_clock_driver_init+0x78>)
    52d0:	602b      	str	r3, [r5, #0]
    52d2:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    52d4:	4b0b      	ldr	r3, [pc, #44]	; (5304 <sys_clock_driver_init+0x7c>)
    52d6:	4a0c      	ldr	r2, [pc, #48]	; (5308 <sys_clock_driver_init+0x80>)
    52d8:	9300      	str	r3, [sp, #0]
    52da:	9401      	str	r4, [sp, #4]
    52dc:	2300      	movs	r3, #0
    52de:	4620      	mov	r0, r4
    52e0:	f7ff ff28 	bl	5134 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    52e4:	4630      	mov	r0, r6
    52e6:	f7fe fe2d 	bl	3f44 <z_nrf_clock_control_lf_on>

	return 0;
}
    52ea:	4620      	mov	r0, r4
    52ec:	b002      	add	sp, #8
    52ee:	bd70      	pop	{r4, r5, r6, pc}
    52f0:	200006f0 	.word	0x200006f0
    52f4:	40011000 	.word	0x40011000
    52f8:	e000e100 	.word	0xe000e100
    52fc:	40011008 	.word	0x40011008
    5300:	20000f7c 	.word	0x20000f7c
    5304:	00004fcd 	.word	0x00004fcd
    5308:	007fffff 	.word	0x007fffff

0000530c <rtc_nrf_isr>:
{
    530c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5310:	4c34      	ldr	r4, [pc, #208]	; (53e4 <rtc_nrf_isr+0xd8>)
    5312:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5316:	079a      	lsls	r2, r3, #30
    5318:	d509      	bpl.n	532e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    531a:	4b33      	ldr	r3, [pc, #204]	; (53e8 <rtc_nrf_isr+0xdc>)
    531c:	681a      	ldr	r2, [r3, #0]
    531e:	b132      	cbz	r2, 532e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5320:	2200      	movs	r2, #0
    5322:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    5324:	4a31      	ldr	r2, [pc, #196]	; (53ec <rtc_nrf_isr+0xe0>)
    5326:	681b      	ldr	r3, [r3, #0]
    5328:	6813      	ldr	r3, [r2, #0]
    532a:	3301      	adds	r3, #1
    532c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    532e:	f04f 0320 	mov.w	r3, #32
    5332:	f3ef 8211 	mrs	r2, BASEPRI
    5336:	f383 8812 	msr	BASEPRI_MAX, r3
    533a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    533e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5342:	03db      	lsls	r3, r3, #15
    5344:	d512      	bpl.n	536c <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5346:	f3bf 8f5b 	dmb	ish
    534a:	4b29      	ldr	r3, [pc, #164]	; (53f0 <rtc_nrf_isr+0xe4>)
    534c:	e853 1f00 	ldrex	r1, [r3]
    5350:	f021 0001 	bic.w	r0, r1, #1
    5354:	e843 0600 	strex	r6, r0, [r3]
    5358:	2e00      	cmp	r6, #0
    535a:	d1f7      	bne.n	534c <rtc_nrf_isr+0x40>
    535c:	f3bf 8f5b 	dmb	ish
    5360:	4b24      	ldr	r3, [pc, #144]	; (53f4 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5362:	2900      	cmp	r1, #0
    5364:	d136      	bne.n	53d4 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5366:	6819      	ldr	r1, [r3, #0]
		if (result) {
    5368:	2900      	cmp	r1, #0
    536a:	d133      	bne.n	53d4 <rtc_nrf_isr+0xc8>
{
    536c:	2300      	movs	r3, #0
	__asm__ volatile(
    536e:	f382 8811 	msr	BASEPRI, r2
    5372:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    5376:	b353      	cbz	r3, 53ce <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    5378:	f7ff feba 	bl	50f0 <z_nrf_rtc_timer_read>
    537c:	4606      	mov	r6, r0
	__asm__ volatile(
    537e:	f04f 0320 	mov.w	r3, #32
    5382:	f3ef 8011 	mrs	r0, BASEPRI
    5386:	f383 8812 	msr	BASEPRI_MAX, r3
    538a:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    538e:	4b1a      	ldr	r3, [pc, #104]	; (53f8 <rtc_nrf_isr+0xec>)
    5390:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5394:	4549      	cmp	r1, r9
    5396:	bf08      	it	eq
    5398:	4546      	cmpeq	r6, r8
    539a:	f04f 0200 	mov.w	r2, #0
    539e:	d31e      	bcc.n	53de <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    53a0:	f04f 36ff 	mov.w	r6, #4294967295
    53a4:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    53a8:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    53ac:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    53b0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    53b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    53b6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    53ba:	f380 8811 	msr	BASEPRI, r0
    53be:	f3bf 8f6f 	isb	sy
		if (handler) {
    53c2:	b121      	cbz	r1, 53ce <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    53c4:	9500      	str	r5, [sp, #0]
    53c6:	4642      	mov	r2, r8
    53c8:	464b      	mov	r3, r9
    53ca:	2000      	movs	r0, #0
    53cc:	4788      	blx	r1
}
    53ce:	b003      	add	sp, #12
    53d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    53d4:	2100      	movs	r1, #0
    53d6:	6019      	str	r1, [r3, #0]
    53d8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    53da:	2301      	movs	r3, #1
}
    53dc:	e7c7      	b.n	536e <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    53de:	4611      	mov	r1, r2
    53e0:	e7eb      	b.n	53ba <rtc_nrf_isr+0xae>
    53e2:	bf00      	nop
    53e4:	40011000 	.word	0x40011000
    53e8:	40011104 	.word	0x40011104
    53ec:	20000f80 	.word	0x20000f80
    53f0:	20000f78 	.word	0x20000f78
    53f4:	40011140 	.word	0x40011140
    53f8:	200006f0 	.word	0x200006f0

000053fc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    53fc:	4b14      	ldr	r3, [pc, #80]	; (5450 <sys_clock_set_timeout+0x54>)
{
    53fe:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5400:	f1b0 3fff 	cmp.w	r0, #4294967295
    5404:	bf08      	it	eq
    5406:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5408:	1e44      	subs	r4, r0, #1
    540a:	2c00      	cmp	r4, #0
    540c:	dd1e      	ble.n	544c <sys_clock_set_timeout+0x50>
    540e:	429c      	cmp	r4, r3
    5410:	bfa8      	it	ge
    5412:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5414:	f7ff fe6c 	bl	50f0 <z_nrf_rtc_timer_read>
    5418:	4b0e      	ldr	r3, [pc, #56]	; (5454 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    541a:	490f      	ldr	r1, [pc, #60]	; (5458 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    541c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5420:	1a80      	subs	r0, r0, r2
		ticks = 0;
    5422:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5426:	bf28      	it	cs
    5428:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    542a:	3001      	adds	r0, #1
    542c:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    542e:	4808      	ldr	r0, [pc, #32]	; (5450 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5430:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    5432:	4284      	cmp	r4, r0
    5434:	bf28      	it	cs
    5436:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5438:	1912      	adds	r2, r2, r4
    543a:	f04f 0000 	mov.w	r0, #0
    543e:	9001      	str	r0, [sp, #4]
    5440:	f143 0300 	adc.w	r3, r3, #0
    5444:	f7ff fe76 	bl	5134 <compare_set>
}
    5448:	b002      	add	sp, #8
    544a:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    544c:	2400      	movs	r4, #0
    544e:	e7e1      	b.n	5414 <sys_clock_set_timeout+0x18>
    5450:	007fffff 	.word	0x007fffff
    5454:	20000700 	.word	0x20000700
    5458:	00004fcd 	.word	0x00004fcd

0000545c <sys_clock_elapsed>:
{
    545c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    545e:	f7ff fe47 	bl	50f0 <z_nrf_rtc_timer_read>
    5462:	4b02      	ldr	r3, [pc, #8]	; (546c <sys_clock_elapsed+0x10>)
    5464:	681b      	ldr	r3, [r3, #0]
}
    5466:	1ac0      	subs	r0, r0, r3
    5468:	bd08      	pop	{r3, pc}
    546a:	bf00      	nop
    546c:	20000700 	.word	0x20000700

00005470 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    5470:	b508      	push	{r3, lr}
    switch (domain)
    5472:	b178      	cbz	r0, 5494 <nrf_clock_is_running.constprop.0+0x24>
    5474:	2801      	cmp	r0, #1
    5476:	d01c      	beq.n	54b2 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    5478:	4a14      	ldr	r2, [pc, #80]	; (54cc <nrf_clock_is_running.constprop.0+0x5c>)
    547a:	4915      	ldr	r1, [pc, #84]	; (54d0 <nrf_clock_is_running.constprop.0+0x60>)
    547c:	4815      	ldr	r0, [pc, #84]	; (54d4 <nrf_clock_is_running.constprop.0+0x64>)
    547e:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5482:	f004 fbe8 	bl	9c56 <printk>
    5486:	4811      	ldr	r0, [pc, #68]	; (54cc <nrf_clock_is_running.constprop.0+0x5c>)
    5488:	f44f 714f 	mov.w	r1, #828	; 0x33c
    548c:	f004 fb0c 	bl	9aa8 <assert_post_action>
            return false;
    5490:	2000      	movs	r0, #0
    5492:	e00d      	b.n	54b0 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    5494:	b131      	cbz	r1, 54a4 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    549a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    549e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    54a2:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    54a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54a8:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    54ac:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    54b0:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    54b2:	b131      	cbz	r1, 54c2 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    54b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    54bc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    54c0:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    54c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54c6:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    54ca:	e7ef      	b.n	54ac <nrf_clock_is_running.constprop.0+0x3c>
    54cc:	0000b90a 	.word	0x0000b90a
    54d0:	0000ac81 	.word	0x0000ac81
    54d4:	0000ac83 	.word	0x0000ac83

000054d8 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    54d8:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    54da:	4604      	mov	r4, r0
    54dc:	b948      	cbnz	r0, 54f2 <nrfx_clock_init+0x1a>
    54de:	490a      	ldr	r1, [pc, #40]	; (5508 <nrfx_clock_init+0x30>)
    54e0:	480a      	ldr	r0, [pc, #40]	; (550c <nrfx_clock_init+0x34>)
    54e2:	4a0b      	ldr	r2, [pc, #44]	; (5510 <nrfx_clock_init+0x38>)
    54e4:	23bd      	movs	r3, #189	; 0xbd
    54e6:	f004 fbb6 	bl	9c56 <printk>
    54ea:	4809      	ldr	r0, [pc, #36]	; (5510 <nrfx_clock_init+0x38>)
    54ec:	21bd      	movs	r1, #189	; 0xbd
    54ee:	f004 fadb 	bl	9aa8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    54f2:	4b08      	ldr	r3, [pc, #32]	; (5514 <nrfx_clock_init+0x3c>)
    54f4:	791a      	ldrb	r2, [r3, #4]
    54f6:	b922      	cbnz	r2, 5502 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    54f8:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    54fa:	4807      	ldr	r0, [pc, #28]	; (5518 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    54fc:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    54fe:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5500:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5502:	4806      	ldr	r0, [pc, #24]	; (551c <nrfx_clock_init+0x44>)
    return err_code;
    5504:	e7fc      	b.n	5500 <nrfx_clock_init+0x28>
    5506:	bf00      	nop
    5508:	0000b97b 	.word	0x0000b97b
    550c:	0000ac83 	.word	0x0000ac83
    5510:	0000b93e 	.word	0x0000b93e
    5514:	20000f84 	.word	0x20000f84
    5518:	0bad0000 	.word	0x0bad0000
    551c:	0bad000c 	.word	0x0bad000c

00005520 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5520:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5522:	4b0b      	ldr	r3, [pc, #44]	; (5550 <nrfx_clock_enable+0x30>)
    5524:	791b      	ldrb	r3, [r3, #4]
    5526:	b94b      	cbnz	r3, 553c <nrfx_clock_enable+0x1c>
    5528:	490a      	ldr	r1, [pc, #40]	; (5554 <nrfx_clock_enable+0x34>)
    552a:	480b      	ldr	r0, [pc, #44]	; (5558 <nrfx_clock_enable+0x38>)
    552c:	4a0b      	ldr	r2, [pc, #44]	; (555c <nrfx_clock_enable+0x3c>)
    552e:	23d6      	movs	r3, #214	; 0xd6
    5530:	f004 fb91 	bl	9c56 <printk>
    5534:	4809      	ldr	r0, [pc, #36]	; (555c <nrfx_clock_enable+0x3c>)
    5536:	21d6      	movs	r1, #214	; 0xd6
    5538:	f004 fab6 	bl	9aa8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    553c:	2000      	movs	r0, #0
    553e:	f7fd fcff 	bl	2f40 <arch_irq_is_enabled>
    5542:	b918      	cbnz	r0, 554c <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5548:	f7fd bcea 	b.w	2f20 <arch_irq_enable>
    554c:	bd08      	pop	{r3, pc}
    554e:	bf00      	nop
    5550:	20000f84 	.word	0x20000f84
    5554:	0000b989 	.word	0x0000b989
    5558:	0000ac83 	.word	0x0000ac83
    555c:	0000b93e 	.word	0x0000b93e

00005560 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5560:	4b22      	ldr	r3, [pc, #136]	; (55ec <nrfx_clock_start+0x8c>)
    5562:	791b      	ldrb	r3, [r3, #4]
{
    5564:	b513      	push	{r0, r1, r4, lr}
    5566:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5568:	b95b      	cbnz	r3, 5582 <nrfx_clock_start+0x22>
    556a:	4921      	ldr	r1, [pc, #132]	; (55f0 <nrfx_clock_start+0x90>)
    556c:	4821      	ldr	r0, [pc, #132]	; (55f4 <nrfx_clock_start+0x94>)
    556e:	4a22      	ldr	r2, [pc, #136]	; (55f8 <nrfx_clock_start+0x98>)
    5570:	f44f 7389 	mov.w	r3, #274	; 0x112
    5574:	f004 fb6f 	bl	9c56 <printk>
    5578:	481f      	ldr	r0, [pc, #124]	; (55f8 <nrfx_clock_start+0x98>)
    557a:	f44f 7189 	mov.w	r1, #274	; 0x112
    557e:	f004 fa93 	bl	9aa8 <assert_post_action>
    switch (domain)
    5582:	b174      	cbz	r4, 55a2 <nrfx_clock_start+0x42>
    5584:	2c01      	cmp	r4, #1
    5586:	d027      	beq.n	55d8 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5588:	4a1b      	ldr	r2, [pc, #108]	; (55f8 <nrfx_clock_start+0x98>)
    558a:	491c      	ldr	r1, [pc, #112]	; (55fc <nrfx_clock_start+0x9c>)
    558c:	4819      	ldr	r0, [pc, #100]	; (55f4 <nrfx_clock_start+0x94>)
    558e:	f44f 73a2 	mov.w	r3, #324	; 0x144
    5592:	f004 fb60 	bl	9c56 <printk>
    5596:	4818      	ldr	r0, [pc, #96]	; (55f8 <nrfx_clock_start+0x98>)
    5598:	f44f 71a2 	mov.w	r1, #324	; 0x144
    559c:	f004 fa84 	bl	9aa8 <assert_post_action>
            break;
    }
}
    55a0:	e016      	b.n	55d0 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    55a2:	a901      	add	r1, sp, #4
    55a4:	4620      	mov	r0, r4
    55a6:	f7ff ff63 	bl	5470 <nrf_clock_is_running.constprop.0>
    55aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55ae:	b188      	cbz	r0, 55d4 <nrfx_clock_start+0x74>
    55b0:	9a01      	ldr	r2, [sp, #4]
    55b2:	2a01      	cmp	r2, #1
    55b4:	d10e      	bne.n	55d4 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    55b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55ba:	4b11      	ldr	r3, [pc, #68]	; (5600 <nrfx_clock_start+0xa0>)
    55bc:	2200      	movs	r2, #0
    55be:	601a      	str	r2, [r3, #0]
    55c0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    55c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55c6:	2202      	movs	r2, #2
    55c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    55cc:	2201      	movs	r2, #1
    55ce:	609a      	str	r2, [r3, #8]
}
    55d0:	b002      	add	sp, #8
    55d2:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    55d4:	2200      	movs	r2, #0
    55d6:	e7ee      	b.n	55b6 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55d8:	4b0a      	ldr	r3, [pc, #40]	; (5604 <nrfx_clock_start+0xa4>)
    55da:	2200      	movs	r2, #0
    55dc:	601a      	str	r2, [r3, #0]
    55de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    55e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55e4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    55e8:	601c      	str	r4, [r3, #0]
}
    55ea:	e7f1      	b.n	55d0 <nrfx_clock_start+0x70>
    55ec:	20000f84 	.word	0x20000f84
    55f0:	0000b989 	.word	0x0000b989
    55f4:	0000ac83 	.word	0x0000ac83
    55f8:	0000b93e 	.word	0x0000b93e
    55fc:	0000ac81 	.word	0x0000ac81
    5600:	40000104 	.word	0x40000104
    5604:	40000100 	.word	0x40000100

00005608 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5608:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    560a:	4d2f      	ldr	r5, [pc, #188]	; (56c8 <nrfx_clock_stop+0xc0>)
    560c:	792a      	ldrb	r2, [r5, #4]
{
    560e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5610:	b95a      	cbnz	r2, 562a <nrfx_clock_stop+0x22>
    5612:	492e      	ldr	r1, [pc, #184]	; (56cc <nrfx_clock_stop+0xc4>)
    5614:	482e      	ldr	r0, [pc, #184]	; (56d0 <nrfx_clock_stop+0xc8>)
    5616:	4a2f      	ldr	r2, [pc, #188]	; (56d4 <nrfx_clock_stop+0xcc>)
    5618:	f240 134b 	movw	r3, #331	; 0x14b
    561c:	f004 fb1b 	bl	9c56 <printk>
    5620:	482c      	ldr	r0, [pc, #176]	; (56d4 <nrfx_clock_stop+0xcc>)
    5622:	f240 114b 	movw	r1, #331	; 0x14b
    5626:	f004 fa3f 	bl	9aa8 <assert_post_action>
    switch (domain)
    562a:	b17c      	cbz	r4, 564c <nrfx_clock_stop+0x44>
    562c:	2c01      	cmp	r4, #1
    562e:	d028      	beq.n	5682 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5630:	4929      	ldr	r1, [pc, #164]	; (56d8 <nrfx_clock_stop+0xd0>)
    5632:	4827      	ldr	r0, [pc, #156]	; (56d0 <nrfx_clock_stop+0xc8>)
    5634:	4a27      	ldr	r2, [pc, #156]	; (56d4 <nrfx_clock_stop+0xcc>)
    5636:	f240 1367 	movw	r3, #359	; 0x167
    563a:	f004 fb0c 	bl	9c56 <printk>
    563e:	4825      	ldr	r0, [pc, #148]	; (56d4 <nrfx_clock_stop+0xcc>)
    5640:	f240 1167 	movw	r1, #359	; 0x167
    5644:	f004 fa30 	bl	9aa8 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5648:	b003      	add	sp, #12
    564a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    564c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5650:	2202      	movs	r2, #2
    5652:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5656:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    565a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    565e:	2201      	movs	r2, #1
    5660:	681b      	ldr	r3, [r3, #0]
    5662:	4b1e      	ldr	r3, [pc, #120]	; (56dc <nrfx_clock_stop+0xd4>)
    5664:	f242 7410 	movw	r4, #10000	; 0x2710
    5668:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    566a:	2100      	movs	r1, #0
    566c:	4608      	mov	r0, r1
    566e:	f7ff feff 	bl	5470 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5672:	2800      	cmp	r0, #0
    5674:	d0e8      	beq.n	5648 <nrfx_clock_stop+0x40>
    5676:	2001      	movs	r0, #1
    5678:	f004 fef5 	bl	a466 <nrfx_busy_wait>
    567c:	3c01      	subs	r4, #1
    567e:	d1f4      	bne.n	566a <nrfx_clock_stop+0x62>
    5680:	e7e2      	b.n	5648 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    5682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5686:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5688:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    568c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5690:	f503 7380 	add.w	r3, r3, #256	; 0x100
    5694:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5696:	4b12      	ldr	r3, [pc, #72]	; (56e0 <nrfx_clock_stop+0xd8>)
    5698:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    569a:	f88d 4007 	strb.w	r4, [sp, #7]
    569e:	f242 7410 	movw	r4, #10000	; 0x2710
    56a2:	f10d 0107 	add.w	r1, sp, #7
    56a6:	2001      	movs	r0, #1
    56a8:	f7ff fee2 	bl	5470 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    56ac:	b910      	cbnz	r0, 56b4 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    56ae:	2300      	movs	r3, #0
    56b0:	716b      	strb	r3, [r5, #5]
    56b2:	e7c9      	b.n	5648 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    56b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    56b8:	2801      	cmp	r0, #1
    56ba:	d1f8      	bne.n	56ae <nrfx_clock_stop+0xa6>
    56bc:	f004 fed3 	bl	a466 <nrfx_busy_wait>
    56c0:	3c01      	subs	r4, #1
    56c2:	d1ee      	bne.n	56a2 <nrfx_clock_stop+0x9a>
    56c4:	e7f3      	b.n	56ae <nrfx_clock_stop+0xa6>
    56c6:	bf00      	nop
    56c8:	20000f84 	.word	0x20000f84
    56cc:	0000b989 	.word	0x0000b989
    56d0:	0000ac83 	.word	0x0000ac83
    56d4:	0000b93e 	.word	0x0000b93e
    56d8:	0000ac81 	.word	0x0000ac81
    56dc:	4000000c 	.word	0x4000000c
    56e0:	40000004 	.word	0x40000004

000056e4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    56e4:	4b16      	ldr	r3, [pc, #88]	; (5740 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    56e6:	b507      	push	{r0, r1, r2, lr}
    56e8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    56ea:	b16a      	cbz	r2, 5708 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56ec:	2200      	movs	r2, #0
    56ee:	601a      	str	r2, [r3, #0]
    56f0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    56f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56f6:	2201      	movs	r2, #1
    56f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    56fc:	4b11      	ldr	r3, [pc, #68]	; (5744 <nrfx_power_clock_irq_handler+0x60>)
    56fe:	7958      	ldrb	r0, [r3, #5]
    5700:	b910      	cbnz	r0, 5708 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    5702:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5708:	4b0f      	ldr	r3, [pc, #60]	; (5748 <nrfx_power_clock_irq_handler+0x64>)
    570a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    570c:	b16a      	cbz	r2, 572a <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    570e:	2000      	movs	r0, #0
    5710:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    5712:	a901      	add	r1, sp, #4
    5714:	681b      	ldr	r3, [r3, #0]
    5716:	f7ff feab 	bl	5470 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    571a:	9a01      	ldr	r2, [sp, #4]
    571c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5720:	b932      	cbnz	r2, 5730 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5722:	2201      	movs	r2, #1
    5724:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5728:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    572a:	b003      	add	sp, #12
    572c:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    5730:	2202      	movs	r2, #2
    5732:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5736:	4b03      	ldr	r3, [pc, #12]	; (5744 <nrfx_power_clock_irq_handler+0x60>)
    5738:	2001      	movs	r0, #1
    573a:	681b      	ldr	r3, [r3, #0]
    573c:	4798      	blx	r3
}
    573e:	e7f4      	b.n	572a <nrfx_power_clock_irq_handler+0x46>
    5740:	40000100 	.word	0x40000100
    5744:	20000f84 	.word	0x20000f84
    5748:	40000104 	.word	0x40000104

0000574c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    574c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    574e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5750:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5752:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    5756:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    5758:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    575c:	d014      	beq.n	5788 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    575e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5762:	fa05 f204 	lsl.w	r2, r5, r4
    5766:	ea23 0202 	bic.w	r2, r3, r2
    576a:	e850 6f00 	ldrex	r6, [r0]
    576e:	429e      	cmp	r6, r3
    5770:	d104      	bne.n	577c <nrfx_flag32_alloc+0x30>
    5772:	e840 2c00 	strex	ip, r2, [r0]
    5776:	f1bc 0f00 	cmp.w	ip, #0
    577a:	d1f6      	bne.n	576a <nrfx_flag32_alloc+0x1e>
    577c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5780:	d1e6      	bne.n	5750 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    5782:	4802      	ldr	r0, [pc, #8]	; (578c <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    5784:	700c      	strb	r4, [r1, #0]
}
    5786:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    5788:	4801      	ldr	r0, [pc, #4]	; (5790 <nrfx_flag32_alloc+0x44>)
    578a:	e7fc      	b.n	5786 <nrfx_flag32_alloc+0x3a>
    578c:	0bad0000 	.word	0x0bad0000
    5790:	0bad0002 	.word	0x0bad0002

00005794 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5794:	6803      	ldr	r3, [r0, #0]
    5796:	40cb      	lsrs	r3, r1
    5798:	07db      	lsls	r3, r3, #31
{
    579a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    579c:	d415      	bmi.n	57ca <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    579e:	2301      	movs	r3, #1
    57a0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    57a4:	6803      	ldr	r3, [r0, #0]
    57a6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    57aa:	ea41 0203 	orr.w	r2, r1, r3
    57ae:	e850 4f00 	ldrex	r4, [r0]
    57b2:	429c      	cmp	r4, r3
    57b4:	d104      	bne.n	57c0 <nrfx_flag32_free+0x2c>
    57b6:	e840 2c00 	strex	ip, r2, [r0]
    57ba:	f1bc 0f00 	cmp.w	ip, #0
    57be:	d1f6      	bne.n	57ae <nrfx_flag32_free+0x1a>
    57c0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    57c4:	d1ee      	bne.n	57a4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    57c6:	4802      	ldr	r0, [pc, #8]	; (57d0 <nrfx_flag32_free+0x3c>)
}
    57c8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    57ca:	4802      	ldr	r0, [pc, #8]	; (57d4 <nrfx_flag32_free+0x40>)
    57cc:	e7fc      	b.n	57c8 <nrfx_flag32_free+0x34>
    57ce:	bf00      	nop
    57d0:	0bad0000 	.word	0x0bad0000
    57d4:	0bad0004 	.word	0x0bad0004

000057d8 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    57d8:	4b05      	ldr	r3, [pc, #20]	; (57f0 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    57da:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    57dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    57e0:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    57e4:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    57e8:	4258      	negs	r0, r3
    57ea:	4158      	adcs	r0, r3
    57ec:	4770      	bx	lr
    57ee:	bf00      	nop
    57f0:	2000010c 	.word	0x2000010c

000057f4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    57f4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    57f6:	f100 0308 	add.w	r3, r0, #8
    57fa:	4c0c      	ldr	r4, [pc, #48]	; (582c <call_handler+0x38>)
    57fc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5800:	05da      	lsls	r2, r3, #23
{
    5802:	4605      	mov	r5, r0
    5804:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5806:	d507      	bpl.n	5818 <call_handler+0x24>
    5808:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    580c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5810:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5814:	6852      	ldr	r2, [r2, #4]
    5816:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5818:	68a3      	ldr	r3, [r4, #8]
    581a:	b12b      	cbz	r3, 5828 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    581c:	68e2      	ldr	r2, [r4, #12]
    581e:	4631      	mov	r1, r6
    5820:	4628      	mov	r0, r5
    }
}
    5822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5826:	4718      	bx	r3
}
    5828:	bd70      	pop	{r4, r5, r6, pc}
    582a:	bf00      	nop
    582c:	2000010c 	.word	0x2000010c

00005830 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5830:	4b19      	ldr	r3, [pc, #100]	; (5898 <release_handler+0x68>)
    5832:	3008      	adds	r0, #8
{
    5834:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5836:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    583a:	05d1      	lsls	r1, r2, #23
    583c:	d51d      	bpl.n	587a <release_handler+0x4a>
    583e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5842:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    5846:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    584a:	f103 0410 	add.w	r4, r3, #16
    584e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5850:	f834 2b02 	ldrh.w	r2, [r4], #2
    5854:	f412 7f80 	tst.w	r2, #256	; 0x100
    5858:	d003      	beq.n	5862 <release_handler+0x32>
    585a:	f3c2 2243 	ubfx	r2, r2, #9, #4
    585e:	4291      	cmp	r1, r2
    5860:	d00b      	beq.n	587a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5862:	3001      	adds	r0, #1
    5864:	2830      	cmp	r0, #48	; 0x30
    5866:	d1f3      	bne.n	5850 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5868:	2200      	movs	r2, #0
    586a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    586e:	480b      	ldr	r0, [pc, #44]	; (589c <release_handler+0x6c>)
    5870:	f7ff ff90 	bl	5794 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5874:	4b0a      	ldr	r3, [pc, #40]	; (58a0 <release_handler+0x70>)
    5876:	4298      	cmp	r0, r3
    5878:	d100      	bne.n	587c <release_handler+0x4c>
}
    587a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    587c:	4909      	ldr	r1, [pc, #36]	; (58a4 <release_handler+0x74>)
    587e:	480a      	ldr	r0, [pc, #40]	; (58a8 <release_handler+0x78>)
    5880:	4a0a      	ldr	r2, [pc, #40]	; (58ac <release_handler+0x7c>)
    5882:	f44f 7399 	mov.w	r3, #306	; 0x132
    5886:	f004 f9e6 	bl	9c56 <printk>
}
    588a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    588e:	4807      	ldr	r0, [pc, #28]	; (58ac <release_handler+0x7c>)
    5890:	f44f 7199 	mov.w	r1, #306	; 0x132
    5894:	f004 b908 	b.w	9aa8 <assert_post_action>
    5898:	2000010c 	.word	0x2000010c
    589c:	20000180 	.word	0x20000180
    58a0:	0bad0000 	.word	0x0bad0000
    58a4:	0000ba0b 	.word	0x0000ba0b
    58a8:	0000ac83 	.word	0x0000ac83
    58ac:	0000b9a7 	.word	0x0000b9a7

000058b0 <pin_handler_trigger_uninit>:
{
    58b0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    58b2:	4c0a      	ldr	r4, [pc, #40]	; (58dc <pin_handler_trigger_uninit+0x2c>)
    58b4:	f100 0508 	add.w	r5, r0, #8
    58b8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    58bc:	069a      	lsls	r2, r3, #26
    58be:	d506      	bpl.n	58ce <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    58c0:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    58c2:	4a07      	ldr	r2, [pc, #28]	; (58e0 <pin_handler_trigger_uninit+0x30>)
    58c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    58c8:	2100      	movs	r1, #0
    58ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    58ce:	f7ff ffaf 	bl	5830 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    58d2:	2300      	movs	r3, #0
    58d4:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    58d8:	bd38      	pop	{r3, r4, r5, pc}
    58da:	bf00      	nop
    58dc:	2000010c 	.word	0x2000010c
    58e0:	40006000 	.word	0x40006000

000058e4 <nrf_gpio_pin_port_decode>:
{
    58e4:	b510      	push	{r4, lr}
    58e6:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    58e8:	6800      	ldr	r0, [r0, #0]
    58ea:	f004 fdbe 	bl	a46a <nrf_gpio_pin_present_check>
    58ee:	b958      	cbnz	r0, 5908 <nrf_gpio_pin_port_decode+0x24>
    58f0:	4912      	ldr	r1, [pc, #72]	; (593c <nrf_gpio_pin_port_decode+0x58>)
    58f2:	4813      	ldr	r0, [pc, #76]	; (5940 <nrf_gpio_pin_port_decode+0x5c>)
    58f4:	4a13      	ldr	r2, [pc, #76]	; (5944 <nrf_gpio_pin_port_decode+0x60>)
    58f6:	f240 2329 	movw	r3, #553	; 0x229
    58fa:	f004 f9ac 	bl	9c56 <printk>
    58fe:	4811      	ldr	r0, [pc, #68]	; (5944 <nrf_gpio_pin_port_decode+0x60>)
    5900:	f240 2129 	movw	r1, #553	; 0x229
    5904:	f004 f8d0 	bl	9aa8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5908:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    590a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    590e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5910:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5912:	d00d      	beq.n	5930 <nrf_gpio_pin_port_decode+0x4c>
    5914:	2b01      	cmp	r3, #1
    5916:	d00e      	beq.n	5936 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    5918:	490b      	ldr	r1, [pc, #44]	; (5948 <nrf_gpio_pin_port_decode+0x64>)
    591a:	4809      	ldr	r0, [pc, #36]	; (5940 <nrf_gpio_pin_port_decode+0x5c>)
    591c:	4a09      	ldr	r2, [pc, #36]	; (5944 <nrf_gpio_pin_port_decode+0x60>)
    591e:	f240 232e 	movw	r3, #558	; 0x22e
    5922:	f004 f998 	bl	9c56 <printk>
    5926:	4807      	ldr	r0, [pc, #28]	; (5944 <nrf_gpio_pin_port_decode+0x60>)
    5928:	f240 212e 	movw	r1, #558	; 0x22e
    592c:	f004 f8bc 	bl	9aa8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5930:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5934:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    5936:	4805      	ldr	r0, [pc, #20]	; (594c <nrf_gpio_pin_port_decode+0x68>)
    5938:	e7fc      	b.n	5934 <nrf_gpio_pin_port_decode+0x50>
    593a:	bf00      	nop
    593c:	0000b88c 	.word	0x0000b88c
    5940:	0000ac83 	.word	0x0000ac83
    5944:	0000b859 	.word	0x0000b859
    5948:	0000ac81 	.word	0x0000ac81
    594c:	50000300 	.word	0x50000300

00005950 <nrfx_gpiote_input_configure>:
{
    5950:	b5f0      	push	{r4, r5, r6, r7, lr}
    5952:	4604      	mov	r4, r0
    5954:	b085      	sub	sp, #20
    5956:	4617      	mov	r7, r2
    5958:	461d      	mov	r5, r3
    if (p_input_config)
    595a:	b1f1      	cbz	r1, 599a <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    595c:	f7ff ff3c 	bl	57d8 <pin_is_task_output>
    5960:	b110      	cbz	r0, 5968 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    5962:	484a      	ldr	r0, [pc, #296]	; (5a8c <nrfx_gpiote_input_configure+0x13c>)
}
    5964:	b005      	add	sp, #20
    5966:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5968:	460b      	mov	r3, r1
    596a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    596e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5972:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5976:	f10d 020f 	add.w	r2, sp, #15
    597a:	f10d 010e 	add.w	r1, sp, #14
    597e:	4620      	mov	r0, r4
    5980:	f004 fd88 	bl	a494 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5984:	4a42      	ldr	r2, [pc, #264]	; (5a90 <nrfx_gpiote_input_configure+0x140>)
    5986:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    598a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    598e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5992:	f043 0301 	orr.w	r3, r3, #1
    5996:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    599a:	b197      	cbz	r7, 59c2 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    599c:	4b3c      	ldr	r3, [pc, #240]	; (5a90 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    599e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    59a0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    59a2:	f104 0008 	add.w	r0, r4, #8
    59a6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    59aa:	078f      	lsls	r7, r1, #30
    59ac:	d50c      	bpl.n	59c8 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    59ae:	2a00      	cmp	r2, #0
    59b0:	d1d7      	bne.n	5962 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    59b2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    59b6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    59ba:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    59be:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    59c2:	bbcd      	cbnz	r5, 5a38 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    59c4:	4833      	ldr	r0, [pc, #204]	; (5a94 <nrfx_gpiote_input_configure+0x144>)
    59c6:	e7cd      	b.n	5964 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    59c8:	f021 0120 	bic.w	r1, r1, #32
    59cc:	04c9      	lsls	r1, r1, #19
    59ce:	0cc9      	lsrs	r1, r1, #19
    59d0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    59d4:	2a00      	cmp	r2, #0
    59d6:	d0ec      	beq.n	59b2 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    59d8:	2e03      	cmp	r6, #3
    59da:	d8c2      	bhi.n	5962 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    59dc:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    59de:	b92e      	cbnz	r6, 59ec <nrfx_gpiote_input_configure+0x9c>
    59e0:	4a2d      	ldr	r2, [pc, #180]	; (5a98 <nrfx_gpiote_input_configure+0x148>)
    59e2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    59e6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    59ea:	e7e2      	b.n	59b2 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    59ec:	00ba      	lsls	r2, r7, #2
    59ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    59f2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    59f6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    59fa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    59fe:	f02c 0c03 	bic.w	ip, ip, #3
    5a02:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5a06:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    5a0a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    5a0e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    5a12:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5a16:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5a1a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    5a1e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    5a22:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    5a26:	ea4c 0c0e 	orr.w	ip, ip, lr
    5a2a:	f041 0120 	orr.w	r1, r1, #32
    5a2e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    5a32:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    5a36:	e7bc      	b.n	59b2 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5a38:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5a3c:	4620      	mov	r0, r4
    5a3e:	f7ff fef7 	bl	5830 <release_handler>
    if (!handler)
    5a42:	2e00      	cmp	r6, #0
    5a44:	d0be      	beq.n	59c4 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5a46:	4d12      	ldr	r5, [pc, #72]	; (5a90 <nrfx_gpiote_input_configure+0x140>)
    5a48:	682b      	ldr	r3, [r5, #0]
    5a4a:	429e      	cmp	r6, r3
    5a4c:	d104      	bne.n	5a58 <nrfx_gpiote_input_configure+0x108>
    5a4e:	686b      	ldr	r3, [r5, #4]
    5a50:	429f      	cmp	r7, r3
    5a52:	d101      	bne.n	5a58 <nrfx_gpiote_input_configure+0x108>
    5a54:	2200      	movs	r2, #0
    5a56:	e00a      	b.n	5a6e <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5a58:	4810      	ldr	r0, [pc, #64]	; (5a9c <nrfx_gpiote_input_configure+0x14c>)
    5a5a:	f10d 010f 	add.w	r1, sp, #15
    5a5e:	f7ff fe75 	bl	574c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5a62:	4b0c      	ldr	r3, [pc, #48]	; (5a94 <nrfx_gpiote_input_configure+0x144>)
    5a64:	4298      	cmp	r0, r3
    5a66:	f47f af7d 	bne.w	5964 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    5a6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5a6e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5a72:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5a76:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5a78:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5a7a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5a7e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5a86:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    5a8a:	e79b      	b.n	59c4 <nrfx_gpiote_input_configure+0x74>
    5a8c:	0bad0004 	.word	0x0bad0004
    5a90:	2000010c 	.word	0x2000010c
    5a94:	0bad0000 	.word	0x0bad0000
    5a98:	40006000 	.word	0x40006000
    5a9c:	20000180 	.word	0x20000180

00005aa0 <nrfx_gpiote_output_configure>:
{
    5aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aa2:	4604      	mov	r4, r0
    5aa4:	b085      	sub	sp, #20
    5aa6:	4615      	mov	r5, r2
    if (p_config)
    5aa8:	b309      	cbz	r1, 5aee <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5aaa:	f100 0708 	add.w	r7, r0, #8
    5aae:	4e31      	ldr	r6, [pc, #196]	; (5b74 <nrfx_gpiote_output_configure+0xd4>)
    5ab0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5ab4:	0798      	lsls	r0, r3, #30
    5ab6:	d401      	bmi.n	5abc <nrfx_gpiote_output_configure+0x1c>
    5ab8:	069a      	lsls	r2, r3, #26
    5aba:	d458      	bmi.n	5b6e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5abc:	f013 0f1c 	tst.w	r3, #28
    5ac0:	d002      	beq.n	5ac8 <nrfx_gpiote_output_configure+0x28>
    5ac2:	784b      	ldrb	r3, [r1, #1]
    5ac4:	2b01      	cmp	r3, #1
    5ac6:	d052      	beq.n	5b6e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5ac8:	2301      	movs	r3, #1
    5aca:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5ace:	2300      	movs	r3, #0
    5ad0:	e9cd 1300 	strd	r1, r3, [sp]
    5ad4:	1c4a      	adds	r2, r1, #1
    5ad6:	1c8b      	adds	r3, r1, #2
    5ad8:	4620      	mov	r0, r4
    5ada:	f10d 010f 	add.w	r1, sp, #15
    5ade:	f004 fcd9 	bl	a494 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5ae2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5ae6:	f043 0303 	orr.w	r3, r3, #3
    5aea:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5aee:	b915      	cbnz	r5, 5af6 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    5af0:	4821      	ldr	r0, [pc, #132]	; (5b78 <nrfx_gpiote_output_configure+0xd8>)
}
    5af2:	b005      	add	sp, #20
    5af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5af6:	4e1f      	ldr	r6, [pc, #124]	; (5b74 <nrfx_gpiote_output_configure+0xd4>)
    5af8:	f104 0708 	add.w	r7, r4, #8
    5afc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5b00:	0783      	lsls	r3, r0, #30
    5b02:	d534      	bpl.n	5b6e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    5b04:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5b08:	4661      	mov	r1, ip
    5b0a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5b0c:	f020 0020 	bic.w	r0, r0, #32
    5b10:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5b14:	04c0      	lsls	r0, r0, #19
    5b16:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5b1a:	0cc0      	lsrs	r0, r0, #19
    5b1c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5b20:	2300      	movs	r3, #0
    5b22:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5b26:	786a      	ldrb	r2, [r5, #1]
    5b28:	2a00      	cmp	r2, #0
    5b2a:	d0e1      	beq.n	5af0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5b2c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5b30:	78ad      	ldrb	r5, [r5, #2]
    5b32:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5b36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5b3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b3e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5b42:	0223      	lsls	r3, r4, #8
    5b44:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5b48:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b4a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5b4e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5b52:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b54:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5b56:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5b5a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b5e:	432b      	orrs	r3, r5
    5b60:	f040 0020 	orr.w	r0, r0, #32
    5b64:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5b68:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5b6c:	e7c0      	b.n	5af0 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    5b6e:	4803      	ldr	r0, [pc, #12]	; (5b7c <nrfx_gpiote_output_configure+0xdc>)
    5b70:	e7bf      	b.n	5af2 <nrfx_gpiote_output_configure+0x52>
    5b72:	bf00      	nop
    5b74:	2000010c 	.word	0x2000010c
    5b78:	0bad0000 	.word	0x0bad0000
    5b7c:	0bad0004 	.word	0x0bad0004

00005b80 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5b80:	4b01      	ldr	r3, [pc, #4]	; (5b88 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5b82:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5b86:	4770      	bx	lr
    5b88:	2000010c 	.word	0x2000010c

00005b8c <nrfx_gpiote_channel_get>:
{
    5b8c:	b538      	push	{r3, r4, r5, lr}
    5b8e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5b90:	460d      	mov	r5, r1
    5b92:	b959      	cbnz	r1, 5bac <nrfx_gpiote_channel_get+0x20>
    5b94:	490b      	ldr	r1, [pc, #44]	; (5bc4 <nrfx_gpiote_channel_get+0x38>)
    5b96:	480c      	ldr	r0, [pc, #48]	; (5bc8 <nrfx_gpiote_channel_get+0x3c>)
    5b98:	4a0c      	ldr	r2, [pc, #48]	; (5bcc <nrfx_gpiote_channel_get+0x40>)
    5b9a:	f240 2335 	movw	r3, #565	; 0x235
    5b9e:	f004 f85a 	bl	9c56 <printk>
    5ba2:	480a      	ldr	r0, [pc, #40]	; (5bcc <nrfx_gpiote_channel_get+0x40>)
    5ba4:	f240 2135 	movw	r1, #565	; 0x235
    5ba8:	f003 ff7e 	bl	9aa8 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5bac:	3408      	adds	r4, #8
    5bae:	4b08      	ldr	r3, [pc, #32]	; (5bd0 <nrfx_gpiote_channel_get+0x44>)
    5bb0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    5bb4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5bb6:	bf43      	ittte	mi
    5bb8:	0b5b      	lsrmi	r3, r3, #13
    5bba:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    5bbc:	4805      	ldrmi	r0, [pc, #20]	; (5bd4 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    5bbe:	4806      	ldrpl	r0, [pc, #24]	; (5bd8 <nrfx_gpiote_channel_get+0x4c>)
}
    5bc0:	bd38      	pop	{r3, r4, r5, pc}
    5bc2:	bf00      	nop
    5bc4:	0000ba1f 	.word	0x0000ba1f
    5bc8:	0000ac83 	.word	0x0000ac83
    5bcc:	0000b9a7 	.word	0x0000b9a7
    5bd0:	2000010c 	.word	0x2000010c
    5bd4:	0bad0000 	.word	0x0bad0000
    5bd8:	0bad0004 	.word	0x0bad0004

00005bdc <nrfx_gpiote_init>:
{
    5bdc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5bde:	4c0e      	ldr	r4, [pc, #56]	; (5c18 <nrfx_gpiote_init+0x3c>)
    5be0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5be4:	b9b5      	cbnz	r5, 5c14 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5be6:	2260      	movs	r2, #96	; 0x60
    5be8:	4629      	mov	r1, r5
    5bea:	f104 0010 	add.w	r0, r4, #16
    5bee:	f004 f898 	bl	9d22 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5bf2:	2006      	movs	r0, #6
    5bf4:	f7fd f994 	bl	2f20 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5bf8:	4b08      	ldr	r3, [pc, #32]	; (5c1c <nrfx_gpiote_init+0x40>)
    return err_code;
    5bfa:	4809      	ldr	r0, [pc, #36]	; (5c20 <nrfx_gpiote_init+0x44>)
    5bfc:	601d      	str	r5, [r3, #0]
    5bfe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5c00:	4b08      	ldr	r3, [pc, #32]	; (5c24 <nrfx_gpiote_init+0x48>)
    5c02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5c06:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5c0a:	2301      	movs	r3, #1
    5c0c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5c10:	6763      	str	r3, [r4, #116]	; 0x74
}
    5c12:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5c14:	4804      	ldr	r0, [pc, #16]	; (5c28 <nrfx_gpiote_init+0x4c>)
    5c16:	e7fc      	b.n	5c12 <nrfx_gpiote_init+0x36>
    5c18:	2000010c 	.word	0x2000010c
    5c1c:	4000617c 	.word	0x4000617c
    5c20:	0bad0000 	.word	0x0bad0000
    5c24:	40006000 	.word	0x40006000
    5c28:	0bad0005 	.word	0x0bad0005

00005c2c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5c2c:	4b03      	ldr	r3, [pc, #12]	; (5c3c <nrfx_gpiote_is_init+0x10>)
    5c2e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5c32:	3800      	subs	r0, #0
    5c34:	bf18      	it	ne
    5c36:	2001      	movne	r0, #1
    5c38:	4770      	bx	lr
    5c3a:	bf00      	nop
    5c3c:	2000010c 	.word	0x2000010c

00005c40 <nrfx_gpiote_channel_free>:
{
    5c40:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5c42:	4801      	ldr	r0, [pc, #4]	; (5c48 <nrfx_gpiote_channel_free+0x8>)
    5c44:	f7ff bda6 	b.w	5794 <nrfx_flag32_free>
    5c48:	2000017c 	.word	0x2000017c

00005c4c <nrfx_gpiote_channel_alloc>:
{
    5c4c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5c4e:	4801      	ldr	r0, [pc, #4]	; (5c54 <nrfx_gpiote_channel_alloc+0x8>)
    5c50:	f7ff bd7c 	b.w	574c <nrfx_flag32_alloc>
    5c54:	2000017c 	.word	0x2000017c

00005c58 <nrfx_gpiote_trigger_enable>:
{
    5c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5c5a:	4d31      	ldr	r5, [pc, #196]	; (5d20 <nrfx_gpiote_trigger_enable+0xc8>)
    5c5c:	f100 0708 	add.w	r7, r0, #8
{
    5c60:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5c62:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    5c66:	f013 0f1c 	tst.w	r3, #28
{
    5c6a:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5c6c:	d10b      	bne.n	5c86 <nrfx_gpiote_trigger_enable+0x2e>
    5c6e:	492d      	ldr	r1, [pc, #180]	; (5d24 <nrfx_gpiote_trigger_enable+0xcc>)
    5c70:	482d      	ldr	r0, [pc, #180]	; (5d28 <nrfx_gpiote_trigger_enable+0xd0>)
    5c72:	4a2e      	ldr	r2, [pc, #184]	; (5d2c <nrfx_gpiote_trigger_enable+0xd4>)
    5c74:	f240 33df 	movw	r3, #991	; 0x3df
    5c78:	f003 ffed 	bl	9c56 <printk>
    5c7c:	482b      	ldr	r0, [pc, #172]	; (5d2c <nrfx_gpiote_trigger_enable+0xd4>)
    5c7e:	f240 31df 	movw	r1, #991	; 0x3df
    5c82:	f003 ff11 	bl	9aa8 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5c86:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5c8a:	0683      	lsls	r3, r0, #26
    5c8c:	d51f      	bpl.n	5cce <nrfx_gpiote_trigger_enable+0x76>
    5c8e:	f010 0302 	ands.w	r3, r0, #2
    5c92:	d11c      	bne.n	5cce <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5c94:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    5c96:	4608      	mov	r0, r1
    5c98:	f004 fbf8 	bl	a48c <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    5c9c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    5ca0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ca4:	6003      	str	r3, [r0, #0]
    5ca6:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5ca8:	008b      	lsls	r3, r1, #2
    5caa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5cae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5cb2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5cb6:	f042 0201 	orr.w	r2, r2, #1
    5cba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    5cbe:	b126      	cbz	r6, 5cca <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    5cc0:	4a1b      	ldr	r2, [pc, #108]	; (5d30 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5cc2:	2301      	movs	r3, #1
    5cc4:	408b      	lsls	r3, r1
    5cc6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5cca:	b003      	add	sp, #12
    5ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    5cce:	b95e      	cbnz	r6, 5ce8 <nrfx_gpiote_trigger_enable+0x90>
    5cd0:	4918      	ldr	r1, [pc, #96]	; (5d34 <nrfx_gpiote_trigger_enable+0xdc>)
    5cd2:	4815      	ldr	r0, [pc, #84]	; (5d28 <nrfx_gpiote_trigger_enable+0xd0>)
    5cd4:	4a15      	ldr	r2, [pc, #84]	; (5d2c <nrfx_gpiote_trigger_enable+0xd4>)
    5cd6:	f240 33ee 	movw	r3, #1006	; 0x3ee
    5cda:	f003 ffbc 	bl	9c56 <printk>
    5cde:	4813      	ldr	r0, [pc, #76]	; (5d2c <nrfx_gpiote_trigger_enable+0xd4>)
    5ce0:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5ce4:	f003 fee0 	bl	9aa8 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5ce8:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    5cec:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5cf0:	2b04      	cmp	r3, #4
    5cf2:	d010      	beq.n	5d16 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5cf4:	2b05      	cmp	r3, #5
    5cf6:	d010      	beq.n	5d1a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5cf8:	a801      	add	r0, sp, #4
    5cfa:	9401      	str	r4, [sp, #4]
    5cfc:	f7ff fdf2 	bl	58e4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5d00:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5d02:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5d06:	40d9      	lsrs	r1, r3
    5d08:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5d0c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5d0e:	4620      	mov	r0, r4
    5d10:	f004 fc0b 	bl	a52a <nrf_gpio_cfg_sense_set>
}
    5d14:	e7d9      	b.n	5cca <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5d16:	2103      	movs	r1, #3
    5d18:	e7f9      	b.n	5d0e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5d1a:	2102      	movs	r1, #2
    5d1c:	e7f7      	b.n	5d0e <nrfx_gpiote_trigger_enable+0xb6>
    5d1e:	bf00      	nop
    5d20:	2000010c 	.word	0x2000010c
    5d24:	0000ba29 	.word	0x0000ba29
    5d28:	0000ac83 	.word	0x0000ac83
    5d2c:	0000b9a7 	.word	0x0000b9a7
    5d30:	40006000 	.word	0x40006000
    5d34:	0000ba3e 	.word	0x0000ba3e

00005d38 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5d38:	4b0e      	ldr	r3, [pc, #56]	; (5d74 <nrfx_gpiote_trigger_disable+0x3c>)
    5d3a:	f100 0208 	add.w	r2, r0, #8
    5d3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d42:	0699      	lsls	r1, r3, #26
    5d44:	d513      	bpl.n	5d6e <nrfx_gpiote_trigger_disable+0x36>
    5d46:	079a      	lsls	r2, r3, #30
    5d48:	d411      	bmi.n	5d6e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d4a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5d4c:	2201      	movs	r2, #1
    5d4e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5d50:	009b      	lsls	r3, r3, #2
    5d52:	4909      	ldr	r1, [pc, #36]	; (5d78 <nrfx_gpiote_trigger_disable+0x40>)
    5d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5d58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5d5c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5d60:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5d64:	f022 0203 	bic.w	r2, r2, #3
    5d68:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5d6c:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5d6e:	2100      	movs	r1, #0
    5d70:	f004 bbdb 	b.w	a52a <nrf_gpio_cfg_sense_set>
    5d74:	2000010c 	.word	0x2000010c
    5d78:	40006000 	.word	0x40006000

00005d7c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5d7c:	4b0e      	ldr	r3, [pc, #56]	; (5db8 <nrfx_gpiote_pin_uninit+0x3c>)
    5d7e:	f100 0208 	add.w	r2, r0, #8
{
    5d82:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5d84:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5d88:	07db      	lsls	r3, r3, #31
{
    5d8a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5d8c:	d511      	bpl.n	5db2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5d8e:	f7ff ffd3 	bl	5d38 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5d92:	4620      	mov	r0, r4
    5d94:	f7ff fd8c 	bl	58b0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5d98:	a801      	add	r0, sp, #4
    5d9a:	9401      	str	r4, [sp, #4]
    5d9c:	f7ff fda2 	bl	58e4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5da0:	9b01      	ldr	r3, [sp, #4]
    5da2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5da6:	2202      	movs	r2, #2
    5da8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5dac:	4803      	ldr	r0, [pc, #12]	; (5dbc <nrfx_gpiote_pin_uninit+0x40>)
}
    5dae:	b002      	add	sp, #8
    5db0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5db2:	4803      	ldr	r0, [pc, #12]	; (5dc0 <nrfx_gpiote_pin_uninit+0x44>)
    5db4:	e7fb      	b.n	5dae <nrfx_gpiote_pin_uninit+0x32>
    5db6:	bf00      	nop
    5db8:	2000010c 	.word	0x2000010c
    5dbc:	0bad0000 	.word	0x0bad0000
    5dc0:	0bad0004 	.word	0x0bad0004

00005dc4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dc8:	4b65      	ldr	r3, [pc, #404]	; (5f60 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    5dca:	4866      	ldr	r0, [pc, #408]	; (5f64 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5dcc:	4966      	ldr	r1, [pc, #408]	; (5f68 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    5dce:	2500      	movs	r5, #0
{
    5dd0:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5dd2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5dd4:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dd6:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5dd8:	b136      	cbz	r6, 5de8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5dda:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    5dde:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5de0:	bf1e      	ittt	ne
    5de2:	601c      	strne	r4, [r3, #0]
    5de4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5de6:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    5de8:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5dea:	428b      	cmp	r3, r1
        mask <<= 1;
    5dec:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5df0:	d1f1      	bne.n	5dd6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5df2:	4f5e      	ldr	r7, [pc, #376]	; (5f6c <nrfx_gpiote_irq_handler+0x1a8>)
    5df4:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5df6:	b37b      	cbz	r3, 5e58 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    5df8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5dfc:	4e5c      	ldr	r6, [pc, #368]	; (5f70 <nrfx_gpiote_irq_handler+0x1ac>)
    5dfe:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5e02:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    5e04:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5e08:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5e0c:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    5e0e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5e12:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5e14:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5e18:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5e1c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    5e20:	f8d9 3000 	ldr.w	r3, [r9]
    5e24:	b9f3      	cbnz	r3, 5e64 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5e26:	f108 0820 	add.w	r8, r8, #32
    5e2a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    5e2e:	f109 0904 	add.w	r9, r9, #4
    5e32:	d1f5      	bne.n	5e20 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5e34:	603b      	str	r3, [r7, #0]
    5e36:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    5e38:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    5e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5e3e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5e42:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    5e44:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5e48:	9b01      	ldr	r3, [sp, #4]
    5e4a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    5e4e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    5e50:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    5e54:	4313      	orrs	r3, r2
    5e56:	d1dd      	bne.n	5e14 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    5e58:	2401      	movs	r4, #1
    while (mask)
    5e5a:	2d00      	cmp	r5, #0
    5e5c:	d168      	bne.n	5f30 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5e5e:	b009      	add	sp, #36	; 0x24
    5e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    5e64:	fa93 f3a3 	rbit	r3, r3
    5e68:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    5e6c:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5e70:	f106 0208 	add.w	r2, r6, #8
    5e74:	4b3f      	ldr	r3, [pc, #252]	; (5f74 <nrfx_gpiote_irq_handler+0x1b0>)
    5e76:	9605      	str	r6, [sp, #20]
    5e78:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    5e7c:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5e80:	08f4      	lsrs	r4, r6, #3
    5e82:	9302      	str	r3, [sp, #8]
    5e84:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    5e86:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    5e88:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5e8c:	fa0b fc00 	lsl.w	ip, fp, r0
    5e90:	5d18      	ldrb	r0, [r3, r4]
    5e92:	ea20 000c 	bic.w	r0, r0, ip
    5e96:	5518      	strb	r0, [r3, r4]
    5e98:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e9a:	a805      	add	r0, sp, #20
    5e9c:	9103      	str	r1, [sp, #12]
    5e9e:	f7ff fd21 	bl	58e4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5ea2:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    5ea4:	9903      	ldr	r1, [sp, #12]
    5ea6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    5eaa:	074b      	lsls	r3, r1, #29
    5eac:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5eb0:	f3c4 4401 	ubfx	r4, r4, #16, #2
    5eb4:	d523      	bpl.n	5efe <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    5eb6:	4651      	mov	r1, sl
    5eb8:	4630      	mov	r0, r6
    5eba:	f7ff fc9b 	bl	57f4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ebe:	a805      	add	r0, sp, #20
    5ec0:	9605      	str	r6, [sp, #20]
    5ec2:	f7ff fd0f 	bl	58e4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5ec6:	9a05      	ldr	r2, [sp, #20]
    5ec8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5ecc:	b2e4      	uxtb	r4, r4
    5ece:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5ed2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5ed6:	4294      	cmp	r4, r2
    5ed8:	d107      	bne.n	5eea <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5eda:	2100      	movs	r1, #0
    5edc:	4630      	mov	r0, r6
    5ede:	f004 fb24 	bl	a52a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5ee2:	4621      	mov	r1, r4
    5ee4:	4630      	mov	r0, r6
    5ee6:	f004 fb20 	bl	a52a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5eea:	a805      	add	r0, sp, #20
    5eec:	9605      	str	r6, [sp, #20]
    5eee:	f7ff fcf9 	bl	58e4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5ef2:	9b05      	ldr	r3, [sp, #20]
    5ef4:	fa0b f303 	lsl.w	r3, fp, r3
    5ef8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    5efc:	e790      	b.n	5e20 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5efe:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5f00:	bf0c      	ite	eq
    5f02:	2103      	moveq	r1, #3
    5f04:	2102      	movne	r1, #2
    5f06:	4630      	mov	r0, r6
    5f08:	f004 fb0f 	bl	a52a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f0c:	9b02      	ldr	r3, [sp, #8]
    5f0e:	2b03      	cmp	r3, #3
    5f10:	d004      	beq.n	5f1c <nrfx_gpiote_irq_handler+0x158>
    5f12:	2c02      	cmp	r4, #2
    5f14:	d107      	bne.n	5f26 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f16:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5f1a:	d1e6      	bne.n	5eea <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    5f1c:	4651      	mov	r1, sl
    5f1e:	4630      	mov	r0, r6
    5f20:	f7ff fc68 	bl	57f4 <call_handler>
    5f24:	e7e1      	b.n	5eea <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f26:	2c03      	cmp	r4, #3
    5f28:	d1df      	bne.n	5eea <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5f2a:	f1ba 0f02 	cmp.w	sl, #2
    5f2e:	e7f4      	b.n	5f1a <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    5f30:	fa95 f3a5 	rbit	r3, r5
    5f34:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5f38:	fa04 f203 	lsl.w	r2, r4, r3
    5f3c:	009b      	lsls	r3, r3, #2
    5f3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5f42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5f46:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5f4a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5f4e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5f52:	f3c0 2005 	ubfx	r0, r0, #8, #6
    5f56:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5f5a:	f7ff fc4b 	bl	57f4 <call_handler>
    5f5e:	e77c      	b.n	5e5a <nrfx_gpiote_irq_handler+0x96>
    5f60:	40006100 	.word	0x40006100
    5f64:	40006000 	.word	0x40006000
    5f68:	40006120 	.word	0x40006120
    5f6c:	4000617c 	.word	0x4000617c
    5f70:	50000300 	.word	0x50000300
    5f74:	2000010c 	.word	0x2000010c

00005f78 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5f78:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5f7a:	4801      	ldr	r0, [pc, #4]	; (5f80 <nrfx_ppi_channel_alloc+0x8>)
    5f7c:	f7ff bbe6 	b.w	574c <nrfx_flag32_alloc>
    5f80:	20000188 	.word	0x20000188

00005f84 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    5f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f88:	4604      	mov	r4, r0
    5f8a:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    5f8c:	4615      	mov	r5, r2
    5f8e:	b95a      	cbnz	r2, 5fa8 <nrf_pwm_sequence_set+0x24>
    5f90:	4932      	ldr	r1, [pc, #200]	; (605c <nrf_pwm_sequence_set+0xd8>)
    5f92:	4833      	ldr	r0, [pc, #204]	; (6060 <nrf_pwm_sequence_set+0xdc>)
    5f94:	4a33      	ldr	r2, [pc, #204]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    5f96:	f240 23a7 	movw	r3, #679	; 0x2a7
    5f9a:	f003 fe5c 	bl	9c56 <printk>
    5f9e:	4831      	ldr	r0, [pc, #196]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    5fa0:	f240 21a7 	movw	r1, #679	; 0x2a7
    5fa4:	f003 fd80 	bl	9aa8 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    5fa8:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    5faa:	b95f      	cbnz	r7, 5fc4 <nrf_pwm_sequence_set+0x40>
    5fac:	492e      	ldr	r1, [pc, #184]	; (6068 <nrf_pwm_sequence_set+0xe4>)
    5fae:	482c      	ldr	r0, [pc, #176]	; (6060 <nrf_pwm_sequence_set+0xdc>)
    5fb0:	4a2c      	ldr	r2, [pc, #176]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    5fb2:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    5fb6:	f003 fe4e 	bl	9c56 <printk>
    5fba:	482a      	ldr	r0, [pc, #168]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    5fbc:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5fc0:	f003 fd72 	bl	9aa8 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    5fc4:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    5fc8:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    5fcc:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    5fce:	2f00      	cmp	r7, #0
    5fd0:	d138      	bne.n	6044 <nrf_pwm_sequence_set+0xc0>
    5fd2:	4926      	ldr	r1, [pc, #152]	; (606c <nrf_pwm_sequence_set+0xe8>)
    5fd4:	4a23      	ldr	r2, [pc, #140]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    5fd6:	4822      	ldr	r0, [pc, #136]	; (6060 <nrf_pwm_sequence_set+0xdc>)
    5fd8:	f240 23bd 	movw	r3, #701	; 0x2bd
    5fdc:	f003 fe3b 	bl	9c56 <printk>
    5fe0:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    5fe4:	481f      	ldr	r0, [pc, #124]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    5fe6:	f003 fd5f 	bl	9aa8 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    5fea:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    5fee:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    5ff0:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    5ff4:	d30b      	bcc.n	600e <nrf_pwm_sequence_set+0x8a>
    5ff6:	491e      	ldr	r1, [pc, #120]	; (6070 <nrf_pwm_sequence_set+0xec>)
    5ff8:	4819      	ldr	r0, [pc, #100]	; (6060 <nrf_pwm_sequence_set+0xdc>)
    5ffa:	4a1a      	ldr	r2, [pc, #104]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    5ffc:	f240 23c7 	movw	r3, #711	; 0x2c7
    6000:	f003 fe29 	bl	9c56 <printk>
    6004:	4817      	ldr	r0, [pc, #92]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    6006:	f240 21c7 	movw	r1, #711	; 0x2c7
    600a:	f003 fd4d 	bl	9aa8 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    600e:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    6010:	ea4f 1846 	mov.w	r8, r6, lsl #5
    6014:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    6018:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    601c:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    6020:	d30b      	bcc.n	603a <nrf_pwm_sequence_set+0xb6>
    6022:	4914      	ldr	r1, [pc, #80]	; (6074 <nrf_pwm_sequence_set+0xf0>)
    6024:	480e      	ldr	r0, [pc, #56]	; (6060 <nrf_pwm_sequence_set+0xdc>)
    6026:	4a0f      	ldr	r2, [pc, #60]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    6028:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    602c:	f003 fe13 	bl	9c56 <printk>
    6030:	480c      	ldr	r0, [pc, #48]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    6032:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    6036:	f003 fd37 	bl	9aa8 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    603a:	4444      	add	r4, r8
    603c:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    6040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    6044:	043b      	lsls	r3, r7, #16
    6046:	d5d0      	bpl.n	5fea <nrf_pwm_sequence_set+0x66>
    6048:	490b      	ldr	r1, [pc, #44]	; (6078 <nrf_pwm_sequence_set+0xf4>)
    604a:	4a06      	ldr	r2, [pc, #24]	; (6064 <nrf_pwm_sequence_set+0xe0>)
    604c:	4804      	ldr	r0, [pc, #16]	; (6060 <nrf_pwm_sequence_set+0xdc>)
    604e:	f240 23be 	movw	r3, #702	; 0x2be
    6052:	f003 fe00 	bl	9c56 <printk>
    6056:	f240 21be 	movw	r1, #702	; 0x2be
    605a:	e7c3      	b.n	5fe4 <nrf_pwm_sequence_set+0x60>
    605c:	0000ba7b 	.word	0x0000ba7b
    6060:	0000ac83 	.word	0x0000ac83
    6064:	0000ba49 	.word	0x0000ba49
    6068:	0000ba90 	.word	0x0000ba90
    606c:	0000baa8 	.word	0x0000baa8
    6070:	0000bad2 	.word	0x0000bad2
    6074:	0000baf3 	.word	0x0000baf3
    6078:	0000bab4 	.word	0x0000bab4

0000607c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    607c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    607e:	0953      	lsrs	r3, r2, #5
{
    6080:	b510      	push	{r4, lr}
    6082:	4604      	mov	r4, r0
    switch (port)
    6084:	d02c      	beq.n	60e0 <nrf_gpio_pin_port_decode+0x64>
    6086:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    6088:	f64f 73ff 	movw	r3, #65535	; 0xffff
    608c:	bf18      	it	ne
    608e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    6090:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6094:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6096:	07db      	lsls	r3, r3, #31
    6098:	d40b      	bmi.n	60b2 <nrf_gpio_pin_port_decode+0x36>
    609a:	4914      	ldr	r1, [pc, #80]	; (60ec <nrf_gpio_pin_port_decode+0x70>)
    609c:	4814      	ldr	r0, [pc, #80]	; (60f0 <nrf_gpio_pin_port_decode+0x74>)
    609e:	4a15      	ldr	r2, [pc, #84]	; (60f4 <nrf_gpio_pin_port_decode+0x78>)
    60a0:	f240 2329 	movw	r3, #553	; 0x229
    60a4:	f003 fdd7 	bl	9c56 <printk>
    60a8:	4812      	ldr	r0, [pc, #72]	; (60f4 <nrf_gpio_pin_port_decode+0x78>)
    60aa:	f240 2129 	movw	r1, #553	; 0x229
    60ae:	f003 fcfb 	bl	9aa8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    60b2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    60b4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    60b8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    60ba:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    60bc:	d00d      	beq.n	60da <nrf_gpio_pin_port_decode+0x5e>
    60be:	2b01      	cmp	r3, #1
    60c0:	d011      	beq.n	60e6 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    60c2:	490d      	ldr	r1, [pc, #52]	; (60f8 <nrf_gpio_pin_port_decode+0x7c>)
    60c4:	480a      	ldr	r0, [pc, #40]	; (60f0 <nrf_gpio_pin_port_decode+0x74>)
    60c6:	4a0b      	ldr	r2, [pc, #44]	; (60f4 <nrf_gpio_pin_port_decode+0x78>)
    60c8:	f240 232e 	movw	r3, #558	; 0x22e
    60cc:	f003 fdc3 	bl	9c56 <printk>
    60d0:	4808      	ldr	r0, [pc, #32]	; (60f4 <nrf_gpio_pin_port_decode+0x78>)
    60d2:	f240 212e 	movw	r1, #558	; 0x22e
    60d6:	f003 fce7 	bl	9aa8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    60da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    60de:	bd10      	pop	{r4, pc}
    switch (port)
    60e0:	f04f 33ff 	mov.w	r3, #4294967295
    60e4:	e7d4      	b.n	6090 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    60e6:	4805      	ldr	r0, [pc, #20]	; (60fc <nrf_gpio_pin_port_decode+0x80>)
    60e8:	e7f9      	b.n	60de <nrf_gpio_pin_port_decode+0x62>
    60ea:	bf00      	nop
    60ec:	0000b88c 	.word	0x0000b88c
    60f0:	0000ac83 	.word	0x0000ac83
    60f4:	0000b859 	.word	0x0000b859
    60f8:	0000ac81 	.word	0x0000ac81
    60fc:	50000300 	.word	0x50000300

00006100 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    6100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6104:	4606      	mov	r6, r0
    6106:	b087      	sub	sp, #28
    6108:	4691      	mov	r9, r2
    610a:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    610c:	460c      	mov	r4, r1
    610e:	b949      	cbnz	r1, 6124 <nrfx_pwm_init+0x24>
    6110:	4959      	ldr	r1, [pc, #356]	; (6278 <nrfx_pwm_init+0x178>)
    6112:	485a      	ldr	r0, [pc, #360]	; (627c <nrfx_pwm_init+0x17c>)
    6114:	4a5a      	ldr	r2, [pc, #360]	; (6280 <nrfx_pwm_init+0x180>)
    6116:	238c      	movs	r3, #140	; 0x8c
    6118:	f003 fd9d 	bl	9c56 <printk>
    611c:	4858      	ldr	r0, [pc, #352]	; (6280 <nrfx_pwm_init+0x180>)
    611e:	218c      	movs	r1, #140	; 0x8c
    6120:	f003 fcc2 	bl	9aa8 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6124:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6126:	4d57      	ldr	r5, [pc, #348]	; (6284 <nrfx_pwm_init+0x184>)
    6128:	210c      	movs	r1, #12
    612a:	4379      	muls	r1, r7
    612c:	186b      	adds	r3, r5, r1
    612e:	7a1a      	ldrb	r2, [r3, #8]
    6130:	2a00      	cmp	r2, #0
    6132:	f040 809f 	bne.w	6274 <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    6136:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    6138:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    613c:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    6140:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    6142:	2a00      	cmp	r2, #0
    6144:	d04d      	beq.n	61e2 <nrfx_pwm_init+0xe2>
    6146:	7b63      	ldrb	r3, [r4, #13]
    6148:	2b00      	cmp	r3, #0
    614a:	d04a      	beq.n	61e2 <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    614c:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    6150:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    6154:	2301      	movs	r3, #1
    6156:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    615a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    615e:	f894 b005 	ldrb.w	fp, [r4, #5]
    6162:	f894 a006 	ldrb.w	sl, [r4, #6]
    6166:	2b00      	cmp	r3, #0
    6168:	da0b      	bge.n	6182 <nrfx_pwm_init+0x82>
    616a:	4947      	ldr	r1, [pc, #284]	; (6288 <nrfx_pwm_init+0x188>)
    616c:	4843      	ldr	r0, [pc, #268]	; (627c <nrfx_pwm_init+0x17c>)
    616e:	4a47      	ldr	r2, [pc, #284]	; (628c <nrfx_pwm_init+0x18c>)
    6170:	f44f 7327 	mov.w	r3, #668	; 0x29c
    6174:	f003 fd6f 	bl	9c56 <printk>
    6178:	4844      	ldr	r0, [pc, #272]	; (628c <nrfx_pwm_init+0x18c>)
    617a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    617e:	f003 fc93 	bl	9aa8 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    6182:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    6186:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    6188:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    618c:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    6190:	8963      	ldrh	r3, [r4, #10]
    6192:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    6196:	2300      	movs	r3, #0
    6198:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    619c:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61a0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    61a4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    61a8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    61ac:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    61b0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    61b4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    61b8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    61bc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    61c0:	230c      	movs	r3, #12
    61c2:	437b      	muls	r3, r7
    61c4:	58eb      	ldr	r3, [r5, r3]
    61c6:	b11b      	cbz	r3, 61d0 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    61c8:	f340 3007 	sbfx	r0, r0, #12, #8
    61cc:	f7fc fea8 	bl	2f20 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    61d0:	230c      	movs	r3, #12
    61d2:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    61d6:	482e      	ldr	r0, [pc, #184]	; (6290 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    61d8:	2301      	movs	r3, #1
    61da:	722b      	strb	r3, [r5, #8]
}
    61dc:	b007      	add	sp, #28
    61de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61e2:	f104 39ff 	add.w	r9, r4, #4294967295
    61e6:	f10d 0808 	add.w	r8, sp, #8
    61ea:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    61ee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    61f2:	2aff      	cmp	r2, #255	; 0xff
    61f4:	d039      	beq.n	626a <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    61f6:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    61f8:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    61fc:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    6200:	b9b1      	cbnz	r1, 6230 <nrfx_pwm_init+0x130>
    if (value == 0)
    6202:	0613      	lsls	r3, r2, #24
    6204:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6208:	a801      	add	r0, sp, #4
    if (value == 0)
    620a:	d426      	bmi.n	625a <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    620c:	f7ff ff36 	bl	607c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6210:	9901      	ldr	r1, [sp, #4]
    6212:	2201      	movs	r2, #1
    6214:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    6216:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    621a:	a801      	add	r0, sp, #4
    621c:	f8cd b004 	str.w	fp, [sp, #4]
    6220:	f7ff ff2c 	bl	607c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6224:	9b01      	ldr	r3, [sp, #4]
    6226:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    622a:	2203      	movs	r2, #3
    622c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    6230:	45d1      	cmp	r9, sl
    6232:	f108 0804 	add.w	r8, r8, #4
    6236:	d1da      	bne.n	61ee <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    6238:	7b63      	ldrb	r3, [r4, #13]
    623a:	2b00      	cmp	r3, #0
    623c:	d186      	bne.n	614c <nrfx_pwm_init+0x4c>
    623e:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    6240:	9a02      	ldr	r2, [sp, #8]
    6242:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    6246:	9a03      	ldr	r2, [sp, #12]
    6248:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    624c:	9a04      	ldr	r2, [sp, #16]
    624e:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    6252:	9a05      	ldr	r2, [sp, #20]
    6254:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    6258:	e778      	b.n	614c <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    625a:	f7ff ff0f 	bl	607c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    625e:	9901      	ldr	r1, [sp, #4]
    6260:	2201      	movs	r2, #1
    6262:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    6264:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    6268:	e7d7      	b.n	621a <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    626a:	f04f 33ff 	mov.w	r3, #4294967295
    626e:	f8c8 3000 	str.w	r3, [r8]
    6272:	e7dd      	b.n	6230 <nrfx_pwm_init+0x130>
        return err_code;
    6274:	4807      	ldr	r0, [pc, #28]	; (6294 <nrfx_pwm_init+0x194>)
    6276:	e7b1      	b.n	61dc <nrfx_pwm_init+0xdc>
    6278:	0000bb51 	.word	0x0000bb51
    627c:	0000ac83 	.word	0x0000ac83
    6280:	0000bb16 	.word	0x0000bb16
    6284:	20000f8c 	.word	0x20000f8c
    6288:	0000bb5a 	.word	0x0000bb5a
    628c:	0000ba49 	.word	0x0000ba49
    6290:	0bad0000 	.word	0x0bad0000
    6294:	0bad0005 	.word	0x0bad0005

00006298 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    6298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    629c:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    629e:	7903      	ldrb	r3, [r0, #4]
{
    62a0:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    62a2:	4a31      	ldr	r2, [pc, #196]	; (6368 <nrfx_pwm_simple_playback+0xd0>)
{
    62a4:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    62a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    62aa:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    62ae:	210c      	movs	r1, #12
    62b0:	fb01 2303 	mla	r3, r1, r3, r2
{
    62b4:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    62b6:	7a1b      	ldrb	r3, [r3, #8]
    62b8:	b95b      	cbnz	r3, 62d2 <nrfx_pwm_simple_playback+0x3a>
    62ba:	492c      	ldr	r1, [pc, #176]	; (636c <nrfx_pwm_simple_playback+0xd4>)
    62bc:	482c      	ldr	r0, [pc, #176]	; (6370 <nrfx_pwm_simple_playback+0xd8>)
    62be:	4a2d      	ldr	r2, [pc, #180]	; (6374 <nrfx_pwm_simple_playback+0xdc>)
    62c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
    62c4:	f003 fcc7 	bl	9c56 <printk>
    62c8:	482a      	ldr	r0, [pc, #168]	; (6374 <nrfx_pwm_simple_playback+0xdc>)
    62ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
    62ce:	f003 fbeb 	bl	9aa8 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    62d2:	b95c      	cbnz	r4, 62ec <nrfx_pwm_simple_playback+0x54>
    62d4:	4928      	ldr	r1, [pc, #160]	; (6378 <nrfx_pwm_simple_playback+0xe0>)
    62d6:	4826      	ldr	r0, [pc, #152]	; (6370 <nrfx_pwm_simple_playback+0xd8>)
    62d8:	4a26      	ldr	r2, [pc, #152]	; (6374 <nrfx_pwm_simple_playback+0xdc>)
    62da:	f240 132d 	movw	r3, #301	; 0x12d
    62de:	f003 fcba 	bl	9c56 <printk>
    62e2:	4824      	ldr	r0, [pc, #144]	; (6374 <nrfx_pwm_simple_playback+0xdc>)
    62e4:	f240 112d 	movw	r1, #301	; 0x12d
    62e8:	f003 fbde 	bl	9aa8 <assert_post_action>
    62ec:	6833      	ldr	r3, [r6, #0]
    62ee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    62f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    62f6:	d00b      	beq.n	6310 <nrfx_pwm_simple_playback+0x78>
    62f8:	4920      	ldr	r1, [pc, #128]	; (637c <nrfx_pwm_simple_playback+0xe4>)
    62fa:	481d      	ldr	r0, [pc, #116]	; (6370 <nrfx_pwm_simple_playback+0xd8>)
    62fc:	4a1d      	ldr	r2, [pc, #116]	; (6374 <nrfx_pwm_simple_playback+0xdc>)
    62fe:	f44f 7397 	mov.w	r3, #302	; 0x12e
    6302:	f003 fca8 	bl	9c56 <printk>
    6306:	481b      	ldr	r0, [pc, #108]	; (6374 <nrfx_pwm_simple_playback+0xdc>)
    6308:	f44f 7197 	mov.w	r1, #302	; 0x12e
    630c:	f003 fbcc 	bl	9aa8 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    6310:	6828      	ldr	r0, [r5, #0]
    6312:	4632      	mov	r2, r6
    6314:	2100      	movs	r1, #0
    6316:	f7ff fe35 	bl	5f84 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    631a:	6828      	ldr	r0, [r5, #0]
    631c:	4632      	mov	r2, r6
    631e:	2101      	movs	r1, #1
    6320:	f7ff fe30 	bl	5f84 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    6324:	6828      	ldr	r0, [r5, #0]
    6326:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    632a:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    632e:	f018 0f01 	tst.w	r8, #1
    6332:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    6336:	d114      	bne.n	6362 <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    6338:	f018 0202 	ands.w	r2, r8, #2
    633c:	d003      	beq.n	6346 <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    633e:	2b00      	cmp	r3, #0
    6340:	bf14      	ite	ne
    6342:	2208      	movne	r2, #8
    6344:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    6346:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    6348:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    634c:	4639      	mov	r1, r7
    634e:	fa5f f288 	uxtb.w	r2, r8
    6352:	bf18      	it	ne
    6354:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    6356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    635a:	bf08      	it	eq
    635c:	2308      	moveq	r3, #8
    635e:	f004 b8f3 	b.w	a548 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    6362:	2210      	movs	r2, #16
    6364:	e7ef      	b.n	6346 <nrfx_pwm_simple_playback+0xae>
    6366:	bf00      	nop
    6368:	20000f8c 	.word	0x20000f8c
    636c:	0000bb7b 	.word	0x0000bb7b
    6370:	0000ac83 	.word	0x0000ac83
    6374:	0000bb16 	.word	0x0000bb16
    6378:	0000bba7 	.word	0x0000bba7
    637c:	0000bbba 	.word	0x0000bbba

00006380 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    6380:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    6382:	4e12      	ldr	r6, [pc, #72]	; (63cc <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6384:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    6386:	220c      	movs	r2, #12
    6388:	fb02 6204 	mla	r2, r2, r4, r6
{
    638c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    638e:	7a12      	ldrb	r2, [r2, #8]
    6390:	b95a      	cbnz	r2, 63aa <nrfx_pwm_is_stopped+0x2a>
    6392:	490f      	ldr	r1, [pc, #60]	; (63d0 <nrfx_pwm_is_stopped+0x50>)
    6394:	480f      	ldr	r0, [pc, #60]	; (63d4 <nrfx_pwm_is_stopped+0x54>)
    6396:	4a10      	ldr	r2, [pc, #64]	; (63d8 <nrfx_pwm_is_stopped+0x58>)
    6398:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    639c:	f003 fc5b 	bl	9c56 <printk>
    63a0:	480d      	ldr	r0, [pc, #52]	; (63d8 <nrfx_pwm_is_stopped+0x58>)
    63a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    63a6:	f003 fb7f 	bl	9aa8 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    63aa:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    63ac:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    63ae:	fb03 6404 	mla	r4, r3, r4, r6
    63b2:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    63b4:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    63b8:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    63ba:	b91a      	cbnz	r2, 63c4 <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    63bc:	1e98      	subs	r0, r3, #2
    63be:	bf18      	it	ne
    63c0:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    63c2:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    63c4:	2001      	movs	r0, #1
    63c6:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    63c8:	e7fb      	b.n	63c2 <nrfx_pwm_is_stopped+0x42>
    63ca:	bf00      	nop
    63cc:	20000f8c 	.word	0x20000f8c
    63d0:	0000bb7b 	.word	0x0000bb7b
    63d4:	0000ac83 	.word	0x0000ac83
    63d8:	0000bb16 	.word	0x0000bb16

000063dc <nrfx_pwm_stop>:
{
    63dc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    63de:	4a14      	ldr	r2, [pc, #80]	; (6430 <nrfx_pwm_stop+0x54>)
    63e0:	7903      	ldrb	r3, [r0, #4]
{
    63e2:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    63e4:	210c      	movs	r1, #12
    63e6:	fb01 2303 	mla	r3, r1, r3, r2
{
    63ea:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    63ec:	7a1b      	ldrb	r3, [r3, #8]
    63ee:	b95b      	cbnz	r3, 6408 <nrfx_pwm_stop+0x2c>
    63f0:	4910      	ldr	r1, [pc, #64]	; (6434 <nrfx_pwm_stop+0x58>)
    63f2:	4811      	ldr	r0, [pc, #68]	; (6438 <nrfx_pwm_stop+0x5c>)
    63f4:	4a11      	ldr	r2, [pc, #68]	; (643c <nrfx_pwm_stop+0x60>)
    63f6:	f240 1385 	movw	r3, #389	; 0x185
    63fa:	f003 fc2c 	bl	9c56 <printk>
    63fe:	480f      	ldr	r0, [pc, #60]	; (643c <nrfx_pwm_stop+0x60>)
    6400:	f240 1185 	movw	r1, #389	; 0x185
    6404:	f003 fb50 	bl	9aa8 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    6408:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    640a:	2200      	movs	r2, #0
    640c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6410:	2201      	movs	r2, #1
    6412:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    6414:	4620      	mov	r0, r4
    6416:	f7ff ffb3 	bl	6380 <nrfx_pwm_is_stopped>
    641a:	b938      	cbnz	r0, 642c <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    641c:	4620      	mov	r0, r4
    641e:	f7ff ffaf 	bl	6380 <nrfx_pwm_is_stopped>
    6422:	b918      	cbnz	r0, 642c <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    6424:	2d00      	cmp	r5, #0
    6426:	d1f9      	bne.n	641c <nrfx_pwm_stop+0x40>
}
    6428:	4628      	mov	r0, r5
    642a:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    642c:	2501      	movs	r5, #1
    642e:	e7fb      	b.n	6428 <nrfx_pwm_stop+0x4c>
    6430:	20000f8c 	.word	0x20000f8c
    6434:	0000bbe3 	.word	0x0000bbe3
    6438:	0000ac83 	.word	0x0000ac83
    643c:	0000bb16 	.word	0x0000bb16

00006440 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6440:	4b03      	ldr	r3, [pc, #12]	; (6450 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    6442:	6818      	ldr	r0, [r3, #0]
}
    6444:	f1a0 0308 	sub.w	r3, r0, #8
    6448:	4258      	negs	r0, r3
    644a:	4158      	adcs	r0, r3
    644c:	4770      	bx	lr
    644e:	bf00      	nop
    6450:	10000130 	.word	0x10000130

00006454 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6454:	4b06      	ldr	r3, [pc, #24]	; (6470 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    6456:	681b      	ldr	r3, [r3, #0]
    6458:	2b08      	cmp	r3, #8
    645a:	d106      	bne.n	646a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    645c:	4b05      	ldr	r3, [pc, #20]	; (6474 <nrf52_errata_103+0x20>)
    645e:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    6460:	2b05      	cmp	r3, #5
    6462:	d802      	bhi.n	646a <nrf52_errata_103+0x16>
    6464:	4a04      	ldr	r2, [pc, #16]	; (6478 <nrf52_errata_103+0x24>)
    6466:	5cd0      	ldrb	r0, [r2, r3]
    6468:	4770      	bx	lr
        return false;
    646a:	2000      	movs	r0, #0
}
    646c:	4770      	bx	lr
    646e:	bf00      	nop
    6470:	10000130 	.word	0x10000130
    6474:	10000134 	.word	0x10000134
    6478:	0000bc2e 	.word	0x0000bc2e

0000647c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    647c:	4a02      	ldr	r2, [pc, #8]	; (6488 <nvmc_wait+0xc>)
    647e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    6482:	2b00      	cmp	r3, #0
    6484:	d0fb      	beq.n	647e <nvmc_wait+0x2>
}
    6486:	4770      	bx	lr
    6488:	4001e000 	.word	0x4001e000

0000648c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    648c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    648e:	f7ff ffd7 	bl	6440 <nrf52_errata_136>
    6492:	b140      	cbz	r0, 64a6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6498:	2200      	movs	r2, #0
    649a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    649e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    64a2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    64a6:	f7ff ffcb 	bl	6440 <nrf52_errata_136>
    64aa:	2800      	cmp	r0, #0
    64ac:	d046      	beq.n	653c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    64ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    64b2:	4b5b      	ldr	r3, [pc, #364]	; (6620 <SystemInit+0x194>)
    64b4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    64b8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    64bc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    64c0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    64c4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    64c8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    64cc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    64d0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    64d4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    64d8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    64dc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    64e0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    64e4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    64e8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    64ec:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    64f0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    64f4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    64f8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    64fc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    6500:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    6504:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    6508:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    650c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    6510:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6514:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    6518:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    651c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    6520:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6524:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    6528:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    652c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6530:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6534:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    6538:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    653c:	f7ff ff8a 	bl	6454 <nrf52_errata_103>
    6540:	b110      	cbz	r0, 6548 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    6542:	4b38      	ldr	r3, [pc, #224]	; (6624 <SystemInit+0x198>)
    6544:	4a38      	ldr	r2, [pc, #224]	; (6628 <SystemInit+0x19c>)
    6546:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    6548:	f7ff ff84 	bl	6454 <nrf52_errata_103>
    654c:	b118      	cbz	r0, 6556 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    654e:	4b37      	ldr	r3, [pc, #220]	; (662c <SystemInit+0x1a0>)
    6550:	22fb      	movs	r2, #251	; 0xfb
    6552:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6556:	f7ff ff7d 	bl	6454 <nrf52_errata_103>
    655a:	b148      	cbz	r0, 6570 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    655c:	4934      	ldr	r1, [pc, #208]	; (6630 <SystemInit+0x1a4>)
    655e:	4b35      	ldr	r3, [pc, #212]	; (6634 <SystemInit+0x1a8>)
    6560:	680a      	ldr	r2, [r1, #0]
    6562:	681b      	ldr	r3, [r3, #0]
    6564:	f022 020f 	bic.w	r2, r2, #15
    6568:	f003 030f 	and.w	r3, r3, #15
    656c:	4313      	orrs	r3, r2
    656e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6570:	f7ff ff70 	bl	6454 <nrf52_errata_103>
    6574:	b118      	cbz	r0, 657e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    6576:	4b30      	ldr	r3, [pc, #192]	; (6638 <SystemInit+0x1ac>)
    6578:	f44f 7200 	mov.w	r2, #512	; 0x200
    657c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    657e:	f7ff ff5f 	bl	6440 <nrf52_errata_136>
    6582:	b148      	cbz	r0, 6598 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6588:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    658c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    658e:	bf44      	itt	mi
    6590:	f06f 0201 	mvnmi.w	r2, #1
    6594:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6598:	4b28      	ldr	r3, [pc, #160]	; (663c <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    659a:	681b      	ldr	r3, [r3, #0]
    659c:	2b08      	cmp	r3, #8
    659e:	d10e      	bne.n	65be <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    65a0:	4b27      	ldr	r3, [pc, #156]	; (6640 <SystemInit+0x1b4>)
    65a2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    65a4:	2b05      	cmp	r3, #5
    65a6:	d802      	bhi.n	65ae <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    65a8:	4a26      	ldr	r2, [pc, #152]	; (6644 <SystemInit+0x1b8>)
    65aa:	5cd3      	ldrb	r3, [r2, r3]
    65ac:	b13b      	cbz	r3, 65be <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    65ae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    65b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    65b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65ba:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    65be:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    65c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    65c6:	2a00      	cmp	r2, #0
    65c8:	db03      	blt.n	65d2 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    65ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    65ce:	2b00      	cmp	r3, #0
    65d0:	da22      	bge.n	6618 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    65d2:	491d      	ldr	r1, [pc, #116]	; (6648 <SystemInit+0x1bc>)
    65d4:	2301      	movs	r3, #1
    65d6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    65da:	f7ff ff4f 	bl	647c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    65de:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    65e2:	2412      	movs	r4, #18
    65e4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    65e8:	f7ff ff48 	bl	647c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    65ec:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    65f0:	f7ff ff44 	bl	647c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    65f4:	2300      	movs	r3, #0
    65f6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    65fa:	f7ff ff3f 	bl	647c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    65fe:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6602:	4912      	ldr	r1, [pc, #72]	; (664c <SystemInit+0x1c0>)
    6604:	4b12      	ldr	r3, [pc, #72]	; (6650 <SystemInit+0x1c4>)
    6606:	68ca      	ldr	r2, [r1, #12]
    6608:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    660c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    660e:	60cb      	str	r3, [r1, #12]
    6610:	f3bf 8f4f 	dsb	sy
    __NOP();
    6614:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6616:	e7fd      	b.n	6614 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6618:	4b0e      	ldr	r3, [pc, #56]	; (6654 <SystemInit+0x1c8>)
    661a:	4a0f      	ldr	r2, [pc, #60]	; (6658 <SystemInit+0x1cc>)
    661c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    661e:	bd10      	pop	{r4, pc}
    6620:	4000c000 	.word	0x4000c000
    6624:	4000568c 	.word	0x4000568c
    6628:	00038148 	.word	0x00038148
    662c:	4000f000 	.word	0x4000f000
    6630:	40000ee4 	.word	0x40000ee4
    6634:	10000258 	.word	0x10000258
    6638:	40029640 	.word	0x40029640
    663c:	10000130 	.word	0x10000130
    6640:	10000134 	.word	0x10000134
    6644:	0000bc28 	.word	0x0000bc28
    6648:	4001e000 	.word	0x4001e000
    664c:	e000ed00 	.word	0xe000ed00
    6650:	05fa0004 	.word	0x05fa0004
    6654:	2000018c 	.word	0x2000018c
    6658:	03d09000 	.word	0x03d09000

0000665c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    665c:	4b0e      	ldr	r3, [pc, #56]	; (6698 <z_sys_init_run_level+0x3c>)
{
    665e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6660:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6664:	3001      	adds	r0, #1
    6666:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    666a:	42a6      	cmp	r6, r4
    666c:	d800      	bhi.n	6670 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    666e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    6670:	e9d4 3500 	ldrd	r3, r5, [r4]
    6674:	4628      	mov	r0, r5
    6676:	4798      	blx	r3
		if (dev != NULL) {
    6678:	b165      	cbz	r5, 6694 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    667a:	68eb      	ldr	r3, [r5, #12]
    667c:	b130      	cbz	r0, 668c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    667e:	2800      	cmp	r0, #0
    6680:	bfb8      	it	lt
    6682:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    6684:	28ff      	cmp	r0, #255	; 0xff
    6686:	bfa8      	it	ge
    6688:	20ff      	movge	r0, #255	; 0xff
    668a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    668c:	785a      	ldrb	r2, [r3, #1]
    668e:	f042 0201 	orr.w	r2, r2, #1
    6692:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6694:	3408      	adds	r4, #8
    6696:	e7e8      	b.n	666a <z_sys_init_run_level+0xe>
    6698:	0000ab6c 	.word	0x0000ab6c

0000669c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    669c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    669e:	4605      	mov	r5, r0
    66a0:	b910      	cbnz	r0, 66a8 <z_impl_device_get_binding+0xc>
		return NULL;
    66a2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    66a4:	4620      	mov	r0, r4
    66a6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    66a8:	7803      	ldrb	r3, [r0, #0]
    66aa:	2b00      	cmp	r3, #0
    66ac:	d0f9      	beq.n	66a2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    66ae:	4a0f      	ldr	r2, [pc, #60]	; (66ec <z_impl_device_get_binding+0x50>)
    66b0:	4c0f      	ldr	r4, [pc, #60]	; (66f0 <z_impl_device_get_binding+0x54>)
    66b2:	4616      	mov	r6, r2
    66b4:	4294      	cmp	r4, r2
    66b6:	d108      	bne.n	66ca <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    66b8:	4c0d      	ldr	r4, [pc, #52]	; (66f0 <z_impl_device_get_binding+0x54>)
    66ba:	42b4      	cmp	r4, r6
    66bc:	d0f1      	beq.n	66a2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    66be:	4620      	mov	r0, r4
    66c0:	f003 ff66 	bl	a590 <z_device_ready>
    66c4:	b950      	cbnz	r0, 66dc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    66c6:	3418      	adds	r4, #24
    66c8:	e7f7      	b.n	66ba <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    66ca:	4620      	mov	r0, r4
    66cc:	f003 ff60 	bl	a590 <z_device_ready>
    66d0:	b110      	cbz	r0, 66d8 <z_impl_device_get_binding+0x3c>
    66d2:	6823      	ldr	r3, [r4, #0]
    66d4:	42ab      	cmp	r3, r5
    66d6:	d0e5      	beq.n	66a4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    66d8:	3418      	adds	r4, #24
    66da:	e7eb      	b.n	66b4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    66dc:	6821      	ldr	r1, [r4, #0]
    66de:	4628      	mov	r0, r5
    66e0:	f003 fb08 	bl	9cf4 <strcmp>
    66e4:	2800      	cmp	r0, #0
    66e6:	d1ee      	bne.n	66c6 <z_impl_device_get_binding+0x2a>
    66e8:	e7dc      	b.n	66a4 <z_impl_device_get_binding+0x8>
    66ea:	bf00      	nop
    66ec:	0000a824 	.word	0x0000a824
    66f0:	0000a77c 	.word	0x0000a77c

000066f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    66f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66f6:	4604      	mov	r4, r0
    66f8:	460e      	mov	r6, r1
	__asm__ volatile(
    66fa:	f04f 0320 	mov.w	r3, #32
    66fe:	f3ef 8711 	mrs	r7, BASEPRI
    6702:	f383 8812 	msr	BASEPRI_MAX, r3
    6706:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    670a:	f001 fdb3 	bl	8274 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    670e:	4631      	mov	r1, r6
    6710:	4605      	mov	r5, r0
    6712:	4620      	mov	r0, r4
    6714:	f003 fe97 	bl	a446 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    6718:	2c04      	cmp	r4, #4
    671a:	d10c      	bne.n	6736 <z_fatal_error+0x42>
    671c:	490a      	ldr	r1, [pc, #40]	; (6748 <z_fatal_error+0x54>)
    671e:	4a0b      	ldr	r2, [pc, #44]	; (674c <z_fatal_error+0x58>)
    6720:	480b      	ldr	r0, [pc, #44]	; (6750 <z_fatal_error+0x5c>)
    6722:	238f      	movs	r3, #143	; 0x8f
    6724:	f003 fa97 	bl	9c56 <printk>
    6728:	480a      	ldr	r0, [pc, #40]	; (6754 <z_fatal_error+0x60>)
    672a:	f003 fa94 	bl	9c56 <printk>
    672e:	4807      	ldr	r0, [pc, #28]	; (674c <z_fatal_error+0x58>)
    6730:	218f      	movs	r1, #143	; 0x8f
    6732:	f003 f9b9 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    6736:	f387 8811 	msr	BASEPRI, r7
    673a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    673e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6744:	f7fc be98 	b.w	3478 <z_impl_k_thread_abort>
    6748:	0000bc56 	.word	0x0000bc56
    674c:	0000bc34 	.word	0x0000bc34
    6750:	0000ac83 	.word	0x0000ac83
    6754:	0000bc73 	.word	0x0000bc73

00006758 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6758:	4c11      	ldr	r4, [pc, #68]	; (67a0 <idle+0x48>)
    675a:	68a2      	ldr	r2, [r4, #8]
    675c:	f992 200e 	ldrsb.w	r2, [r2, #14]
    6760:	2a00      	cmp	r2, #0
{
    6762:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6764:	da09      	bge.n	677a <idle+0x22>
    6766:	490f      	ldr	r1, [pc, #60]	; (67a4 <idle+0x4c>)
    6768:	480f      	ldr	r0, [pc, #60]	; (67a8 <idle+0x50>)
    676a:	4a10      	ldr	r2, [pc, #64]	; (67ac <idle+0x54>)
    676c:	2327      	movs	r3, #39	; 0x27
    676e:	f003 fa72 	bl	9c56 <printk>
    6772:	480e      	ldr	r0, [pc, #56]	; (67ac <idle+0x54>)
    6774:	2127      	movs	r1, #39	; 0x27
    6776:	f003 f997 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    677a:	f04f 0220 	mov.w	r2, #32
    677e:	f3ef 8311 	mrs	r3, BASEPRI
    6782:	f382 8812 	msr	BASEPRI_MAX, r2
    6786:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    678a:	f002 fa69 	bl	8c60 <z_get_next_timeout_expiry>
    678e:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    6790:	f7fc fa9a 	bl	2cc8 <pm_system_suspend>
    6794:	2800      	cmp	r0, #0
    6796:	d1f0      	bne.n	677a <idle+0x22>
	arch_cpu_idle();
    6798:	f7fc fb4c 	bl	2e34 <arch_cpu_idle>
}
    679c:	e7ed      	b.n	677a <idle+0x22>
    679e:	bf00      	nop
    67a0:	20000f98 	.word	0x20000f98
    67a4:	0000bcc9 	.word	0x0000bcc9
    67a8:	0000ac83 	.word	0x0000ac83
    67ac:	0000bca8 	.word	0x0000bca8

000067b0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    67b0:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    67b2:	2300      	movs	r3, #0
{
    67b4:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    67b6:	2201      	movs	r2, #1
    67b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    67bc:	220f      	movs	r2, #15
    67be:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    67c2:	4c0d      	ldr	r4, [pc, #52]	; (67f8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    67c4:	4a0d      	ldr	r2, [pc, #52]	; (67fc <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    67c6:	9301      	str	r3, [sp, #4]
    67c8:	490d      	ldr	r1, [pc, #52]	; (6800 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    67ca:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    67cc:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    67d0:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    67d4:	f44f 75b0 	mov.w	r5, #352	; 0x160
    67d8:	9300      	str	r3, [sp, #0]
    67da:	fb05 1100 	mla	r1, r5, r0, r1
    67de:	4b09      	ldr	r3, [pc, #36]	; (6804 <init_idle_thread+0x54>)
    67e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    67e4:	4620      	mov	r0, r4
    67e6:	f001 ff61 	bl	86ac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    67ea:	7b63      	ldrb	r3, [r4, #13]
    67ec:	f023 0304 	bic.w	r3, r3, #4
    67f0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    67f2:	b007      	add	sp, #28
    67f4:	bd30      	pop	{r4, r5, pc}
    67f6:	bf00      	nop
    67f8:	20000708 	.word	0x20000708
    67fc:	20000f98 	.word	0x20000f98
    6800:	20002b60 	.word	0x20002b60
    6804:	00006759 	.word	0x00006759

00006808 <bg_thread_main>:
{
    6808:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    680a:	4b0a      	ldr	r3, [pc, #40]	; (6834 <bg_thread_main+0x2c>)
    680c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    680e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6810:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6812:	f7ff ff23 	bl	665c <z_sys_init_run_level>
	boot_banner();
    6816:	f002 ff53 	bl	96c0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    681a:	2003      	movs	r0, #3
    681c:	f7ff ff1e 	bl	665c <z_sys_init_run_level>
	z_init_static_threads();
    6820:	f001 fff6 	bl	8810 <z_init_static_threads>
	main();
    6824:	f7fb f94a 	bl	1abc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6828:	4a03      	ldr	r2, [pc, #12]	; (6838 <bg_thread_main+0x30>)
    682a:	7b13      	ldrb	r3, [r2, #12]
    682c:	f023 0301 	bic.w	r3, r3, #1
    6830:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6832:	bd08      	pop	{r3, pc}
    6834:	200010dd 	.word	0x200010dd
    6838:	20000788 	.word	0x20000788

0000683c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    683c:	4802      	ldr	r0, [pc, #8]	; (6848 <z_bss_zero+0xc>)
    683e:	4a03      	ldr	r2, [pc, #12]	; (684c <z_bss_zero+0x10>)
    6840:	2100      	movs	r1, #0
    6842:	1a12      	subs	r2, r2, r0
    6844:	f003 ba6d 	b.w	9d22 <memset>
    6848:	200002b8 	.word	0x200002b8
    684c:	2000129c 	.word	0x2000129c

00006850 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6850:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6852:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 692c <z_cstart+0xdc>
    6856:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6858:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    685c:	4d2d      	ldr	r5, [pc, #180]	; (6914 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    685e:	4e2e      	ldr	r6, [pc, #184]	; (6918 <z_cstart+0xc8>)
    6860:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6862:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6930 <z_cstart+0xe0>
    6866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    686a:	2400      	movs	r4, #0
    686c:	616b      	str	r3, [r5, #20]
    686e:	23e0      	movs	r3, #224	; 0xe0
    6870:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6874:	77ec      	strb	r4, [r5, #31]
    6876:	762c      	strb	r4, [r5, #24]
    6878:	766c      	strb	r4, [r5, #25]
    687a:	76ac      	strb	r4, [r5, #26]
    687c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6880:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6882:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6886:	626b      	str	r3, [r5, #36]	; 0x24
    6888:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    688c:	f7fc fd9e 	bl	33cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6890:	f7fc faca 	bl	2e28 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6894:	f04f 33ff 	mov.w	r3, #4294967295
    6898:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    689a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    689c:	f7fc fec6 	bl	362c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    68a0:	f7fc fdfc 	bl	349c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    68a4:	f240 1301 	movw	r3, #257	; 0x101
    68a8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    68ac:	ab06      	add	r3, sp, #24
    68ae:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    68b0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    68b4:	f003 fe6b 	bl	a58e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    68b8:	4620      	mov	r0, r4
    68ba:	f7ff fecf 	bl	665c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    68be:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    68c0:	4d16      	ldr	r5, [pc, #88]	; (691c <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    68c2:	f7ff fecb 	bl	665c <z_sys_init_run_level>
	z_sched_init();
    68c6:	f001 fb3f 	bl	7f48 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    68ca:	4b15      	ldr	r3, [pc, #84]	; (6920 <z_cstart+0xd0>)
    68cc:	9305      	str	r3, [sp, #20]
    68ce:	2301      	movs	r3, #1
    68d0:	4914      	ldr	r1, [pc, #80]	; (6924 <z_cstart+0xd4>)
    68d2:	9400      	str	r4, [sp, #0]
    68d4:	e9cd 4303 	strd	r4, r3, [sp, #12]
    68d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    68dc:	464b      	mov	r3, r9
    68de:	e9cd 4401 	strd	r4, r4, [sp, #4]
    68e2:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    68e4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    68e6:	f001 fee1 	bl	86ac <z_setup_new_thread>
    68ea:	7b6a      	ldrb	r2, [r5, #13]
    68ec:	f022 0204 	bic.w	r2, r2, #4
    68f0:	736a      	strb	r2, [r5, #13]
    68f2:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    68f4:	4628      	mov	r0, r5
    68f6:	f000 ff27 	bl	7748 <z_ready_thread>
		init_idle_thread(i);
    68fa:	4620      	mov	r0, r4
    68fc:	f7ff ff58 	bl	67b0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    6900:	4b09      	ldr	r3, [pc, #36]	; (6928 <z_cstart+0xd8>)
    6902:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6904:	464a      	mov	r2, r9
    6906:	4639      	mov	r1, r7
    6908:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    690a:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    690c:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6910:	f7fc fbc4 	bl	309c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6914:	e000ed00 	.word	0xe000ed00
    6918:	20000f98 	.word	0x20000f98
    691c:	20000788 	.word	0x20000788
    6920:	0000bcf1 	.word	0x0000bcf1
    6924:	20002740 	.word	0x20002740
    6928:	20000708 	.word	0x20000708
    692c:	200034e0 	.word	0x200034e0
    6930:	00006809 	.word	0x00006809

00006934 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    6934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6938:	4d16      	ldr	r5, [pc, #88]	; (6994 <init_mem_slab_module+0x60>)
    693a:	4c17      	ldr	r4, [pc, #92]	; (6998 <init_mem_slab_module+0x64>)
    693c:	4e17      	ldr	r6, [pc, #92]	; (699c <init_mem_slab_module+0x68>)
    693e:	46a8      	mov	r8, r5
    6940:	42ac      	cmp	r4, r5
    6942:	d90c      	bls.n	695e <init_mem_slab_module+0x2a>
    6944:	4916      	ldr	r1, [pc, #88]	; (69a0 <init_mem_slab_module+0x6c>)
    6946:	4817      	ldr	r0, [pc, #92]	; (69a4 <init_mem_slab_module+0x70>)
    6948:	233c      	movs	r3, #60	; 0x3c
    694a:	4632      	mov	r2, r6
    694c:	f003 f983 	bl	9c56 <printk>
    6950:	4815      	ldr	r0, [pc, #84]	; (69a8 <init_mem_slab_module+0x74>)
    6952:	f003 f980 	bl	9c56 <printk>
    6956:	213c      	movs	r1, #60	; 0x3c
    6958:	4630      	mov	r0, r6
    695a:	f003 f8a5 	bl	9aa8 <assert_post_action>
    695e:	4544      	cmp	r4, r8
    6960:	d302      	bcc.n	6968 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    6962:	2000      	movs	r0, #0
	return rc;
}
    6964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6968:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    696c:	ea41 0302 	orr.w	r3, r1, r2
    6970:	f013 0303 	ands.w	r3, r3, #3
    6974:	d10b      	bne.n	698e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    6976:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    6978:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    697a:	4283      	cmp	r3, r0
    697c:	d101      	bne.n	6982 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    697e:	3420      	adds	r4, #32
    6980:	e7de      	b.n	6940 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    6982:	69a7      	ldr	r7, [r4, #24]
    6984:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6986:	3301      	adds	r3, #1
		slab->free_list = p;
    6988:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    698a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    698c:	e7f5      	b.n	697a <init_mem_slab_module+0x46>
		return -EINVAL;
    698e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6992:	e7e7      	b.n	6964 <init_mem_slab_module+0x30>
    6994:	20000264 	.word	0x20000264
    6998:	20000264 	.word	0x20000264
    699c:	0000bcf6 	.word	0x0000bcf6
    69a0:	0000bd1b 	.word	0x0000bd1b
    69a4:	0000ac83 	.word	0x0000ac83
    69a8:	0000bd38 	.word	0x0000bd38

000069ac <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    69ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    69b0:	4604      	mov	r4, r0
    69b2:	460e      	mov	r6, r1
    69b4:	4690      	mov	r8, r2
    69b6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    69b8:	f100 0508 	add.w	r5, r0, #8
    69bc:	f04f 0320 	mov.w	r3, #32
    69c0:	f3ef 8711 	mrs	r7, BASEPRI
    69c4:	f383 8812 	msr	BASEPRI_MAX, r3
    69c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69cc:	4628      	mov	r0, r5
    69ce:	f001 ffaf 	bl	8930 <z_spin_lock_valid>
    69d2:	b968      	cbnz	r0, 69f0 <k_mem_slab_alloc+0x44>
    69d4:	4a24      	ldr	r2, [pc, #144]	; (6a68 <k_mem_slab_alloc+0xbc>)
    69d6:	4925      	ldr	r1, [pc, #148]	; (6a6c <k_mem_slab_alloc+0xc0>)
    69d8:	4825      	ldr	r0, [pc, #148]	; (6a70 <k_mem_slab_alloc+0xc4>)
    69da:	2381      	movs	r3, #129	; 0x81
    69dc:	f003 f93b 	bl	9c56 <printk>
    69e0:	4824      	ldr	r0, [pc, #144]	; (6a74 <k_mem_slab_alloc+0xc8>)
    69e2:	4629      	mov	r1, r5
    69e4:	f003 f937 	bl	9c56 <printk>
    69e8:	481f      	ldr	r0, [pc, #124]	; (6a68 <k_mem_slab_alloc+0xbc>)
    69ea:	2181      	movs	r1, #129	; 0x81
    69ec:	f003 f85c 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    69f0:	4628      	mov	r0, r5
    69f2:	f001 ffbb 	bl	896c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    69f6:	69a3      	ldr	r3, [r4, #24]
    69f8:	b1eb      	cbz	r3, 6a36 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    69fa:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    69fc:	681b      	ldr	r3, [r3, #0]
    69fe:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    6a00:	69e3      	ldr	r3, [r4, #28]
    6a02:	3301      	adds	r3, #1
    6a04:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6a06:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a08:	4628      	mov	r0, r5
    6a0a:	f001 ff9f 	bl	894c <z_spin_unlock_valid>
    6a0e:	b968      	cbnz	r0, 6a2c <k_mem_slab_alloc+0x80>
    6a10:	4a15      	ldr	r2, [pc, #84]	; (6a68 <k_mem_slab_alloc+0xbc>)
    6a12:	4919      	ldr	r1, [pc, #100]	; (6a78 <k_mem_slab_alloc+0xcc>)
    6a14:	4816      	ldr	r0, [pc, #88]	; (6a70 <k_mem_slab_alloc+0xc4>)
    6a16:	23ac      	movs	r3, #172	; 0xac
    6a18:	f003 f91d 	bl	9c56 <printk>
    6a1c:	4817      	ldr	r0, [pc, #92]	; (6a7c <k_mem_slab_alloc+0xd0>)
    6a1e:	4629      	mov	r1, r5
    6a20:	f003 f919 	bl	9c56 <printk>
    6a24:	4810      	ldr	r0, [pc, #64]	; (6a68 <k_mem_slab_alloc+0xbc>)
    6a26:	21ac      	movs	r1, #172	; 0xac
    6a28:	f003 f83e 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    6a2c:	f387 8811 	msr	BASEPRI, r7
    6a30:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    6a34:	e013      	b.n	6a5e <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6a36:	ea58 0209 	orrs.w	r2, r8, r9
    6a3a:	d103      	bne.n	6a44 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    6a3c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    6a3e:	f06f 040b 	mvn.w	r4, #11
    6a42:	e7e1      	b.n	6a08 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6a44:	4622      	mov	r2, r4
    6a46:	e9cd 8900 	strd	r8, r9, [sp]
    6a4a:	4639      	mov	r1, r7
    6a4c:	4628      	mov	r0, r5
    6a4e:	f001 f82d 	bl	7aac <z_pend_curr>
		if (result == 0) {
    6a52:	4604      	mov	r4, r0
    6a54:	b918      	cbnz	r0, 6a5e <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    6a56:	4b0a      	ldr	r3, [pc, #40]	; (6a80 <k_mem_slab_alloc+0xd4>)
    6a58:	689b      	ldr	r3, [r3, #8]
    6a5a:	695b      	ldr	r3, [r3, #20]
    6a5c:	6033      	str	r3, [r6, #0]
}
    6a5e:	4620      	mov	r0, r4
    6a60:	b003      	add	sp, #12
    6a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6a66:	bf00      	nop
    6a68:	0000b39a 	.word	0x0000b39a
    6a6c:	0000b3ec 	.word	0x0000b3ec
    6a70:	0000ac83 	.word	0x0000ac83
    6a74:	0000b401 	.word	0x0000b401
    6a78:	0000b3c0 	.word	0x0000b3c0
    6a7c:	0000b3d7 	.word	0x0000b3d7
    6a80:	20000f98 	.word	0x20000f98

00006a84 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a88:	4604      	mov	r4, r0
    6a8a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6a8c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6a90:	f04f 0320 	mov.w	r3, #32
    6a94:	f3ef 8711 	mrs	r7, BASEPRI
    6a98:	f383 8812 	msr	BASEPRI_MAX, r3
    6a9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6aa0:	4628      	mov	r0, r5
    6aa2:	f001 ff45 	bl	8930 <z_spin_lock_valid>
    6aa6:	b968      	cbnz	r0, 6ac4 <k_mem_slab_free+0x40>
    6aa8:	4a22      	ldr	r2, [pc, #136]	; (6b34 <k_mem_slab_free+0xb0>)
    6aaa:	4923      	ldr	r1, [pc, #140]	; (6b38 <k_mem_slab_free+0xb4>)
    6aac:	4823      	ldr	r0, [pc, #140]	; (6b3c <k_mem_slab_free+0xb8>)
    6aae:	2381      	movs	r3, #129	; 0x81
    6ab0:	f003 f8d1 	bl	9c56 <printk>
    6ab4:	4822      	ldr	r0, [pc, #136]	; (6b40 <k_mem_slab_free+0xbc>)
    6ab6:	4629      	mov	r1, r5
    6ab8:	f003 f8cd 	bl	9c56 <printk>
    6abc:	481d      	ldr	r0, [pc, #116]	; (6b34 <k_mem_slab_free+0xb0>)
    6abe:	2181      	movs	r1, #129	; 0x81
    6ac0:	f002 fff2 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6ac4:	4628      	mov	r0, r5
    6ac6:	f001 ff51 	bl	896c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6aca:	f8d4 8018 	ldr.w	r8, [r4, #24]
    6ace:	f1b8 0f00 	cmp.w	r8, #0
    6ad2:	d10f      	bne.n	6af4 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6ad4:	4620      	mov	r0, r4
    6ad6:	f001 f9e7 	bl	7ea8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6ada:	b158      	cbz	r0, 6af4 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6adc:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6ade:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6ae0:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    6ae4:	f000 fe30 	bl	7748 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6ae8:	4639      	mov	r1, r7
    6aea:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    6af0:	f000 bb8a 	b.w	7208 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6af4:	6833      	ldr	r3, [r6, #0]
    6af6:	69a2      	ldr	r2, [r4, #24]
    6af8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6afa:	6833      	ldr	r3, [r6, #0]
    6afc:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    6afe:	69e3      	ldr	r3, [r4, #28]
    6b00:	3b01      	subs	r3, #1
    6b02:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b04:	4628      	mov	r0, r5
    6b06:	f001 ff21 	bl	894c <z_spin_unlock_valid>
    6b0a:	b968      	cbnz	r0, 6b28 <k_mem_slab_free+0xa4>
    6b0c:	4a09      	ldr	r2, [pc, #36]	; (6b34 <k_mem_slab_free+0xb0>)
    6b0e:	490d      	ldr	r1, [pc, #52]	; (6b44 <k_mem_slab_free+0xc0>)
    6b10:	480a      	ldr	r0, [pc, #40]	; (6b3c <k_mem_slab_free+0xb8>)
    6b12:	23ac      	movs	r3, #172	; 0xac
    6b14:	f003 f89f 	bl	9c56 <printk>
    6b18:	480b      	ldr	r0, [pc, #44]	; (6b48 <k_mem_slab_free+0xc4>)
    6b1a:	4629      	mov	r1, r5
    6b1c:	f003 f89b 	bl	9c56 <printk>
    6b20:	4804      	ldr	r0, [pc, #16]	; (6b34 <k_mem_slab_free+0xb0>)
    6b22:	21ac      	movs	r1, #172	; 0xac
    6b24:	f002 ffc0 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    6b28:	f387 8811 	msr	BASEPRI, r7
    6b2c:	f3bf 8f6f 	isb	sy
}
    6b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b34:	0000b39a 	.word	0x0000b39a
    6b38:	0000b3ec 	.word	0x0000b3ec
    6b3c:	0000ac83 	.word	0x0000ac83
    6b40:	0000b401 	.word	0x0000b401
    6b44:	0000b3c0 	.word	0x0000b3c0
    6b48:	0000b3d7 	.word	0x0000b3d7

00006b4c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6b50:	4604      	mov	r4, r0
    6b52:	4616      	mov	r6, r2
    6b54:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6b56:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6b5a:	b163      	cbz	r3, 6b76 <z_impl_k_mutex_lock+0x2a>
    6b5c:	4970      	ldr	r1, [pc, #448]	; (6d20 <z_impl_k_mutex_lock+0x1d4>)
    6b5e:	4a71      	ldr	r2, [pc, #452]	; (6d24 <z_impl_k_mutex_lock+0x1d8>)
    6b60:	4871      	ldr	r0, [pc, #452]	; (6d28 <z_impl_k_mutex_lock+0x1dc>)
    6b62:	2365      	movs	r3, #101	; 0x65
    6b64:	f003 f877 	bl	9c56 <printk>
    6b68:	4870      	ldr	r0, [pc, #448]	; (6d2c <z_impl_k_mutex_lock+0x1e0>)
    6b6a:	f003 f874 	bl	9c56 <printk>
    6b6e:	486d      	ldr	r0, [pc, #436]	; (6d24 <z_impl_k_mutex_lock+0x1d8>)
    6b70:	2165      	movs	r1, #101	; 0x65
    6b72:	f002 ff99 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    6b76:	f04f 0320 	mov.w	r3, #32
    6b7a:	f3ef 8811 	mrs	r8, BASEPRI
    6b7e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b86:	486a      	ldr	r0, [pc, #424]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6b88:	f001 fed2 	bl	8930 <z_spin_lock_valid>
    6b8c:	b968      	cbnz	r0, 6baa <z_impl_k_mutex_lock+0x5e>
    6b8e:	4a69      	ldr	r2, [pc, #420]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6b90:	4969      	ldr	r1, [pc, #420]	; (6d38 <z_impl_k_mutex_lock+0x1ec>)
    6b92:	4865      	ldr	r0, [pc, #404]	; (6d28 <z_impl_k_mutex_lock+0x1dc>)
    6b94:	2381      	movs	r3, #129	; 0x81
    6b96:	f003 f85e 	bl	9c56 <printk>
    6b9a:	4965      	ldr	r1, [pc, #404]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6b9c:	4867      	ldr	r0, [pc, #412]	; (6d3c <z_impl_k_mutex_lock+0x1f0>)
    6b9e:	f003 f85a 	bl	9c56 <printk>
    6ba2:	4864      	ldr	r0, [pc, #400]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6ba4:	2181      	movs	r1, #129	; 0x81
    6ba6:	f002 ff7f 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6baa:	4861      	ldr	r0, [pc, #388]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6bac:	f001 fede 	bl	896c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6bb0:	68e3      	ldr	r3, [r4, #12]
    6bb2:	4a63      	ldr	r2, [pc, #396]	; (6d40 <z_impl_k_mutex_lock+0x1f4>)
    6bb4:	b1fb      	cbz	r3, 6bf6 <z_impl_k_mutex_lock+0xaa>
    6bb6:	68a0      	ldr	r0, [r4, #8]
    6bb8:	6891      	ldr	r1, [r2, #8]
    6bba:	4288      	cmp	r0, r1
    6bbc:	d03d      	beq.n	6c3a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6bbe:	ea56 0307 	orrs.w	r3, r6, r7
    6bc2:	d13c      	bne.n	6c3e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6bc4:	485a      	ldr	r0, [pc, #360]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6bc6:	f001 fec1 	bl	894c <z_spin_unlock_valid>
    6bca:	b968      	cbnz	r0, 6be8 <z_impl_k_mutex_lock+0x9c>
    6bcc:	4a59      	ldr	r2, [pc, #356]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6bce:	495d      	ldr	r1, [pc, #372]	; (6d44 <z_impl_k_mutex_lock+0x1f8>)
    6bd0:	4855      	ldr	r0, [pc, #340]	; (6d28 <z_impl_k_mutex_lock+0x1dc>)
    6bd2:	23ac      	movs	r3, #172	; 0xac
    6bd4:	f003 f83f 	bl	9c56 <printk>
    6bd8:	4955      	ldr	r1, [pc, #340]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6bda:	485b      	ldr	r0, [pc, #364]	; (6d48 <z_impl_k_mutex_lock+0x1fc>)
    6bdc:	f003 f83b 	bl	9c56 <printk>
    6be0:	4854      	ldr	r0, [pc, #336]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6be2:	21ac      	movs	r1, #172	; 0xac
    6be4:	f002 ff60 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    6be8:	f388 8811 	msr	BASEPRI, r8
    6bec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6bf0:	f06f 000f 	mvn.w	r0, #15
    6bf4:	e01e      	b.n	6c34 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    6bf6:	6891      	ldr	r1, [r2, #8]
    6bf8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6bfc:	484c      	ldr	r0, [pc, #304]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6bfe:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    6c00:	3301      	adds	r3, #1
    6c02:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    6c04:	6893      	ldr	r3, [r2, #8]
    6c06:	60a3      	str	r3, [r4, #8]
    6c08:	f001 fea0 	bl	894c <z_spin_unlock_valid>
    6c0c:	b968      	cbnz	r0, 6c2a <z_impl_k_mutex_lock+0xde>
    6c0e:	4a49      	ldr	r2, [pc, #292]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6c10:	494c      	ldr	r1, [pc, #304]	; (6d44 <z_impl_k_mutex_lock+0x1f8>)
    6c12:	4845      	ldr	r0, [pc, #276]	; (6d28 <z_impl_k_mutex_lock+0x1dc>)
    6c14:	23ac      	movs	r3, #172	; 0xac
    6c16:	f003 f81e 	bl	9c56 <printk>
    6c1a:	4945      	ldr	r1, [pc, #276]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6c1c:	484a      	ldr	r0, [pc, #296]	; (6d48 <z_impl_k_mutex_lock+0x1fc>)
    6c1e:	f003 f81a 	bl	9c56 <printk>
    6c22:	4844      	ldr	r0, [pc, #272]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6c24:	21ac      	movs	r1, #172	; 0xac
    6c26:	f002 ff3f 	bl	9aa8 <assert_post_action>
    6c2a:	f388 8811 	msr	BASEPRI, r8
    6c2e:	f3bf 8f6f 	isb	sy
		return 0;
    6c32:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6c34:	b002      	add	sp, #8
    6c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6c3a:	6921      	ldr	r1, [r4, #16]
    6c3c:	e7de      	b.n	6bfc <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6c3e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6c42:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    6c46:	4299      	cmp	r1, r3
    6c48:	bfa8      	it	ge
    6c4a:	4619      	movge	r1, r3
    6c4c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6c50:	4291      	cmp	r1, r2
    6c52:	bfb8      	it	lt
    6c54:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6c56:	428b      	cmp	r3, r1
    6c58:	dd44      	ble.n	6ce4 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    6c5a:	f000 ff57 	bl	7b0c <z_set_prio>
    6c5e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6c60:	e9cd 6700 	strd	r6, r7, [sp]
    6c64:	4832      	ldr	r0, [pc, #200]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6c66:	4622      	mov	r2, r4
    6c68:	4641      	mov	r1, r8
    6c6a:	f000 ff1f 	bl	7aac <z_pend_curr>
	if (got_mutex == 0) {
    6c6e:	2800      	cmp	r0, #0
    6c70:	d0e0      	beq.n	6c34 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    6c72:	f04f 0320 	mov.w	r3, #32
    6c76:	f3ef 8611 	mrs	r6, BASEPRI
    6c7a:	f383 8812 	msr	BASEPRI_MAX, r3
    6c7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c82:	482b      	ldr	r0, [pc, #172]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6c84:	f001 fe54 	bl	8930 <z_spin_lock_valid>
    6c88:	b968      	cbnz	r0, 6ca6 <z_impl_k_mutex_lock+0x15a>
    6c8a:	4a2a      	ldr	r2, [pc, #168]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6c8c:	492a      	ldr	r1, [pc, #168]	; (6d38 <z_impl_k_mutex_lock+0x1ec>)
    6c8e:	4826      	ldr	r0, [pc, #152]	; (6d28 <z_impl_k_mutex_lock+0x1dc>)
    6c90:	2381      	movs	r3, #129	; 0x81
    6c92:	f002 ffe0 	bl	9c56 <printk>
    6c96:	4926      	ldr	r1, [pc, #152]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6c98:	4828      	ldr	r0, [pc, #160]	; (6d3c <z_impl_k_mutex_lock+0x1f0>)
    6c9a:	f002 ffdc 	bl	9c56 <printk>
    6c9e:	4825      	ldr	r0, [pc, #148]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6ca0:	2181      	movs	r1, #129	; 0x81
    6ca2:	f002 ff01 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6ca6:	4822      	ldr	r0, [pc, #136]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6ca8:	f001 fe60 	bl	896c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6cac:	6823      	ldr	r3, [r4, #0]
    6cae:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6cb0:	429c      	cmp	r4, r3
    6cb2:	d00a      	beq.n	6cca <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6cb4:	b14b      	cbz	r3, 6cca <z_impl_k_mutex_lock+0x17e>
    6cb6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6cba:	4299      	cmp	r1, r3
    6cbc:	bfa8      	it	ge
    6cbe:	4619      	movge	r1, r3
    6cc0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6cc4:	4299      	cmp	r1, r3
    6cc6:	bfb8      	it	lt
    6cc8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6cca:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    6ccc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6cd0:	4299      	cmp	r1, r3
    6cd2:	d109      	bne.n	6ce8 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    6cd4:	b16d      	cbz	r5, 6cf2 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    6cd6:	4816      	ldr	r0, [pc, #88]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6cd8:	4631      	mov	r1, r6
    6cda:	f000 fa95 	bl	7208 <z_reschedule>
	return -EAGAIN;
    6cde:	f06f 000a 	mvn.w	r0, #10
    6ce2:	e7a7      	b.n	6c34 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    6ce4:	2500      	movs	r5, #0
    6ce6:	e7bb      	b.n	6c60 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    6ce8:	f000 ff10 	bl	7b0c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6cec:	2800      	cmp	r0, #0
    6cee:	d1f2      	bne.n	6cd6 <z_impl_k_mutex_lock+0x18a>
    6cf0:	e7f0      	b.n	6cd4 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6cf2:	480f      	ldr	r0, [pc, #60]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6cf4:	f001 fe2a 	bl	894c <z_spin_unlock_valid>
    6cf8:	b968      	cbnz	r0, 6d16 <z_impl_k_mutex_lock+0x1ca>
    6cfa:	4a0e      	ldr	r2, [pc, #56]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6cfc:	4911      	ldr	r1, [pc, #68]	; (6d44 <z_impl_k_mutex_lock+0x1f8>)
    6cfe:	480a      	ldr	r0, [pc, #40]	; (6d28 <z_impl_k_mutex_lock+0x1dc>)
    6d00:	23ac      	movs	r3, #172	; 0xac
    6d02:	f002 ffa8 	bl	9c56 <printk>
    6d06:	490a      	ldr	r1, [pc, #40]	; (6d30 <z_impl_k_mutex_lock+0x1e4>)
    6d08:	480f      	ldr	r0, [pc, #60]	; (6d48 <z_impl_k_mutex_lock+0x1fc>)
    6d0a:	f002 ffa4 	bl	9c56 <printk>
    6d0e:	4809      	ldr	r0, [pc, #36]	; (6d34 <z_impl_k_mutex_lock+0x1e8>)
    6d10:	21ac      	movs	r1, #172	; 0xac
    6d12:	f002 fec9 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    6d16:	f386 8811 	msr	BASEPRI, r6
    6d1a:	f3bf 8f6f 	isb	sy
    6d1e:	e7de      	b.n	6cde <z_impl_k_mutex_lock+0x192>
    6d20:	0000bd79 	.word	0x0000bd79
    6d24:	0000bd57 	.word	0x0000bd57
    6d28:	0000ac83 	.word	0x0000ac83
    6d2c:	0000bd8b 	.word	0x0000bd8b
    6d30:	20000fc0 	.word	0x20000fc0
    6d34:	0000b39a 	.word	0x0000b39a
    6d38:	0000b3ec 	.word	0x0000b3ec
    6d3c:	0000b401 	.word	0x0000b401
    6d40:	20000f98 	.word	0x20000f98
    6d44:	0000b3c0 	.word	0x0000b3c0
    6d48:	0000b3d7 	.word	0x0000b3d7

00006d4c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6d4c:	b538      	push	{r3, r4, r5, lr}
    6d4e:	4604      	mov	r4, r0
    6d50:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6d54:	b163      	cbz	r3, 6d70 <z_impl_k_mutex_unlock+0x24>
    6d56:	4952      	ldr	r1, [pc, #328]	; (6ea0 <z_impl_k_mutex_unlock+0x154>)
    6d58:	4a52      	ldr	r2, [pc, #328]	; (6ea4 <z_impl_k_mutex_unlock+0x158>)
    6d5a:	4853      	ldr	r0, [pc, #332]	; (6ea8 <z_impl_k_mutex_unlock+0x15c>)
    6d5c:	23c7      	movs	r3, #199	; 0xc7
    6d5e:	f002 ff7a 	bl	9c56 <printk>
    6d62:	4852      	ldr	r0, [pc, #328]	; (6eac <z_impl_k_mutex_unlock+0x160>)
    6d64:	f002 ff77 	bl	9c56 <printk>
    6d68:	484e      	ldr	r0, [pc, #312]	; (6ea4 <z_impl_k_mutex_unlock+0x158>)
    6d6a:	21c7      	movs	r1, #199	; 0xc7
    6d6c:	f002 fe9c 	bl	9aa8 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6d70:	68a3      	ldr	r3, [r4, #8]
    6d72:	2b00      	cmp	r3, #0
    6d74:	f000 808d 	beq.w	6e92 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6d78:	4d4d      	ldr	r5, [pc, #308]	; (6eb0 <z_impl_k_mutex_unlock+0x164>)
    6d7a:	68aa      	ldr	r2, [r5, #8]
    6d7c:	4293      	cmp	r3, r2
    6d7e:	f040 808b 	bne.w	6e98 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6d82:	68e3      	ldr	r3, [r4, #12]
    6d84:	b94b      	cbnz	r3, 6d9a <z_impl_k_mutex_unlock+0x4e>
    6d86:	494b      	ldr	r1, [pc, #300]	; (6eb4 <z_impl_k_mutex_unlock+0x168>)
    6d88:	4847      	ldr	r0, [pc, #284]	; (6ea8 <z_impl_k_mutex_unlock+0x15c>)
    6d8a:	4a46      	ldr	r2, [pc, #280]	; (6ea4 <z_impl_k_mutex_unlock+0x158>)
    6d8c:	23df      	movs	r3, #223	; 0xdf
    6d8e:	f002 ff62 	bl	9c56 <printk>
    6d92:	4844      	ldr	r0, [pc, #272]	; (6ea4 <z_impl_k_mutex_unlock+0x158>)
    6d94:	21df      	movs	r1, #223	; 0xdf
    6d96:	f002 fe87 	bl	9aa8 <assert_post_action>
    6d9a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    6d9e:	b163      	cbz	r3, 6dba <z_impl_k_mutex_unlock+0x6e>
    6da0:	493f      	ldr	r1, [pc, #252]	; (6ea0 <z_impl_k_mutex_unlock+0x154>)
    6da2:	4a45      	ldr	r2, [pc, #276]	; (6eb8 <z_impl_k_mutex_unlock+0x16c>)
    6da4:	4840      	ldr	r0, [pc, #256]	; (6ea8 <z_impl_k_mutex_unlock+0x15c>)
    6da6:	23fd      	movs	r3, #253	; 0xfd
    6da8:	f002 ff55 	bl	9c56 <printk>
    6dac:	4843      	ldr	r0, [pc, #268]	; (6ebc <z_impl_k_mutex_unlock+0x170>)
    6dae:	f002 ff52 	bl	9c56 <printk>
    6db2:	4841      	ldr	r0, [pc, #260]	; (6eb8 <z_impl_k_mutex_unlock+0x16c>)
    6db4:	21fd      	movs	r1, #253	; 0xfd
    6db6:	f002 fe77 	bl	9aa8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6dba:	68ab      	ldr	r3, [r5, #8]
    6dbc:	7bdb      	ldrb	r3, [r3, #15]
    6dbe:	2b01      	cmp	r3, #1
    6dc0:	d10c      	bne.n	6ddc <z_impl_k_mutex_unlock+0x90>
    6dc2:	493f      	ldr	r1, [pc, #252]	; (6ec0 <z_impl_k_mutex_unlock+0x174>)
    6dc4:	4a3c      	ldr	r2, [pc, #240]	; (6eb8 <z_impl_k_mutex_unlock+0x16c>)
    6dc6:	4838      	ldr	r0, [pc, #224]	; (6ea8 <z_impl_k_mutex_unlock+0x15c>)
    6dc8:	23fe      	movs	r3, #254	; 0xfe
    6dca:	f002 ff44 	bl	9c56 <printk>
    6dce:	483b      	ldr	r0, [pc, #236]	; (6ebc <z_impl_k_mutex_unlock+0x170>)
    6dd0:	f002 ff41 	bl	9c56 <printk>
    6dd4:	4838      	ldr	r0, [pc, #224]	; (6eb8 <z_impl_k_mutex_unlock+0x16c>)
    6dd6:	21fe      	movs	r1, #254	; 0xfe
    6dd8:	f002 fe66 	bl	9aa8 <assert_post_action>

	--_current->base.sched_locked;
    6ddc:	68aa      	ldr	r2, [r5, #8]
    6dde:	7bd3      	ldrb	r3, [r2, #15]
    6de0:	3b01      	subs	r3, #1
    6de2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6de4:	68e3      	ldr	r3, [r4, #12]
    6de6:	2b01      	cmp	r3, #1
    6de8:	d905      	bls.n	6df6 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    6dea:	3b01      	subs	r3, #1
    6dec:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    6dee:	f000 ff93 	bl	7d18 <k_sched_unlock>

	return 0;
    6df2:	2000      	movs	r0, #0
}
    6df4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6df6:	f04f 0320 	mov.w	r3, #32
    6dfa:	f3ef 8511 	mrs	r5, BASEPRI
    6dfe:	f383 8812 	msr	BASEPRI_MAX, r3
    6e02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e06:	482f      	ldr	r0, [pc, #188]	; (6ec4 <z_impl_k_mutex_unlock+0x178>)
    6e08:	f001 fd92 	bl	8930 <z_spin_lock_valid>
    6e0c:	b968      	cbnz	r0, 6e2a <z_impl_k_mutex_unlock+0xde>
    6e0e:	4a2e      	ldr	r2, [pc, #184]	; (6ec8 <z_impl_k_mutex_unlock+0x17c>)
    6e10:	492e      	ldr	r1, [pc, #184]	; (6ecc <z_impl_k_mutex_unlock+0x180>)
    6e12:	4825      	ldr	r0, [pc, #148]	; (6ea8 <z_impl_k_mutex_unlock+0x15c>)
    6e14:	2381      	movs	r3, #129	; 0x81
    6e16:	f002 ff1e 	bl	9c56 <printk>
    6e1a:	492a      	ldr	r1, [pc, #168]	; (6ec4 <z_impl_k_mutex_unlock+0x178>)
    6e1c:	482c      	ldr	r0, [pc, #176]	; (6ed0 <z_impl_k_mutex_unlock+0x184>)
    6e1e:	f002 ff1a 	bl	9c56 <printk>
    6e22:	4829      	ldr	r0, [pc, #164]	; (6ec8 <z_impl_k_mutex_unlock+0x17c>)
    6e24:	2181      	movs	r1, #129	; 0x81
    6e26:	f002 fe3f 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e2a:	4826      	ldr	r0, [pc, #152]	; (6ec4 <z_impl_k_mutex_unlock+0x178>)
    6e2c:	f001 fd9e 	bl	896c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6e30:	68a0      	ldr	r0, [r4, #8]
    6e32:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    6e34:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6e38:	4299      	cmp	r1, r3
    6e3a:	d001      	beq.n	6e40 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    6e3c:	f000 fe66 	bl	7b0c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6e40:	4620      	mov	r0, r4
    6e42:	f001 f831 	bl	7ea8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6e46:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6e48:	b158      	cbz	r0, 6e62 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    6e4a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6e4e:	6122      	str	r2, [r4, #16]
    6e50:	2200      	movs	r2, #0
    6e52:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    6e54:	f000 fc78 	bl	7748 <z_ready_thread>
		z_reschedule(&lock, key);
    6e58:	481a      	ldr	r0, [pc, #104]	; (6ec4 <z_impl_k_mutex_unlock+0x178>)
    6e5a:	4629      	mov	r1, r5
    6e5c:	f000 f9d4 	bl	7208 <z_reschedule>
    6e60:	e7c5      	b.n	6dee <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    6e62:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e64:	4817      	ldr	r0, [pc, #92]	; (6ec4 <z_impl_k_mutex_unlock+0x178>)
    6e66:	f001 fd71 	bl	894c <z_spin_unlock_valid>
    6e6a:	b968      	cbnz	r0, 6e88 <z_impl_k_mutex_unlock+0x13c>
    6e6c:	4a16      	ldr	r2, [pc, #88]	; (6ec8 <z_impl_k_mutex_unlock+0x17c>)
    6e6e:	4919      	ldr	r1, [pc, #100]	; (6ed4 <z_impl_k_mutex_unlock+0x188>)
    6e70:	480d      	ldr	r0, [pc, #52]	; (6ea8 <z_impl_k_mutex_unlock+0x15c>)
    6e72:	23ac      	movs	r3, #172	; 0xac
    6e74:	f002 feef 	bl	9c56 <printk>
    6e78:	4912      	ldr	r1, [pc, #72]	; (6ec4 <z_impl_k_mutex_unlock+0x178>)
    6e7a:	4817      	ldr	r0, [pc, #92]	; (6ed8 <z_impl_k_mutex_unlock+0x18c>)
    6e7c:	f002 feeb 	bl	9c56 <printk>
    6e80:	4811      	ldr	r0, [pc, #68]	; (6ec8 <z_impl_k_mutex_unlock+0x17c>)
    6e82:	21ac      	movs	r1, #172	; 0xac
    6e84:	f002 fe10 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    6e88:	f385 8811 	msr	BASEPRI, r5
    6e8c:	f3bf 8f6f 	isb	sy
    6e90:	e7ad      	b.n	6dee <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    6e92:	f06f 0015 	mvn.w	r0, #21
    6e96:	e7ad      	b.n	6df4 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    6e98:	f04f 30ff 	mov.w	r0, #4294967295
    6e9c:	e7aa      	b.n	6df4 <z_impl_k_mutex_unlock+0xa8>
    6e9e:	bf00      	nop
    6ea0:	0000bd79 	.word	0x0000bd79
    6ea4:	0000bd57 	.word	0x0000bd57
    6ea8:	0000ac83 	.word	0x0000ac83
    6eac:	0000bd8b 	.word	0x0000bd8b
    6eb0:	20000f98 	.word	0x20000f98
    6eb4:	0000bdb0 	.word	0x0000bdb0
    6eb8:	0000bdc7 	.word	0x0000bdc7
    6ebc:	0000bdf2 	.word	0x0000bdf2
    6ec0:	0000bdf5 	.word	0x0000bdf5
    6ec4:	20000fc0 	.word	0x20000fc0
    6ec8:	0000b39a 	.word	0x0000b39a
    6ecc:	0000b3ec 	.word	0x0000b3ec
    6ed0:	0000b401 	.word	0x0000b401
    6ed4:	0000b3c0 	.word	0x0000b3c0
    6ed8:	0000b3d7 	.word	0x0000b3d7

00006edc <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    6edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    6ee0:	6884      	ldr	r4, [r0, #8]
{
    6ee2:	4605      	mov	r5, r0
    6ee4:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    6ee6:	b1d4      	cbz	r4, 6f1e <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    6ee8:	7863      	ldrb	r3, [r4, #1]
    6eea:	2b01      	cmp	r3, #1
    6eec:	d14b      	bne.n	6f86 <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    6eee:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    6ef2:	d10e      	bne.n	6f12 <signal_poll_event+0x36>
    6ef4:	4a30      	ldr	r2, [pc, #192]	; (6fb8 <signal_poll_event+0xdc>)
    6ef6:	4931      	ldr	r1, [pc, #196]	; (6fbc <signal_poll_event+0xe0>)
    6ef8:	4831      	ldr	r0, [pc, #196]	; (6fc0 <signal_poll_event+0xe4>)
    6efa:	23f9      	movs	r3, #249	; 0xf9
    6efc:	f002 feab 	bl	9c56 <printk>
    6f00:	4830      	ldr	r0, [pc, #192]	; (6fc4 <signal_poll_event+0xe8>)
    6f02:	f002 fea8 	bl	9c56 <printk>
    6f06:	482c      	ldr	r0, [pc, #176]	; (6fb8 <signal_poll_event+0xdc>)
    6f08:	21f9      	movs	r1, #249	; 0xf9
    6f0a:	f002 fdcd 	bl	9aa8 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    6f0e:	7b7b      	ldrb	r3, [r7, #13]
    6f10:	deff      	udf	#255	; 0xff
    6f12:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    6f16:	f013 0302 	ands.w	r3, r3, #2
    6f1a:	d10a      	bne.n	6f32 <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    6f1c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    6f1e:	68eb      	ldr	r3, [r5, #12]
    6f20:	f3c3 3145 	ubfx	r1, r3, #13, #6
    6f24:	430e      	orrs	r6, r1
	event->poller = NULL;
    6f26:	2000      	movs	r0, #0
	event->state |= state;
    6f28:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    6f2c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    6f2e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    6f30:	e00d      	b.n	6f4e <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    6f32:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    6f36:	f04f 31ff 	mov.w	r1, #4294967295
    6f3a:	f06f 0001 	mvn.w	r0, #1
    6f3e:	428b      	cmp	r3, r1
    6f40:	bf08      	it	eq
    6f42:	4282      	cmpeq	r2, r0
    6f44:	d105      	bne.n	6f52 <signal_poll_event+0x76>
		poller->is_polling = false;
    6f46:	2300      	movs	r3, #0
    6f48:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    6f4a:	f06f 000a 	mvn.w	r0, #10
}
    6f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    6f52:	4638      	mov	r0, r7
    6f54:	f000 fa54 	bl	7400 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    6f58:	2e08      	cmp	r6, #8
    6f5a:	bf0c      	ite	eq
    6f5c:	f06f 0303 	mvneq.w	r3, #3
    6f60:	2300      	movne	r3, #0
    6f62:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6f64:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    6f68:	06db      	lsls	r3, r3, #27
    6f6a:	d104      	bne.n	6f76 <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    6f6c:	f854 8c48 	ldr.w	r8, [r4, #-72]
    6f70:	f1b8 0f00 	cmp.w	r8, #0
    6f74:	d001      	beq.n	6f7a <signal_poll_event+0x9e>
		poller->is_polling = false;
    6f76:	2300      	movs	r3, #0
    6f78:	e7d0      	b.n	6f1c <signal_poll_event+0x40>
	z_ready_thread(thread);
    6f7a:	4638      	mov	r0, r7
    6f7c:	f000 fbe4 	bl	7748 <z_ready_thread>
		poller->is_polling = false;
    6f80:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    6f84:	e7cb      	b.n	6f1e <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    6f86:	2b02      	cmp	r3, #2
    6f88:	d1f5      	bne.n	6f76 <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    6f8a:	7823      	ldrb	r3, [r4, #0]
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d0c6      	beq.n	6f1e <signal_poll_event+0x42>
    6f90:	f854 7c04 	ldr.w	r7, [r4, #-4]
    6f94:	b177      	cbz	r7, 6fb4 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    6f96:	f1a4 0914 	sub.w	r9, r4, #20
    6f9a:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    6f9e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    6fa2:	f001 fe0f 	bl	8bc4 <z_abort_timeout>
		twork->poll_result = 0;
    6fa6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    6faa:	4649      	mov	r1, r9
    6fac:	4638      	mov	r0, r7
    6fae:	f002 fa97 	bl	94e0 <k_work_submit_to_queue>
    6fb2:	e7e5      	b.n	6f80 <signal_poll_event+0xa4>
		poller->is_polling = false;
    6fb4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    6fb6:	e7b2      	b.n	6f1e <signal_poll_event+0x42>
    6fb8:	0000be26 	.word	0x0000be26
    6fbc:	0000bf21 	.word	0x0000bf21
    6fc0:	0000ac83 	.word	0x0000ac83
    6fc4:	0000bf37 	.word	0x0000bf37

00006fc8 <z_impl_k_poll_signal_raise>:
{
    6fc8:	b570      	push	{r4, r5, r6, lr}
    6fca:	4604      	mov	r4, r0
    6fcc:	460d      	mov	r5, r1
	__asm__ volatile(
    6fce:	f04f 0320 	mov.w	r3, #32
    6fd2:	f3ef 8611 	mrs	r6, BASEPRI
    6fd6:	f383 8812 	msr	BASEPRI_MAX, r3
    6fda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6fde:	4821      	ldr	r0, [pc, #132]	; (7064 <z_impl_k_poll_signal_raise+0x9c>)
    6fe0:	f001 fca6 	bl	8930 <z_spin_lock_valid>
    6fe4:	b968      	cbnz	r0, 7002 <z_impl_k_poll_signal_raise+0x3a>
    6fe6:	4a20      	ldr	r2, [pc, #128]	; (7068 <z_impl_k_poll_signal_raise+0xa0>)
    6fe8:	4920      	ldr	r1, [pc, #128]	; (706c <z_impl_k_poll_signal_raise+0xa4>)
    6fea:	4821      	ldr	r0, [pc, #132]	; (7070 <z_impl_k_poll_signal_raise+0xa8>)
    6fec:	2381      	movs	r3, #129	; 0x81
    6fee:	f002 fe32 	bl	9c56 <printk>
    6ff2:	491c      	ldr	r1, [pc, #112]	; (7064 <z_impl_k_poll_signal_raise+0x9c>)
    6ff4:	481f      	ldr	r0, [pc, #124]	; (7074 <z_impl_k_poll_signal_raise+0xac>)
    6ff6:	f002 fe2e 	bl	9c56 <printk>
    6ffa:	481b      	ldr	r0, [pc, #108]	; (7068 <z_impl_k_poll_signal_raise+0xa0>)
    6ffc:	2181      	movs	r1, #129	; 0x81
    6ffe:	f002 fd53 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7002:	4818      	ldr	r0, [pc, #96]	; (7064 <z_impl_k_poll_signal_raise+0x9c>)
    7004:	f001 fcb2 	bl	896c <z_spin_lock_set_owner>
	return list->head == list;
    7008:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    700a:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    700c:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    700e:	4284      	cmp	r4, r0
    7010:	60a1      	str	r1, [r4, #8]
    7012:	d117      	bne.n	7044 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7014:	4813      	ldr	r0, [pc, #76]	; (7064 <z_impl_k_poll_signal_raise+0x9c>)
    7016:	f001 fc99 	bl	894c <z_spin_unlock_valid>
    701a:	b968      	cbnz	r0, 7038 <z_impl_k_poll_signal_raise+0x70>
    701c:	4a12      	ldr	r2, [pc, #72]	; (7068 <z_impl_k_poll_signal_raise+0xa0>)
    701e:	4916      	ldr	r1, [pc, #88]	; (7078 <z_impl_k_poll_signal_raise+0xb0>)
    7020:	4813      	ldr	r0, [pc, #76]	; (7070 <z_impl_k_poll_signal_raise+0xa8>)
    7022:	23ac      	movs	r3, #172	; 0xac
    7024:	f002 fe17 	bl	9c56 <printk>
    7028:	490e      	ldr	r1, [pc, #56]	; (7064 <z_impl_k_poll_signal_raise+0x9c>)
    702a:	4814      	ldr	r0, [pc, #80]	; (707c <z_impl_k_poll_signal_raise+0xb4>)
    702c:	f002 fe13 	bl	9c56 <printk>
    7030:	480d      	ldr	r0, [pc, #52]	; (7068 <z_impl_k_poll_signal_raise+0xa0>)
    7032:	21ac      	movs	r1, #172	; 0xac
    7034:	f002 fd38 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7038:	f386 8811 	msr	BASEPRI, r6
    703c:	f3bf 8f6f 	isb	sy
		return 0;
    7040:	2400      	movs	r4, #0
    7042:	e00d      	b.n	7060 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    7044:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7048:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    704a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    704c:	2300      	movs	r3, #0
	node->prev = NULL;
    704e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7052:	f7ff ff43 	bl	6edc <signal_poll_event>
	z_reschedule(&lock, key);
    7056:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7058:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    705a:	4802      	ldr	r0, [pc, #8]	; (7064 <z_impl_k_poll_signal_raise+0x9c>)
    705c:	f000 f8d4 	bl	7208 <z_reschedule>
}
    7060:	4620      	mov	r0, r4
    7062:	bd70      	pop	{r4, r5, r6, pc}
    7064:	20000fc4 	.word	0x20000fc4
    7068:	0000b39a 	.word	0x0000b39a
    706c:	0000b3ec 	.word	0x0000b3ec
    7070:	0000ac83 	.word	0x0000ac83
    7074:	0000b401 	.word	0x0000b401
    7078:	0000b3c0 	.word	0x0000b3c0
    707c:	0000b3d7 	.word	0x0000b3d7

00007080 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    7080:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    7082:	4c08      	ldr	r4, [pc, #32]	; (70a4 <z_reset_time_slice+0x24>)
    7084:	6823      	ldr	r3, [r4, #0]
    7086:	b15b      	cbz	r3, 70a0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7088:	f7fe f9e8 	bl	545c <sys_clock_elapsed>
    708c:	4603      	mov	r3, r0
    708e:	6820      	ldr	r0, [r4, #0]
    7090:	4a05      	ldr	r2, [pc, #20]	; (70a8 <z_reset_time_slice+0x28>)
    7092:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    7094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7098:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    709a:	2100      	movs	r1, #0
    709c:	f001 be28 	b.w	8cf0 <z_set_timeout_expiry>
}
    70a0:	bd10      	pop	{r4, pc}
    70a2:	bf00      	nop
    70a4:	20000fd4 	.word	0x20000fd4
    70a8:	20000f98 	.word	0x20000f98

000070ac <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    70ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70ae:	4604      	mov	r4, r0
    70b0:	460d      	mov	r5, r1
	__asm__ volatile(
    70b2:	f04f 0320 	mov.w	r3, #32
    70b6:	f3ef 8611 	mrs	r6, BASEPRI
    70ba:	f383 8812 	msr	BASEPRI_MAX, r3
    70be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    70c2:	4823      	ldr	r0, [pc, #140]	; (7150 <k_sched_time_slice_set+0xa4>)
    70c4:	f001 fc34 	bl	8930 <z_spin_lock_valid>
    70c8:	b968      	cbnz	r0, 70e6 <k_sched_time_slice_set+0x3a>
    70ca:	4a22      	ldr	r2, [pc, #136]	; (7154 <k_sched_time_slice_set+0xa8>)
    70cc:	4922      	ldr	r1, [pc, #136]	; (7158 <k_sched_time_slice_set+0xac>)
    70ce:	4823      	ldr	r0, [pc, #140]	; (715c <k_sched_time_slice_set+0xb0>)
    70d0:	2381      	movs	r3, #129	; 0x81
    70d2:	f002 fdc0 	bl	9c56 <printk>
    70d6:	491e      	ldr	r1, [pc, #120]	; (7150 <k_sched_time_slice_set+0xa4>)
    70d8:	4821      	ldr	r0, [pc, #132]	; (7160 <k_sched_time_slice_set+0xb4>)
    70da:	f002 fdbc 	bl	9c56 <printk>
    70de:	481d      	ldr	r0, [pc, #116]	; (7154 <k_sched_time_slice_set+0xa8>)
    70e0:	2181      	movs	r1, #129	; 0x81
    70e2:	f002 fce1 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    70e6:	481a      	ldr	r0, [pc, #104]	; (7150 <k_sched_time_slice_set+0xa4>)
    70e8:	f001 fc40 	bl	896c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    70ec:	4b1d      	ldr	r3, [pc, #116]	; (7164 <k_sched_time_slice_set+0xb8>)
    70ee:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    70f0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    70f4:	f240 30e7 	movw	r0, #999	; 0x3e7
    70f8:	2100      	movs	r1, #0
    70fa:	611a      	str	r2, [r3, #16]
    70fc:	fbe7 0104 	umlal	r0, r1, r7, r4
    7100:	2300      	movs	r3, #0
    7102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7106:	f7f9 fe67 	bl	dd8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    710a:	2c00      	cmp	r4, #0
    710c:	4b16      	ldr	r3, [pc, #88]	; (7168 <k_sched_time_slice_set+0xbc>)
    710e:	dc1b      	bgt.n	7148 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    7110:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    7112:	4b16      	ldr	r3, [pc, #88]	; (716c <k_sched_time_slice_set+0xc0>)
    7114:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    7116:	f7ff ffb3 	bl	7080 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    711a:	480d      	ldr	r0, [pc, #52]	; (7150 <k_sched_time_slice_set+0xa4>)
    711c:	f001 fc16 	bl	894c <z_spin_unlock_valid>
    7120:	b968      	cbnz	r0, 713e <k_sched_time_slice_set+0x92>
    7122:	4a0c      	ldr	r2, [pc, #48]	; (7154 <k_sched_time_slice_set+0xa8>)
    7124:	4912      	ldr	r1, [pc, #72]	; (7170 <k_sched_time_slice_set+0xc4>)
    7126:	480d      	ldr	r0, [pc, #52]	; (715c <k_sched_time_slice_set+0xb0>)
    7128:	23ac      	movs	r3, #172	; 0xac
    712a:	f002 fd94 	bl	9c56 <printk>
    712e:	4908      	ldr	r1, [pc, #32]	; (7150 <k_sched_time_slice_set+0xa4>)
    7130:	4810      	ldr	r0, [pc, #64]	; (7174 <k_sched_time_slice_set+0xc8>)
    7132:	f002 fd90 	bl	9c56 <printk>
    7136:	4807      	ldr	r0, [pc, #28]	; (7154 <k_sched_time_slice_set+0xa8>)
    7138:	21ac      	movs	r1, #172	; 0xac
    713a:	f002 fcb5 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    713e:	f386 8811 	msr	BASEPRI, r6
    7142:	f3bf 8f6f 	isb	sy
	}
}
    7146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    7148:	2802      	cmp	r0, #2
    714a:	bfb8      	it	lt
    714c:	2002      	movlt	r0, #2
    714e:	e7df      	b.n	7110 <k_sched_time_slice_set+0x64>
    7150:	20000fcc 	.word	0x20000fcc
    7154:	0000b39a 	.word	0x0000b39a
    7158:	0000b3ec 	.word	0x0000b3ec
    715c:	0000ac83 	.word	0x0000ac83
    7160:	0000b401 	.word	0x0000b401
    7164:	20000f98 	.word	0x20000f98
    7168:	20000fd4 	.word	0x20000fd4
    716c:	20000fd0 	.word	0x20000fd0
    7170:	0000b3c0 	.word	0x0000b3c0
    7174:	0000b3d7 	.word	0x0000b3d7

00007178 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    7178:	b538      	push	{r3, r4, r5, lr}
    717a:	4604      	mov	r4, r0
	__asm__ volatile(
    717c:	f04f 0320 	mov.w	r3, #32
    7180:	f3ef 8511 	mrs	r5, BASEPRI
    7184:	f383 8812 	msr	BASEPRI_MAX, r3
    7188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    718c:	4817      	ldr	r0, [pc, #92]	; (71ec <z_unpend_thread_no_timeout+0x74>)
    718e:	f001 fbcf 	bl	8930 <z_spin_lock_valid>
    7192:	b968      	cbnz	r0, 71b0 <z_unpend_thread_no_timeout+0x38>
    7194:	4a16      	ldr	r2, [pc, #88]	; (71f0 <z_unpend_thread_no_timeout+0x78>)
    7196:	4917      	ldr	r1, [pc, #92]	; (71f4 <z_unpend_thread_no_timeout+0x7c>)
    7198:	4817      	ldr	r0, [pc, #92]	; (71f8 <z_unpend_thread_no_timeout+0x80>)
    719a:	2381      	movs	r3, #129	; 0x81
    719c:	f002 fd5b 	bl	9c56 <printk>
    71a0:	4912      	ldr	r1, [pc, #72]	; (71ec <z_unpend_thread_no_timeout+0x74>)
    71a2:	4816      	ldr	r0, [pc, #88]	; (71fc <z_unpend_thread_no_timeout+0x84>)
    71a4:	f002 fd57 	bl	9c56 <printk>
    71a8:	4811      	ldr	r0, [pc, #68]	; (71f0 <z_unpend_thread_no_timeout+0x78>)
    71aa:	2181      	movs	r1, #129	; 0x81
    71ac:	f002 fc7c 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    71b0:	480e      	ldr	r0, [pc, #56]	; (71ec <z_unpend_thread_no_timeout+0x74>)
    71b2:	f001 fbdb 	bl	896c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    71b6:	4620      	mov	r0, r4
    71b8:	f000 f900 	bl	73bc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71bc:	480b      	ldr	r0, [pc, #44]	; (71ec <z_unpend_thread_no_timeout+0x74>)
    71be:	f001 fbc5 	bl	894c <z_spin_unlock_valid>
    71c2:	b968      	cbnz	r0, 71e0 <z_unpend_thread_no_timeout+0x68>
    71c4:	4a0a      	ldr	r2, [pc, #40]	; (71f0 <z_unpend_thread_no_timeout+0x78>)
    71c6:	490e      	ldr	r1, [pc, #56]	; (7200 <z_unpend_thread_no_timeout+0x88>)
    71c8:	480b      	ldr	r0, [pc, #44]	; (71f8 <z_unpend_thread_no_timeout+0x80>)
    71ca:	23ac      	movs	r3, #172	; 0xac
    71cc:	f002 fd43 	bl	9c56 <printk>
    71d0:	4906      	ldr	r1, [pc, #24]	; (71ec <z_unpend_thread_no_timeout+0x74>)
    71d2:	480c      	ldr	r0, [pc, #48]	; (7204 <z_unpend_thread_no_timeout+0x8c>)
    71d4:	f002 fd3f 	bl	9c56 <printk>
    71d8:	4805      	ldr	r0, [pc, #20]	; (71f0 <z_unpend_thread_no_timeout+0x78>)
    71da:	21ac      	movs	r1, #172	; 0xac
    71dc:	f002 fc64 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    71e0:	f385 8811 	msr	BASEPRI, r5
    71e4:	f3bf 8f6f 	isb	sy
	}
}
    71e8:	bd38      	pop	{r3, r4, r5, pc}
    71ea:	bf00      	nop
    71ec:	20000fcc 	.word	0x20000fcc
    71f0:	0000b39a 	.word	0x0000b39a
    71f4:	0000b3ec 	.word	0x0000b3ec
    71f8:	0000ac83 	.word	0x0000ac83
    71fc:	0000b401 	.word	0x0000b401
    7200:	0000b3c0 	.word	0x0000b3c0
    7204:	0000b3d7 	.word	0x0000b3d7

00007208 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7208:	b538      	push	{r3, r4, r5, lr}
    720a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    720c:	460d      	mov	r5, r1
    720e:	b9e9      	cbnz	r1, 724c <z_reschedule+0x44>
    7210:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    7214:	b9d3      	cbnz	r3, 724c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    7216:	4b19      	ldr	r3, [pc, #100]	; (727c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    7218:	69da      	ldr	r2, [r3, #28]
    721a:	689b      	ldr	r3, [r3, #8]
    721c:	429a      	cmp	r2, r3
    721e:	d015      	beq.n	724c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7220:	f001 fb94 	bl	894c <z_spin_unlock_valid>
    7224:	b968      	cbnz	r0, 7242 <z_reschedule+0x3a>
    7226:	4a16      	ldr	r2, [pc, #88]	; (7280 <z_reschedule+0x78>)
    7228:	4916      	ldr	r1, [pc, #88]	; (7284 <z_reschedule+0x7c>)
    722a:	4817      	ldr	r0, [pc, #92]	; (7288 <z_reschedule+0x80>)
    722c:	23c3      	movs	r3, #195	; 0xc3
    722e:	f002 fd12 	bl	9c56 <printk>
    7232:	4816      	ldr	r0, [pc, #88]	; (728c <z_reschedule+0x84>)
    7234:	4621      	mov	r1, r4
    7236:	f002 fd0e 	bl	9c56 <printk>
    723a:	4811      	ldr	r0, [pc, #68]	; (7280 <z_reschedule+0x78>)
    723c:	21c3      	movs	r1, #195	; 0xc3
    723e:	f002 fc33 	bl	9aa8 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    7242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    7246:	2000      	movs	r0, #0
    7248:	f7fb bed8 	b.w	2ffc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    724c:	4620      	mov	r0, r4
    724e:	f001 fb7d 	bl	894c <z_spin_unlock_valid>
    7252:	b968      	cbnz	r0, 7270 <z_reschedule+0x68>
    7254:	4a0a      	ldr	r2, [pc, #40]	; (7280 <z_reschedule+0x78>)
    7256:	490b      	ldr	r1, [pc, #44]	; (7284 <z_reschedule+0x7c>)
    7258:	480b      	ldr	r0, [pc, #44]	; (7288 <z_reschedule+0x80>)
    725a:	23ac      	movs	r3, #172	; 0xac
    725c:	f002 fcfb 	bl	9c56 <printk>
    7260:	480a      	ldr	r0, [pc, #40]	; (728c <z_reschedule+0x84>)
    7262:	4621      	mov	r1, r4
    7264:	f002 fcf7 	bl	9c56 <printk>
    7268:	4805      	ldr	r0, [pc, #20]	; (7280 <z_reschedule+0x78>)
    726a:	21ac      	movs	r1, #172	; 0xac
    726c:	f002 fc1c 	bl	9aa8 <assert_post_action>
    7270:	f385 8811 	msr	BASEPRI, r5
    7274:	f3bf 8f6f 	isb	sy
    7278:	bd38      	pop	{r3, r4, r5, pc}
    727a:	bf00      	nop
    727c:	20000f98 	.word	0x20000f98
    7280:	0000b39a 	.word	0x0000b39a
    7284:	0000b3c0 	.word	0x0000b3c0
    7288:	0000ac83 	.word	0x0000ac83
    728c:	0000b3d7 	.word	0x0000b3d7

00007290 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7290:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7292:	f04f 0320 	mov.w	r3, #32
    7296:	f3ef 8511 	mrs	r5, BASEPRI
    729a:	f383 8812 	msr	BASEPRI_MAX, r3
    729e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    72a2:	4829      	ldr	r0, [pc, #164]	; (7348 <k_sched_lock+0xb8>)
    72a4:	f001 fb44 	bl	8930 <z_spin_lock_valid>
    72a8:	b968      	cbnz	r0, 72c6 <k_sched_lock+0x36>
    72aa:	4a28      	ldr	r2, [pc, #160]	; (734c <k_sched_lock+0xbc>)
    72ac:	4928      	ldr	r1, [pc, #160]	; (7350 <k_sched_lock+0xc0>)
    72ae:	4829      	ldr	r0, [pc, #164]	; (7354 <k_sched_lock+0xc4>)
    72b0:	2381      	movs	r3, #129	; 0x81
    72b2:	f002 fcd0 	bl	9c56 <printk>
    72b6:	4924      	ldr	r1, [pc, #144]	; (7348 <k_sched_lock+0xb8>)
    72b8:	4827      	ldr	r0, [pc, #156]	; (7358 <k_sched_lock+0xc8>)
    72ba:	f002 fccc 	bl	9c56 <printk>
    72be:	4823      	ldr	r0, [pc, #140]	; (734c <k_sched_lock+0xbc>)
    72c0:	2181      	movs	r1, #129	; 0x81
    72c2:	f002 fbf1 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    72c6:	4820      	ldr	r0, [pc, #128]	; (7348 <k_sched_lock+0xb8>)
    72c8:	f001 fb50 	bl	896c <z_spin_lock_set_owner>
    72cc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    72d0:	b163      	cbz	r3, 72ec <k_sched_lock+0x5c>
    72d2:	4922      	ldr	r1, [pc, #136]	; (735c <k_sched_lock+0xcc>)
    72d4:	4a22      	ldr	r2, [pc, #136]	; (7360 <k_sched_lock+0xd0>)
    72d6:	481f      	ldr	r0, [pc, #124]	; (7354 <k_sched_lock+0xc4>)
    72d8:	23fd      	movs	r3, #253	; 0xfd
    72da:	f002 fcbc 	bl	9c56 <printk>
    72de:	4821      	ldr	r0, [pc, #132]	; (7364 <k_sched_lock+0xd4>)
    72e0:	f002 fcb9 	bl	9c56 <printk>
    72e4:	481e      	ldr	r0, [pc, #120]	; (7360 <k_sched_lock+0xd0>)
    72e6:	21fd      	movs	r1, #253	; 0xfd
    72e8:	f002 fbde 	bl	9aa8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    72ec:	4c1e      	ldr	r4, [pc, #120]	; (7368 <k_sched_lock+0xd8>)
    72ee:	68a2      	ldr	r2, [r4, #8]
    72f0:	7bd2      	ldrb	r2, [r2, #15]
    72f2:	2a01      	cmp	r2, #1
    72f4:	d10c      	bne.n	7310 <k_sched_lock+0x80>
    72f6:	491d      	ldr	r1, [pc, #116]	; (736c <k_sched_lock+0xdc>)
    72f8:	4a19      	ldr	r2, [pc, #100]	; (7360 <k_sched_lock+0xd0>)
    72fa:	4816      	ldr	r0, [pc, #88]	; (7354 <k_sched_lock+0xc4>)
    72fc:	23fe      	movs	r3, #254	; 0xfe
    72fe:	f002 fcaa 	bl	9c56 <printk>
    7302:	4818      	ldr	r0, [pc, #96]	; (7364 <k_sched_lock+0xd4>)
    7304:	f002 fca7 	bl	9c56 <printk>
    7308:	4815      	ldr	r0, [pc, #84]	; (7360 <k_sched_lock+0xd0>)
    730a:	21fe      	movs	r1, #254	; 0xfe
    730c:	f002 fbcc 	bl	9aa8 <assert_post_action>
	--_current->base.sched_locked;
    7310:	68a2      	ldr	r2, [r4, #8]
    7312:	7bd3      	ldrb	r3, [r2, #15]
    7314:	3b01      	subs	r3, #1
    7316:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7318:	480b      	ldr	r0, [pc, #44]	; (7348 <k_sched_lock+0xb8>)
    731a:	f001 fb17 	bl	894c <z_spin_unlock_valid>
    731e:	b968      	cbnz	r0, 733c <k_sched_lock+0xac>
    7320:	4a0a      	ldr	r2, [pc, #40]	; (734c <k_sched_lock+0xbc>)
    7322:	4913      	ldr	r1, [pc, #76]	; (7370 <k_sched_lock+0xe0>)
    7324:	480b      	ldr	r0, [pc, #44]	; (7354 <k_sched_lock+0xc4>)
    7326:	23ac      	movs	r3, #172	; 0xac
    7328:	f002 fc95 	bl	9c56 <printk>
    732c:	4906      	ldr	r1, [pc, #24]	; (7348 <k_sched_lock+0xb8>)
    732e:	4811      	ldr	r0, [pc, #68]	; (7374 <k_sched_lock+0xe4>)
    7330:	f002 fc91 	bl	9c56 <printk>
    7334:	4805      	ldr	r0, [pc, #20]	; (734c <k_sched_lock+0xbc>)
    7336:	21ac      	movs	r1, #172	; 0xac
    7338:	f002 fbb6 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    733c:	f385 8811 	msr	BASEPRI, r5
    7340:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7344:	bd38      	pop	{r3, r4, r5, pc}
    7346:	bf00      	nop
    7348:	20000fcc 	.word	0x20000fcc
    734c:	0000b39a 	.word	0x0000b39a
    7350:	0000b3ec 	.word	0x0000b3ec
    7354:	0000ac83 	.word	0x0000ac83
    7358:	0000b401 	.word	0x0000b401
    735c:	0000bd79 	.word	0x0000bd79
    7360:	0000bdc7 	.word	0x0000bdc7
    7364:	0000bdf2 	.word	0x0000bdf2
    7368:	20000f98 	.word	0x20000f98
    736c:	0000bdf5 	.word	0x0000bdf5
    7370:	0000b3c0 	.word	0x0000b3c0
    7374:	0000b3d7 	.word	0x0000b3d7

00007378 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7378:	4b0c      	ldr	r3, [pc, #48]	; (73ac <z_priq_dumb_remove+0x34>)
    737a:	4299      	cmp	r1, r3
{
    737c:	b510      	push	{r4, lr}
    737e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7380:	d10b      	bne.n	739a <z_priq_dumb_remove+0x22>
    7382:	490b      	ldr	r1, [pc, #44]	; (73b0 <z_priq_dumb_remove+0x38>)
    7384:	480b      	ldr	r0, [pc, #44]	; (73b4 <z_priq_dumb_remove+0x3c>)
    7386:	4a0c      	ldr	r2, [pc, #48]	; (73b8 <z_priq_dumb_remove+0x40>)
    7388:	f240 33e7 	movw	r3, #999	; 0x3e7
    738c:	f002 fc63 	bl	9c56 <printk>
    7390:	4809      	ldr	r0, [pc, #36]	; (73b8 <z_priq_dumb_remove+0x40>)
    7392:	f240 31e7 	movw	r1, #999	; 0x3e7
    7396:	f002 fb87 	bl	9aa8 <assert_post_action>
	sys_dnode_t *const next = node->next;
    739a:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    739e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    73a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    73a2:	2300      	movs	r3, #0
	node->prev = NULL;
    73a4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    73a8:	bd10      	pop	{r4, pc}
    73aa:	bf00      	nop
    73ac:	20000708 	.word	0x20000708
    73b0:	0000bf78 	.word	0x0000bf78
    73b4:	0000ac83 	.word	0x0000ac83
    73b8:	0000bf56 	.word	0x0000bf56

000073bc <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    73bc:	6883      	ldr	r3, [r0, #8]
{
    73be:	b510      	push	{r4, lr}
    73c0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    73c2:	b95b      	cbnz	r3, 73dc <unpend_thread_no_timeout+0x20>
    73c4:	490b      	ldr	r1, [pc, #44]	; (73f4 <unpend_thread_no_timeout+0x38>)
    73c6:	480c      	ldr	r0, [pc, #48]	; (73f8 <unpend_thread_no_timeout+0x3c>)
    73c8:	4a0c      	ldr	r2, [pc, #48]	; (73fc <unpend_thread_no_timeout+0x40>)
    73ca:	f240 2383 	movw	r3, #643	; 0x283
    73ce:	f002 fc42 	bl	9c56 <printk>
    73d2:	480a      	ldr	r0, [pc, #40]	; (73fc <unpend_thread_no_timeout+0x40>)
    73d4:	f240 2183 	movw	r1, #643	; 0x283
    73d8:	f002 fb66 	bl	9aa8 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    73dc:	68a0      	ldr	r0, [r4, #8]
    73de:	4621      	mov	r1, r4
    73e0:	f7ff ffca 	bl	7378 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    73e4:	7b63      	ldrb	r3, [r4, #13]
    73e6:	f023 0302 	bic.w	r3, r3, #2
    73ea:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    73ec:	2300      	movs	r3, #0
    73ee:	60a3      	str	r3, [r4, #8]
}
    73f0:	bd10      	pop	{r4, pc}
    73f2:	bf00      	nop
    73f4:	0000bf99 	.word	0x0000bf99
    73f8:	0000ac83 	.word	0x0000ac83
    73fc:	0000bf56 	.word	0x0000bf56

00007400 <z_unpend_thread>:
{
    7400:	b538      	push	{r3, r4, r5, lr}
    7402:	4604      	mov	r4, r0
	__asm__ volatile(
    7404:	f04f 0320 	mov.w	r3, #32
    7408:	f3ef 8511 	mrs	r5, BASEPRI
    740c:	f383 8812 	msr	BASEPRI_MAX, r3
    7410:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7414:	4819      	ldr	r0, [pc, #100]	; (747c <z_unpend_thread+0x7c>)
    7416:	f001 fa8b 	bl	8930 <z_spin_lock_valid>
    741a:	b968      	cbnz	r0, 7438 <z_unpend_thread+0x38>
    741c:	4a18      	ldr	r2, [pc, #96]	; (7480 <z_unpend_thread+0x80>)
    741e:	4919      	ldr	r1, [pc, #100]	; (7484 <z_unpend_thread+0x84>)
    7420:	4819      	ldr	r0, [pc, #100]	; (7488 <z_unpend_thread+0x88>)
    7422:	2381      	movs	r3, #129	; 0x81
    7424:	f002 fc17 	bl	9c56 <printk>
    7428:	4914      	ldr	r1, [pc, #80]	; (747c <z_unpend_thread+0x7c>)
    742a:	4818      	ldr	r0, [pc, #96]	; (748c <z_unpend_thread+0x8c>)
    742c:	f002 fc13 	bl	9c56 <printk>
    7430:	4813      	ldr	r0, [pc, #76]	; (7480 <z_unpend_thread+0x80>)
    7432:	2181      	movs	r1, #129	; 0x81
    7434:	f002 fb38 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7438:	4810      	ldr	r0, [pc, #64]	; (747c <z_unpend_thread+0x7c>)
    743a:	f001 fa97 	bl	896c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    743e:	4620      	mov	r0, r4
    7440:	f7ff ffbc 	bl	73bc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7444:	480d      	ldr	r0, [pc, #52]	; (747c <z_unpend_thread+0x7c>)
    7446:	f001 fa81 	bl	894c <z_spin_unlock_valid>
    744a:	b968      	cbnz	r0, 7468 <z_unpend_thread+0x68>
    744c:	4a0c      	ldr	r2, [pc, #48]	; (7480 <z_unpend_thread+0x80>)
    744e:	4910      	ldr	r1, [pc, #64]	; (7490 <z_unpend_thread+0x90>)
    7450:	480d      	ldr	r0, [pc, #52]	; (7488 <z_unpend_thread+0x88>)
    7452:	23ac      	movs	r3, #172	; 0xac
    7454:	f002 fbff 	bl	9c56 <printk>
    7458:	4908      	ldr	r1, [pc, #32]	; (747c <z_unpend_thread+0x7c>)
    745a:	480e      	ldr	r0, [pc, #56]	; (7494 <z_unpend_thread+0x94>)
    745c:	f002 fbfb 	bl	9c56 <printk>
    7460:	4807      	ldr	r0, [pc, #28]	; (7480 <z_unpend_thread+0x80>)
    7462:	21ac      	movs	r1, #172	; 0xac
    7464:	f002 fb20 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7468:	f385 8811 	msr	BASEPRI, r5
    746c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7470:	f104 0018 	add.w	r0, r4, #24
}
    7474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7478:	f001 bba4 	b.w	8bc4 <z_abort_timeout>
    747c:	20000fcc 	.word	0x20000fcc
    7480:	0000b39a 	.word	0x0000b39a
    7484:	0000b3ec 	.word	0x0000b3ec
    7488:	0000ac83 	.word	0x0000ac83
    748c:	0000b401 	.word	0x0000b401
    7490:	0000b3c0 	.word	0x0000b3c0
    7494:	0000b3d7 	.word	0x0000b3d7

00007498 <update_cache>:
{
    7498:	b538      	push	{r3, r4, r5, lr}
    749a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    749c:	4814      	ldr	r0, [pc, #80]	; (74f0 <update_cache+0x58>)
    749e:	4d15      	ldr	r5, [pc, #84]	; (74f4 <update_cache+0x5c>)
    74a0:	f003 f8ce 	bl	a640 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    74a4:	4604      	mov	r4, r0
    74a6:	b900      	cbnz	r0, 74aa <update_cache+0x12>
    74a8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    74aa:	b9ca      	cbnz	r2, 74e0 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    74ac:	68ab      	ldr	r3, [r5, #8]
    74ae:	b963      	cbnz	r3, 74ca <update_cache+0x32>
    74b0:	4911      	ldr	r1, [pc, #68]	; (74f8 <update_cache+0x60>)
    74b2:	4a12      	ldr	r2, [pc, #72]	; (74fc <update_cache+0x64>)
    74b4:	4812      	ldr	r0, [pc, #72]	; (7500 <update_cache+0x68>)
    74b6:	2389      	movs	r3, #137	; 0x89
    74b8:	f002 fbcd 	bl	9c56 <printk>
    74bc:	4811      	ldr	r0, [pc, #68]	; (7504 <update_cache+0x6c>)
    74be:	f002 fbca 	bl	9c56 <printk>
    74c2:	480e      	ldr	r0, [pc, #56]	; (74fc <update_cache+0x64>)
    74c4:	2189      	movs	r1, #137	; 0x89
    74c6:	f002 faef 	bl	9aa8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    74ca:	68ab      	ldr	r3, [r5, #8]
    74cc:	7b5a      	ldrb	r2, [r3, #13]
    74ce:	06d2      	lsls	r2, r2, #27
    74d0:	d106      	bne.n	74e0 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    74d2:	69a2      	ldr	r2, [r4, #24]
    74d4:	b922      	cbnz	r2, 74e0 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    74d6:	89da      	ldrh	r2, [r3, #14]
    74d8:	2a7f      	cmp	r2, #127	; 0x7f
    74da:	d901      	bls.n	74e0 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    74dc:	61eb      	str	r3, [r5, #28]
}
    74de:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    74e0:	68ab      	ldr	r3, [r5, #8]
    74e2:	42a3      	cmp	r3, r4
    74e4:	d001      	beq.n	74ea <update_cache+0x52>
			z_reset_time_slice();
    74e6:	f7ff fdcb 	bl	7080 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    74ea:	61ec      	str	r4, [r5, #28]
}
    74ec:	e7f7      	b.n	74de <update_cache+0x46>
    74ee:	bf00      	nop
    74f0:	20000fb8 	.word	0x20000fb8
    74f4:	20000f98 	.word	0x20000f98
    74f8:	0000bfb0 	.word	0x0000bfb0
    74fc:	0000bf56 	.word	0x0000bf56
    7500:	0000ac83 	.word	0x0000ac83
    7504:	0000bdf2 	.word	0x0000bdf2

00007508 <move_thread_to_end_of_prio_q>:
{
    7508:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    750a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    750e:	7b43      	ldrb	r3, [r0, #13]
    7510:	2a00      	cmp	r2, #0
{
    7512:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7514:	da06      	bge.n	7524 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    751a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    751c:	4601      	mov	r1, r0
    751e:	481f      	ldr	r0, [pc, #124]	; (759c <move_thread_to_end_of_prio_q+0x94>)
    7520:	f7ff ff2a 	bl	7378 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7524:	7b63      	ldrb	r3, [r4, #13]
    7526:	f063 037f 	orn	r3, r3, #127	; 0x7f
    752a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    752c:	4b1c      	ldr	r3, [pc, #112]	; (75a0 <move_thread_to_end_of_prio_q+0x98>)
    752e:	429c      	cmp	r4, r3
    7530:	d109      	bne.n	7546 <move_thread_to_end_of_prio_q+0x3e>
    7532:	491c      	ldr	r1, [pc, #112]	; (75a4 <move_thread_to_end_of_prio_q+0x9c>)
    7534:	481c      	ldr	r0, [pc, #112]	; (75a8 <move_thread_to_end_of_prio_q+0xa0>)
    7536:	4a1d      	ldr	r2, [pc, #116]	; (75ac <move_thread_to_end_of_prio_q+0xa4>)
    7538:	23ba      	movs	r3, #186	; 0xba
    753a:	f002 fb8c 	bl	9c56 <printk>
    753e:	481b      	ldr	r0, [pc, #108]	; (75ac <move_thread_to_end_of_prio_q+0xa4>)
    7540:	21ba      	movs	r1, #186	; 0xba
    7542:	f002 fab1 	bl	9aa8 <assert_post_action>
	return list->head == list;
    7546:	4a1a      	ldr	r2, [pc, #104]	; (75b0 <move_thread_to_end_of_prio_q+0xa8>)
    7548:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    754a:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    754c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7550:	428b      	cmp	r3, r1
    7552:	bf08      	it	eq
    7554:	2300      	moveq	r3, #0
    7556:	2b00      	cmp	r3, #0
    7558:	bf38      	it	cc
    755a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    755c:	b1cb      	cbz	r3, 7592 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    755e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7562:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    7566:	4286      	cmp	r6, r0
    7568:	d00f      	beq.n	758a <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    756a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    756c:	2800      	cmp	r0, #0
    756e:	dd0c      	ble.n	758a <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    7570:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    7572:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    7576:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    7578:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    757a:	6890      	ldr	r0, [r2, #8]
    757c:	1b03      	subs	r3, r0, r4
    757e:	4258      	negs	r0, r3
}
    7580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    7584:	4158      	adcs	r0, r3
    7586:	f7ff bf87 	b.w	7498 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    758a:	42ab      	cmp	r3, r5
    758c:	d001      	beq.n	7592 <move_thread_to_end_of_prio_q+0x8a>
    758e:	681b      	ldr	r3, [r3, #0]
    7590:	e7e4      	b.n	755c <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    7592:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    7596:	602c      	str	r4, [r5, #0]
	list->tail = node;
    7598:	6254      	str	r4, [r2, #36]	; 0x24
}
    759a:	e7ee      	b.n	757a <move_thread_to_end_of_prio_q+0x72>
    759c:	20000fb8 	.word	0x20000fb8
    75a0:	20000708 	.word	0x20000708
    75a4:	0000bf78 	.word	0x0000bf78
    75a8:	0000ac83 	.word	0x0000ac83
    75ac:	0000bf56 	.word	0x0000bf56
    75b0:	20000f98 	.word	0x20000f98

000075b4 <z_time_slice>:
{
    75b4:	b570      	push	{r4, r5, r6, lr}
    75b6:	4604      	mov	r4, r0
	__asm__ volatile(
    75b8:	f04f 0320 	mov.w	r3, #32
    75bc:	f3ef 8511 	mrs	r5, BASEPRI
    75c0:	f383 8812 	msr	BASEPRI_MAX, r3
    75c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75c8:	482a      	ldr	r0, [pc, #168]	; (7674 <z_time_slice+0xc0>)
    75ca:	f001 f9b1 	bl	8930 <z_spin_lock_valid>
    75ce:	b968      	cbnz	r0, 75ec <z_time_slice+0x38>
    75d0:	4a29      	ldr	r2, [pc, #164]	; (7678 <z_time_slice+0xc4>)
    75d2:	492a      	ldr	r1, [pc, #168]	; (767c <z_time_slice+0xc8>)
    75d4:	482a      	ldr	r0, [pc, #168]	; (7680 <z_time_slice+0xcc>)
    75d6:	2381      	movs	r3, #129	; 0x81
    75d8:	f002 fb3d 	bl	9c56 <printk>
    75dc:	4925      	ldr	r1, [pc, #148]	; (7674 <z_time_slice+0xc0>)
    75de:	4829      	ldr	r0, [pc, #164]	; (7684 <z_time_slice+0xd0>)
    75e0:	f002 fb39 	bl	9c56 <printk>
    75e4:	4824      	ldr	r0, [pc, #144]	; (7678 <z_time_slice+0xc4>)
    75e6:	2181      	movs	r1, #129	; 0x81
    75e8:	f002 fa5e 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    75ec:	4821      	ldr	r0, [pc, #132]	; (7674 <z_time_slice+0xc0>)
    75ee:	f001 f9bd 	bl	896c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    75f2:	4b25      	ldr	r3, [pc, #148]	; (7688 <z_time_slice+0xd4>)
    75f4:	4a25      	ldr	r2, [pc, #148]	; (768c <z_time_slice+0xd8>)
    75f6:	6898      	ldr	r0, [r3, #8]
    75f8:	6811      	ldr	r1, [r2, #0]
    75fa:	4288      	cmp	r0, r1
    75fc:	4619      	mov	r1, r3
    75fe:	d118      	bne.n	7632 <z_time_slice+0x7e>
			z_reset_time_slice();
    7600:	f7ff fd3e 	bl	7080 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7604:	481b      	ldr	r0, [pc, #108]	; (7674 <z_time_slice+0xc0>)
    7606:	f001 f9a1 	bl	894c <z_spin_unlock_valid>
    760a:	b968      	cbnz	r0, 7628 <z_time_slice+0x74>
    760c:	4a1a      	ldr	r2, [pc, #104]	; (7678 <z_time_slice+0xc4>)
    760e:	4920      	ldr	r1, [pc, #128]	; (7690 <z_time_slice+0xdc>)
    7610:	481b      	ldr	r0, [pc, #108]	; (7680 <z_time_slice+0xcc>)
    7612:	23ac      	movs	r3, #172	; 0xac
    7614:	f002 fb1f 	bl	9c56 <printk>
    7618:	4916      	ldr	r1, [pc, #88]	; (7674 <z_time_slice+0xc0>)
    761a:	481e      	ldr	r0, [pc, #120]	; (7694 <z_time_slice+0xe0>)
    761c:	f002 fb1b 	bl	9c56 <printk>
    7620:	4815      	ldr	r0, [pc, #84]	; (7678 <z_time_slice+0xc4>)
    7622:	21ac      	movs	r1, #172	; 0xac
    7624:	f002 fa40 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7628:	f385 8811 	msr	BASEPRI, r5
    762c:	f3bf 8f6f 	isb	sy
}
    7630:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    7632:	2600      	movs	r6, #0
    7634:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    7636:	4a18      	ldr	r2, [pc, #96]	; (7698 <z_time_slice+0xe4>)
    7638:	6812      	ldr	r2, [r2, #0]
    763a:	b1ba      	cbz	r2, 766c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    763c:	89c2      	ldrh	r2, [r0, #14]
    763e:	2a7f      	cmp	r2, #127	; 0x7f
    7640:	d814      	bhi.n	766c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    7642:	7b42      	ldrb	r2, [r0, #13]
    7644:	06d2      	lsls	r2, r2, #27
    7646:	d111      	bne.n	766c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7648:	4a14      	ldr	r2, [pc, #80]	; (769c <z_time_slice+0xe8>)
    764a:	f990 600e 	ldrsb.w	r6, [r0, #14]
    764e:	6812      	ldr	r2, [r2, #0]
    7650:	4296      	cmp	r6, r2
    7652:	db0b      	blt.n	766c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    7654:	4a12      	ldr	r2, [pc, #72]	; (76a0 <z_time_slice+0xec>)
    7656:	4290      	cmp	r0, r2
    7658:	d008      	beq.n	766c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    765a:	691a      	ldr	r2, [r3, #16]
    765c:	42a2      	cmp	r2, r4
    765e:	dc02      	bgt.n	7666 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    7660:	f7ff ff52 	bl	7508 <move_thread_to_end_of_prio_q>
    7664:	e7cc      	b.n	7600 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    7666:	1b12      	subs	r2, r2, r4
    7668:	611a      	str	r2, [r3, #16]
    766a:	e7cb      	b.n	7604 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    766c:	2300      	movs	r3, #0
    766e:	610b      	str	r3, [r1, #16]
    7670:	e7c8      	b.n	7604 <z_time_slice+0x50>
    7672:	bf00      	nop
    7674:	20000fcc 	.word	0x20000fcc
    7678:	0000b39a 	.word	0x0000b39a
    767c:	0000b3ec 	.word	0x0000b3ec
    7680:	0000ac83 	.word	0x0000ac83
    7684:	0000b401 	.word	0x0000b401
    7688:	20000f98 	.word	0x20000f98
    768c:	20000fc8 	.word	0x20000fc8
    7690:	0000b3c0 	.word	0x0000b3c0
    7694:	0000b3d7 	.word	0x0000b3d7
    7698:	20000fd4 	.word	0x20000fd4
    769c:	20000fd0 	.word	0x20000fd0
    76a0:	20000708 	.word	0x20000708

000076a4 <ready_thread>:
{
    76a4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    76a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    76aa:	7b43      	ldrb	r3, [r0, #13]
    76ac:	2a00      	cmp	r2, #0
{
    76ae:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    76b0:	db3e      	blt.n	7730 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    76b2:	06da      	lsls	r2, r3, #27
    76b4:	d13c      	bne.n	7730 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    76b6:	6985      	ldr	r5, [r0, #24]
    76b8:	2d00      	cmp	r5, #0
    76ba:	d139      	bne.n	7730 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    76bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    76c0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    76c2:	4b1c      	ldr	r3, [pc, #112]	; (7734 <ready_thread+0x90>)
    76c4:	4298      	cmp	r0, r3
    76c6:	d109      	bne.n	76dc <ready_thread+0x38>
    76c8:	491b      	ldr	r1, [pc, #108]	; (7738 <ready_thread+0x94>)
    76ca:	481c      	ldr	r0, [pc, #112]	; (773c <ready_thread+0x98>)
    76cc:	4a1c      	ldr	r2, [pc, #112]	; (7740 <ready_thread+0x9c>)
    76ce:	23ba      	movs	r3, #186	; 0xba
    76d0:	f002 fac1 	bl	9c56 <printk>
    76d4:	481a      	ldr	r0, [pc, #104]	; (7740 <ready_thread+0x9c>)
    76d6:	21ba      	movs	r1, #186	; 0xba
    76d8:	f002 f9e6 	bl	9aa8 <assert_post_action>
	return list->head == list;
    76dc:	4919      	ldr	r1, [pc, #100]	; (7744 <ready_thread+0xa0>)
    76de:	460b      	mov	r3, r1
    76e0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    76e4:	4298      	cmp	r0, r3
    76e6:	bf18      	it	ne
    76e8:	4605      	movne	r5, r0
    76ea:	2d00      	cmp	r5, #0
    76ec:	461a      	mov	r2, r3
    76ee:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    76f0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    76f2:	bf38      	it	cc
    76f4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    76f6:	b1b3      	cbz	r3, 7726 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    76f8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    76fc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    7700:	4286      	cmp	r6, r0
    7702:	d00c      	beq.n	771e <ready_thread+0x7a>
		return b2 - b1;
    7704:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7706:	2800      	cmp	r0, #0
    7708:	dd09      	ble.n	771e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    770a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    770c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7710:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7712:	605c      	str	r4, [r3, #4]
}
    7714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    7718:	2000      	movs	r0, #0
    771a:	f7ff bebd 	b.w	7498 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    771e:	42ab      	cmp	r3, r5
    7720:	d001      	beq.n	7726 <ready_thread+0x82>
    7722:	681b      	ldr	r3, [r3, #0]
    7724:	e7e7      	b.n	76f6 <ready_thread+0x52>
	node->prev = tail;
    7726:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    772a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    772c:	624c      	str	r4, [r1, #36]	; 0x24
}
    772e:	e7f1      	b.n	7714 <ready_thread+0x70>
}
    7730:	bd70      	pop	{r4, r5, r6, pc}
    7732:	bf00      	nop
    7734:	20000708 	.word	0x20000708
    7738:	0000bf78 	.word	0x0000bf78
    773c:	0000ac83 	.word	0x0000ac83
    7740:	0000bf56 	.word	0x0000bf56
    7744:	20000f98 	.word	0x20000f98

00007748 <z_ready_thread>:
{
    7748:	b538      	push	{r3, r4, r5, lr}
    774a:	4604      	mov	r4, r0
	__asm__ volatile(
    774c:	f04f 0320 	mov.w	r3, #32
    7750:	f3ef 8511 	mrs	r5, BASEPRI
    7754:	f383 8812 	msr	BASEPRI_MAX, r3
    7758:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    775c:	4817      	ldr	r0, [pc, #92]	; (77bc <z_ready_thread+0x74>)
    775e:	f001 f8e7 	bl	8930 <z_spin_lock_valid>
    7762:	b968      	cbnz	r0, 7780 <z_ready_thread+0x38>
    7764:	4a16      	ldr	r2, [pc, #88]	; (77c0 <z_ready_thread+0x78>)
    7766:	4917      	ldr	r1, [pc, #92]	; (77c4 <z_ready_thread+0x7c>)
    7768:	4817      	ldr	r0, [pc, #92]	; (77c8 <z_ready_thread+0x80>)
    776a:	2381      	movs	r3, #129	; 0x81
    776c:	f002 fa73 	bl	9c56 <printk>
    7770:	4912      	ldr	r1, [pc, #72]	; (77bc <z_ready_thread+0x74>)
    7772:	4816      	ldr	r0, [pc, #88]	; (77cc <z_ready_thread+0x84>)
    7774:	f002 fa6f 	bl	9c56 <printk>
    7778:	4811      	ldr	r0, [pc, #68]	; (77c0 <z_ready_thread+0x78>)
    777a:	2181      	movs	r1, #129	; 0x81
    777c:	f002 f994 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7780:	480e      	ldr	r0, [pc, #56]	; (77bc <z_ready_thread+0x74>)
    7782:	f001 f8f3 	bl	896c <z_spin_lock_set_owner>
			ready_thread(thread);
    7786:	4620      	mov	r0, r4
    7788:	f7ff ff8c 	bl	76a4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    778c:	480b      	ldr	r0, [pc, #44]	; (77bc <z_ready_thread+0x74>)
    778e:	f001 f8dd 	bl	894c <z_spin_unlock_valid>
    7792:	b968      	cbnz	r0, 77b0 <z_ready_thread+0x68>
    7794:	4a0a      	ldr	r2, [pc, #40]	; (77c0 <z_ready_thread+0x78>)
    7796:	490e      	ldr	r1, [pc, #56]	; (77d0 <z_ready_thread+0x88>)
    7798:	480b      	ldr	r0, [pc, #44]	; (77c8 <z_ready_thread+0x80>)
    779a:	23ac      	movs	r3, #172	; 0xac
    779c:	f002 fa5b 	bl	9c56 <printk>
    77a0:	4906      	ldr	r1, [pc, #24]	; (77bc <z_ready_thread+0x74>)
    77a2:	480c      	ldr	r0, [pc, #48]	; (77d4 <z_ready_thread+0x8c>)
    77a4:	f002 fa57 	bl	9c56 <printk>
    77a8:	4805      	ldr	r0, [pc, #20]	; (77c0 <z_ready_thread+0x78>)
    77aa:	21ac      	movs	r1, #172	; 0xac
    77ac:	f002 f97c 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    77b0:	f385 8811 	msr	BASEPRI, r5
    77b4:	f3bf 8f6f 	isb	sy
}
    77b8:	bd38      	pop	{r3, r4, r5, pc}
    77ba:	bf00      	nop
    77bc:	20000fcc 	.word	0x20000fcc
    77c0:	0000b39a 	.word	0x0000b39a
    77c4:	0000b3ec 	.word	0x0000b3ec
    77c8:	0000ac83 	.word	0x0000ac83
    77cc:	0000b401 	.word	0x0000b401
    77d0:	0000b3c0 	.word	0x0000b3c0
    77d4:	0000b3d7 	.word	0x0000b3d7

000077d8 <z_sched_start>:
{
    77d8:	b538      	push	{r3, r4, r5, lr}
    77da:	4604      	mov	r4, r0
	__asm__ volatile(
    77dc:	f04f 0320 	mov.w	r3, #32
    77e0:	f3ef 8511 	mrs	r5, BASEPRI
    77e4:	f383 8812 	msr	BASEPRI_MAX, r3
    77e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77ec:	481d      	ldr	r0, [pc, #116]	; (7864 <z_sched_start+0x8c>)
    77ee:	f001 f89f 	bl	8930 <z_spin_lock_valid>
    77f2:	b968      	cbnz	r0, 7810 <z_sched_start+0x38>
    77f4:	4a1c      	ldr	r2, [pc, #112]	; (7868 <z_sched_start+0x90>)
    77f6:	491d      	ldr	r1, [pc, #116]	; (786c <z_sched_start+0x94>)
    77f8:	481d      	ldr	r0, [pc, #116]	; (7870 <z_sched_start+0x98>)
    77fa:	2381      	movs	r3, #129	; 0x81
    77fc:	f002 fa2b 	bl	9c56 <printk>
    7800:	4918      	ldr	r1, [pc, #96]	; (7864 <z_sched_start+0x8c>)
    7802:	481c      	ldr	r0, [pc, #112]	; (7874 <z_sched_start+0x9c>)
    7804:	f002 fa27 	bl	9c56 <printk>
    7808:	4817      	ldr	r0, [pc, #92]	; (7868 <z_sched_start+0x90>)
    780a:	2181      	movs	r1, #129	; 0x81
    780c:	f002 f94c 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7810:	4814      	ldr	r0, [pc, #80]	; (7864 <z_sched_start+0x8c>)
    7812:	f001 f8ab 	bl	896c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    7816:	7b63      	ldrb	r3, [r4, #13]
    7818:	075a      	lsls	r2, r3, #29
    781a:	d416      	bmi.n	784a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    781c:	4811      	ldr	r0, [pc, #68]	; (7864 <z_sched_start+0x8c>)
    781e:	f001 f895 	bl	894c <z_spin_unlock_valid>
    7822:	b968      	cbnz	r0, 7840 <z_sched_start+0x68>
    7824:	4a10      	ldr	r2, [pc, #64]	; (7868 <z_sched_start+0x90>)
    7826:	4914      	ldr	r1, [pc, #80]	; (7878 <z_sched_start+0xa0>)
    7828:	4811      	ldr	r0, [pc, #68]	; (7870 <z_sched_start+0x98>)
    782a:	23ac      	movs	r3, #172	; 0xac
    782c:	f002 fa13 	bl	9c56 <printk>
    7830:	490c      	ldr	r1, [pc, #48]	; (7864 <z_sched_start+0x8c>)
    7832:	4812      	ldr	r0, [pc, #72]	; (787c <z_sched_start+0xa4>)
    7834:	f002 fa0f 	bl	9c56 <printk>
    7838:	480b      	ldr	r0, [pc, #44]	; (7868 <z_sched_start+0x90>)
    783a:	21ac      	movs	r1, #172	; 0xac
    783c:	f002 f934 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7840:	f385 8811 	msr	BASEPRI, r5
    7844:	f3bf 8f6f 	isb	sy
}
    7848:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    784a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    784e:	4620      	mov	r0, r4
    7850:	7363      	strb	r3, [r4, #13]
    7852:	f7ff ff27 	bl	76a4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7856:	4629      	mov	r1, r5
    7858:	4802      	ldr	r0, [pc, #8]	; (7864 <z_sched_start+0x8c>)
}
    785a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    785e:	f7ff bcd3 	b.w	7208 <z_reschedule>
    7862:	bf00      	nop
    7864:	20000fcc 	.word	0x20000fcc
    7868:	0000b39a 	.word	0x0000b39a
    786c:	0000b3ec 	.word	0x0000b3ec
    7870:	0000ac83 	.word	0x0000ac83
    7874:	0000b401 	.word	0x0000b401
    7878:	0000b3c0 	.word	0x0000b3c0
    787c:	0000b3d7 	.word	0x0000b3d7

00007880 <z_thread_timeout>:
{
    7880:	b570      	push	{r4, r5, r6, lr}
    7882:	4604      	mov	r4, r0
	__asm__ volatile(
    7884:	f04f 0320 	mov.w	r3, #32
    7888:	f3ef 8611 	mrs	r6, BASEPRI
    788c:	f383 8812 	msr	BASEPRI_MAX, r3
    7890:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7894:	4820      	ldr	r0, [pc, #128]	; (7918 <z_thread_timeout+0x98>)
    7896:	f001 f84b 	bl	8930 <z_spin_lock_valid>
    789a:	b968      	cbnz	r0, 78b8 <z_thread_timeout+0x38>
    789c:	4a1f      	ldr	r2, [pc, #124]	; (791c <z_thread_timeout+0x9c>)
    789e:	4920      	ldr	r1, [pc, #128]	; (7920 <z_thread_timeout+0xa0>)
    78a0:	4820      	ldr	r0, [pc, #128]	; (7924 <z_thread_timeout+0xa4>)
    78a2:	2381      	movs	r3, #129	; 0x81
    78a4:	f002 f9d7 	bl	9c56 <printk>
    78a8:	491b      	ldr	r1, [pc, #108]	; (7918 <z_thread_timeout+0x98>)
    78aa:	481f      	ldr	r0, [pc, #124]	; (7928 <z_thread_timeout+0xa8>)
    78ac:	f002 f9d3 	bl	9c56 <printk>
    78b0:	481a      	ldr	r0, [pc, #104]	; (791c <z_thread_timeout+0x9c>)
    78b2:	2181      	movs	r1, #129	; 0x81
    78b4:	f002 f8f8 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    78b8:	4817      	ldr	r0, [pc, #92]	; (7918 <z_thread_timeout+0x98>)
    78ba:	f001 f857 	bl	896c <z_spin_lock_set_owner>
		if (!killed) {
    78be:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    78c2:	f013 0f28 	tst.w	r3, #40	; 0x28
    78c6:	d110      	bne.n	78ea <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    78c8:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    78cc:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    78d0:	b113      	cbz	r3, 78d8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    78d2:	4628      	mov	r0, r5
    78d4:	f7ff fd72 	bl	73bc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    78d8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    78dc:	f023 0314 	bic.w	r3, r3, #20
    78e0:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    78e4:	4628      	mov	r0, r5
    78e6:	f7ff fedd 	bl	76a4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78ea:	480b      	ldr	r0, [pc, #44]	; (7918 <z_thread_timeout+0x98>)
    78ec:	f001 f82e 	bl	894c <z_spin_unlock_valid>
    78f0:	b968      	cbnz	r0, 790e <z_thread_timeout+0x8e>
    78f2:	4a0a      	ldr	r2, [pc, #40]	; (791c <z_thread_timeout+0x9c>)
    78f4:	490d      	ldr	r1, [pc, #52]	; (792c <z_thread_timeout+0xac>)
    78f6:	480b      	ldr	r0, [pc, #44]	; (7924 <z_thread_timeout+0xa4>)
    78f8:	23ac      	movs	r3, #172	; 0xac
    78fa:	f002 f9ac 	bl	9c56 <printk>
    78fe:	4906      	ldr	r1, [pc, #24]	; (7918 <z_thread_timeout+0x98>)
    7900:	480b      	ldr	r0, [pc, #44]	; (7930 <z_thread_timeout+0xb0>)
    7902:	f002 f9a8 	bl	9c56 <printk>
    7906:	4805      	ldr	r0, [pc, #20]	; (791c <z_thread_timeout+0x9c>)
    7908:	21ac      	movs	r1, #172	; 0xac
    790a:	f002 f8cd 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    790e:	f386 8811 	msr	BASEPRI, r6
    7912:	f3bf 8f6f 	isb	sy
}
    7916:	bd70      	pop	{r4, r5, r6, pc}
    7918:	20000fcc 	.word	0x20000fcc
    791c:	0000b39a 	.word	0x0000b39a
    7920:	0000b3ec 	.word	0x0000b3ec
    7924:	0000ac83 	.word	0x0000ac83
    7928:	0000b401 	.word	0x0000b401
    792c:	0000b3c0 	.word	0x0000b3c0
    7930:	0000b3d7 	.word	0x0000b3d7

00007934 <unready_thread>:
{
    7934:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    7936:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    793a:	7b43      	ldrb	r3, [r0, #13]
    793c:	2a00      	cmp	r2, #0
{
    793e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7940:	da06      	bge.n	7950 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7946:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7948:	4601      	mov	r1, r0
    794a:	4806      	ldr	r0, [pc, #24]	; (7964 <unready_thread+0x30>)
    794c:	f7ff fd14 	bl	7378 <z_priq_dumb_remove>
	update_cache(thread == _current);
    7950:	4b05      	ldr	r3, [pc, #20]	; (7968 <unready_thread+0x34>)
    7952:	6898      	ldr	r0, [r3, #8]
    7954:	1b03      	subs	r3, r0, r4
    7956:	4258      	negs	r0, r3
}
    7958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    795c:	4158      	adcs	r0, r3
    795e:	f7ff bd9b 	b.w	7498 <update_cache>
    7962:	bf00      	nop
    7964:	20000fb8 	.word	0x20000fb8
    7968:	20000f98 	.word	0x20000f98

0000796c <add_to_waitq_locked>:
{
    796c:	b538      	push	{r3, r4, r5, lr}
    796e:	4604      	mov	r4, r0
    7970:	460d      	mov	r5, r1
	unready_thread(thread);
    7972:	f7ff ffdf 	bl	7934 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7976:	7b63      	ldrb	r3, [r4, #13]
    7978:	f043 0302 	orr.w	r3, r3, #2
    797c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    797e:	b31d      	cbz	r5, 79c8 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7980:	4b17      	ldr	r3, [pc, #92]	; (79e0 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    7982:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7984:	429c      	cmp	r4, r3
    7986:	d109      	bne.n	799c <add_to_waitq_locked+0x30>
    7988:	4916      	ldr	r1, [pc, #88]	; (79e4 <add_to_waitq_locked+0x78>)
    798a:	4817      	ldr	r0, [pc, #92]	; (79e8 <add_to_waitq_locked+0x7c>)
    798c:	4a17      	ldr	r2, [pc, #92]	; (79ec <add_to_waitq_locked+0x80>)
    798e:	23ba      	movs	r3, #186	; 0xba
    7990:	f002 f961 	bl	9c56 <printk>
    7994:	4815      	ldr	r0, [pc, #84]	; (79ec <add_to_waitq_locked+0x80>)
    7996:	21ba      	movs	r1, #186	; 0xba
    7998:	f002 f886 	bl	9aa8 <assert_post_action>
	return list->head == list;
    799c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    799e:	429d      	cmp	r5, r3
    79a0:	bf08      	it	eq
    79a2:	2300      	moveq	r3, #0
    79a4:	2b00      	cmp	r3, #0
    79a6:	bf38      	it	cc
    79a8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    79aa:	b19b      	cbz	r3, 79d4 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    79ac:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    79b0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    79b4:	4291      	cmp	r1, r2
    79b6:	d008      	beq.n	79ca <add_to_waitq_locked+0x5e>
		return b2 - b1;
    79b8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    79ba:	2a00      	cmp	r2, #0
    79bc:	dd05      	ble.n	79ca <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    79be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    79c0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    79c4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    79c6:	605c      	str	r4, [r3, #4]
}
    79c8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    79ca:	686a      	ldr	r2, [r5, #4]
    79cc:	4293      	cmp	r3, r2
    79ce:	d001      	beq.n	79d4 <add_to_waitq_locked+0x68>
    79d0:	681b      	ldr	r3, [r3, #0]
    79d2:	e7ea      	b.n	79aa <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    79d4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    79d6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    79da:	601c      	str	r4, [r3, #0]
	list->tail = node;
    79dc:	606c      	str	r4, [r5, #4]
    79de:	e7f3      	b.n	79c8 <add_to_waitq_locked+0x5c>
    79e0:	20000708 	.word	0x20000708
    79e4:	0000bf78 	.word	0x0000bf78
    79e8:	0000ac83 	.word	0x0000ac83
    79ec:	0000bf56 	.word	0x0000bf56

000079f0 <pend>:
{
    79f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79f4:	4604      	mov	r4, r0
    79f6:	460d      	mov	r5, r1
    79f8:	4616      	mov	r6, r2
    79fa:	461f      	mov	r7, r3
	__asm__ volatile(
    79fc:	f04f 0320 	mov.w	r3, #32
    7a00:	f3ef 8811 	mrs	r8, BASEPRI
    7a04:	f383 8812 	msr	BASEPRI_MAX, r3
    7a08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a0c:	481f      	ldr	r0, [pc, #124]	; (7a8c <pend+0x9c>)
    7a0e:	f000 ff8f 	bl	8930 <z_spin_lock_valid>
    7a12:	b968      	cbnz	r0, 7a30 <pend+0x40>
    7a14:	4a1e      	ldr	r2, [pc, #120]	; (7a90 <pend+0xa0>)
    7a16:	491f      	ldr	r1, [pc, #124]	; (7a94 <pend+0xa4>)
    7a18:	481f      	ldr	r0, [pc, #124]	; (7a98 <pend+0xa8>)
    7a1a:	2381      	movs	r3, #129	; 0x81
    7a1c:	f002 f91b 	bl	9c56 <printk>
    7a20:	491a      	ldr	r1, [pc, #104]	; (7a8c <pend+0x9c>)
    7a22:	481e      	ldr	r0, [pc, #120]	; (7a9c <pend+0xac>)
    7a24:	f002 f917 	bl	9c56 <printk>
    7a28:	4819      	ldr	r0, [pc, #100]	; (7a90 <pend+0xa0>)
    7a2a:	2181      	movs	r1, #129	; 0x81
    7a2c:	f002 f83c 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a30:	4816      	ldr	r0, [pc, #88]	; (7a8c <pend+0x9c>)
    7a32:	f000 ff9b 	bl	896c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    7a36:	4620      	mov	r0, r4
    7a38:	4629      	mov	r1, r5
    7a3a:	f7ff ff97 	bl	796c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a3e:	4813      	ldr	r0, [pc, #76]	; (7a8c <pend+0x9c>)
    7a40:	f000 ff84 	bl	894c <z_spin_unlock_valid>
    7a44:	b968      	cbnz	r0, 7a62 <pend+0x72>
    7a46:	4a12      	ldr	r2, [pc, #72]	; (7a90 <pend+0xa0>)
    7a48:	4915      	ldr	r1, [pc, #84]	; (7aa0 <pend+0xb0>)
    7a4a:	4813      	ldr	r0, [pc, #76]	; (7a98 <pend+0xa8>)
    7a4c:	23ac      	movs	r3, #172	; 0xac
    7a4e:	f002 f902 	bl	9c56 <printk>
    7a52:	490e      	ldr	r1, [pc, #56]	; (7a8c <pend+0x9c>)
    7a54:	4813      	ldr	r0, [pc, #76]	; (7aa4 <pend+0xb4>)
    7a56:	f002 f8fe 	bl	9c56 <printk>
    7a5a:	480d      	ldr	r0, [pc, #52]	; (7a90 <pend+0xa0>)
    7a5c:	21ac      	movs	r1, #172	; 0xac
    7a5e:	f002 f823 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7a62:	f388 8811 	msr	BASEPRI, r8
    7a66:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7a6a:	1c7b      	adds	r3, r7, #1
    7a6c:	bf08      	it	eq
    7a6e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    7a72:	d008      	beq.n	7a86 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7a74:	4632      	mov	r2, r6
    7a76:	463b      	mov	r3, r7
    7a78:	f104 0018 	add.w	r0, r4, #24
    7a7c:	490a      	ldr	r1, [pc, #40]	; (7aa8 <pend+0xb8>)
}
    7a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7a82:	f000 bfcb 	b.w	8a1c <z_add_timeout>
    7a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a8a:	bf00      	nop
    7a8c:	20000fcc 	.word	0x20000fcc
    7a90:	0000b39a 	.word	0x0000b39a
    7a94:	0000b3ec 	.word	0x0000b3ec
    7a98:	0000ac83 	.word	0x0000ac83
    7a9c:	0000b401 	.word	0x0000b401
    7aa0:	0000b3c0 	.word	0x0000b3c0
    7aa4:	0000b3d7 	.word	0x0000b3d7
    7aa8:	00007881 	.word	0x00007881

00007aac <z_pend_curr>:
{
    7aac:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    7aae:	4b11      	ldr	r3, [pc, #68]	; (7af4 <z_pend_curr+0x48>)
{
    7ab0:	4604      	mov	r4, r0
	pending_current = _current;
    7ab2:	6898      	ldr	r0, [r3, #8]
    7ab4:	4b10      	ldr	r3, [pc, #64]	; (7af8 <z_pend_curr+0x4c>)
{
    7ab6:	460d      	mov	r5, r1
	pending_current = _current;
    7ab8:	6018      	str	r0, [r3, #0]
{
    7aba:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    7abc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7ac0:	f7ff ff96 	bl	79f0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ac4:	4620      	mov	r0, r4
    7ac6:	f000 ff41 	bl	894c <z_spin_unlock_valid>
    7aca:	b968      	cbnz	r0, 7ae8 <z_pend_curr+0x3c>
    7acc:	4a0b      	ldr	r2, [pc, #44]	; (7afc <z_pend_curr+0x50>)
    7ace:	490c      	ldr	r1, [pc, #48]	; (7b00 <z_pend_curr+0x54>)
    7ad0:	480c      	ldr	r0, [pc, #48]	; (7b04 <z_pend_curr+0x58>)
    7ad2:	23c3      	movs	r3, #195	; 0xc3
    7ad4:	f002 f8bf 	bl	9c56 <printk>
    7ad8:	480b      	ldr	r0, [pc, #44]	; (7b08 <z_pend_curr+0x5c>)
    7ada:	4621      	mov	r1, r4
    7adc:	f002 f8bb 	bl	9c56 <printk>
    7ae0:	4806      	ldr	r0, [pc, #24]	; (7afc <z_pend_curr+0x50>)
    7ae2:	21c3      	movs	r1, #195	; 0xc3
    7ae4:	f001 ffe0 	bl	9aa8 <assert_post_action>
    7ae8:	4628      	mov	r0, r5
}
    7aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7aee:	f7fb ba85 	b.w	2ffc <arch_swap>
    7af2:	bf00      	nop
    7af4:	20000f98 	.word	0x20000f98
    7af8:	20000fc8 	.word	0x20000fc8
    7afc:	0000b39a 	.word	0x0000b39a
    7b00:	0000b3c0 	.word	0x0000b3c0
    7b04:	0000ac83 	.word	0x0000ac83
    7b08:	0000b3d7 	.word	0x0000b3d7

00007b0c <z_set_prio>:
{
    7b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b0e:	4604      	mov	r4, r0
    7b10:	460e      	mov	r6, r1
	__asm__ volatile(
    7b12:	f04f 0320 	mov.w	r3, #32
    7b16:	f3ef 8711 	mrs	r7, BASEPRI
    7b1a:	f383 8812 	msr	BASEPRI_MAX, r3
    7b1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b22:	483c      	ldr	r0, [pc, #240]	; (7c14 <z_set_prio+0x108>)
    7b24:	f000 ff04 	bl	8930 <z_spin_lock_valid>
    7b28:	b968      	cbnz	r0, 7b46 <z_set_prio+0x3a>
    7b2a:	4a3b      	ldr	r2, [pc, #236]	; (7c18 <z_set_prio+0x10c>)
    7b2c:	493b      	ldr	r1, [pc, #236]	; (7c1c <z_set_prio+0x110>)
    7b2e:	483c      	ldr	r0, [pc, #240]	; (7c20 <z_set_prio+0x114>)
    7b30:	2381      	movs	r3, #129	; 0x81
    7b32:	f002 f890 	bl	9c56 <printk>
    7b36:	4937      	ldr	r1, [pc, #220]	; (7c14 <z_set_prio+0x108>)
    7b38:	483a      	ldr	r0, [pc, #232]	; (7c24 <z_set_prio+0x118>)
    7b3a:	f002 f88c 	bl	9c56 <printk>
    7b3e:	4836      	ldr	r0, [pc, #216]	; (7c18 <z_set_prio+0x10c>)
    7b40:	2181      	movs	r1, #129	; 0x81
    7b42:	f001 ffb1 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b46:	4833      	ldr	r0, [pc, #204]	; (7c14 <z_set_prio+0x108>)
    7b48:	f000 ff10 	bl	896c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7b4c:	7b63      	ldrb	r3, [r4, #13]
    7b4e:	06da      	lsls	r2, r3, #27
    7b50:	b276      	sxtb	r6, r6
    7b52:	d15c      	bne.n	7c0e <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    7b54:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    7b56:	2d00      	cmp	r5, #0
    7b58:	d159      	bne.n	7c0e <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7b5e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7b60:	4831      	ldr	r0, [pc, #196]	; (7c28 <z_set_prio+0x11c>)
    7b62:	4621      	mov	r1, r4
    7b64:	f7ff fc08 	bl	7378 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7b68:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    7b6a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7b70:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7b72:	4b2e      	ldr	r3, [pc, #184]	; (7c2c <z_set_prio+0x120>)
    7b74:	429c      	cmp	r4, r3
    7b76:	d109      	bne.n	7b8c <z_set_prio+0x80>
    7b78:	492d      	ldr	r1, [pc, #180]	; (7c30 <z_set_prio+0x124>)
    7b7a:	4829      	ldr	r0, [pc, #164]	; (7c20 <z_set_prio+0x114>)
    7b7c:	4a2d      	ldr	r2, [pc, #180]	; (7c34 <z_set_prio+0x128>)
    7b7e:	23ba      	movs	r3, #186	; 0xba
    7b80:	f002 f869 	bl	9c56 <printk>
    7b84:	482b      	ldr	r0, [pc, #172]	; (7c34 <z_set_prio+0x128>)
    7b86:	21ba      	movs	r1, #186	; 0xba
    7b88:	f001 ff8e 	bl	9aa8 <assert_post_action>
	return list->head == list;
    7b8c:	492a      	ldr	r1, [pc, #168]	; (7c38 <z_set_prio+0x12c>)
    7b8e:	460b      	mov	r3, r1
    7b90:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b94:	4298      	cmp	r0, r3
    7b96:	bf18      	it	ne
    7b98:	4605      	movne	r5, r0
    7b9a:	2d00      	cmp	r5, #0
    7b9c:	461a      	mov	r2, r3
    7b9e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7ba0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    7ba2:	bf38      	it	cc
    7ba4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7ba6:	b36b      	cbz	r3, 7c04 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    7ba8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7bac:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    7bb0:	4286      	cmp	r6, r0
    7bb2:	d023      	beq.n	7bfc <z_set_prio+0xf0>
		return b2 - b1;
    7bb4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7bb6:	2800      	cmp	r0, #0
    7bb8:	dd20      	ble.n	7bfc <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    7bba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7bbc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7bc0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7bc2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    7bc4:	2001      	movs	r0, #1
    7bc6:	f7ff fc67 	bl	7498 <update_cache>
    7bca:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7bcc:	4811      	ldr	r0, [pc, #68]	; (7c14 <z_set_prio+0x108>)
    7bce:	f000 febd 	bl	894c <z_spin_unlock_valid>
    7bd2:	b968      	cbnz	r0, 7bf0 <z_set_prio+0xe4>
    7bd4:	4a10      	ldr	r2, [pc, #64]	; (7c18 <z_set_prio+0x10c>)
    7bd6:	4919      	ldr	r1, [pc, #100]	; (7c3c <z_set_prio+0x130>)
    7bd8:	4811      	ldr	r0, [pc, #68]	; (7c20 <z_set_prio+0x114>)
    7bda:	23ac      	movs	r3, #172	; 0xac
    7bdc:	f002 f83b 	bl	9c56 <printk>
    7be0:	490c      	ldr	r1, [pc, #48]	; (7c14 <z_set_prio+0x108>)
    7be2:	4817      	ldr	r0, [pc, #92]	; (7c40 <z_set_prio+0x134>)
    7be4:	f002 f837 	bl	9c56 <printk>
    7be8:	480b      	ldr	r0, [pc, #44]	; (7c18 <z_set_prio+0x10c>)
    7bea:	21ac      	movs	r1, #172	; 0xac
    7bec:	f001 ff5c 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7bf0:	f387 8811 	msr	BASEPRI, r7
    7bf4:	f3bf 8f6f 	isb	sy
}
    7bf8:	4620      	mov	r0, r4
    7bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    7bfc:	42ab      	cmp	r3, r5
    7bfe:	d001      	beq.n	7c04 <z_set_prio+0xf8>
    7c00:	681b      	ldr	r3, [r3, #0]
    7c02:	e7d0      	b.n	7ba6 <z_set_prio+0x9a>
	node->prev = tail;
    7c04:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    7c08:	602c      	str	r4, [r5, #0]
	list->tail = node;
    7c0a:	624c      	str	r4, [r1, #36]	; 0x24
}
    7c0c:	e7da      	b.n	7bc4 <z_set_prio+0xb8>
			thread->base.prio = prio;
    7c0e:	73a6      	strb	r6, [r4, #14]
    7c10:	2400      	movs	r4, #0
    7c12:	e7db      	b.n	7bcc <z_set_prio+0xc0>
    7c14:	20000fcc 	.word	0x20000fcc
    7c18:	0000b39a 	.word	0x0000b39a
    7c1c:	0000b3ec 	.word	0x0000b3ec
    7c20:	0000ac83 	.word	0x0000ac83
    7c24:	0000b401 	.word	0x0000b401
    7c28:	20000fb8 	.word	0x20000fb8
    7c2c:	20000708 	.word	0x20000708
    7c30:	0000bf78 	.word	0x0000bf78
    7c34:	0000bf56 	.word	0x0000bf56
    7c38:	20000f98 	.word	0x20000f98
    7c3c:	0000b3c0 	.word	0x0000b3c0
    7c40:	0000b3d7 	.word	0x0000b3d7

00007c44 <z_impl_k_thread_suspend>:
{
    7c44:	b570      	push	{r4, r5, r6, lr}
    7c46:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    7c48:	3018      	adds	r0, #24
    7c4a:	f000 ffbb 	bl	8bc4 <z_abort_timeout>
	__asm__ volatile(
    7c4e:	f04f 0320 	mov.w	r3, #32
    7c52:	f3ef 8611 	mrs	r6, BASEPRI
    7c56:	f383 8812 	msr	BASEPRI_MAX, r3
    7c5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c5e:	4825      	ldr	r0, [pc, #148]	; (7cf4 <z_impl_k_thread_suspend+0xb0>)
    7c60:	f000 fe66 	bl	8930 <z_spin_lock_valid>
    7c64:	b968      	cbnz	r0, 7c82 <z_impl_k_thread_suspend+0x3e>
    7c66:	4a24      	ldr	r2, [pc, #144]	; (7cf8 <z_impl_k_thread_suspend+0xb4>)
    7c68:	4924      	ldr	r1, [pc, #144]	; (7cfc <z_impl_k_thread_suspend+0xb8>)
    7c6a:	4825      	ldr	r0, [pc, #148]	; (7d00 <z_impl_k_thread_suspend+0xbc>)
    7c6c:	2381      	movs	r3, #129	; 0x81
    7c6e:	f001 fff2 	bl	9c56 <printk>
    7c72:	4920      	ldr	r1, [pc, #128]	; (7cf4 <z_impl_k_thread_suspend+0xb0>)
    7c74:	4823      	ldr	r0, [pc, #140]	; (7d04 <z_impl_k_thread_suspend+0xc0>)
    7c76:	f001 ffee 	bl	9c56 <printk>
    7c7a:	481f      	ldr	r0, [pc, #124]	; (7cf8 <z_impl_k_thread_suspend+0xb4>)
    7c7c:	2181      	movs	r1, #129	; 0x81
    7c7e:	f001 ff13 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c82:	481c      	ldr	r0, [pc, #112]	; (7cf4 <z_impl_k_thread_suspend+0xb0>)
    7c84:	f000 fe72 	bl	896c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    7c88:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7c8c:	7b63      	ldrb	r3, [r4, #13]
    7c8e:	2a00      	cmp	r2, #0
    7c90:	da06      	bge.n	7ca0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    7c96:	481c      	ldr	r0, [pc, #112]	; (7d08 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7c98:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7c9a:	4621      	mov	r1, r4
    7c9c:	f7ff fb6c 	bl	7378 <z_priq_dumb_remove>
		update_cache(thread == _current);
    7ca0:	4d1a      	ldr	r5, [pc, #104]	; (7d0c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7ca2:	7b63      	ldrb	r3, [r4, #13]
    7ca4:	68a8      	ldr	r0, [r5, #8]
    7ca6:	f043 0310 	orr.w	r3, r3, #16
    7caa:	7363      	strb	r3, [r4, #13]
    7cac:	1b03      	subs	r3, r0, r4
    7cae:	4258      	negs	r0, r3
    7cb0:	4158      	adcs	r0, r3
    7cb2:	f7ff fbf1 	bl	7498 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cb6:	480f      	ldr	r0, [pc, #60]	; (7cf4 <z_impl_k_thread_suspend+0xb0>)
    7cb8:	f000 fe48 	bl	894c <z_spin_unlock_valid>
    7cbc:	b968      	cbnz	r0, 7cda <z_impl_k_thread_suspend+0x96>
    7cbe:	4a0e      	ldr	r2, [pc, #56]	; (7cf8 <z_impl_k_thread_suspend+0xb4>)
    7cc0:	4913      	ldr	r1, [pc, #76]	; (7d10 <z_impl_k_thread_suspend+0xcc>)
    7cc2:	480f      	ldr	r0, [pc, #60]	; (7d00 <z_impl_k_thread_suspend+0xbc>)
    7cc4:	23ac      	movs	r3, #172	; 0xac
    7cc6:	f001 ffc6 	bl	9c56 <printk>
    7cca:	490a      	ldr	r1, [pc, #40]	; (7cf4 <z_impl_k_thread_suspend+0xb0>)
    7ccc:	4811      	ldr	r0, [pc, #68]	; (7d14 <z_impl_k_thread_suspend+0xd0>)
    7cce:	f001 ffc2 	bl	9c56 <printk>
    7cd2:	4809      	ldr	r0, [pc, #36]	; (7cf8 <z_impl_k_thread_suspend+0xb4>)
    7cd4:	21ac      	movs	r1, #172	; 0xac
    7cd6:	f001 fee7 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7cda:	f386 8811 	msr	BASEPRI, r6
    7cde:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7ce2:	68ab      	ldr	r3, [r5, #8]
    7ce4:	42a3      	cmp	r3, r4
    7ce6:	d103      	bne.n	7cf0 <z_impl_k_thread_suspend+0xac>
}
    7ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    7cec:	f002 bc9e 	b.w	a62c <z_reschedule_unlocked>
}
    7cf0:	bd70      	pop	{r4, r5, r6, pc}
    7cf2:	bf00      	nop
    7cf4:	20000fcc 	.word	0x20000fcc
    7cf8:	0000b39a 	.word	0x0000b39a
    7cfc:	0000b3ec 	.word	0x0000b3ec
    7d00:	0000ac83 	.word	0x0000ac83
    7d04:	0000b401 	.word	0x0000b401
    7d08:	20000fb8 	.word	0x20000fb8
    7d0c:	20000f98 	.word	0x20000f98
    7d10:	0000b3c0 	.word	0x0000b3c0
    7d14:	0000b3d7 	.word	0x0000b3d7

00007d18 <k_sched_unlock>:
{
    7d18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7d1a:	f04f 0320 	mov.w	r3, #32
    7d1e:	f3ef 8511 	mrs	r5, BASEPRI
    7d22:	f383 8812 	msr	BASEPRI_MAX, r3
    7d26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d2a:	482d      	ldr	r0, [pc, #180]	; (7de0 <k_sched_unlock+0xc8>)
    7d2c:	f000 fe00 	bl	8930 <z_spin_lock_valid>
    7d30:	b968      	cbnz	r0, 7d4e <k_sched_unlock+0x36>
    7d32:	4a2c      	ldr	r2, [pc, #176]	; (7de4 <k_sched_unlock+0xcc>)
    7d34:	492c      	ldr	r1, [pc, #176]	; (7de8 <k_sched_unlock+0xd0>)
    7d36:	482d      	ldr	r0, [pc, #180]	; (7dec <k_sched_unlock+0xd4>)
    7d38:	2381      	movs	r3, #129	; 0x81
    7d3a:	f001 ff8c 	bl	9c56 <printk>
    7d3e:	4928      	ldr	r1, [pc, #160]	; (7de0 <k_sched_unlock+0xc8>)
    7d40:	482b      	ldr	r0, [pc, #172]	; (7df0 <k_sched_unlock+0xd8>)
    7d42:	f001 ff88 	bl	9c56 <printk>
    7d46:	4827      	ldr	r0, [pc, #156]	; (7de4 <k_sched_unlock+0xcc>)
    7d48:	2181      	movs	r1, #129	; 0x81
    7d4a:	f001 fead 	bl	9aa8 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    7d4e:	4c29      	ldr	r4, [pc, #164]	; (7df4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7d50:	4823      	ldr	r0, [pc, #140]	; (7de0 <k_sched_unlock+0xc8>)
    7d52:	f000 fe0b 	bl	896c <z_spin_lock_set_owner>
    7d56:	68a2      	ldr	r2, [r4, #8]
    7d58:	7bd2      	ldrb	r2, [r2, #15]
    7d5a:	b972      	cbnz	r2, 7d7a <k_sched_unlock+0x62>
    7d5c:	4926      	ldr	r1, [pc, #152]	; (7df8 <k_sched_unlock+0xe0>)
    7d5e:	4a27      	ldr	r2, [pc, #156]	; (7dfc <k_sched_unlock+0xe4>)
    7d60:	4822      	ldr	r0, [pc, #136]	; (7dec <k_sched_unlock+0xd4>)
    7d62:	f240 3385 	movw	r3, #901	; 0x385
    7d66:	f001 ff76 	bl	9c56 <printk>
    7d6a:	4825      	ldr	r0, [pc, #148]	; (7e00 <k_sched_unlock+0xe8>)
    7d6c:	f001 ff73 	bl	9c56 <printk>
    7d70:	4822      	ldr	r0, [pc, #136]	; (7dfc <k_sched_unlock+0xe4>)
    7d72:	f240 3185 	movw	r1, #901	; 0x385
    7d76:	f001 fe97 	bl	9aa8 <assert_post_action>
    7d7a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    7d7e:	b173      	cbz	r3, 7d9e <k_sched_unlock+0x86>
    7d80:	4920      	ldr	r1, [pc, #128]	; (7e04 <k_sched_unlock+0xec>)
    7d82:	4a1e      	ldr	r2, [pc, #120]	; (7dfc <k_sched_unlock+0xe4>)
    7d84:	4819      	ldr	r0, [pc, #100]	; (7dec <k_sched_unlock+0xd4>)
    7d86:	f240 3386 	movw	r3, #902	; 0x386
    7d8a:	f001 ff64 	bl	9c56 <printk>
    7d8e:	481c      	ldr	r0, [pc, #112]	; (7e00 <k_sched_unlock+0xe8>)
    7d90:	f001 ff61 	bl	9c56 <printk>
    7d94:	4819      	ldr	r0, [pc, #100]	; (7dfc <k_sched_unlock+0xe4>)
    7d96:	f240 3186 	movw	r1, #902	; 0x386
    7d9a:	f001 fe85 	bl	9aa8 <assert_post_action>
		++_current->base.sched_locked;
    7d9e:	68a2      	ldr	r2, [r4, #8]
    7da0:	7bd3      	ldrb	r3, [r2, #15]
    7da2:	3301      	adds	r3, #1
		update_cache(0);
    7da4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    7da6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7da8:	f7ff fb76 	bl	7498 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7dac:	480c      	ldr	r0, [pc, #48]	; (7de0 <k_sched_unlock+0xc8>)
    7dae:	f000 fdcd 	bl	894c <z_spin_unlock_valid>
    7db2:	b968      	cbnz	r0, 7dd0 <k_sched_unlock+0xb8>
    7db4:	4a0b      	ldr	r2, [pc, #44]	; (7de4 <k_sched_unlock+0xcc>)
    7db6:	4914      	ldr	r1, [pc, #80]	; (7e08 <k_sched_unlock+0xf0>)
    7db8:	480c      	ldr	r0, [pc, #48]	; (7dec <k_sched_unlock+0xd4>)
    7dba:	23ac      	movs	r3, #172	; 0xac
    7dbc:	f001 ff4b 	bl	9c56 <printk>
    7dc0:	4907      	ldr	r1, [pc, #28]	; (7de0 <k_sched_unlock+0xc8>)
    7dc2:	4812      	ldr	r0, [pc, #72]	; (7e0c <k_sched_unlock+0xf4>)
    7dc4:	f001 ff47 	bl	9c56 <printk>
    7dc8:	4806      	ldr	r0, [pc, #24]	; (7de4 <k_sched_unlock+0xcc>)
    7dca:	21ac      	movs	r1, #172	; 0xac
    7dcc:	f001 fe6c 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7dd0:	f385 8811 	msr	BASEPRI, r5
    7dd4:	f3bf 8f6f 	isb	sy
}
    7dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    7ddc:	f002 bc26 	b.w	a62c <z_reschedule_unlocked>
    7de0:	20000fcc 	.word	0x20000fcc
    7de4:	0000b39a 	.word	0x0000b39a
    7de8:	0000b3ec 	.word	0x0000b3ec
    7dec:	0000ac83 	.word	0x0000ac83
    7df0:	0000b401 	.word	0x0000b401
    7df4:	20000f98 	.word	0x20000f98
    7df8:	0000bfd7 	.word	0x0000bfd7
    7dfc:	0000bf56 	.word	0x0000bf56
    7e00:	0000bdf2 	.word	0x0000bdf2
    7e04:	0000bd79 	.word	0x0000bd79
    7e08:	0000b3c0 	.word	0x0000b3c0
    7e0c:	0000b3d7 	.word	0x0000b3d7

00007e10 <z_unpend1_no_timeout>:
{
    7e10:	b538      	push	{r3, r4, r5, lr}
    7e12:	4604      	mov	r4, r0
	__asm__ volatile(
    7e14:	f04f 0320 	mov.w	r3, #32
    7e18:	f3ef 8511 	mrs	r5, BASEPRI
    7e1c:	f383 8812 	msr	BASEPRI_MAX, r3
    7e20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e24:	4819      	ldr	r0, [pc, #100]	; (7e8c <z_unpend1_no_timeout+0x7c>)
    7e26:	f000 fd83 	bl	8930 <z_spin_lock_valid>
    7e2a:	b968      	cbnz	r0, 7e48 <z_unpend1_no_timeout+0x38>
    7e2c:	4a18      	ldr	r2, [pc, #96]	; (7e90 <z_unpend1_no_timeout+0x80>)
    7e2e:	4919      	ldr	r1, [pc, #100]	; (7e94 <z_unpend1_no_timeout+0x84>)
    7e30:	4819      	ldr	r0, [pc, #100]	; (7e98 <z_unpend1_no_timeout+0x88>)
    7e32:	2381      	movs	r3, #129	; 0x81
    7e34:	f001 ff0f 	bl	9c56 <printk>
    7e38:	4914      	ldr	r1, [pc, #80]	; (7e8c <z_unpend1_no_timeout+0x7c>)
    7e3a:	4818      	ldr	r0, [pc, #96]	; (7e9c <z_unpend1_no_timeout+0x8c>)
    7e3c:	f001 ff0b 	bl	9c56 <printk>
    7e40:	4813      	ldr	r0, [pc, #76]	; (7e90 <z_unpend1_no_timeout+0x80>)
    7e42:	2181      	movs	r1, #129	; 0x81
    7e44:	f001 fe30 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e48:	4810      	ldr	r0, [pc, #64]	; (7e8c <z_unpend1_no_timeout+0x7c>)
    7e4a:	f000 fd8f 	bl	896c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7e4e:	4620      	mov	r0, r4
    7e50:	f002 fbf6 	bl	a640 <z_priq_dumb_best>
		if (thread != NULL) {
    7e54:	4604      	mov	r4, r0
    7e56:	b108      	cbz	r0, 7e5c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    7e58:	f7ff fab0 	bl	73bc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e5c:	480b      	ldr	r0, [pc, #44]	; (7e8c <z_unpend1_no_timeout+0x7c>)
    7e5e:	f000 fd75 	bl	894c <z_spin_unlock_valid>
    7e62:	b968      	cbnz	r0, 7e80 <z_unpend1_no_timeout+0x70>
    7e64:	4a0a      	ldr	r2, [pc, #40]	; (7e90 <z_unpend1_no_timeout+0x80>)
    7e66:	490e      	ldr	r1, [pc, #56]	; (7ea0 <z_unpend1_no_timeout+0x90>)
    7e68:	480b      	ldr	r0, [pc, #44]	; (7e98 <z_unpend1_no_timeout+0x88>)
    7e6a:	23ac      	movs	r3, #172	; 0xac
    7e6c:	f001 fef3 	bl	9c56 <printk>
    7e70:	4906      	ldr	r1, [pc, #24]	; (7e8c <z_unpend1_no_timeout+0x7c>)
    7e72:	480c      	ldr	r0, [pc, #48]	; (7ea4 <z_unpend1_no_timeout+0x94>)
    7e74:	f001 feef 	bl	9c56 <printk>
    7e78:	4805      	ldr	r0, [pc, #20]	; (7e90 <z_unpend1_no_timeout+0x80>)
    7e7a:	21ac      	movs	r1, #172	; 0xac
    7e7c:	f001 fe14 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7e80:	f385 8811 	msr	BASEPRI, r5
    7e84:	f3bf 8f6f 	isb	sy
}
    7e88:	4620      	mov	r0, r4
    7e8a:	bd38      	pop	{r3, r4, r5, pc}
    7e8c:	20000fcc 	.word	0x20000fcc
    7e90:	0000b39a 	.word	0x0000b39a
    7e94:	0000b3ec 	.word	0x0000b3ec
    7e98:	0000ac83 	.word	0x0000ac83
    7e9c:	0000b401 	.word	0x0000b401
    7ea0:	0000b3c0 	.word	0x0000b3c0
    7ea4:	0000b3d7 	.word	0x0000b3d7

00007ea8 <z_unpend_first_thread>:
{
    7ea8:	b538      	push	{r3, r4, r5, lr}
    7eaa:	4604      	mov	r4, r0
	__asm__ volatile(
    7eac:	f04f 0320 	mov.w	r3, #32
    7eb0:	f3ef 8511 	mrs	r5, BASEPRI
    7eb4:	f383 8812 	msr	BASEPRI_MAX, r3
    7eb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ebc:	481b      	ldr	r0, [pc, #108]	; (7f2c <z_unpend_first_thread+0x84>)
    7ebe:	f000 fd37 	bl	8930 <z_spin_lock_valid>
    7ec2:	b968      	cbnz	r0, 7ee0 <z_unpend_first_thread+0x38>
    7ec4:	4a1a      	ldr	r2, [pc, #104]	; (7f30 <z_unpend_first_thread+0x88>)
    7ec6:	491b      	ldr	r1, [pc, #108]	; (7f34 <z_unpend_first_thread+0x8c>)
    7ec8:	481b      	ldr	r0, [pc, #108]	; (7f38 <z_unpend_first_thread+0x90>)
    7eca:	2381      	movs	r3, #129	; 0x81
    7ecc:	f001 fec3 	bl	9c56 <printk>
    7ed0:	4916      	ldr	r1, [pc, #88]	; (7f2c <z_unpend_first_thread+0x84>)
    7ed2:	481a      	ldr	r0, [pc, #104]	; (7f3c <z_unpend_first_thread+0x94>)
    7ed4:	f001 febf 	bl	9c56 <printk>
    7ed8:	4815      	ldr	r0, [pc, #84]	; (7f30 <z_unpend_first_thread+0x88>)
    7eda:	2181      	movs	r1, #129	; 0x81
    7edc:	f001 fde4 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7ee0:	4812      	ldr	r0, [pc, #72]	; (7f2c <z_unpend_first_thread+0x84>)
    7ee2:	f000 fd43 	bl	896c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7ee6:	4620      	mov	r0, r4
    7ee8:	f002 fbaa 	bl	a640 <z_priq_dumb_best>
		if (thread != NULL) {
    7eec:	4604      	mov	r4, r0
    7eee:	b128      	cbz	r0, 7efc <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    7ef0:	f7ff fa64 	bl	73bc <unpend_thread_no_timeout>
    7ef4:	f104 0018 	add.w	r0, r4, #24
    7ef8:	f000 fe64 	bl	8bc4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7efc:	480b      	ldr	r0, [pc, #44]	; (7f2c <z_unpend_first_thread+0x84>)
    7efe:	f000 fd25 	bl	894c <z_spin_unlock_valid>
    7f02:	b968      	cbnz	r0, 7f20 <z_unpend_first_thread+0x78>
    7f04:	4a0a      	ldr	r2, [pc, #40]	; (7f30 <z_unpend_first_thread+0x88>)
    7f06:	490e      	ldr	r1, [pc, #56]	; (7f40 <z_unpend_first_thread+0x98>)
    7f08:	480b      	ldr	r0, [pc, #44]	; (7f38 <z_unpend_first_thread+0x90>)
    7f0a:	23ac      	movs	r3, #172	; 0xac
    7f0c:	f001 fea3 	bl	9c56 <printk>
    7f10:	4906      	ldr	r1, [pc, #24]	; (7f2c <z_unpend_first_thread+0x84>)
    7f12:	480c      	ldr	r0, [pc, #48]	; (7f44 <z_unpend_first_thread+0x9c>)
    7f14:	f001 fe9f 	bl	9c56 <printk>
    7f18:	4805      	ldr	r0, [pc, #20]	; (7f30 <z_unpend_first_thread+0x88>)
    7f1a:	21ac      	movs	r1, #172	; 0xac
    7f1c:	f001 fdc4 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7f20:	f385 8811 	msr	BASEPRI, r5
    7f24:	f3bf 8f6f 	isb	sy
}
    7f28:	4620      	mov	r0, r4
    7f2a:	bd38      	pop	{r3, r4, r5, pc}
    7f2c:	20000fcc 	.word	0x20000fcc
    7f30:	0000b39a 	.word	0x0000b39a
    7f34:	0000b3ec 	.word	0x0000b3ec
    7f38:	0000ac83 	.word	0x0000ac83
    7f3c:	0000b401 	.word	0x0000b401
    7f40:	0000b3c0 	.word	0x0000b3c0
    7f44:	0000b3d7 	.word	0x0000b3d7

00007f48 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7f48:	4b04      	ldr	r3, [pc, #16]	; (7f5c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7f4a:	2100      	movs	r1, #0
    7f4c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7f50:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7f54:	4608      	mov	r0, r1
    7f56:	f7ff b8a9 	b.w	70ac <k_sched_time_slice_set>
    7f5a:	bf00      	nop
    7f5c:	20000f98 	.word	0x20000f98

00007f60 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f62:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7f66:	b173      	cbz	r3, 7f86 <z_impl_k_yield+0x26>
    7f68:	4941      	ldr	r1, [pc, #260]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7f6a:	4a42      	ldr	r2, [pc, #264]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7f6c:	4842      	ldr	r0, [pc, #264]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7f6e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    7f72:	f001 fe70 	bl	9c56 <printk>
    7f76:	4841      	ldr	r0, [pc, #260]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    7f78:	f001 fe6d 	bl	9c56 <printk>
    7f7c:	483d      	ldr	r0, [pc, #244]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7f7e:	f240 41dc 	movw	r1, #1244	; 0x4dc
    7f82:	f001 fd91 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    7f86:	f04f 0320 	mov.w	r3, #32
    7f8a:	f3ef 8611 	mrs	r6, BASEPRI
    7f8e:	f383 8812 	msr	BASEPRI_MAX, r3
    7f92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f96:	483a      	ldr	r0, [pc, #232]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7f98:	f000 fcca 	bl	8930 <z_spin_lock_valid>
    7f9c:	b968      	cbnz	r0, 7fba <z_impl_k_yield+0x5a>
    7f9e:	4a39      	ldr	r2, [pc, #228]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7fa0:	4939      	ldr	r1, [pc, #228]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fa2:	4835      	ldr	r0, [pc, #212]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7fa4:	2381      	movs	r3, #129	; 0x81
    7fa6:	f001 fe56 	bl	9c56 <printk>
    7faa:	4935      	ldr	r1, [pc, #212]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7fac:	4837      	ldr	r0, [pc, #220]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7fae:	f001 fe52 	bl	9c56 <printk>
    7fb2:	4834      	ldr	r0, [pc, #208]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7fb4:	2181      	movs	r1, #129	; 0x81
    7fb6:	f001 fd77 	bl	9aa8 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7fba:	4d35      	ldr	r5, [pc, #212]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
	z_spin_lock_set_owner(l);
    7fbc:	4830      	ldr	r0, [pc, #192]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7fbe:	f000 fcd5 	bl	896c <z_spin_lock_set_owner>
    7fc2:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7fc4:	7b4b      	ldrb	r3, [r1, #13]
    7fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7fca:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7fcc:	f105 0020 	add.w	r0, r5, #32
    7fd0:	f7ff f9d2 	bl	7378 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    7fd4:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7fd6:	7b63      	ldrb	r3, [r4, #13]
    7fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7fdc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7fde:	4b2d      	ldr	r3, [pc, #180]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7fe0:	429c      	cmp	r4, r3
    7fe2:	d109      	bne.n	7ff8 <z_impl_k_yield+0x98>
    7fe4:	492c      	ldr	r1, [pc, #176]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7fe6:	4824      	ldr	r0, [pc, #144]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7fe8:	4a22      	ldr	r2, [pc, #136]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7fea:	23ba      	movs	r3, #186	; 0xba
    7fec:	f001 fe33 	bl	9c56 <printk>
    7ff0:	4820      	ldr	r0, [pc, #128]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7ff2:	21ba      	movs	r1, #186	; 0xba
    7ff4:	f001 fd58 	bl	9aa8 <assert_post_action>
	return list->head == list;
    7ff8:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ffa:	4828      	ldr	r0, [pc, #160]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7ffc:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ffe:	4283      	cmp	r3, r0
    8000:	bf08      	it	eq
    8002:	2300      	moveq	r3, #0
    8004:	2b00      	cmp	r3, #0
    8006:	bf38      	it	cc
    8008:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    800a:	b35b      	cbz	r3, 8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
	int32_t b1 = thread_1->base.prio;
    800c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8010:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    8014:	4297      	cmp	r7, r2
    8016:	d021      	beq.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
		return b2 - b1;
    8018:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    801a:	2a00      	cmp	r2, #0
    801c:	dd1e      	ble.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
	sys_dnode_t *const prev = successor->prev;
    801e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8020:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8024:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8026:	605c      	str	r4, [r3, #4]
	update_cache(1);
    8028:	2001      	movs	r0, #1
    802a:	f7ff fa35 	bl	7498 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    802e:	4814      	ldr	r0, [pc, #80]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    8030:	f000 fc8c 	bl	894c <z_spin_unlock_valid>
    8034:	b968      	cbnz	r0, 8052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    8036:	4a13      	ldr	r2, [pc, #76]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    8038:	4919      	ldr	r1, [pc, #100]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    803a:	480f      	ldr	r0, [pc, #60]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    803c:	23c3      	movs	r3, #195	; 0xc3
    803e:	f001 fe0a 	bl	9c56 <printk>
    8042:	490f      	ldr	r1, [pc, #60]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    8044:	4817      	ldr	r0, [pc, #92]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    8046:	f001 fe06 	bl	9c56 <printk>
    804a:	480e      	ldr	r0, [pc, #56]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    804c:	21c3      	movs	r1, #195	; 0xc3
    804e:	f001 fd2b 	bl	9aa8 <assert_post_action>
    8052:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    8054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8058:	f7fa bfd0 	b.w	2ffc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    805c:	428b      	cmp	r3, r1
    805e:	d001      	beq.n	8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    8060:	681b      	ldr	r3, [r3, #0]
    8062:	e7d2      	b.n	800a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
	node->prev = tail;
    8064:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    8068:	600c      	str	r4, [r1, #0]
	list->tail = node;
    806a:	626c      	str	r4, [r5, #36]	; 0x24
}
    806c:	e7dc      	b.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    806e:	bf00      	nop
    8070:	0000bd79 	.word	0x0000bd79
    8074:	0000bf56 	.word	0x0000bf56
    8078:	0000ac83 	.word	0x0000ac83
    807c:	0000bdf2 	.word	0x0000bdf2
    8080:	20000fcc 	.word	0x20000fcc
    8084:	0000b39a 	.word	0x0000b39a
    8088:	0000b3ec 	.word	0x0000b3ec
    808c:	0000b401 	.word	0x0000b401
    8090:	20000f98 	.word	0x20000f98
    8094:	20000708 	.word	0x20000708
    8098:	0000bf78 	.word	0x0000bf78
    809c:	20000fb8 	.word	0x20000fb8
    80a0:	0000b3c0 	.word	0x0000b3c0
    80a4:	0000b3d7 	.word	0x0000b3d7

000080a8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    80a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80ac:	4604      	mov	r4, r0
    80ae:	460d      	mov	r5, r1
    80b0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    80b4:	b173      	cbz	r3, 80d4 <z_tick_sleep+0x2c>
    80b6:	4945      	ldr	r1, [pc, #276]	; (81cc <z_tick_sleep+0x124>)
    80b8:	4a45      	ldr	r2, [pc, #276]	; (81d0 <z_tick_sleep+0x128>)
    80ba:	4846      	ldr	r0, [pc, #280]	; (81d4 <z_tick_sleep+0x12c>)
    80bc:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    80c0:	f001 fdc9 	bl	9c56 <printk>
    80c4:	4844      	ldr	r0, [pc, #272]	; (81d8 <z_tick_sleep+0x130>)
    80c6:	f001 fdc6 	bl	9c56 <printk>
    80ca:	4841      	ldr	r0, [pc, #260]	; (81d0 <z_tick_sleep+0x128>)
    80cc:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    80d0:	f001 fcea 	bl	9aa8 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    80d4:	ea54 0305 	orrs.w	r3, r4, r5
    80d8:	d104      	bne.n	80e4 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    80da:	f7ff ff41 	bl	7f60 <z_impl_k_yield>
		k_yield();
		return 0;
    80de:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    80e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    80e4:	f06f 0301 	mvn.w	r3, #1
    80e8:	1b1e      	subs	r6, r3, r4
    80ea:	f04f 33ff 	mov.w	r3, #4294967295
    80ee:	eb63 0705 	sbc.w	r7, r3, r5
    80f2:	2e01      	cmp	r6, #1
    80f4:	f177 0300 	sbcs.w	r3, r7, #0
    80f8:	da64      	bge.n	81c4 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    80fa:	f002 fac6 	bl	a68a <sys_clock_tick_get_32>
    80fe:	1906      	adds	r6, r0, r4
    8100:	f04f 0320 	mov.w	r3, #32
    8104:	f3ef 8811 	mrs	r8, BASEPRI
    8108:	f383 8812 	msr	BASEPRI_MAX, r3
    810c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8110:	4832      	ldr	r0, [pc, #200]	; (81dc <z_tick_sleep+0x134>)
    8112:	f000 fc0d 	bl	8930 <z_spin_lock_valid>
    8116:	b968      	cbnz	r0, 8134 <z_tick_sleep+0x8c>
    8118:	4a31      	ldr	r2, [pc, #196]	; (81e0 <z_tick_sleep+0x138>)
    811a:	4932      	ldr	r1, [pc, #200]	; (81e4 <z_tick_sleep+0x13c>)
    811c:	482d      	ldr	r0, [pc, #180]	; (81d4 <z_tick_sleep+0x12c>)
    811e:	2381      	movs	r3, #129	; 0x81
    8120:	f001 fd99 	bl	9c56 <printk>
    8124:	492d      	ldr	r1, [pc, #180]	; (81dc <z_tick_sleep+0x134>)
    8126:	4830      	ldr	r0, [pc, #192]	; (81e8 <z_tick_sleep+0x140>)
    8128:	f001 fd95 	bl	9c56 <printk>
    812c:	482c      	ldr	r0, [pc, #176]	; (81e0 <z_tick_sleep+0x138>)
    812e:	2181      	movs	r1, #129	; 0x81
    8130:	f001 fcba 	bl	9aa8 <assert_post_action>
	pending_current = _current;
    8134:	4f2d      	ldr	r7, [pc, #180]	; (81ec <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    8136:	4829      	ldr	r0, [pc, #164]	; (81dc <z_tick_sleep+0x134>)
    8138:	f000 fc18 	bl	896c <z_spin_lock_set_owner>
    813c:	4b2c      	ldr	r3, [pc, #176]	; (81f0 <z_tick_sleep+0x148>)
    813e:	68b8      	ldr	r0, [r7, #8]
    8140:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8142:	f7ff fbf7 	bl	7934 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8146:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8148:	492a      	ldr	r1, [pc, #168]	; (81f4 <z_tick_sleep+0x14c>)
    814a:	4622      	mov	r2, r4
    814c:	462b      	mov	r3, r5
    814e:	3018      	adds	r0, #24
    8150:	f000 fc64 	bl	8a1c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8154:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8156:	4821      	ldr	r0, [pc, #132]	; (81dc <z_tick_sleep+0x134>)
    8158:	7b53      	ldrb	r3, [r2, #13]
    815a:	f043 0310 	orr.w	r3, r3, #16
    815e:	7353      	strb	r3, [r2, #13]
    8160:	f000 fbf4 	bl	894c <z_spin_unlock_valid>
    8164:	b968      	cbnz	r0, 8182 <z_tick_sleep+0xda>
    8166:	4a1e      	ldr	r2, [pc, #120]	; (81e0 <z_tick_sleep+0x138>)
    8168:	4923      	ldr	r1, [pc, #140]	; (81f8 <z_tick_sleep+0x150>)
    816a:	481a      	ldr	r0, [pc, #104]	; (81d4 <z_tick_sleep+0x12c>)
    816c:	23c3      	movs	r3, #195	; 0xc3
    816e:	f001 fd72 	bl	9c56 <printk>
    8172:	491a      	ldr	r1, [pc, #104]	; (81dc <z_tick_sleep+0x134>)
    8174:	4821      	ldr	r0, [pc, #132]	; (81fc <z_tick_sleep+0x154>)
    8176:	f001 fd6e 	bl	9c56 <printk>
    817a:	4819      	ldr	r0, [pc, #100]	; (81e0 <z_tick_sleep+0x138>)
    817c:	21c3      	movs	r1, #195	; 0xc3
    817e:	f001 fc93 	bl	9aa8 <assert_post_action>
    8182:	4640      	mov	r0, r8
    8184:	f7fa ff3a 	bl	2ffc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8188:	68bb      	ldr	r3, [r7, #8]
    818a:	7b5b      	ldrb	r3, [r3, #13]
    818c:	06db      	lsls	r3, r3, #27
    818e:	d50e      	bpl.n	81ae <z_tick_sleep+0x106>
    8190:	491b      	ldr	r1, [pc, #108]	; (8200 <z_tick_sleep+0x158>)
    8192:	4a0f      	ldr	r2, [pc, #60]	; (81d0 <z_tick_sleep+0x128>)
    8194:	480f      	ldr	r0, [pc, #60]	; (81d4 <z_tick_sleep+0x12c>)
    8196:	f240 5319 	movw	r3, #1305	; 0x519
    819a:	f001 fd5c 	bl	9c56 <printk>
    819e:	480e      	ldr	r0, [pc, #56]	; (81d8 <z_tick_sleep+0x130>)
    81a0:	f001 fd59 	bl	9c56 <printk>
    81a4:	480a      	ldr	r0, [pc, #40]	; (81d0 <z_tick_sleep+0x128>)
    81a6:	f240 5119 	movw	r1, #1305	; 0x519
    81aa:	f001 fc7d 	bl	9aa8 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    81ae:	f002 fa6c 	bl	a68a <sys_clock_tick_get_32>
    81b2:	1a30      	subs	r0, r6, r0
    81b4:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    81b8:	2801      	cmp	r0, #1
    81ba:	f171 0300 	sbcs.w	r3, r1, #0
    81be:	bfb8      	it	lt
    81c0:	2000      	movlt	r0, #0
    81c2:	e78d      	b.n	80e0 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    81c4:	f06f 0601 	mvn.w	r6, #1
    81c8:	1b36      	subs	r6, r6, r4
    81ca:	e799      	b.n	8100 <z_tick_sleep+0x58>
    81cc:	0000bd79 	.word	0x0000bd79
    81d0:	0000bf56 	.word	0x0000bf56
    81d4:	0000ac83 	.word	0x0000ac83
    81d8:	0000bdf2 	.word	0x0000bdf2
    81dc:	20000fcc 	.word	0x20000fcc
    81e0:	0000b39a 	.word	0x0000b39a
    81e4:	0000b3ec 	.word	0x0000b3ec
    81e8:	0000b401 	.word	0x0000b401
    81ec:	20000f98 	.word	0x20000f98
    81f0:	20000fc8 	.word	0x20000fc8
    81f4:	00007881 	.word	0x00007881
    81f8:	0000b3c0 	.word	0x0000b3c0
    81fc:	0000b3d7 	.word	0x0000b3d7
    8200:	0000c008 	.word	0x0000c008

00008204 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8204:	b538      	push	{r3, r4, r5, lr}
    8206:	4604      	mov	r4, r0
    8208:	460d      	mov	r5, r1
    820a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    820e:	b173      	cbz	r3, 822e <z_impl_k_sleep+0x2a>
    8210:	4913      	ldr	r1, [pc, #76]	; (8260 <z_impl_k_sleep+0x5c>)
    8212:	4a14      	ldr	r2, [pc, #80]	; (8264 <z_impl_k_sleep+0x60>)
    8214:	4814      	ldr	r0, [pc, #80]	; (8268 <z_impl_k_sleep+0x64>)
    8216:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    821a:	f001 fd1c 	bl	9c56 <printk>
    821e:	4813      	ldr	r0, [pc, #76]	; (826c <z_impl_k_sleep+0x68>)
    8220:	f001 fd19 	bl	9c56 <printk>
    8224:	480f      	ldr	r0, [pc, #60]	; (8264 <z_impl_k_sleep+0x60>)
    8226:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    822a:	f001 fc3d 	bl	9aa8 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    822e:	1c6b      	adds	r3, r5, #1
    8230:	bf08      	it	eq
    8232:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    8236:	d106      	bne.n	8246 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    8238:	4b0d      	ldr	r3, [pc, #52]	; (8270 <z_impl_k_sleep+0x6c>)
    823a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    823c:	f7ff fd02 	bl	7c44 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8240:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8244:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    8246:	4620      	mov	r0, r4
    8248:	4629      	mov	r1, r5
    824a:	f7ff ff2d 	bl	80a8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    824e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8252:	fb80 3403 	smull	r3, r4, r0, r3
    8256:	0bd8      	lsrs	r0, r3, #15
    8258:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    825c:	e7f2      	b.n	8244 <z_impl_k_sleep+0x40>
    825e:	bf00      	nop
    8260:	0000bd79 	.word	0x0000bd79
    8264:	0000bf56 	.word	0x0000bf56
    8268:	0000ac83 	.word	0x0000ac83
    826c:	0000bdf2 	.word	0x0000bdf2
    8270:	20000f98 	.word	0x20000f98

00008274 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8274:	4b01      	ldr	r3, [pc, #4]	; (827c <z_impl_z_current_get+0x8>)
    8276:	6898      	ldr	r0, [r3, #8]
    8278:	4770      	bx	lr
    827a:	bf00      	nop
    827c:	20000f98 	.word	0x20000f98

00008280 <z_impl_k_is_preempt_thread>:
    8280:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    8284:	b93b      	cbnz	r3, 8296 <z_impl_k_is_preempt_thread+0x16>
    8286:	4b05      	ldr	r3, [pc, #20]	; (829c <z_impl_k_is_preempt_thread+0x1c>)
    8288:	689b      	ldr	r3, [r3, #8]
    828a:	89d8      	ldrh	r0, [r3, #14]
    828c:	287f      	cmp	r0, #127	; 0x7f
    828e:	bf8c      	ite	hi
    8290:	2000      	movhi	r0, #0
    8292:	2001      	movls	r0, #1
    8294:	4770      	bx	lr
    8296:	2000      	movs	r0, #0
}
    8298:	4770      	bx	lr
    829a:	bf00      	nop
    829c:	20000f98 	.word	0x20000f98

000082a0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    82a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82a4:	4604      	mov	r4, r0
    82a6:	f04f 0320 	mov.w	r3, #32
    82aa:	f3ef 8611 	mrs	r6, BASEPRI
    82ae:	f383 8812 	msr	BASEPRI_MAX, r3
    82b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82b6:	4848      	ldr	r0, [pc, #288]	; (83d8 <z_thread_abort+0x138>)
    82b8:	f000 fb3a 	bl	8930 <z_spin_lock_valid>
    82bc:	b968      	cbnz	r0, 82da <z_thread_abort+0x3a>
    82be:	4a47      	ldr	r2, [pc, #284]	; (83dc <z_thread_abort+0x13c>)
    82c0:	4947      	ldr	r1, [pc, #284]	; (83e0 <z_thread_abort+0x140>)
    82c2:	4848      	ldr	r0, [pc, #288]	; (83e4 <z_thread_abort+0x144>)
    82c4:	2381      	movs	r3, #129	; 0x81
    82c6:	f001 fcc6 	bl	9c56 <printk>
    82ca:	4943      	ldr	r1, [pc, #268]	; (83d8 <z_thread_abort+0x138>)
    82cc:	4846      	ldr	r0, [pc, #280]	; (83e8 <z_thread_abort+0x148>)
    82ce:	f001 fcc2 	bl	9c56 <printk>
    82d2:	4842      	ldr	r0, [pc, #264]	; (83dc <z_thread_abort+0x13c>)
    82d4:	2181      	movs	r1, #129	; 0x81
    82d6:	f001 fbe7 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    82da:	483f      	ldr	r0, [pc, #252]	; (83d8 <z_thread_abort+0x138>)
    82dc:	f000 fb46 	bl	896c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    82e0:	7b63      	ldrb	r3, [r4, #13]
    82e2:	071a      	lsls	r2, r3, #28
    82e4:	d517      	bpl.n	8316 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82e6:	483c      	ldr	r0, [pc, #240]	; (83d8 <z_thread_abort+0x138>)
    82e8:	f000 fb30 	bl	894c <z_spin_unlock_valid>
    82ec:	b968      	cbnz	r0, 830a <z_thread_abort+0x6a>
    82ee:	4a3b      	ldr	r2, [pc, #236]	; (83dc <z_thread_abort+0x13c>)
    82f0:	493e      	ldr	r1, [pc, #248]	; (83ec <z_thread_abort+0x14c>)
    82f2:	483c      	ldr	r0, [pc, #240]	; (83e4 <z_thread_abort+0x144>)
    82f4:	23ac      	movs	r3, #172	; 0xac
    82f6:	f001 fcae 	bl	9c56 <printk>
    82fa:	4937      	ldr	r1, [pc, #220]	; (83d8 <z_thread_abort+0x138>)
    82fc:	483c      	ldr	r0, [pc, #240]	; (83f0 <z_thread_abort+0x150>)
    82fe:	f001 fcaa 	bl	9c56 <printk>
    8302:	4836      	ldr	r0, [pc, #216]	; (83dc <z_thread_abort+0x13c>)
    8304:	21ac      	movs	r1, #172	; 0xac
    8306:	f001 fbcf 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    830a:	f386 8811 	msr	BASEPRI, r6
    830e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8316:	f023 0220 	bic.w	r2, r3, #32
    831a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    831e:	09d2      	lsrs	r2, r2, #7
    8320:	d142      	bne.n	83a8 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8322:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    8324:	68a3      	ldr	r3, [r4, #8]
    8326:	b113      	cbz	r3, 832e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    8328:	4620      	mov	r0, r4
    832a:	f7ff f847 	bl	73bc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    832e:	f104 0018 	add.w	r0, r4, #24
    8332:	f000 fc47 	bl	8bc4 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8336:	f104 0758 	add.w	r7, r4, #88	; 0x58
    833a:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    833e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8340:	42bd      	cmp	r5, r7
    8342:	d001      	beq.n	8348 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8344:	2d00      	cmp	r5, #0
    8346:	d139      	bne.n	83bc <z_thread_abort+0x11c>
		update_cache(1);
    8348:	2001      	movs	r0, #1
    834a:	f7ff f8a5 	bl	7498 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    834e:	4b29      	ldr	r3, [pc, #164]	; (83f4 <z_thread_abort+0x154>)
    8350:	689b      	ldr	r3, [r3, #8]
    8352:	42a3      	cmp	r3, r4
    8354:	d1c7      	bne.n	82e6 <z_thread_abort+0x46>
    8356:	f3ef 8305 	mrs	r3, IPSR
    835a:	2b00      	cmp	r3, #0
    835c:	d1c3      	bne.n	82e6 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    835e:	481e      	ldr	r0, [pc, #120]	; (83d8 <z_thread_abort+0x138>)
    8360:	f000 faf4 	bl	894c <z_spin_unlock_valid>
    8364:	b968      	cbnz	r0, 8382 <z_thread_abort+0xe2>
    8366:	4a1d      	ldr	r2, [pc, #116]	; (83dc <z_thread_abort+0x13c>)
    8368:	4920      	ldr	r1, [pc, #128]	; (83ec <z_thread_abort+0x14c>)
    836a:	481e      	ldr	r0, [pc, #120]	; (83e4 <z_thread_abort+0x144>)
    836c:	23c3      	movs	r3, #195	; 0xc3
    836e:	f001 fc72 	bl	9c56 <printk>
    8372:	4919      	ldr	r1, [pc, #100]	; (83d8 <z_thread_abort+0x138>)
    8374:	481e      	ldr	r0, [pc, #120]	; (83f0 <z_thread_abort+0x150>)
    8376:	f001 fc6e 	bl	9c56 <printk>
    837a:	4818      	ldr	r0, [pc, #96]	; (83dc <z_thread_abort+0x13c>)
    837c:	21c3      	movs	r1, #195	; 0xc3
    837e:	f001 fb93 	bl	9aa8 <assert_post_action>
    8382:	4630      	mov	r0, r6
    8384:	f7fa fe3a 	bl	2ffc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8388:	4a1b      	ldr	r2, [pc, #108]	; (83f8 <z_thread_abort+0x158>)
    838a:	491c      	ldr	r1, [pc, #112]	; (83fc <z_thread_abort+0x15c>)
    838c:	4815      	ldr	r0, [pc, #84]	; (83e4 <z_thread_abort+0x144>)
    838e:	f240 634b 	movw	r3, #1611	; 0x64b
    8392:	f001 fc60 	bl	9c56 <printk>
    8396:	481a      	ldr	r0, [pc, #104]	; (8400 <z_thread_abort+0x160>)
    8398:	f001 fc5d 	bl	9c56 <printk>
    839c:	4816      	ldr	r0, [pc, #88]	; (83f8 <z_thread_abort+0x158>)
    839e:	f240 614b 	movw	r1, #1611	; 0x64b
    83a2:	f001 fb81 	bl	9aa8 <assert_post_action>
    83a6:	e79e      	b.n	82e6 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83a8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    83ac:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    83b0:	4814      	ldr	r0, [pc, #80]	; (8404 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83b2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    83b4:	4621      	mov	r1, r4
    83b6:	f7fe ffdf 	bl	7378 <z_priq_dumb_remove>
}
    83ba:	e7b3      	b.n	8324 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    83bc:	4628      	mov	r0, r5
    83be:	f7fe fffd 	bl	73bc <unpend_thread_no_timeout>
    83c2:	f105 0018 	add.w	r0, r5, #24
    83c6:	f000 fbfd 	bl	8bc4 <z_abort_timeout>
    83ca:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    83ce:	4628      	mov	r0, r5
    83d0:	f7ff f968 	bl	76a4 <ready_thread>
    83d4:	e7b3      	b.n	833e <z_thread_abort+0x9e>
    83d6:	bf00      	nop
    83d8:	20000fcc 	.word	0x20000fcc
    83dc:	0000b39a 	.word	0x0000b39a
    83e0:	0000b3ec 	.word	0x0000b3ec
    83e4:	0000ac83 	.word	0x0000ac83
    83e8:	0000b401 	.word	0x0000b401
    83ec:	0000b3c0 	.word	0x0000b3c0
    83f0:	0000b3d7 	.word	0x0000b3d7
    83f4:	20000f98 	.word	0x20000f98
    83f8:	0000bf56 	.word	0x0000bf56
    83fc:	0000ac81 	.word	0x0000ac81
    8400:	0000c048 	.word	0x0000c048
    8404:	20000fb8 	.word	0x20000fb8

00008408 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    8408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    840a:	4604      	mov	r4, r0
    840c:	460e      	mov	r6, r1
    840e:	4615      	mov	r5, r2
	__asm__ volatile(
    8410:	f04f 0320 	mov.w	r3, #32
    8414:	f3ef 8711 	mrs	r7, BASEPRI
    8418:	f383 8812 	msr	BASEPRI_MAX, r3
    841c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8420:	481e      	ldr	r0, [pc, #120]	; (849c <z_sched_wake+0x94>)
    8422:	f000 fa85 	bl	8930 <z_spin_lock_valid>
    8426:	b968      	cbnz	r0, 8444 <z_sched_wake+0x3c>
    8428:	4a1d      	ldr	r2, [pc, #116]	; (84a0 <z_sched_wake+0x98>)
    842a:	491e      	ldr	r1, [pc, #120]	; (84a4 <z_sched_wake+0x9c>)
    842c:	481e      	ldr	r0, [pc, #120]	; (84a8 <z_sched_wake+0xa0>)
    842e:	2381      	movs	r3, #129	; 0x81
    8430:	f001 fc11 	bl	9c56 <printk>
    8434:	4919      	ldr	r1, [pc, #100]	; (849c <z_sched_wake+0x94>)
    8436:	481d      	ldr	r0, [pc, #116]	; (84ac <z_sched_wake+0xa4>)
    8438:	f001 fc0d 	bl	9c56 <printk>
    843c:	4818      	ldr	r0, [pc, #96]	; (84a0 <z_sched_wake+0x98>)
    843e:	2181      	movs	r1, #129	; 0x81
    8440:	f001 fb32 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8444:	4815      	ldr	r0, [pc, #84]	; (849c <z_sched_wake+0x94>)
    8446:	f000 fa91 	bl	896c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    844a:	4620      	mov	r0, r4
    844c:	f002 f8f8 	bl	a640 <z_priq_dumb_best>

		if (thread != NULL) {
    8450:	4604      	mov	r4, r0
    8452:	b158      	cbz	r0, 846c <z_sched_wake+0x64>
    8454:	67c6      	str	r6, [r0, #124]	; 0x7c
    8456:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    8458:	f7fe ffb0 	bl	73bc <unpend_thread_no_timeout>
    845c:	f104 0018 	add.w	r0, r4, #24
    8460:	f000 fbb0 	bl	8bc4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    8464:	4620      	mov	r0, r4
    8466:	f7ff f91d 	bl	76a4 <ready_thread>
			ret = true;
    846a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    846c:	480b      	ldr	r0, [pc, #44]	; (849c <z_sched_wake+0x94>)
    846e:	f000 fa6d 	bl	894c <z_spin_unlock_valid>
    8472:	b968      	cbnz	r0, 8490 <z_sched_wake+0x88>
    8474:	4a0a      	ldr	r2, [pc, #40]	; (84a0 <z_sched_wake+0x98>)
    8476:	490e      	ldr	r1, [pc, #56]	; (84b0 <z_sched_wake+0xa8>)
    8478:	480b      	ldr	r0, [pc, #44]	; (84a8 <z_sched_wake+0xa0>)
    847a:	23ac      	movs	r3, #172	; 0xac
    847c:	f001 fbeb 	bl	9c56 <printk>
    8480:	4906      	ldr	r1, [pc, #24]	; (849c <z_sched_wake+0x94>)
    8482:	480c      	ldr	r0, [pc, #48]	; (84b4 <z_sched_wake+0xac>)
    8484:	f001 fbe7 	bl	9c56 <printk>
    8488:	4805      	ldr	r0, [pc, #20]	; (84a0 <z_sched_wake+0x98>)
    848a:	21ac      	movs	r1, #172	; 0xac
    848c:	f001 fb0c 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    8490:	f387 8811 	msr	BASEPRI, r7
    8494:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    8498:	4620      	mov	r0, r4
    849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    849c:	20000fcc 	.word	0x20000fcc
    84a0:	0000b39a 	.word	0x0000b39a
    84a4:	0000b3ec 	.word	0x0000b3ec
    84a8:	0000ac83 	.word	0x0000ac83
    84ac:	0000b401 	.word	0x0000b401
    84b0:	0000b3c0 	.word	0x0000b3c0
    84b4:	0000b3d7 	.word	0x0000b3d7

000084b8 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    84b8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    84ba:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    84be:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    84c0:	e9cd 6700 	strd	r6, r7, [sp]
    84c4:	f7ff faf2 	bl	7aac <z_pend_curr>

	if (data != NULL) {
    84c8:	b11c      	cbz	r4, 84d2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    84ca:	4b03      	ldr	r3, [pc, #12]	; (84d8 <z_sched_wait+0x20>)
    84cc:	689b      	ldr	r3, [r3, #8]
    84ce:	695b      	ldr	r3, [r3, #20]
    84d0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    84d2:	b002      	add	sp, #8
    84d4:	bdd0      	pop	{r4, r6, r7, pc}
    84d6:	bf00      	nop
    84d8:	20000f98 	.word	0x20000f98

000084dc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    84dc:	b538      	push	{r3, r4, r5, lr}
    84de:	4604      	mov	r4, r0
	__asm__ volatile(
    84e0:	f04f 0320 	mov.w	r3, #32
    84e4:	f3ef 8511 	mrs	r5, BASEPRI
    84e8:	f383 8812 	msr	BASEPRI_MAX, r3
    84ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84f0:	4817      	ldr	r0, [pc, #92]	; (8550 <z_impl_k_sem_give+0x74>)
    84f2:	f000 fa1d 	bl	8930 <z_spin_lock_valid>
    84f6:	b968      	cbnz	r0, 8514 <z_impl_k_sem_give+0x38>
    84f8:	4a16      	ldr	r2, [pc, #88]	; (8554 <z_impl_k_sem_give+0x78>)
    84fa:	4917      	ldr	r1, [pc, #92]	; (8558 <z_impl_k_sem_give+0x7c>)
    84fc:	4817      	ldr	r0, [pc, #92]	; (855c <z_impl_k_sem_give+0x80>)
    84fe:	2381      	movs	r3, #129	; 0x81
    8500:	f001 fba9 	bl	9c56 <printk>
    8504:	4912      	ldr	r1, [pc, #72]	; (8550 <z_impl_k_sem_give+0x74>)
    8506:	4816      	ldr	r0, [pc, #88]	; (8560 <z_impl_k_sem_give+0x84>)
    8508:	f001 fba5 	bl	9c56 <printk>
    850c:	4811      	ldr	r0, [pc, #68]	; (8554 <z_impl_k_sem_give+0x78>)
    850e:	2181      	movs	r1, #129	; 0x81
    8510:	f001 faca 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8514:	480e      	ldr	r0, [pc, #56]	; (8550 <z_impl_k_sem_give+0x74>)
    8516:	f000 fa29 	bl	896c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    851a:	4620      	mov	r0, r4
    851c:	f7ff fcc4 	bl	7ea8 <z_unpend_first_thread>

	if (thread != NULL) {
    8520:	b148      	cbz	r0, 8536 <z_impl_k_sem_give+0x5a>
    8522:	2200      	movs	r2, #0
    8524:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8526:	f7ff f90f 	bl	7748 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    852a:	4629      	mov	r1, r5
    852c:	4808      	ldr	r0, [pc, #32]	; (8550 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    852e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    8532:	f7fe be69 	b.w	7208 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8536:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    853a:	429a      	cmp	r2, r3
    853c:	bf18      	it	ne
    853e:	3301      	addne	r3, #1
    8540:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    8542:	2102      	movs	r1, #2
    8544:	f104 0010 	add.w	r0, r4, #16
    8548:	f002 f856 	bl	a5f8 <z_handle_obj_poll_events>
}
    854c:	e7ed      	b.n	852a <z_impl_k_sem_give+0x4e>
    854e:	bf00      	nop
    8550:	20000fd8 	.word	0x20000fd8
    8554:	0000b39a 	.word	0x0000b39a
    8558:	0000b3ec 	.word	0x0000b3ec
    855c:	0000ac83 	.word	0x0000ac83
    8560:	0000b401 	.word	0x0000b401

00008564 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8566:	4604      	mov	r4, r0
    8568:	4616      	mov	r6, r2
    856a:	461f      	mov	r7, r3
    856c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    8570:	b17b      	cbz	r3, 8592 <z_impl_k_sem_take+0x2e>
    8572:	ea56 0307 	orrs.w	r3, r6, r7
    8576:	d00c      	beq.n	8592 <z_impl_k_sem_take+0x2e>
    8578:	4935      	ldr	r1, [pc, #212]	; (8650 <z_impl_k_sem_take+0xec>)
    857a:	4a36      	ldr	r2, [pc, #216]	; (8654 <z_impl_k_sem_take+0xf0>)
    857c:	4836      	ldr	r0, [pc, #216]	; (8658 <z_impl_k_sem_take+0xf4>)
    857e:	2379      	movs	r3, #121	; 0x79
    8580:	f001 fb69 	bl	9c56 <printk>
    8584:	4835      	ldr	r0, [pc, #212]	; (865c <z_impl_k_sem_take+0xf8>)
    8586:	f001 fb66 	bl	9c56 <printk>
    858a:	4832      	ldr	r0, [pc, #200]	; (8654 <z_impl_k_sem_take+0xf0>)
    858c:	2179      	movs	r1, #121	; 0x79
    858e:	f001 fa8b 	bl	9aa8 <assert_post_action>
    8592:	f04f 0320 	mov.w	r3, #32
    8596:	f3ef 8511 	mrs	r5, BASEPRI
    859a:	f383 8812 	msr	BASEPRI_MAX, r3
    859e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85a2:	482f      	ldr	r0, [pc, #188]	; (8660 <z_impl_k_sem_take+0xfc>)
    85a4:	f000 f9c4 	bl	8930 <z_spin_lock_valid>
    85a8:	b968      	cbnz	r0, 85c6 <z_impl_k_sem_take+0x62>
    85aa:	4a2e      	ldr	r2, [pc, #184]	; (8664 <z_impl_k_sem_take+0x100>)
    85ac:	492e      	ldr	r1, [pc, #184]	; (8668 <z_impl_k_sem_take+0x104>)
    85ae:	482a      	ldr	r0, [pc, #168]	; (8658 <z_impl_k_sem_take+0xf4>)
    85b0:	2381      	movs	r3, #129	; 0x81
    85b2:	f001 fb50 	bl	9c56 <printk>
    85b6:	492a      	ldr	r1, [pc, #168]	; (8660 <z_impl_k_sem_take+0xfc>)
    85b8:	482c      	ldr	r0, [pc, #176]	; (866c <z_impl_k_sem_take+0x108>)
    85ba:	f001 fb4c 	bl	9c56 <printk>
    85be:	4829      	ldr	r0, [pc, #164]	; (8664 <z_impl_k_sem_take+0x100>)
    85c0:	2181      	movs	r1, #129	; 0x81
    85c2:	f001 fa71 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    85c6:	4826      	ldr	r0, [pc, #152]	; (8660 <z_impl_k_sem_take+0xfc>)
    85c8:	f000 f9d0 	bl	896c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    85cc:	68a3      	ldr	r3, [r4, #8]
    85ce:	b1d3      	cbz	r3, 8606 <z_impl_k_sem_take+0xa2>
		sem->count--;
    85d0:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85d2:	4823      	ldr	r0, [pc, #140]	; (8660 <z_impl_k_sem_take+0xfc>)
    85d4:	60a3      	str	r3, [r4, #8]
    85d6:	f000 f9b9 	bl	894c <z_spin_unlock_valid>
    85da:	b968      	cbnz	r0, 85f8 <z_impl_k_sem_take+0x94>
    85dc:	4a21      	ldr	r2, [pc, #132]	; (8664 <z_impl_k_sem_take+0x100>)
    85de:	4924      	ldr	r1, [pc, #144]	; (8670 <z_impl_k_sem_take+0x10c>)
    85e0:	481d      	ldr	r0, [pc, #116]	; (8658 <z_impl_k_sem_take+0xf4>)
    85e2:	23ac      	movs	r3, #172	; 0xac
    85e4:	f001 fb37 	bl	9c56 <printk>
    85e8:	491d      	ldr	r1, [pc, #116]	; (8660 <z_impl_k_sem_take+0xfc>)
    85ea:	4822      	ldr	r0, [pc, #136]	; (8674 <z_impl_k_sem_take+0x110>)
    85ec:	f001 fb33 	bl	9c56 <printk>
    85f0:	481c      	ldr	r0, [pc, #112]	; (8664 <z_impl_k_sem_take+0x100>)
    85f2:	21ac      	movs	r1, #172	; 0xac
    85f4:	f001 fa58 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    85f8:	f385 8811 	msr	BASEPRI, r5
    85fc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8600:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8602:	b003      	add	sp, #12
    8604:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8606:	ea56 0307 	orrs.w	r3, r6, r7
    860a:	d118      	bne.n	863e <z_impl_k_sem_take+0xda>
    860c:	4814      	ldr	r0, [pc, #80]	; (8660 <z_impl_k_sem_take+0xfc>)
    860e:	f000 f99d 	bl	894c <z_spin_unlock_valid>
    8612:	b968      	cbnz	r0, 8630 <z_impl_k_sem_take+0xcc>
    8614:	4a13      	ldr	r2, [pc, #76]	; (8664 <z_impl_k_sem_take+0x100>)
    8616:	4916      	ldr	r1, [pc, #88]	; (8670 <z_impl_k_sem_take+0x10c>)
    8618:	480f      	ldr	r0, [pc, #60]	; (8658 <z_impl_k_sem_take+0xf4>)
    861a:	23ac      	movs	r3, #172	; 0xac
    861c:	f001 fb1b 	bl	9c56 <printk>
    8620:	490f      	ldr	r1, [pc, #60]	; (8660 <z_impl_k_sem_take+0xfc>)
    8622:	4814      	ldr	r0, [pc, #80]	; (8674 <z_impl_k_sem_take+0x110>)
    8624:	f001 fb17 	bl	9c56 <printk>
    8628:	480e      	ldr	r0, [pc, #56]	; (8664 <z_impl_k_sem_take+0x100>)
    862a:	21ac      	movs	r1, #172	; 0xac
    862c:	f001 fa3c 	bl	9aa8 <assert_post_action>
    8630:	f385 8811 	msr	BASEPRI, r5
    8634:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8638:	f06f 000f 	mvn.w	r0, #15
    863c:	e7e1      	b.n	8602 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    863e:	e9cd 6700 	strd	r6, r7, [sp]
    8642:	4622      	mov	r2, r4
    8644:	4629      	mov	r1, r5
    8646:	4806      	ldr	r0, [pc, #24]	; (8660 <z_impl_k_sem_take+0xfc>)
    8648:	f7ff fa30 	bl	7aac <z_pend_curr>
	return ret;
    864c:	e7d9      	b.n	8602 <z_impl_k_sem_take+0x9e>
    864e:	bf00      	nop
    8650:	0000c08a 	.word	0x0000c08a
    8654:	0000c06a 	.word	0x0000c06a
    8658:	0000ac83 	.word	0x0000ac83
    865c:	0000bdf2 	.word	0x0000bdf2
    8660:	20000fd8 	.word	0x20000fd8
    8664:	0000b39a 	.word	0x0000b39a
    8668:	0000b3ec 	.word	0x0000b3ec
    866c:	0000b401 	.word	0x0000b401
    8670:	0000b3c0 	.word	0x0000b3c0
    8674:	0000b3d7 	.word	0x0000b3d7

00008678 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    867a:	4b09      	ldr	r3, [pc, #36]	; (86a0 <k_sys_work_q_init+0x28>)
    867c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    867e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8680:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8682:	9300      	str	r3, [sp, #0]
    8684:	4907      	ldr	r1, [pc, #28]	; (86a4 <k_sys_work_q_init+0x2c>)
    8686:	4808      	ldr	r0, [pc, #32]	; (86a8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8688:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    868c:	f04f 33ff 	mov.w	r3, #4294967295
    8690:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8694:	f000 ff88 	bl	95a8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8698:	4620      	mov	r0, r4
    869a:	b004      	add	sp, #16
    869c:	bd10      	pop	{r4, pc}
    869e:	bf00      	nop
    86a0:	0000c0d7 	.word	0x0000c0d7
    86a4:	200034e0 	.word	0x200034e0
    86a8:	20000808 	.word	0x20000808

000086ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    86ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    86b0:	b085      	sub	sp, #20
    86b2:	4604      	mov	r4, r0
    86b4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    86b8:	f1b8 0f0f 	cmp.w	r8, #15
{
    86bc:	460f      	mov	r7, r1
    86be:	4615      	mov	r5, r2
    86c0:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    86c2:	d132      	bne.n	872a <z_setup_new_thread+0x7e>
    86c4:	4b25      	ldr	r3, [pc, #148]	; (875c <z_setup_new_thread+0xb0>)
    86c6:	4599      	cmp	r9, r3
    86c8:	d133      	bne.n	8732 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    86ca:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    86ce:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    86d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    86d4:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    86d6:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    86d8:	2304      	movs	r3, #4
    86da:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    86dc:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    86e0:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    86e4:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    86e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    86ea:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    86ee:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    86f0:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    86f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    86f6:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    86f8:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    86fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    86fc:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    86fe:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8700:	464b      	mov	r3, r9
	node->prev = NULL;
    8702:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    8706:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    8708:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    870a:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    870c:	4642      	mov	r2, r8
    870e:	4639      	mov	r1, r7
    8710:	4620      	mov	r0, r4
    8712:	f7fa fc8d 	bl	3030 <arch_new_thread>
	if (!_current) {
    8716:	4b12      	ldr	r3, [pc, #72]	; (8760 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    8718:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    871a:	689b      	ldr	r3, [r3, #8]
    871c:	b103      	cbz	r3, 8720 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    871e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    8720:	6763      	str	r3, [r4, #116]	; 0x74
}
    8722:	4640      	mov	r0, r8
    8724:	b005      	add	sp, #20
    8726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    872a:	f108 0310 	add.w	r3, r8, #16
    872e:	2b1e      	cmp	r3, #30
    8730:	d9cb      	bls.n	86ca <z_setup_new_thread+0x1e>
    8732:	4a0c      	ldr	r2, [pc, #48]	; (8764 <z_setup_new_thread+0xb8>)
    8734:	490c      	ldr	r1, [pc, #48]	; (8768 <z_setup_new_thread+0xbc>)
    8736:	480d      	ldr	r0, [pc, #52]	; (876c <z_setup_new_thread+0xc0>)
    8738:	f240 13ff 	movw	r3, #511	; 0x1ff
    873c:	f001 fa8b 	bl	9c56 <printk>
    8740:	4641      	mov	r1, r8
    8742:	480b      	ldr	r0, [pc, #44]	; (8770 <z_setup_new_thread+0xc4>)
    8744:	f06f 030f 	mvn.w	r3, #15
    8748:	220e      	movs	r2, #14
    874a:	f001 fa84 	bl	9c56 <printk>
    874e:	4805      	ldr	r0, [pc, #20]	; (8764 <z_setup_new_thread+0xb8>)
    8750:	f240 11ff 	movw	r1, #511	; 0x1ff
    8754:	f001 f9a8 	bl	9aa8 <assert_post_action>
    8758:	e7b7      	b.n	86ca <z_setup_new_thread+0x1e>
    875a:	bf00      	nop
    875c:	00006759 	.word	0x00006759
    8760:	20000f98 	.word	0x20000f98
    8764:	0000c0e0 	.word	0x0000c0e0
    8768:	0000c103 	.word	0x0000c103
    876c:	0000ac83 	.word	0x0000ac83
    8770:	0000c183 	.word	0x0000c183

00008774 <z_impl_k_thread_create>:
{
    8774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8778:	b087      	sub	sp, #28
    877a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    877e:	4604      	mov	r4, r0
    8780:	460d      	mov	r5, r1
    8782:	4690      	mov	r8, r2
    8784:	4699      	mov	r9, r3
    8786:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    878a:	b173      	cbz	r3, 87aa <z_impl_k_thread_create+0x36>
    878c:	491b      	ldr	r1, [pc, #108]	; (87fc <z_impl_k_thread_create+0x88>)
    878e:	4a1c      	ldr	r2, [pc, #112]	; (8800 <z_impl_k_thread_create+0x8c>)
    8790:	481c      	ldr	r0, [pc, #112]	; (8804 <z_impl_k_thread_create+0x90>)
    8792:	f44f 731a 	mov.w	r3, #616	; 0x268
    8796:	f001 fa5e 	bl	9c56 <printk>
    879a:	481b      	ldr	r0, [pc, #108]	; (8808 <z_impl_k_thread_create+0x94>)
    879c:	f001 fa5b 	bl	9c56 <printk>
    87a0:	4817      	ldr	r0, [pc, #92]	; (8800 <z_impl_k_thread_create+0x8c>)
    87a2:	f44f 711a 	mov.w	r1, #616	; 0x268
    87a6:	f001 f97f 	bl	9aa8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    87aa:	2300      	movs	r3, #0
    87ac:	9305      	str	r3, [sp, #20]
    87ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    87b0:	9304      	str	r3, [sp, #16]
    87b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    87b4:	9303      	str	r3, [sp, #12]
    87b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87b8:	9302      	str	r3, [sp, #8]
    87ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87bc:	9301      	str	r3, [sp, #4]
    87be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    87c0:	9300      	str	r3, [sp, #0]
    87c2:	4642      	mov	r2, r8
    87c4:	464b      	mov	r3, r9
    87c6:	4629      	mov	r1, r5
    87c8:	4620      	mov	r0, r4
    87ca:	f7ff ff6f 	bl	86ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    87ce:	1c7b      	adds	r3, r7, #1
    87d0:	bf08      	it	eq
    87d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    87d6:	d005      	beq.n	87e4 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    87d8:	ea56 0307 	orrs.w	r3, r6, r7
    87dc:	d106      	bne.n	87ec <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    87de:	4620      	mov	r0, r4
    87e0:	f7fe fffa 	bl	77d8 <z_sched_start>
}
    87e4:	4620      	mov	r0, r4
    87e6:	b007      	add	sp, #28
    87e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    87ec:	4907      	ldr	r1, [pc, #28]	; (880c <z_impl_k_thread_create+0x98>)
    87ee:	4632      	mov	r2, r6
    87f0:	463b      	mov	r3, r7
    87f2:	f104 0018 	add.w	r0, r4, #24
    87f6:	f000 f911 	bl	8a1c <z_add_timeout>
    87fa:	e7f3      	b.n	87e4 <z_impl_k_thread_create+0x70>
    87fc:	0000bd79 	.word	0x0000bd79
    8800:	0000c0e0 	.word	0x0000c0e0
    8804:	0000ac83 	.word	0x0000ac83
    8808:	0000c1b4 	.word	0x0000c1b4
    880c:	00007881 	.word	0x00007881

00008810 <z_init_static_threads>:
{
    8810:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    8814:	4f3f      	ldr	r7, [pc, #252]	; (8914 <z_init_static_threads+0x104>)
    8816:	4d40      	ldr	r5, [pc, #256]	; (8918 <z_init_static_threads+0x108>)
    8818:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8928 <z_init_static_threads+0x118>
{
    881c:	b086      	sub	sp, #24
    881e:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    8820:	42bd      	cmp	r5, r7
    8822:	d90e      	bls.n	8842 <z_init_static_threads+0x32>
    8824:	493d      	ldr	r1, [pc, #244]	; (891c <z_init_static_threads+0x10c>)
    8826:	483e      	ldr	r0, [pc, #248]	; (8920 <z_init_static_threads+0x110>)
    8828:	f240 23cf 	movw	r3, #719	; 0x2cf
    882c:	4642      	mov	r2, r8
    882e:	f001 fa12 	bl	9c56 <printk>
    8832:	483c      	ldr	r0, [pc, #240]	; (8924 <z_init_static_threads+0x114>)
    8834:	f001 fa0f 	bl	9c56 <printk>
    8838:	f240 21cf 	movw	r1, #719	; 0x2cf
    883c:	4640      	mov	r0, r8
    883e:	f001 f933 	bl	9aa8 <assert_post_action>
    8842:	42b5      	cmp	r5, r6
    8844:	f105 0430 	add.w	r4, r5, #48	; 0x30
    8848:	d31f      	bcc.n	888a <z_init_static_threads+0x7a>
	k_sched_lock();
    884a:	f7fe fd21 	bl	7290 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    884e:	4c32      	ldr	r4, [pc, #200]	; (8918 <z_init_static_threads+0x108>)
    8850:	4d35      	ldr	r5, [pc, #212]	; (8928 <z_init_static_threads+0x118>)
    8852:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 891c <z_init_static_threads+0x10c>
    8856:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8920 <z_init_static_threads+0x110>
    885a:	42b4      	cmp	r4, r6
    885c:	d90e      	bls.n	887c <z_init_static_threads+0x6c>
    885e:	4641      	mov	r1, r8
    8860:	f240 23ee 	movw	r3, #750	; 0x2ee
    8864:	462a      	mov	r2, r5
    8866:	4648      	mov	r0, r9
    8868:	f001 f9f5 	bl	9c56 <printk>
    886c:	482d      	ldr	r0, [pc, #180]	; (8924 <z_init_static_threads+0x114>)
    886e:	f001 f9f2 	bl	9c56 <printk>
    8872:	f240 21ee 	movw	r1, #750	; 0x2ee
    8876:	4628      	mov	r0, r5
    8878:	f001 f916 	bl	9aa8 <assert_post_action>
    887c:	42b4      	cmp	r4, r6
    887e:	d321      	bcc.n	88c4 <z_init_static_threads+0xb4>
}
    8880:	b006      	add	sp, #24
    8882:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    8886:	f7ff ba47 	b.w	7d18 <k_sched_unlock>
		z_setup_new_thread(
    888a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    888e:	9305      	str	r3, [sp, #20]
    8890:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8894:	9304      	str	r3, [sp, #16]
    8896:	f854 3c14 	ldr.w	r3, [r4, #-20]
    889a:	9303      	str	r3, [sp, #12]
    889c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    88a0:	9302      	str	r3, [sp, #8]
    88a2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    88a6:	9301      	str	r3, [sp, #4]
    88a8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    88ac:	9300      	str	r3, [sp, #0]
    88ae:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    88b2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    88b6:	f7ff fef9 	bl	86ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    88ba:	f854 3c30 	ldr.w	r3, [r4, #-48]
    88be:	655d      	str	r5, [r3, #84]	; 0x54
    88c0:	4625      	mov	r5, r4
    88c2:	e7ad      	b.n	8820 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    88c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    88c6:	1c4b      	adds	r3, r1, #1
    88c8:	d014      	beq.n	88f4 <z_init_static_threads+0xe4>
    88ca:	f240 32e7 	movw	r2, #999	; 0x3e7
    88ce:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    88d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    88d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    88d8:	4693      	mov	fp, r2
    88da:	469c      	mov	ip, r3
    88dc:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    88e0:	459c      	cmp	ip, r3
    88e2:	bf08      	it	eq
    88e4:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    88e6:	6827      	ldr	r7, [r4, #0]
    88e8:	4658      	mov	r0, fp
    88ea:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    88ec:	d104      	bne.n	88f8 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    88ee:	4638      	mov	r0, r7
    88f0:	f7fe ff72 	bl	77d8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    88f4:	3430      	adds	r4, #48	; 0x30
    88f6:	e7b0      	b.n	885a <z_init_static_threads+0x4a>
    88f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    88fc:	2300      	movs	r3, #0
    88fe:	f7f8 fa6b 	bl	dd8 <__aeabi_uldivmod>
    8902:	4602      	mov	r2, r0
    8904:	460b      	mov	r3, r1
    8906:	f107 0018 	add.w	r0, r7, #24
    890a:	4908      	ldr	r1, [pc, #32]	; (892c <z_init_static_threads+0x11c>)
    890c:	f000 f886 	bl	8a1c <z_add_timeout>
    8910:	e7f0      	b.n	88f4 <z_init_static_threads+0xe4>
    8912:	bf00      	nop
    8914:	20000264 	.word	0x20000264
    8918:	20000264 	.word	0x20000264
    891c:	0000c1d9 	.word	0x0000c1d9
    8920:	0000ac83 	.word	0x0000ac83
    8924:	0000bd38 	.word	0x0000bd38
    8928:	0000c0e0 	.word	0x0000c0e0
    892c:	00007881 	.word	0x00007881

00008930 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    8930:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    8932:	b138      	cbz	r0, 8944 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    8934:	4b04      	ldr	r3, [pc, #16]	; (8948 <z_spin_lock_valid+0x18>)
    8936:	7d1b      	ldrb	r3, [r3, #20]
    8938:	f000 0003 	and.w	r0, r0, #3
    893c:	1ac0      	subs	r0, r0, r3
    893e:	bf18      	it	ne
    8940:	2001      	movne	r0, #1
    8942:	4770      	bx	lr
			return false;
		}
	}
	return true;
    8944:	2001      	movs	r0, #1
}
    8946:	4770      	bx	lr
    8948:	20000f98 	.word	0x20000f98

0000894c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    894c:	4906      	ldr	r1, [pc, #24]	; (8968 <z_spin_unlock_valid+0x1c>)
{
    894e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    8950:	688a      	ldr	r2, [r1, #8]
    8952:	7d08      	ldrb	r0, [r1, #20]
    8954:	6819      	ldr	r1, [r3, #0]
    8956:	4302      	orrs	r2, r0
    8958:	4291      	cmp	r1, r2
    895a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    895e:	bf04      	itt	eq
    8960:	6018      	streq	r0, [r3, #0]
	return true;
    8962:	2001      	moveq	r0, #1
}
    8964:	4770      	bx	lr
    8966:	bf00      	nop
    8968:	20000f98 	.word	0x20000f98

0000896c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    896c:	4a02      	ldr	r2, [pc, #8]	; (8978 <z_spin_lock_set_owner+0xc>)
    896e:	7d11      	ldrb	r1, [r2, #20]
    8970:	6893      	ldr	r3, [r2, #8]
    8972:	430b      	orrs	r3, r1
    8974:	6003      	str	r3, [r0, #0]
}
    8976:	4770      	bx	lr
    8978:	20000f98 	.word	0x20000f98

0000897c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    897c:	4b03      	ldr	r3, [pc, #12]	; (898c <elapsed+0x10>)
    897e:	681b      	ldr	r3, [r3, #0]
    8980:	b90b      	cbnz	r3, 8986 <elapsed+0xa>
    8982:	f7fc bd6b 	b.w	545c <sys_clock_elapsed>
}
    8986:	2000      	movs	r0, #0
    8988:	4770      	bx	lr
    898a:	bf00      	nop
    898c:	20000fdc 	.word	0x20000fdc

00008990 <next_timeout>:

static int32_t next_timeout(void)
{
    8990:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    8992:	4b13      	ldr	r3, [pc, #76]	; (89e0 <next_timeout+0x50>)
    8994:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8996:	429c      	cmp	r4, r3
    8998:	bf08      	it	eq
    899a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    899c:	f7ff ffee 	bl	897c <elapsed>
    89a0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    89a2:	b1bc      	cbz	r4, 89d4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    89a4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    89a8:	1b40      	subs	r0, r0, r5
    89aa:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    89ae:	2801      	cmp	r0, #1
    89b0:	f171 0300 	sbcs.w	r3, r1, #0
    89b4:	db11      	blt.n	89da <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    89b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    89ba:	2300      	movs	r3, #0
    89bc:	4282      	cmp	r2, r0
    89be:	eb73 0401 	sbcs.w	r4, r3, r1
    89c2:	da00      	bge.n	89c6 <next_timeout+0x36>
    89c4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    89c6:	4b07      	ldr	r3, [pc, #28]	; (89e4 <next_timeout+0x54>)
    89c8:	691b      	ldr	r3, [r3, #16]
    89ca:	b113      	cbz	r3, 89d2 <next_timeout+0x42>
    89cc:	4298      	cmp	r0, r3
    89ce:	bfa8      	it	ge
    89d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    89d2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    89d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    89d8:	e7f5      	b.n	89c6 <next_timeout+0x36>
    89da:	2000      	movs	r0, #0
    89dc:	e7f3      	b.n	89c6 <next_timeout+0x36>
    89de:	bf00      	nop
    89e0:	20000190 	.word	0x20000190
    89e4:	20000f98 	.word	0x20000f98

000089e8 <remove_timeout>:
{
    89e8:	b530      	push	{r4, r5, lr}
    89ea:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    89ec:	b168      	cbz	r0, 8a0a <remove_timeout+0x22>
    89ee:	4a0a      	ldr	r2, [pc, #40]	; (8a18 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    89f0:	6852      	ldr	r2, [r2, #4]
    89f2:	4290      	cmp	r0, r2
    89f4:	d009      	beq.n	8a0a <remove_timeout+0x22>
	if (next(t) != NULL) {
    89f6:	b143      	cbz	r3, 8a0a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    89f8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    89fc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8a00:	1912      	adds	r2, r2, r4
    8a02:	eb45 0101 	adc.w	r1, r5, r1
    8a06:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    8a0a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    8a0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8a0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8a10:	2300      	movs	r3, #0
	node->prev = NULL;
    8a12:	e9c0 3300 	strd	r3, r3, [r0]
}
    8a16:	bd30      	pop	{r4, r5, pc}
    8a18:	20000190 	.word	0x20000190

00008a1c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    8a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a20:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8a22:	1c6b      	adds	r3, r5, #1
    8a24:	bf08      	it	eq
    8a26:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    8a2a:	4682      	mov	sl, r0
    8a2c:	468b      	mov	fp, r1
    8a2e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8a30:	f000 80aa 	beq.w	8b88 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    8a34:	6803      	ldr	r3, [r0, #0]
    8a36:	b163      	cbz	r3, 8a52 <z_add_timeout+0x36>
    8a38:	4955      	ldr	r1, [pc, #340]	; (8b90 <z_add_timeout+0x174>)
    8a3a:	4a56      	ldr	r2, [pc, #344]	; (8b94 <z_add_timeout+0x178>)
    8a3c:	4856      	ldr	r0, [pc, #344]	; (8b98 <z_add_timeout+0x17c>)
    8a3e:	235d      	movs	r3, #93	; 0x5d
    8a40:	f001 f909 	bl	9c56 <printk>
    8a44:	4855      	ldr	r0, [pc, #340]	; (8b9c <z_add_timeout+0x180>)
    8a46:	f001 f906 	bl	9c56 <printk>
    8a4a:	4852      	ldr	r0, [pc, #328]	; (8b94 <z_add_timeout+0x178>)
    8a4c:	215d      	movs	r1, #93	; 0x5d
    8a4e:	f001 f82b 	bl	9aa8 <assert_post_action>
	to->fn = fn;
    8a52:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    8a56:	f04f 0320 	mov.w	r3, #32
    8a5a:	f3ef 8b11 	mrs	fp, BASEPRI
    8a5e:	f383 8812 	msr	BASEPRI_MAX, r3
    8a62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a66:	484e      	ldr	r0, [pc, #312]	; (8ba0 <z_add_timeout+0x184>)
    8a68:	f7ff ff62 	bl	8930 <z_spin_lock_valid>
    8a6c:	b968      	cbnz	r0, 8a8a <z_add_timeout+0x6e>
    8a6e:	4a4d      	ldr	r2, [pc, #308]	; (8ba4 <z_add_timeout+0x188>)
    8a70:	494d      	ldr	r1, [pc, #308]	; (8ba8 <z_add_timeout+0x18c>)
    8a72:	4849      	ldr	r0, [pc, #292]	; (8b98 <z_add_timeout+0x17c>)
    8a74:	2381      	movs	r3, #129	; 0x81
    8a76:	f001 f8ee 	bl	9c56 <printk>
    8a7a:	4949      	ldr	r1, [pc, #292]	; (8ba0 <z_add_timeout+0x184>)
    8a7c:	484b      	ldr	r0, [pc, #300]	; (8bac <z_add_timeout+0x190>)
    8a7e:	f001 f8ea 	bl	9c56 <printk>
    8a82:	4848      	ldr	r0, [pc, #288]	; (8ba4 <z_add_timeout+0x188>)
    8a84:	2181      	movs	r1, #129	; 0x81
    8a86:	f001 f80f 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8a8a:	4845      	ldr	r0, [pc, #276]	; (8ba0 <z_add_timeout+0x184>)
    8a8c:	f7ff ff6e 	bl	896c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8a90:	f06f 0301 	mvn.w	r3, #1
    8a94:	ebb3 0804 	subs.w	r8, r3, r4
    8a98:	f04f 32ff 	mov.w	r2, #4294967295
    8a9c:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8aa0:	f1b8 0f00 	cmp.w	r8, #0
    8aa4:	f179 0100 	sbcs.w	r1, r9, #0
    8aa8:	db1c      	blt.n	8ae4 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8aaa:	4841      	ldr	r0, [pc, #260]	; (8bb0 <z_add_timeout+0x194>)
    8aac:	e9d0 1000 	ldrd	r1, r0, [r0]
    8ab0:	1a5b      	subs	r3, r3, r1
    8ab2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    8ab6:	1b1e      	subs	r6, r3, r4
    8ab8:	eb62 0705 	sbc.w	r7, r2, r5
    8abc:	2e01      	cmp	r6, #1
    8abe:	f177 0300 	sbcs.w	r3, r7, #0
    8ac2:	bfbc      	itt	lt
    8ac4:	2601      	movlt	r6, #1
    8ac6:	2700      	movlt	r7, #0
    8ac8:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    8acc:	4a39      	ldr	r2, [pc, #228]	; (8bb4 <z_add_timeout+0x198>)
    8ace:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ad2:	4293      	cmp	r3, r2
    8ad4:	d11d      	bne.n	8b12 <z_add_timeout+0xf6>
	node->prev = tail;
    8ad6:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    8ada:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    8ade:	f8c2 a004 	str.w	sl, [r2, #4]
}
    8ae2:	e02c      	b.n	8b3e <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8ae4:	f7ff ff4a 	bl	897c <elapsed>
    8ae8:	1c63      	adds	r3, r4, #1
    8aea:	9300      	str	r3, [sp, #0]
    8aec:	f145 0300 	adc.w	r3, r5, #0
    8af0:	9301      	str	r3, [sp, #4]
    8af2:	e9dd 2300 	ldrd	r2, r3, [sp]
    8af6:	1812      	adds	r2, r2, r0
    8af8:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    8afc:	e9ca 2304 	strd	r2, r3, [sl, #16]
    8b00:	e7e4      	b.n	8acc <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    8b02:	1be0      	subs	r0, r4, r7
    8b04:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    8b08:	42b3      	cmp	r3, r6
    8b0a:	e9ca 0104 	strd	r0, r1, [sl, #16]
    8b0e:	d0e2      	beq.n	8ad6 <z_add_timeout+0xba>
    8b10:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    8b12:	2b00      	cmp	r3, #0
    8b14:	d0df      	beq.n	8ad6 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    8b16:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    8b1a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    8b1e:	42bc      	cmp	r4, r7
    8b20:	eb75 0108 	sbcs.w	r1, r5, r8
    8b24:	daed      	bge.n	8b02 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    8b26:	1b38      	subs	r0, r7, r4
    8b28:	eb68 0105 	sbc.w	r1, r8, r5
    8b2c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    8b30:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    8b32:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    8b36:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    8b3a:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    8b3e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b40:	4293      	cmp	r3, r2
    8b42:	d00b      	beq.n	8b5c <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8b44:	459a      	cmp	sl, r3
    8b46:	d109      	bne.n	8b5c <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8b48:	f7ff ff22 	bl	8990 <next_timeout>

			if (next_time == 0 ||
    8b4c:	b118      	cbz	r0, 8b56 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    8b4e:	4b1a      	ldr	r3, [pc, #104]	; (8bb8 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    8b50:	691b      	ldr	r3, [r3, #16]
    8b52:	4283      	cmp	r3, r0
    8b54:	d002      	beq.n	8b5c <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    8b56:	2100      	movs	r1, #0
    8b58:	f7fc fc50 	bl	53fc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b5c:	4810      	ldr	r0, [pc, #64]	; (8ba0 <z_add_timeout+0x184>)
    8b5e:	f7ff fef5 	bl	894c <z_spin_unlock_valid>
    8b62:	b968      	cbnz	r0, 8b80 <z_add_timeout+0x164>
    8b64:	4a0f      	ldr	r2, [pc, #60]	; (8ba4 <z_add_timeout+0x188>)
    8b66:	4915      	ldr	r1, [pc, #84]	; (8bbc <z_add_timeout+0x1a0>)
    8b68:	480b      	ldr	r0, [pc, #44]	; (8b98 <z_add_timeout+0x17c>)
    8b6a:	23ac      	movs	r3, #172	; 0xac
    8b6c:	f001 f873 	bl	9c56 <printk>
    8b70:	490b      	ldr	r1, [pc, #44]	; (8ba0 <z_add_timeout+0x184>)
    8b72:	4813      	ldr	r0, [pc, #76]	; (8bc0 <z_add_timeout+0x1a4>)
    8b74:	f001 f86f 	bl	9c56 <printk>
    8b78:	480a      	ldr	r0, [pc, #40]	; (8ba4 <z_add_timeout+0x188>)
    8b7a:	21ac      	movs	r1, #172	; 0xac
    8b7c:	f000 ff94 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    8b80:	f38b 8811 	msr	BASEPRI, fp
    8b84:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8b88:	b003      	add	sp, #12
    8b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b8e:	bf00      	nop
    8b90:	0000c22a 	.word	0x0000c22a
    8b94:	0000c206 	.word	0x0000c206
    8b98:	0000ac83 	.word	0x0000ac83
    8b9c:	0000bdf2 	.word	0x0000bdf2
    8ba0:	20000fe0 	.word	0x20000fe0
    8ba4:	0000b39a 	.word	0x0000b39a
    8ba8:	0000b3ec 	.word	0x0000b3ec
    8bac:	0000b401 	.word	0x0000b401
    8bb0:	200008a8 	.word	0x200008a8
    8bb4:	20000190 	.word	0x20000190
    8bb8:	20000f98 	.word	0x20000f98
    8bbc:	0000b3c0 	.word	0x0000b3c0
    8bc0:	0000b3d7 	.word	0x0000b3d7

00008bc4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8bc4:	b538      	push	{r3, r4, r5, lr}
    8bc6:	4604      	mov	r4, r0
	__asm__ volatile(
    8bc8:	f04f 0320 	mov.w	r3, #32
    8bcc:	f3ef 8511 	mrs	r5, BASEPRI
    8bd0:	f383 8812 	msr	BASEPRI_MAX, r3
    8bd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bd8:	481a      	ldr	r0, [pc, #104]	; (8c44 <z_abort_timeout+0x80>)
    8bda:	f7ff fea9 	bl	8930 <z_spin_lock_valid>
    8bde:	b968      	cbnz	r0, 8bfc <z_abort_timeout+0x38>
    8be0:	4a19      	ldr	r2, [pc, #100]	; (8c48 <z_abort_timeout+0x84>)
    8be2:	491a      	ldr	r1, [pc, #104]	; (8c4c <z_abort_timeout+0x88>)
    8be4:	481a      	ldr	r0, [pc, #104]	; (8c50 <z_abort_timeout+0x8c>)
    8be6:	2381      	movs	r3, #129	; 0x81
    8be8:	f001 f835 	bl	9c56 <printk>
    8bec:	4915      	ldr	r1, [pc, #84]	; (8c44 <z_abort_timeout+0x80>)
    8bee:	4819      	ldr	r0, [pc, #100]	; (8c54 <z_abort_timeout+0x90>)
    8bf0:	f001 f831 	bl	9c56 <printk>
    8bf4:	4814      	ldr	r0, [pc, #80]	; (8c48 <z_abort_timeout+0x84>)
    8bf6:	2181      	movs	r1, #129	; 0x81
    8bf8:	f000 ff56 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8bfc:	4811      	ldr	r0, [pc, #68]	; (8c44 <z_abort_timeout+0x80>)
    8bfe:	f7ff feb5 	bl	896c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    8c02:	6823      	ldr	r3, [r4, #0]
    8c04:	b1db      	cbz	r3, 8c3e <z_abort_timeout+0x7a>
			remove_timeout(to);
    8c06:	4620      	mov	r0, r4
    8c08:	f7ff feee 	bl	89e8 <remove_timeout>
			ret = 0;
    8c0c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c0e:	480d      	ldr	r0, [pc, #52]	; (8c44 <z_abort_timeout+0x80>)
    8c10:	f7ff fe9c 	bl	894c <z_spin_unlock_valid>
    8c14:	b968      	cbnz	r0, 8c32 <z_abort_timeout+0x6e>
    8c16:	4a0c      	ldr	r2, [pc, #48]	; (8c48 <z_abort_timeout+0x84>)
    8c18:	490f      	ldr	r1, [pc, #60]	; (8c58 <z_abort_timeout+0x94>)
    8c1a:	480d      	ldr	r0, [pc, #52]	; (8c50 <z_abort_timeout+0x8c>)
    8c1c:	23ac      	movs	r3, #172	; 0xac
    8c1e:	f001 f81a 	bl	9c56 <printk>
    8c22:	4908      	ldr	r1, [pc, #32]	; (8c44 <z_abort_timeout+0x80>)
    8c24:	480d      	ldr	r0, [pc, #52]	; (8c5c <z_abort_timeout+0x98>)
    8c26:	f001 f816 	bl	9c56 <printk>
    8c2a:	4807      	ldr	r0, [pc, #28]	; (8c48 <z_abort_timeout+0x84>)
    8c2c:	21ac      	movs	r1, #172	; 0xac
    8c2e:	f000 ff3b 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    8c32:	f385 8811 	msr	BASEPRI, r5
    8c36:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    8c3a:	4620      	mov	r0, r4
    8c3c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    8c3e:	f06f 0415 	mvn.w	r4, #21
    8c42:	e7e4      	b.n	8c0e <z_abort_timeout+0x4a>
    8c44:	20000fe0 	.word	0x20000fe0
    8c48:	0000b39a 	.word	0x0000b39a
    8c4c:	0000b3ec 	.word	0x0000b3ec
    8c50:	0000ac83 	.word	0x0000ac83
    8c54:	0000b401 	.word	0x0000b401
    8c58:	0000b3c0 	.word	0x0000b3c0
    8c5c:	0000b3d7 	.word	0x0000b3d7

00008c60 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    8c60:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8c62:	f04f 0320 	mov.w	r3, #32
    8c66:	f3ef 8511 	mrs	r5, BASEPRI
    8c6a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c72:	4818      	ldr	r0, [pc, #96]	; (8cd4 <z_get_next_timeout_expiry+0x74>)
    8c74:	f7ff fe5c 	bl	8930 <z_spin_lock_valid>
    8c78:	b968      	cbnz	r0, 8c96 <z_get_next_timeout_expiry+0x36>
    8c7a:	4a17      	ldr	r2, [pc, #92]	; (8cd8 <z_get_next_timeout_expiry+0x78>)
    8c7c:	4917      	ldr	r1, [pc, #92]	; (8cdc <z_get_next_timeout_expiry+0x7c>)
    8c7e:	4818      	ldr	r0, [pc, #96]	; (8ce0 <z_get_next_timeout_expiry+0x80>)
    8c80:	2381      	movs	r3, #129	; 0x81
    8c82:	f000 ffe8 	bl	9c56 <printk>
    8c86:	4913      	ldr	r1, [pc, #76]	; (8cd4 <z_get_next_timeout_expiry+0x74>)
    8c88:	4816      	ldr	r0, [pc, #88]	; (8ce4 <z_get_next_timeout_expiry+0x84>)
    8c8a:	f000 ffe4 	bl	9c56 <printk>
    8c8e:	4812      	ldr	r0, [pc, #72]	; (8cd8 <z_get_next_timeout_expiry+0x78>)
    8c90:	2181      	movs	r1, #129	; 0x81
    8c92:	f000 ff09 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8c96:	480f      	ldr	r0, [pc, #60]	; (8cd4 <z_get_next_timeout_expiry+0x74>)
    8c98:	f7ff fe68 	bl	896c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    8c9c:	f7ff fe78 	bl	8990 <next_timeout>
    8ca0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ca2:	480c      	ldr	r0, [pc, #48]	; (8cd4 <z_get_next_timeout_expiry+0x74>)
    8ca4:	f7ff fe52 	bl	894c <z_spin_unlock_valid>
    8ca8:	b968      	cbnz	r0, 8cc6 <z_get_next_timeout_expiry+0x66>
    8caa:	4a0b      	ldr	r2, [pc, #44]	; (8cd8 <z_get_next_timeout_expiry+0x78>)
    8cac:	490e      	ldr	r1, [pc, #56]	; (8ce8 <z_get_next_timeout_expiry+0x88>)
    8cae:	480c      	ldr	r0, [pc, #48]	; (8ce0 <z_get_next_timeout_expiry+0x80>)
    8cb0:	23ac      	movs	r3, #172	; 0xac
    8cb2:	f000 ffd0 	bl	9c56 <printk>
    8cb6:	4907      	ldr	r1, [pc, #28]	; (8cd4 <z_get_next_timeout_expiry+0x74>)
    8cb8:	480c      	ldr	r0, [pc, #48]	; (8cec <z_get_next_timeout_expiry+0x8c>)
    8cba:	f000 ffcc 	bl	9c56 <printk>
    8cbe:	4806      	ldr	r0, [pc, #24]	; (8cd8 <z_get_next_timeout_expiry+0x78>)
    8cc0:	21ac      	movs	r1, #172	; 0xac
    8cc2:	f000 fef1 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    8cc6:	f385 8811 	msr	BASEPRI, r5
    8cca:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    8cce:	4620      	mov	r0, r4
    8cd0:	bd38      	pop	{r3, r4, r5, pc}
    8cd2:	bf00      	nop
    8cd4:	20000fe0 	.word	0x20000fe0
    8cd8:	0000b39a 	.word	0x0000b39a
    8cdc:	0000b3ec 	.word	0x0000b3ec
    8ce0:	0000ac83 	.word	0x0000ac83
    8ce4:	0000b401 	.word	0x0000b401
    8ce8:	0000b3c0 	.word	0x0000b3c0
    8cec:	0000b3d7 	.word	0x0000b3d7

00008cf0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8cf0:	b570      	push	{r4, r5, r6, lr}
    8cf2:	4604      	mov	r4, r0
    8cf4:	460d      	mov	r5, r1
	__asm__ volatile(
    8cf6:	f04f 0320 	mov.w	r3, #32
    8cfa:	f3ef 8611 	mrs	r6, BASEPRI
    8cfe:	f383 8812 	msr	BASEPRI_MAX, r3
    8d02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d06:	481b      	ldr	r0, [pc, #108]	; (8d74 <z_set_timeout_expiry+0x84>)
    8d08:	f7ff fe12 	bl	8930 <z_spin_lock_valid>
    8d0c:	b968      	cbnz	r0, 8d2a <z_set_timeout_expiry+0x3a>
    8d0e:	4a1a      	ldr	r2, [pc, #104]	; (8d78 <z_set_timeout_expiry+0x88>)
    8d10:	491a      	ldr	r1, [pc, #104]	; (8d7c <z_set_timeout_expiry+0x8c>)
    8d12:	481b      	ldr	r0, [pc, #108]	; (8d80 <z_set_timeout_expiry+0x90>)
    8d14:	2381      	movs	r3, #129	; 0x81
    8d16:	f000 ff9e 	bl	9c56 <printk>
    8d1a:	4916      	ldr	r1, [pc, #88]	; (8d74 <z_set_timeout_expiry+0x84>)
    8d1c:	4819      	ldr	r0, [pc, #100]	; (8d84 <z_set_timeout_expiry+0x94>)
    8d1e:	f000 ff9a 	bl	9c56 <printk>
    8d22:	4815      	ldr	r0, [pc, #84]	; (8d78 <z_set_timeout_expiry+0x88>)
    8d24:	2181      	movs	r1, #129	; 0x81
    8d26:	f000 febf 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8d2a:	4812      	ldr	r0, [pc, #72]	; (8d74 <z_set_timeout_expiry+0x84>)
    8d2c:	f7ff fe1e 	bl	896c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8d30:	f7ff fe2e 	bl	8990 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8d34:	2801      	cmp	r0, #1
    8d36:	dd05      	ble.n	8d44 <z_set_timeout_expiry+0x54>
    8d38:	42a0      	cmp	r0, r4
    8d3a:	db03      	blt.n	8d44 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8d3c:	4629      	mov	r1, r5
    8d3e:	4620      	mov	r0, r4
    8d40:	f7fc fb5c 	bl	53fc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d44:	480b      	ldr	r0, [pc, #44]	; (8d74 <z_set_timeout_expiry+0x84>)
    8d46:	f7ff fe01 	bl	894c <z_spin_unlock_valid>
    8d4a:	b968      	cbnz	r0, 8d68 <z_set_timeout_expiry+0x78>
    8d4c:	4a0a      	ldr	r2, [pc, #40]	; (8d78 <z_set_timeout_expiry+0x88>)
    8d4e:	490e      	ldr	r1, [pc, #56]	; (8d88 <z_set_timeout_expiry+0x98>)
    8d50:	480b      	ldr	r0, [pc, #44]	; (8d80 <z_set_timeout_expiry+0x90>)
    8d52:	23ac      	movs	r3, #172	; 0xac
    8d54:	f000 ff7f 	bl	9c56 <printk>
    8d58:	4906      	ldr	r1, [pc, #24]	; (8d74 <z_set_timeout_expiry+0x84>)
    8d5a:	480c      	ldr	r0, [pc, #48]	; (8d8c <z_set_timeout_expiry+0x9c>)
    8d5c:	f000 ff7b 	bl	9c56 <printk>
    8d60:	4805      	ldr	r0, [pc, #20]	; (8d78 <z_set_timeout_expiry+0x88>)
    8d62:	21ac      	movs	r1, #172	; 0xac
    8d64:	f000 fea0 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    8d68:	f386 8811 	msr	BASEPRI, r6
    8d6c:	f3bf 8f6f 	isb	sy
		}
	}
}
    8d70:	bd70      	pop	{r4, r5, r6, pc}
    8d72:	bf00      	nop
    8d74:	20000fe0 	.word	0x20000fe0
    8d78:	0000b39a 	.word	0x0000b39a
    8d7c:	0000b3ec 	.word	0x0000b3ec
    8d80:	0000ac83 	.word	0x0000ac83
    8d84:	0000b401 	.word	0x0000b401
    8d88:	0000b3c0 	.word	0x0000b3c0
    8d8c:	0000b3d7 	.word	0x0000b3d7

00008d90 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d94:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8d96:	f7fe fc0d 	bl	75b4 <z_time_slice>
	__asm__ volatile(
    8d9a:	f04f 0320 	mov.w	r3, #32
    8d9e:	f3ef 8711 	mrs	r7, BASEPRI
    8da2:	f383 8812 	msr	BASEPRI_MAX, r3
    8da6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8daa:	4855      	ldr	r0, [pc, #340]	; (8f00 <sys_clock_announce+0x170>)
    8dac:	f7ff fdc0 	bl	8930 <z_spin_lock_valid>
    8db0:	b968      	cbnz	r0, 8dce <sys_clock_announce+0x3e>
    8db2:	4a54      	ldr	r2, [pc, #336]	; (8f04 <sys_clock_announce+0x174>)
    8db4:	4954      	ldr	r1, [pc, #336]	; (8f08 <sys_clock_announce+0x178>)
    8db6:	4855      	ldr	r0, [pc, #340]	; (8f0c <sys_clock_announce+0x17c>)
    8db8:	2381      	movs	r3, #129	; 0x81
    8dba:	f000 ff4c 	bl	9c56 <printk>
    8dbe:	4950      	ldr	r1, [pc, #320]	; (8f00 <sys_clock_announce+0x170>)
    8dc0:	4853      	ldr	r0, [pc, #332]	; (8f10 <sys_clock_announce+0x180>)
    8dc2:	f000 ff48 	bl	9c56 <printk>
    8dc6:	484f      	ldr	r0, [pc, #316]	; (8f04 <sys_clock_announce+0x174>)
    8dc8:	2181      	movs	r1, #129	; 0x81
    8dca:	f000 fe6d 	bl	9aa8 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8dce:	4d51      	ldr	r5, [pc, #324]	; (8f14 <sys_clock_announce+0x184>)
    8dd0:	4e51      	ldr	r6, [pc, #324]	; (8f18 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    8dd2:	484b      	ldr	r0, [pc, #300]	; (8f00 <sys_clock_announce+0x170>)
	return list->head == list;
    8dd4:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8f24 <sys_clock_announce+0x194>
    8dd8:	f7ff fdc8 	bl	896c <z_spin_lock_set_owner>
    8ddc:	46b3      	mov	fp, r6
    8dde:	602c      	str	r4, [r5, #0]
    8de0:	e9d6 2300 	ldrd	r2, r3, [r6]
    8de4:	f8d5 c000 	ldr.w	ip, [r5]
    8de8:	f8da 4000 	ldr.w	r4, [sl]
    8dec:	e9cd 2300 	strd	r2, r3, [sp]
    8df0:	4662      	mov	r2, ip
    8df2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8df4:	4554      	cmp	r4, sl
    8df6:	46e0      	mov	r8, ip
    8df8:	4699      	mov	r9, r3
    8dfa:	d00c      	beq.n	8e16 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8dfc:	b15c      	cbz	r4, 8e16 <sys_clock_announce+0x86>
    8dfe:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    8e02:	458c      	cmp	ip, r1
    8e04:	eb79 0302 	sbcs.w	r3, r9, r2
    8e08:	da2e      	bge.n	8e68 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8e0a:	ebb1 000c 	subs.w	r0, r1, ip
    8e0e:	eb62 0109 	sbc.w	r1, r2, r9
    8e12:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    8e16:	9a00      	ldr	r2, [sp, #0]
    8e18:	9901      	ldr	r1, [sp, #4]
    8e1a:	eb18 0202 	adds.w	r2, r8, r2
    8e1e:	464b      	mov	r3, r9
    8e20:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    8e24:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    8e26:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    8e2a:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8e2c:	f7ff fdb0 	bl	8990 <next_timeout>
    8e30:	4621      	mov	r1, r4
    8e32:	f7fc fae3 	bl	53fc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e36:	4832      	ldr	r0, [pc, #200]	; (8f00 <sys_clock_announce+0x170>)
    8e38:	f7ff fd88 	bl	894c <z_spin_unlock_valid>
    8e3c:	b968      	cbnz	r0, 8e5a <sys_clock_announce+0xca>
    8e3e:	4a31      	ldr	r2, [pc, #196]	; (8f04 <sys_clock_announce+0x174>)
    8e40:	4936      	ldr	r1, [pc, #216]	; (8f1c <sys_clock_announce+0x18c>)
    8e42:	4832      	ldr	r0, [pc, #200]	; (8f0c <sys_clock_announce+0x17c>)
    8e44:	23ac      	movs	r3, #172	; 0xac
    8e46:	f000 ff06 	bl	9c56 <printk>
    8e4a:	492d      	ldr	r1, [pc, #180]	; (8f00 <sys_clock_announce+0x170>)
    8e4c:	4834      	ldr	r0, [pc, #208]	; (8f20 <sys_clock_announce+0x190>)
    8e4e:	f000 ff02 	bl	9c56 <printk>
    8e52:	482c      	ldr	r0, [pc, #176]	; (8f04 <sys_clock_announce+0x174>)
    8e54:	21ac      	movs	r1, #172	; 0xac
    8e56:	f000 fe27 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    8e5a:	f387 8811 	msr	BASEPRI, r7
    8e5e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8e62:	b003      	add	sp, #12
    8e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    8e68:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    8e6c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    8e70:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    8e74:	f04f 0200 	mov.w	r2, #0
    8e78:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    8e7c:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    8e80:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    8e82:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8e86:	4620      	mov	r0, r4
		curr_tick += dt;
    8e88:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    8e8c:	f7ff fdac 	bl	89e8 <remove_timeout>
    8e90:	481b      	ldr	r0, [pc, #108]	; (8f00 <sys_clock_announce+0x170>)
    8e92:	f7ff fd5b 	bl	894c <z_spin_unlock_valid>
    8e96:	b968      	cbnz	r0, 8eb4 <sys_clock_announce+0x124>
    8e98:	4a1a      	ldr	r2, [pc, #104]	; (8f04 <sys_clock_announce+0x174>)
    8e9a:	4920      	ldr	r1, [pc, #128]	; (8f1c <sys_clock_announce+0x18c>)
    8e9c:	481b      	ldr	r0, [pc, #108]	; (8f0c <sys_clock_announce+0x17c>)
    8e9e:	23ac      	movs	r3, #172	; 0xac
    8ea0:	f000 fed9 	bl	9c56 <printk>
    8ea4:	4916      	ldr	r1, [pc, #88]	; (8f00 <sys_clock_announce+0x170>)
    8ea6:	481e      	ldr	r0, [pc, #120]	; (8f20 <sys_clock_announce+0x190>)
    8ea8:	f000 fed5 	bl	9c56 <printk>
    8eac:	4815      	ldr	r0, [pc, #84]	; (8f04 <sys_clock_announce+0x174>)
    8eae:	21ac      	movs	r1, #172	; 0xac
    8eb0:	f000 fdfa 	bl	9aa8 <assert_post_action>
    8eb4:	f387 8811 	msr	BASEPRI, r7
    8eb8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8ebc:	68a3      	ldr	r3, [r4, #8]
    8ebe:	4620      	mov	r0, r4
    8ec0:	4798      	blx	r3
	__asm__ volatile(
    8ec2:	f04f 0320 	mov.w	r3, #32
    8ec6:	f3ef 8711 	mrs	r7, BASEPRI
    8eca:	f383 8812 	msr	BASEPRI_MAX, r3
    8ece:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ed2:	480b      	ldr	r0, [pc, #44]	; (8f00 <sys_clock_announce+0x170>)
    8ed4:	f7ff fd2c 	bl	8930 <z_spin_lock_valid>
    8ed8:	b968      	cbnz	r0, 8ef6 <sys_clock_announce+0x166>
    8eda:	4a0a      	ldr	r2, [pc, #40]	; (8f04 <sys_clock_announce+0x174>)
    8edc:	490a      	ldr	r1, [pc, #40]	; (8f08 <sys_clock_announce+0x178>)
    8ede:	480b      	ldr	r0, [pc, #44]	; (8f0c <sys_clock_announce+0x17c>)
    8ee0:	2381      	movs	r3, #129	; 0x81
    8ee2:	f000 feb8 	bl	9c56 <printk>
    8ee6:	4906      	ldr	r1, [pc, #24]	; (8f00 <sys_clock_announce+0x170>)
    8ee8:	4809      	ldr	r0, [pc, #36]	; (8f10 <sys_clock_announce+0x180>)
    8eea:	f000 feb4 	bl	9c56 <printk>
    8eee:	4805      	ldr	r0, [pc, #20]	; (8f04 <sys_clock_announce+0x174>)
    8ef0:	2181      	movs	r1, #129	; 0x81
    8ef2:	f000 fdd9 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8ef6:	4802      	ldr	r0, [pc, #8]	; (8f00 <sys_clock_announce+0x170>)
    8ef8:	f7ff fd38 	bl	896c <z_spin_lock_set_owner>
	return k;
    8efc:	e770      	b.n	8de0 <sys_clock_announce+0x50>
    8efe:	bf00      	nop
    8f00:	20000fe0 	.word	0x20000fe0
    8f04:	0000b39a 	.word	0x0000b39a
    8f08:	0000b3ec 	.word	0x0000b3ec
    8f0c:	0000ac83 	.word	0x0000ac83
    8f10:	0000b401 	.word	0x0000b401
    8f14:	20000fdc 	.word	0x20000fdc
    8f18:	200008a8 	.word	0x200008a8
    8f1c:	0000b3c0 	.word	0x0000b3c0
    8f20:	0000b3d7 	.word	0x0000b3d7
    8f24:	20000190 	.word	0x20000190

00008f28 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8f28:	b570      	push	{r4, r5, r6, lr}
    8f2a:	f04f 0320 	mov.w	r3, #32
    8f2e:	f3ef 8611 	mrs	r6, BASEPRI
    8f32:	f383 8812 	msr	BASEPRI_MAX, r3
    8f36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f3a:	481b      	ldr	r0, [pc, #108]	; (8fa8 <sys_clock_tick_get+0x80>)
    8f3c:	f7ff fcf8 	bl	8930 <z_spin_lock_valid>
    8f40:	b968      	cbnz	r0, 8f5e <sys_clock_tick_get+0x36>
    8f42:	4a1a      	ldr	r2, [pc, #104]	; (8fac <sys_clock_tick_get+0x84>)
    8f44:	491a      	ldr	r1, [pc, #104]	; (8fb0 <sys_clock_tick_get+0x88>)
    8f46:	481b      	ldr	r0, [pc, #108]	; (8fb4 <sys_clock_tick_get+0x8c>)
    8f48:	2381      	movs	r3, #129	; 0x81
    8f4a:	f000 fe84 	bl	9c56 <printk>
    8f4e:	4916      	ldr	r1, [pc, #88]	; (8fa8 <sys_clock_tick_get+0x80>)
    8f50:	4819      	ldr	r0, [pc, #100]	; (8fb8 <sys_clock_tick_get+0x90>)
    8f52:	f000 fe80 	bl	9c56 <printk>
    8f56:	4815      	ldr	r0, [pc, #84]	; (8fac <sys_clock_tick_get+0x84>)
    8f58:	2181      	movs	r1, #129	; 0x81
    8f5a:	f000 fda5 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8f5e:	4812      	ldr	r0, [pc, #72]	; (8fa8 <sys_clock_tick_get+0x80>)
    8f60:	f7ff fd04 	bl	896c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8f64:	f7fc fa7a 	bl	545c <sys_clock_elapsed>
    8f68:	4b14      	ldr	r3, [pc, #80]	; (8fbc <sys_clock_tick_get+0x94>)
    8f6a:	e9d3 4500 	ldrd	r4, r5, [r3]
    8f6e:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f70:	480d      	ldr	r0, [pc, #52]	; (8fa8 <sys_clock_tick_get+0x80>)
    8f72:	f145 0500 	adc.w	r5, r5, #0
    8f76:	f7ff fce9 	bl	894c <z_spin_unlock_valid>
    8f7a:	b968      	cbnz	r0, 8f98 <sys_clock_tick_get+0x70>
    8f7c:	4a0b      	ldr	r2, [pc, #44]	; (8fac <sys_clock_tick_get+0x84>)
    8f7e:	4910      	ldr	r1, [pc, #64]	; (8fc0 <sys_clock_tick_get+0x98>)
    8f80:	480c      	ldr	r0, [pc, #48]	; (8fb4 <sys_clock_tick_get+0x8c>)
    8f82:	23ac      	movs	r3, #172	; 0xac
    8f84:	f000 fe67 	bl	9c56 <printk>
    8f88:	4907      	ldr	r1, [pc, #28]	; (8fa8 <sys_clock_tick_get+0x80>)
    8f8a:	480e      	ldr	r0, [pc, #56]	; (8fc4 <sys_clock_tick_get+0x9c>)
    8f8c:	f000 fe63 	bl	9c56 <printk>
    8f90:	4806      	ldr	r0, [pc, #24]	; (8fac <sys_clock_tick_get+0x84>)
    8f92:	21ac      	movs	r1, #172	; 0xac
    8f94:	f000 fd88 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    8f98:	f386 8811 	msr	BASEPRI, r6
    8f9c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8fa0:	4620      	mov	r0, r4
    8fa2:	4629      	mov	r1, r5
    8fa4:	bd70      	pop	{r4, r5, r6, pc}
    8fa6:	bf00      	nop
    8fa8:	20000fe0 	.word	0x20000fe0
    8fac:	0000b39a 	.word	0x0000b39a
    8fb0:	0000b3ec 	.word	0x0000b3ec
    8fb4:	0000ac83 	.word	0x0000ac83
    8fb8:	0000b401 	.word	0x0000b401
    8fbc:	200008a8 	.word	0x200008a8
    8fc0:	0000b3c0 	.word	0x0000b3c0
    8fc4:	0000b3d7 	.word	0x0000b3d7

00008fc8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fca:	4604      	mov	r4, r0
	__asm__ volatile(
    8fcc:	f04f 0320 	mov.w	r3, #32
    8fd0:	f3ef 8511 	mrs	r5, BASEPRI
    8fd4:	f383 8812 	msr	BASEPRI_MAX, r3
    8fd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8fdc:	484c      	ldr	r0, [pc, #304]	; (9110 <z_timer_expiration_handler+0x148>)
    8fde:	f7ff fca7 	bl	8930 <z_spin_lock_valid>
    8fe2:	b968      	cbnz	r0, 9000 <z_timer_expiration_handler+0x38>
    8fe4:	4a4b      	ldr	r2, [pc, #300]	; (9114 <z_timer_expiration_handler+0x14c>)
    8fe6:	494c      	ldr	r1, [pc, #304]	; (9118 <z_timer_expiration_handler+0x150>)
    8fe8:	484c      	ldr	r0, [pc, #304]	; (911c <z_timer_expiration_handler+0x154>)
    8fea:	2381      	movs	r3, #129	; 0x81
    8fec:	f000 fe33 	bl	9c56 <printk>
    8ff0:	4947      	ldr	r1, [pc, #284]	; (9110 <z_timer_expiration_handler+0x148>)
    8ff2:	484b      	ldr	r0, [pc, #300]	; (9120 <z_timer_expiration_handler+0x158>)
    8ff4:	f000 fe2f 	bl	9c56 <printk>
    8ff8:	4846      	ldr	r0, [pc, #280]	; (9114 <z_timer_expiration_handler+0x14c>)
    8ffa:	2181      	movs	r1, #129	; 0x81
    8ffc:	f000 fd54 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9000:	4843      	ldr	r0, [pc, #268]	; (9110 <z_timer_expiration_handler+0x148>)
    9002:	f7ff fcb3 	bl	896c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9006:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    900a:	1c56      	adds	r6, r2, #1
    900c:	f143 0700 	adc.w	r7, r3, #0
    9010:	2f00      	cmp	r7, #0
    9012:	bf08      	it	eq
    9014:	2e02      	cmpeq	r6, #2
    9016:	d303      	bcc.n	9020 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9018:	4942      	ldr	r1, [pc, #264]	; (9124 <z_timer_expiration_handler+0x15c>)
    901a:	4620      	mov	r0, r4
    901c:	f7ff fcfe 	bl	8a1c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9020:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9022:	3301      	adds	r3, #1
    9024:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9026:	6a23      	ldr	r3, [r4, #32]
    9028:	2b00      	cmp	r3, #0
    902a:	d035      	beq.n	9098 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    902c:	4838      	ldr	r0, [pc, #224]	; (9110 <z_timer_expiration_handler+0x148>)
    902e:	f7ff fc8d 	bl	894c <z_spin_unlock_valid>
    9032:	b968      	cbnz	r0, 9050 <z_timer_expiration_handler+0x88>
    9034:	4a37      	ldr	r2, [pc, #220]	; (9114 <z_timer_expiration_handler+0x14c>)
    9036:	493c      	ldr	r1, [pc, #240]	; (9128 <z_timer_expiration_handler+0x160>)
    9038:	4838      	ldr	r0, [pc, #224]	; (911c <z_timer_expiration_handler+0x154>)
    903a:	23ac      	movs	r3, #172	; 0xac
    903c:	f000 fe0b 	bl	9c56 <printk>
    9040:	4933      	ldr	r1, [pc, #204]	; (9110 <z_timer_expiration_handler+0x148>)
    9042:	483a      	ldr	r0, [pc, #232]	; (912c <z_timer_expiration_handler+0x164>)
    9044:	f000 fe07 	bl	9c56 <printk>
    9048:	4832      	ldr	r0, [pc, #200]	; (9114 <z_timer_expiration_handler+0x14c>)
    904a:	21ac      	movs	r1, #172	; 0xac
    904c:	f000 fd2c 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    9050:	f385 8811 	msr	BASEPRI, r5
    9054:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9058:	6a23      	ldr	r3, [r4, #32]
    905a:	4620      	mov	r0, r4
    905c:	4798      	blx	r3
	__asm__ volatile(
    905e:	f04f 0320 	mov.w	r3, #32
    9062:	f3ef 8511 	mrs	r5, BASEPRI
    9066:	f383 8812 	msr	BASEPRI_MAX, r3
    906a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    906e:	4828      	ldr	r0, [pc, #160]	; (9110 <z_timer_expiration_handler+0x148>)
    9070:	f7ff fc5e 	bl	8930 <z_spin_lock_valid>
    9074:	b968      	cbnz	r0, 9092 <z_timer_expiration_handler+0xca>
    9076:	4a27      	ldr	r2, [pc, #156]	; (9114 <z_timer_expiration_handler+0x14c>)
    9078:	4927      	ldr	r1, [pc, #156]	; (9118 <z_timer_expiration_handler+0x150>)
    907a:	4828      	ldr	r0, [pc, #160]	; (911c <z_timer_expiration_handler+0x154>)
    907c:	2381      	movs	r3, #129	; 0x81
    907e:	f000 fdea 	bl	9c56 <printk>
    9082:	4923      	ldr	r1, [pc, #140]	; (9110 <z_timer_expiration_handler+0x148>)
    9084:	4826      	ldr	r0, [pc, #152]	; (9120 <z_timer_expiration_handler+0x158>)
    9086:	f000 fde6 	bl	9c56 <printk>
    908a:	4822      	ldr	r0, [pc, #136]	; (9114 <z_timer_expiration_handler+0x14c>)
    908c:	2181      	movs	r1, #129	; 0x81
    908e:	f000 fd0b 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9092:	481f      	ldr	r0, [pc, #124]	; (9110 <z_timer_expiration_handler+0x148>)
    9094:	f7ff fc6a 	bl	896c <z_spin_lock_set_owner>
	return list->head == list;
    9098:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    909c:	42a6      	cmp	r6, r4
    909e:	d000      	beq.n	90a2 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    90a0:	b9b6      	cbnz	r6, 90d0 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90a2:	481b      	ldr	r0, [pc, #108]	; (9110 <z_timer_expiration_handler+0x148>)
    90a4:	f7ff fc52 	bl	894c <z_spin_unlock_valid>
    90a8:	b968      	cbnz	r0, 90c6 <z_timer_expiration_handler+0xfe>
    90aa:	4a1a      	ldr	r2, [pc, #104]	; (9114 <z_timer_expiration_handler+0x14c>)
    90ac:	491e      	ldr	r1, [pc, #120]	; (9128 <z_timer_expiration_handler+0x160>)
    90ae:	481b      	ldr	r0, [pc, #108]	; (911c <z_timer_expiration_handler+0x154>)
    90b0:	23ac      	movs	r3, #172	; 0xac
    90b2:	f000 fdd0 	bl	9c56 <printk>
    90b6:	4916      	ldr	r1, [pc, #88]	; (9110 <z_timer_expiration_handler+0x148>)
    90b8:	481c      	ldr	r0, [pc, #112]	; (912c <z_timer_expiration_handler+0x164>)
    90ba:	f000 fdcc 	bl	9c56 <printk>
    90be:	4815      	ldr	r0, [pc, #84]	; (9114 <z_timer_expiration_handler+0x14c>)
    90c0:	21ac      	movs	r1, #172	; 0xac
    90c2:	f000 fcf1 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    90c6:	f385 8811 	msr	BASEPRI, r5
    90ca:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    90ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    90d0:	4630      	mov	r0, r6
    90d2:	f7fe f851 	bl	7178 <z_unpend_thread_no_timeout>
    90d6:	2300      	movs	r3, #0
    90d8:	480d      	ldr	r0, [pc, #52]	; (9110 <z_timer_expiration_handler+0x148>)
    90da:	67f3      	str	r3, [r6, #124]	; 0x7c
    90dc:	f7ff fc36 	bl	894c <z_spin_unlock_valid>
    90e0:	b968      	cbnz	r0, 90fe <z_timer_expiration_handler+0x136>
    90e2:	4a0c      	ldr	r2, [pc, #48]	; (9114 <z_timer_expiration_handler+0x14c>)
    90e4:	4910      	ldr	r1, [pc, #64]	; (9128 <z_timer_expiration_handler+0x160>)
    90e6:	480d      	ldr	r0, [pc, #52]	; (911c <z_timer_expiration_handler+0x154>)
    90e8:	23ac      	movs	r3, #172	; 0xac
    90ea:	f000 fdb4 	bl	9c56 <printk>
    90ee:	4908      	ldr	r1, [pc, #32]	; (9110 <z_timer_expiration_handler+0x148>)
    90f0:	480e      	ldr	r0, [pc, #56]	; (912c <z_timer_expiration_handler+0x164>)
    90f2:	f000 fdb0 	bl	9c56 <printk>
    90f6:	4807      	ldr	r0, [pc, #28]	; (9114 <z_timer_expiration_handler+0x14c>)
    90f8:	21ac      	movs	r1, #172	; 0xac
    90fa:	f000 fcd5 	bl	9aa8 <assert_post_action>
    90fe:	f385 8811 	msr	BASEPRI, r5
    9102:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    9106:	4630      	mov	r0, r6
}
    9108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    910c:	f7fe bb1c 	b.w	7748 <z_ready_thread>
    9110:	20000fe4 	.word	0x20000fe4
    9114:	0000b39a 	.word	0x0000b39a
    9118:	0000b3ec 	.word	0x0000b3ec
    911c:	0000ac83 	.word	0x0000ac83
    9120:	0000b401 	.word	0x0000b401
    9124:	00008fc9 	.word	0x00008fc9
    9128:	0000b3c0 	.word	0x0000b3c0
    912c:	0000b3d7 	.word	0x0000b3d7

00009130 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    9130:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    9134:	4619      	mov	r1, r3
    9136:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9138:	1c4c      	adds	r4, r1, #1
{
    913a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    913c:	bf08      	it	eq
    913e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    9142:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    9146:	4680      	mov	r8, r0
    9148:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    914a:	d04c      	beq.n	91e6 <z_impl_k_timer_start+0xb6>
    914c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    914e:	1c6b      	adds	r3, r5, #1
    9150:	bf08      	it	eq
    9152:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    9156:	4614      	mov	r4, r2
    9158:	d019      	beq.n	918e <z_impl_k_timer_start+0x5e>
    915a:	ea54 0305 	orrs.w	r3, r4, r5
    915e:	d016      	beq.n	918e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    9160:	f06f 0301 	mvn.w	r3, #1
    9164:	ebb3 0a02 	subs.w	sl, r3, r2
    9168:	f04f 33ff 	mov.w	r3, #4294967295
    916c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9170:	f1ba 0f00 	cmp.w	sl, #0
    9174:	f17b 0300 	sbcs.w	r3, fp, #0
    9178:	da09      	bge.n	918e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    917a:	f112 34ff 	adds.w	r4, r2, #4294967295
    917e:	f145 35ff 	adc.w	r5, r5, #4294967295
    9182:	2c01      	cmp	r4, #1
    9184:	f175 0300 	sbcs.w	r3, r5, #0
    9188:	bfbc      	itt	lt
    918a:	2401      	movlt	r4, #1
    918c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    918e:	f06f 0301 	mvn.w	r3, #1
    9192:	1a1b      	subs	r3, r3, r0
    9194:	9300      	str	r3, [sp, #0]
    9196:	f04f 33ff 	mov.w	r3, #4294967295
    919a:	eb63 0301 	sbc.w	r3, r3, r1
    919e:	9301      	str	r3, [sp, #4]
    91a0:	e9dd 2300 	ldrd	r2, r3, [sp]
    91a4:	2a00      	cmp	r2, #0
    91a6:	f173 0300 	sbcs.w	r3, r3, #0
    91aa:	da0c      	bge.n	91c6 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    91ac:	f110 38ff 	adds.w	r8, r0, #4294967295
    91b0:	f141 39ff 	adc.w	r9, r1, #4294967295
    91b4:	f1b8 0f00 	cmp.w	r8, #0
    91b8:	f179 0300 	sbcs.w	r3, r9, #0
    91bc:	bfbc      	itt	lt
    91be:	f04f 0800 	movlt.w	r8, #0
    91c2:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    91c6:	4630      	mov	r0, r6
    91c8:	f7ff fcfc 	bl	8bc4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    91cc:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    91ce:	4907      	ldr	r1, [pc, #28]	; (91ec <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    91d0:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    91d2:	4642      	mov	r2, r8
    91d4:	464b      	mov	r3, r9
    91d6:	4630      	mov	r0, r6
	timer->period = period;
    91d8:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    91dc:	b002      	add	sp, #8
    91de:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    91e2:	f7ff bc1b 	b.w	8a1c <z_add_timeout>
}
    91e6:	b002      	add	sp, #8
    91e8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    91ec:	00008fc9 	.word	0x00008fc9

000091f0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    91f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    91f4:	4e7e      	ldr	r6, [pc, #504]	; (93f0 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    91f6:	4f7f      	ldr	r7, [pc, #508]	; (93f4 <work_queue_main+0x204>)
{
    91f8:	b085      	sub	sp, #20
    91fa:	4604      	mov	r4, r0
	__asm__ volatile(
    91fc:	f04f 0320 	mov.w	r3, #32
    9200:	f3ef 8811 	mrs	r8, BASEPRI
    9204:	f383 8812 	msr	BASEPRI_MAX, r3
    9208:	f3bf 8f6f 	isb	sy
    920c:	4630      	mov	r0, r6
    920e:	f7ff fb8f 	bl	8930 <z_spin_lock_valid>
    9212:	b968      	cbnz	r0, 9230 <work_queue_main+0x40>
    9214:	4a78      	ldr	r2, [pc, #480]	; (93f8 <work_queue_main+0x208>)
    9216:	4979      	ldr	r1, [pc, #484]	; (93fc <work_queue_main+0x20c>)
    9218:	4879      	ldr	r0, [pc, #484]	; (9400 <work_queue_main+0x210>)
    921a:	2381      	movs	r3, #129	; 0x81
    921c:	f000 fd1b 	bl	9c56 <printk>
    9220:	4878      	ldr	r0, [pc, #480]	; (9404 <work_queue_main+0x214>)
    9222:	4631      	mov	r1, r6
    9224:	f000 fd17 	bl	9c56 <printk>
    9228:	4873      	ldr	r0, [pc, #460]	; (93f8 <work_queue_main+0x208>)
    922a:	2181      	movs	r1, #129	; 0x81
    922c:	f000 fc3c 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9230:	4630      	mov	r0, r6
    9232:	f7ff fb9b 	bl	896c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    9236:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    923a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    923e:	b9ad      	cbnz	r5, 926c <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    9240:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    9244:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    9246:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    924a:	f100 8092 	bmi.w	9372 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    924e:	2300      	movs	r3, #0
    9250:	9302      	str	r3, [sp, #8]
    9252:	f04f 32ff 	mov.w	r2, #4294967295
    9256:	f04f 33ff 	mov.w	r3, #4294967295
    925a:	e9cd 2300 	strd	r2, r3, [sp]
    925e:	4641      	mov	r1, r8
    9260:	f104 0288 	add.w	r2, r4, #136	; 0x88
    9264:	4630      	mov	r0, r6
    9266:	f7ff f927 	bl	84b8 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    926a:	e7c7      	b.n	91fc <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    926c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    9270:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    9272:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9276:	428d      	cmp	r5, r1
    9278:	d101      	bne.n	927e <work_queue_main+0x8e>
	list->tail = node;
    927a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    927e:	f043 0302 	orr.w	r3, r3, #2
    9282:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    9286:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    9288:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    928c:	f023 0304 	bic.w	r3, r3, #4
    9290:	f043 0301 	orr.w	r3, r3, #1
    9294:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9296:	4630      	mov	r0, r6
    9298:	f7ff fb58 	bl	894c <z_spin_unlock_valid>
    929c:	b968      	cbnz	r0, 92ba <work_queue_main+0xca>
    929e:	4a56      	ldr	r2, [pc, #344]	; (93f8 <work_queue_main+0x208>)
    92a0:	4959      	ldr	r1, [pc, #356]	; (9408 <work_queue_main+0x218>)
    92a2:	4857      	ldr	r0, [pc, #348]	; (9400 <work_queue_main+0x210>)
    92a4:	23ac      	movs	r3, #172	; 0xac
    92a6:	f000 fcd6 	bl	9c56 <printk>
    92aa:	4858      	ldr	r0, [pc, #352]	; (940c <work_queue_main+0x21c>)
    92ac:	4631      	mov	r1, r6
    92ae:	f000 fcd2 	bl	9c56 <printk>
    92b2:	4851      	ldr	r0, [pc, #324]	; (93f8 <work_queue_main+0x208>)
    92b4:	21ac      	movs	r1, #172	; 0xac
    92b6:	f000 fbf7 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    92ba:	f388 8811 	msr	BASEPRI, r8
    92be:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    92c2:	f1b9 0f00 	cmp.w	r9, #0
    92c6:	d10b      	bne.n	92e0 <work_queue_main+0xf0>
    92c8:	4951      	ldr	r1, [pc, #324]	; (9410 <work_queue_main+0x220>)
    92ca:	484d      	ldr	r0, [pc, #308]	; (9400 <work_queue_main+0x210>)
    92cc:	4a51      	ldr	r2, [pc, #324]	; (9414 <work_queue_main+0x224>)
    92ce:	f44f 7322 	mov.w	r3, #648	; 0x288
    92d2:	f000 fcc0 	bl	9c56 <printk>
    92d6:	484f      	ldr	r0, [pc, #316]	; (9414 <work_queue_main+0x224>)
    92d8:	f44f 7122 	mov.w	r1, #648	; 0x288
    92dc:	f000 fbe4 	bl	9aa8 <assert_post_action>
		handler(work);
    92e0:	4628      	mov	r0, r5
    92e2:	47c8      	blx	r9
	__asm__ volatile(
    92e4:	f04f 0320 	mov.w	r3, #32
    92e8:	f3ef 8a11 	mrs	sl, BASEPRI
    92ec:	f383 8812 	msr	BASEPRI_MAX, r3
    92f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92f4:	4630      	mov	r0, r6
    92f6:	f7ff fb1b 	bl	8930 <z_spin_lock_valid>
    92fa:	b968      	cbnz	r0, 9318 <work_queue_main+0x128>
    92fc:	4a3e      	ldr	r2, [pc, #248]	; (93f8 <work_queue_main+0x208>)
    92fe:	493f      	ldr	r1, [pc, #252]	; (93fc <work_queue_main+0x20c>)
    9300:	483f      	ldr	r0, [pc, #252]	; (9400 <work_queue_main+0x210>)
    9302:	2381      	movs	r3, #129	; 0x81
    9304:	f000 fca7 	bl	9c56 <printk>
    9308:	483e      	ldr	r0, [pc, #248]	; (9404 <work_queue_main+0x214>)
    930a:	4631      	mov	r1, r6
    930c:	f000 fca3 	bl	9c56 <printk>
    9310:	4839      	ldr	r0, [pc, #228]	; (93f8 <work_queue_main+0x208>)
    9312:	2181      	movs	r1, #129	; 0x81
    9314:	f000 fbc8 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9318:	4630      	mov	r0, r6
    931a:	f7ff fb27 	bl	896c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    931e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9320:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    9322:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9326:	d42e      	bmi.n	9386 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    9328:	60ea      	str	r2, [r5, #12]
    932a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    932e:	f023 0302 	bic.w	r3, r3, #2
    9332:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9336:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    9338:	f3c3 2500 	ubfx	r5, r3, #8, #1
    933c:	f7ff fb06 	bl	894c <z_spin_unlock_valid>
    9340:	b968      	cbnz	r0, 935e <work_queue_main+0x16e>
    9342:	4a2d      	ldr	r2, [pc, #180]	; (93f8 <work_queue_main+0x208>)
    9344:	4930      	ldr	r1, [pc, #192]	; (9408 <work_queue_main+0x218>)
    9346:	482e      	ldr	r0, [pc, #184]	; (9400 <work_queue_main+0x210>)
    9348:	23ac      	movs	r3, #172	; 0xac
    934a:	f000 fc84 	bl	9c56 <printk>
    934e:	482f      	ldr	r0, [pc, #188]	; (940c <work_queue_main+0x21c>)
    9350:	4631      	mov	r1, r6
    9352:	f000 fc80 	bl	9c56 <printk>
    9356:	4828      	ldr	r0, [pc, #160]	; (93f8 <work_queue_main+0x208>)
    9358:	21ac      	movs	r1, #172	; 0xac
    935a:	f000 fba5 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    935e:	f38a 8811 	msr	BASEPRI, sl
    9362:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    9366:	2d00      	cmp	r5, #0
    9368:	f47f af48 	bne.w	91fc <work_queue_main+0xc>
	z_impl_k_yield();
    936c:	f7fe fdf8 	bl	7f60 <z_impl_k_yield>
}
    9370:	e744      	b.n	91fc <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    9372:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    9376:	2200      	movs	r2, #0
    9378:	2101      	movs	r1, #1
    937a:	4628      	mov	r0, r5
    937c:	f7ff f844 	bl	8408 <z_sched_wake>
    9380:	2800      	cmp	r0, #0
    9382:	d1f8      	bne.n	9376 <work_queue_main+0x186>
    9384:	e763      	b.n	924e <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9386:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    9388:	f023 0303 	bic.w	r3, r3, #3
    938c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    938e:	2800      	cmp	r0, #0
    9390:	d0cb      	beq.n	932a <work_queue_main+0x13a>
	return node->next;
    9392:	6803      	ldr	r3, [r0, #0]
    9394:	2b00      	cmp	r3, #0
    9396:	bf38      	it	cc
    9398:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    939a:	f04f 0900 	mov.w	r9, #0
    939e:	4698      	mov	r8, r3
	parent->next = child;
    93a0:	46cb      	mov	fp, r9
		if (wc->work == work) {
    93a2:	6843      	ldr	r3, [r0, #4]
    93a4:	429d      	cmp	r5, r3
    93a6:	4602      	mov	r2, r0
    93a8:	d10d      	bne.n	93c6 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    93aa:	6802      	ldr	r2, [r0, #0]
    93ac:	f1b9 0f00 	cmp.w	r9, #0
    93b0:	d115      	bne.n	93de <work_queue_main+0x1ee>
    93b2:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    93b4:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    93b6:	4283      	cmp	r3, r0
    93b8:	d100      	bne.n	93bc <work_queue_main+0x1cc>
	list->tail = node;
    93ba:	607a      	str	r2, [r7, #4]
	parent->next = child;
    93bc:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    93c0:	f7ff f88c 	bl	84dc <z_impl_k_sem_give>
}
    93c4:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    93c6:	f1b8 0f00 	cmp.w	r8, #0
    93ca:	d0ae      	beq.n	932a <work_queue_main+0x13a>
	return node->next;
    93cc:	f8d8 3000 	ldr.w	r3, [r8]
    93d0:	2b00      	cmp	r3, #0
    93d2:	bf38      	it	cc
    93d4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    93d6:	4640      	mov	r0, r8
    93d8:	4691      	mov	r9, r2
    93da:	4698      	mov	r8, r3
    93dc:	e7e1      	b.n	93a2 <work_queue_main+0x1b2>
	parent->next = child;
    93de:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    93e2:	687b      	ldr	r3, [r7, #4]
    93e4:	4283      	cmp	r3, r0
	list->tail = node;
    93e6:	bf08      	it	eq
    93e8:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    93ec:	e7e6      	b.n	93bc <work_queue_main+0x1cc>
    93ee:	bf00      	nop
    93f0:	20000fe8 	.word	0x20000fe8
    93f4:	20000fec 	.word	0x20000fec
    93f8:	0000b39a 	.word	0x0000b39a
    93fc:	0000b3ec 	.word	0x0000b3ec
    9400:	0000ac83 	.word	0x0000ac83
    9404:	0000b401 	.word	0x0000b401
    9408:	0000b3c0 	.word	0x0000b3c0
    940c:	0000b3d7 	.word	0x0000b3d7
    9410:	0000c26b 	.word	0x0000c26b
    9414:	0000c24a 	.word	0x0000c24a

00009418 <submit_to_queue_locked>:
{
    9418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    941a:	68c3      	ldr	r3, [r0, #12]
    941c:	079a      	lsls	r2, r3, #30
{
    941e:	4604      	mov	r4, r0
    9420:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9422:	f3c3 0540 	ubfx	r5, r3, #1, #1
    9426:	d42b      	bmi.n	9480 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    9428:	075f      	lsls	r7, r3, #29
    942a:	d42b      	bmi.n	9484 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    942c:	680a      	ldr	r2, [r1, #0]
    942e:	b90a      	cbnz	r2, 9434 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9430:	6882      	ldr	r2, [r0, #8]
    9432:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    9434:	07d8      	lsls	r0, r3, #31
    9436:	d528      	bpl.n	948a <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    9438:	68a3      	ldr	r3, [r4, #8]
    943a:	b95b      	cbnz	r3, 9454 <submit_to_queue_locked+0x3c>
    943c:	4924      	ldr	r1, [pc, #144]	; (94d0 <submit_to_queue_locked+0xb8>)
    943e:	4825      	ldr	r0, [pc, #148]	; (94d4 <submit_to_queue_locked+0xbc>)
    9440:	4a25      	ldr	r2, [pc, #148]	; (94d8 <submit_to_queue_locked+0xc0>)
    9442:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    9446:	f000 fc06 	bl	9c56 <printk>
    944a:	4823      	ldr	r0, [pc, #140]	; (94d8 <submit_to_queue_locked+0xc0>)
    944c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    9450:	f000 fb2a 	bl	9aa8 <assert_post_action>
			*queuep = work->queue;
    9454:	68a3      	ldr	r3, [r4, #8]
    9456:	6033      	str	r3, [r6, #0]
			ret = 2;
    9458:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    945a:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    945c:	b38f      	cbz	r7, 94c2 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    945e:	4b1f      	ldr	r3, [pc, #124]	; (94dc <submit_to_queue_locked+0xc4>)
    9460:	689b      	ldr	r3, [r3, #8]
    9462:	42bb      	cmp	r3, r7
    9464:	d113      	bne.n	948e <submit_to_queue_locked+0x76>
    9466:	f001 f905 	bl	a674 <k_is_in_isr>
    946a:	f080 0001 	eor.w	r0, r0, #1
    946e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    9470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9474:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9476:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    947a:	d525      	bpl.n	94c8 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    947c:	b14a      	cbz	r2, 9492 <submit_to_queue_locked+0x7a>
    947e:	b950      	cbnz	r0, 9496 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    9480:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    9484:	2300      	movs	r3, #0
    9486:	6033      	str	r3, [r6, #0]
	return ret;
    9488:	e015      	b.n	94b6 <submit_to_queue_locked+0x9e>
		ret = 1;
    948a:	2501      	movs	r5, #1
    948c:	e7e5      	b.n	945a <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    948e:	2000      	movs	r0, #0
    9490:	e7ee      	b.n	9470 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    9492:	071b      	lsls	r3, r3, #28
    9494:	d4f4      	bmi.n	9480 <submit_to_queue_locked+0x68>
	parent->next = child;
    9496:	2300      	movs	r3, #0
    9498:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    949a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    949e:	b963      	cbnz	r3, 94ba <submit_to_queue_locked+0xa2>
	list->head = node;
    94a0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    94a4:	4638      	mov	r0, r7
    94a6:	f001 f923 	bl	a6f0 <notify_queue_locked>
	*flagp |= BIT(bit);
    94aa:	68e3      	ldr	r3, [r4, #12]
    94ac:	f043 0304 	orr.w	r3, r3, #4
    94b0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    94b2:	6833      	ldr	r3, [r6, #0]
    94b4:	60a3      	str	r3, [r4, #8]
}
    94b6:	4628      	mov	r0, r5
    94b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    94ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
    94bc:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    94c0:	e7f0      	b.n	94a4 <submit_to_queue_locked+0x8c>
		return -EINVAL;
    94c2:	f06f 0515 	mvn.w	r5, #21
    94c6:	e7dd      	b.n	9484 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    94c8:	f06f 0512 	mvn.w	r5, #18
    94cc:	e7da      	b.n	9484 <submit_to_queue_locked+0x6c>
    94ce:	bf00      	nop
    94d0:	0000c282 	.word	0x0000c282
    94d4:	0000ac83 	.word	0x0000ac83
    94d8:	0000c24a 	.word	0x0000c24a
    94dc:	20000f98 	.word	0x20000f98

000094e0 <k_work_submit_to_queue>:
{
    94e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    94e2:	460c      	mov	r4, r1
{
    94e4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    94e6:	b959      	cbnz	r1, 9500 <k_work_submit_to_queue+0x20>
    94e8:	4926      	ldr	r1, [pc, #152]	; (9584 <k_work_submit_to_queue+0xa4>)
    94ea:	4827      	ldr	r0, [pc, #156]	; (9588 <k_work_submit_to_queue+0xa8>)
    94ec:	4a27      	ldr	r2, [pc, #156]	; (958c <k_work_submit_to_queue+0xac>)
    94ee:	f240 1369 	movw	r3, #361	; 0x169
    94f2:	f000 fbb0 	bl	9c56 <printk>
    94f6:	4825      	ldr	r0, [pc, #148]	; (958c <k_work_submit_to_queue+0xac>)
    94f8:	f240 1169 	movw	r1, #361	; 0x169
    94fc:	f000 fad4 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    9500:	f04f 0320 	mov.w	r3, #32
    9504:	f3ef 8511 	mrs	r5, BASEPRI
    9508:	f383 8812 	msr	BASEPRI_MAX, r3
    950c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9510:	481f      	ldr	r0, [pc, #124]	; (9590 <k_work_submit_to_queue+0xb0>)
    9512:	f7ff fa0d 	bl	8930 <z_spin_lock_valid>
    9516:	b968      	cbnz	r0, 9534 <k_work_submit_to_queue+0x54>
    9518:	4a1e      	ldr	r2, [pc, #120]	; (9594 <k_work_submit_to_queue+0xb4>)
    951a:	491f      	ldr	r1, [pc, #124]	; (9598 <k_work_submit_to_queue+0xb8>)
    951c:	481a      	ldr	r0, [pc, #104]	; (9588 <k_work_submit_to_queue+0xa8>)
    951e:	2381      	movs	r3, #129	; 0x81
    9520:	f000 fb99 	bl	9c56 <printk>
    9524:	491a      	ldr	r1, [pc, #104]	; (9590 <k_work_submit_to_queue+0xb0>)
    9526:	481d      	ldr	r0, [pc, #116]	; (959c <k_work_submit_to_queue+0xbc>)
    9528:	f000 fb95 	bl	9c56 <printk>
    952c:	4819      	ldr	r0, [pc, #100]	; (9594 <k_work_submit_to_queue+0xb4>)
    952e:	2181      	movs	r1, #129	; 0x81
    9530:	f000 faba 	bl	9aa8 <assert_post_action>
	z_spin_lock_set_owner(l);
    9534:	4816      	ldr	r0, [pc, #88]	; (9590 <k_work_submit_to_queue+0xb0>)
    9536:	f7ff fa19 	bl	896c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    953a:	4620      	mov	r0, r4
    953c:	a901      	add	r1, sp, #4
    953e:	f7ff ff6b 	bl	9418 <submit_to_queue_locked>
    9542:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9544:	4812      	ldr	r0, [pc, #72]	; (9590 <k_work_submit_to_queue+0xb0>)
    9546:	f7ff fa01 	bl	894c <z_spin_unlock_valid>
    954a:	b968      	cbnz	r0, 9568 <k_work_submit_to_queue+0x88>
    954c:	4a11      	ldr	r2, [pc, #68]	; (9594 <k_work_submit_to_queue+0xb4>)
    954e:	4914      	ldr	r1, [pc, #80]	; (95a0 <k_work_submit_to_queue+0xc0>)
    9550:	480d      	ldr	r0, [pc, #52]	; (9588 <k_work_submit_to_queue+0xa8>)
    9552:	23ac      	movs	r3, #172	; 0xac
    9554:	f000 fb7f 	bl	9c56 <printk>
    9558:	490d      	ldr	r1, [pc, #52]	; (9590 <k_work_submit_to_queue+0xb0>)
    955a:	4812      	ldr	r0, [pc, #72]	; (95a4 <k_work_submit_to_queue+0xc4>)
    955c:	f000 fb7b 	bl	9c56 <printk>
    9560:	480c      	ldr	r0, [pc, #48]	; (9594 <k_work_submit_to_queue+0xb4>)
    9562:	21ac      	movs	r1, #172	; 0xac
    9564:	f000 faa0 	bl	9aa8 <assert_post_action>
	__asm__ volatile(
    9568:	f385 8811 	msr	BASEPRI, r5
    956c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    9570:	2c00      	cmp	r4, #0
    9572:	dd04      	ble.n	957e <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    9574:	f7fe fe84 	bl	8280 <z_impl_k_is_preempt_thread>
    9578:	b108      	cbz	r0, 957e <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    957a:	f7fe fcf1 	bl	7f60 <z_impl_k_yield>
}
    957e:	4620      	mov	r0, r4
    9580:	b003      	add	sp, #12
    9582:	bd30      	pop	{r4, r5, pc}
    9584:	0000c29d 	.word	0x0000c29d
    9588:	0000ac83 	.word	0x0000ac83
    958c:	0000c24a 	.word	0x0000c24a
    9590:	20000fe8 	.word	0x20000fe8
    9594:	0000b39a 	.word	0x0000b39a
    9598:	0000b3ec 	.word	0x0000b3ec
    959c:	0000b401 	.word	0x0000b401
    95a0:	0000b3c0 	.word	0x0000b3c0
    95a4:	0000b3d7 	.word	0x0000b3d7

000095a8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    95a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95ac:	b088      	sub	sp, #32
    95ae:	460e      	mov	r6, r1
    95b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    95b2:	4617      	mov	r7, r2
    95b4:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    95b6:	4604      	mov	r4, r0
    95b8:	b958      	cbnz	r0, 95d2 <k_work_queue_start+0x2a>
    95ba:	492e      	ldr	r1, [pc, #184]	; (9674 <k_work_queue_start+0xcc>)
    95bc:	482e      	ldr	r0, [pc, #184]	; (9678 <k_work_queue_start+0xd0>)
    95be:	4a2f      	ldr	r2, [pc, #188]	; (967c <k_work_queue_start+0xd4>)
    95c0:	f240 23b5 	movw	r3, #693	; 0x2b5
    95c4:	f000 fb47 	bl	9c56 <printk>
    95c8:	482c      	ldr	r0, [pc, #176]	; (967c <k_work_queue_start+0xd4>)
    95ca:	f240 21b5 	movw	r1, #693	; 0x2b5
    95ce:	f000 fa6b 	bl	9aa8 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    95d2:	b95e      	cbnz	r6, 95ec <k_work_queue_start+0x44>
    95d4:	492a      	ldr	r1, [pc, #168]	; (9680 <k_work_queue_start+0xd8>)
    95d6:	4828      	ldr	r0, [pc, #160]	; (9678 <k_work_queue_start+0xd0>)
    95d8:	4a28      	ldr	r2, [pc, #160]	; (967c <k_work_queue_start+0xd4>)
    95da:	f240 23b6 	movw	r3, #694	; 0x2b6
    95de:	f000 fb3a 	bl	9c56 <printk>
    95e2:	4826      	ldr	r0, [pc, #152]	; (967c <k_work_queue_start+0xd4>)
    95e4:	f240 21b6 	movw	r1, #694	; 0x2b6
    95e8:	f000 fa5e 	bl	9aa8 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    95ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    95f0:	07db      	lsls	r3, r3, #31
    95f2:	d50b      	bpl.n	960c <k_work_queue_start+0x64>
    95f4:	4923      	ldr	r1, [pc, #140]	; (9684 <k_work_queue_start+0xdc>)
    95f6:	4820      	ldr	r0, [pc, #128]	; (9678 <k_work_queue_start+0xd0>)
    95f8:	4a20      	ldr	r2, [pc, #128]	; (967c <k_work_queue_start+0xd4>)
    95fa:	f240 23b7 	movw	r3, #695	; 0x2b7
    95fe:	f000 fb2a 	bl	9c56 <printk>
    9602:	481e      	ldr	r0, [pc, #120]	; (967c <k_work_queue_start+0xd4>)
    9604:	f240 21b7 	movw	r1, #695	; 0x2b7
    9608:	f000 fa4e 	bl	9aa8 <assert_post_action>
	list->head = NULL;
    960c:	2300      	movs	r3, #0
	list->tail = NULL;
    960e:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    9612:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    9616:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    961a:	f104 0390 	add.w	r3, r4, #144	; 0x90
    961e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    9622:	b32d      	cbz	r5, 9670 <k_work_queue_start+0xc8>
    9624:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    9626:	2b00      	cmp	r3, #0
    9628:	f240 1101 	movw	r1, #257	; 0x101
    962c:	bf08      	it	eq
    962e:	2101      	moveq	r1, #1
	*flagp = flags;
    9630:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9634:	f04f 32ff 	mov.w	r2, #4294967295
    9638:	f04f 33ff 	mov.w	r3, #4294967295
    963c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9640:	2200      	movs	r2, #0
    9642:	e9cd 8203 	strd	r8, r2, [sp, #12]
    9646:	e9cd 2201 	strd	r2, r2, [sp, #4]
    964a:	4b0f      	ldr	r3, [pc, #60]	; (9688 <k_work_queue_start+0xe0>)
    964c:	9400      	str	r4, [sp, #0]
    964e:	463a      	mov	r2, r7
    9650:	4631      	mov	r1, r6
    9652:	4620      	mov	r0, r4
    9654:	f7ff f88e 	bl	8774 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9658:	b125      	cbz	r5, 9664 <k_work_queue_start+0xbc>
    965a:	6829      	ldr	r1, [r5, #0]
    965c:	b111      	cbz	r1, 9664 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    965e:	4620      	mov	r0, r4
    9660:	f001 f80e 	bl	a680 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9664:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9666:	b008      	add	sp, #32
    9668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    966c:	f001 b80b 	b.w	a686 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9670:	2101      	movs	r1, #1
    9672:	e7dd      	b.n	9630 <k_work_queue_start+0x88>
    9674:	0000c2b1 	.word	0x0000c2b1
    9678:	0000ac83 	.word	0x0000ac83
    967c:	0000c24a 	.word	0x0000c24a
    9680:	0000c2b7 	.word	0x0000c2b7
    9684:	0000c2bd 	.word	0x0000c2bd
    9688:	000091f1 	.word	0x000091f1

0000968c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    968c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    968e:	4806      	ldr	r0, [pc, #24]	; (96a8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    9690:	4a06      	ldr	r2, [pc, #24]	; (96ac <z_data_copy+0x20>)
    9692:	4907      	ldr	r1, [pc, #28]	; (96b0 <z_data_copy+0x24>)
    9694:	1a12      	subs	r2, r2, r0
    9696:	f000 fb39 	bl	9d0c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    969a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    969e:	4a05      	ldr	r2, [pc, #20]	; (96b4 <z_data_copy+0x28>)
    96a0:	4905      	ldr	r1, [pc, #20]	; (96b8 <z_data_copy+0x2c>)
    96a2:	4806      	ldr	r0, [pc, #24]	; (96bc <z_data_copy+0x30>)
    96a4:	f000 bb32 	b.w	9d0c <memcpy>
    96a8:	20000000 	.word	0x20000000
    96ac:	200002b4 	.word	0x200002b4
    96b0:	0000c328 	.word	0x0000c328
    96b4:	00000000 	.word	0x00000000
    96b8:	0000c328 	.word	0x0000c328
    96bc:	20000000 	.word	0x20000000

000096c0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    96c0:	4a02      	ldr	r2, [pc, #8]	; (96cc <boot_banner+0xc>)
    96c2:	4903      	ldr	r1, [pc, #12]	; (96d0 <boot_banner+0x10>)
    96c4:	4803      	ldr	r0, [pc, #12]	; (96d4 <boot_banner+0x14>)
    96c6:	f000 bac6 	b.w	9c56 <printk>
    96ca:	bf00      	nop
    96cc:	0000bdf4 	.word	0x0000bdf4
    96d0:	0000c2f1 	.word	0x0000c2f1
    96d4:	0000c300 	.word	0x0000c300

000096d8 <nrf_cc3xx_platform_init_no_rng>:
    96d8:	b510      	push	{r4, lr}
    96da:	4c0a      	ldr	r4, [pc, #40]	; (9704 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    96dc:	6823      	ldr	r3, [r4, #0]
    96de:	b11b      	cbz	r3, 96e8 <nrf_cc3xx_platform_init_no_rng+0x10>
    96e0:	2301      	movs	r3, #1
    96e2:	6023      	str	r3, [r4, #0]
    96e4:	2000      	movs	r0, #0
    96e6:	bd10      	pop	{r4, pc}
    96e8:	f000 f8d6 	bl	9898 <CC_LibInitNoRng>
    96ec:	2800      	cmp	r0, #0
    96ee:	d0f7      	beq.n	96e0 <nrf_cc3xx_platform_init_no_rng+0x8>
    96f0:	3801      	subs	r0, #1
    96f2:	2806      	cmp	r0, #6
    96f4:	d803      	bhi.n	96fe <nrf_cc3xx_platform_init_no_rng+0x26>
    96f6:	4b04      	ldr	r3, [pc, #16]	; (9708 <nrf_cc3xx_platform_init_no_rng+0x30>)
    96f8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    96fc:	bd10      	pop	{r4, pc}
    96fe:	4803      	ldr	r0, [pc, #12]	; (970c <nrf_cc3xx_platform_init_no_rng+0x34>)
    9700:	bd10      	pop	{r4, pc}
    9702:	bf00      	nop
    9704:	20000ff4 	.word	0x20000ff4
    9708:	0000ab84 	.word	0x0000ab84
    970c:	ffff8ffe 	.word	0xffff8ffe

00009710 <nrf_cc3xx_platform_abort>:
    9710:	f3bf 8f4f 	dsb	sy
    9714:	4905      	ldr	r1, [pc, #20]	; (972c <nrf_cc3xx_platform_abort+0x1c>)
    9716:	4b06      	ldr	r3, [pc, #24]	; (9730 <nrf_cc3xx_platform_abort+0x20>)
    9718:	68ca      	ldr	r2, [r1, #12]
    971a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    971e:	4313      	orrs	r3, r2
    9720:	60cb      	str	r3, [r1, #12]
    9722:	f3bf 8f4f 	dsb	sy
    9726:	bf00      	nop
    9728:	e7fd      	b.n	9726 <nrf_cc3xx_platform_abort+0x16>
    972a:	bf00      	nop
    972c:	e000ed00 	.word	0xe000ed00
    9730:	05fa0004 	.word	0x05fa0004

00009734 <CC_PalAbort>:
    9734:	b4f0      	push	{r4, r5, r6, r7}
    9736:	4f09      	ldr	r7, [pc, #36]	; (975c <CC_PalAbort+0x28>)
    9738:	4e09      	ldr	r6, [pc, #36]	; (9760 <CC_PalAbort+0x2c>)
    973a:	4c0a      	ldr	r4, [pc, #40]	; (9764 <CC_PalAbort+0x30>)
    973c:	4a0a      	ldr	r2, [pc, #40]	; (9768 <CC_PalAbort+0x34>)
    973e:	4d0b      	ldr	r5, [pc, #44]	; (976c <CC_PalAbort+0x38>)
    9740:	490b      	ldr	r1, [pc, #44]	; (9770 <CC_PalAbort+0x3c>)
    9742:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    9746:	603b      	str	r3, [r7, #0]
    9748:	6852      	ldr	r2, [r2, #4]
    974a:	6033      	str	r3, [r6, #0]
    974c:	6023      	str	r3, [r4, #0]
    974e:	2400      	movs	r4, #0
    9750:	602b      	str	r3, [r5, #0]
    9752:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    9756:	bcf0      	pop	{r4, r5, r6, r7}
    9758:	4710      	bx	r2
    975a:	bf00      	nop
    975c:	5002b400 	.word	0x5002b400
    9760:	5002b404 	.word	0x5002b404
    9764:	5002b408 	.word	0x5002b408
    9768:	20000198 	.word	0x20000198
    976c:	5002b40c 	.word	0x5002b40c
    9770:	5002a000 	.word	0x5002a000

00009774 <nrf_cc3xx_platform_set_abort>:
    9774:	e9d0 1200 	ldrd	r1, r2, [r0]
    9778:	4b01      	ldr	r3, [pc, #4]	; (9780 <nrf_cc3xx_platform_set_abort+0xc>)
    977a:	e9c3 1200 	strd	r1, r2, [r3]
    977e:	4770      	bx	lr
    9780:	20000198 	.word	0x20000198

00009784 <mutex_free>:
    9784:	b510      	push	{r4, lr}
    9786:	4604      	mov	r4, r0
    9788:	b130      	cbz	r0, 9798 <mutex_free+0x14>
    978a:	6863      	ldr	r3, [r4, #4]
    978c:	06db      	lsls	r3, r3, #27
    978e:	d502      	bpl.n	9796 <mutex_free+0x12>
    9790:	2300      	movs	r3, #0
    9792:	6023      	str	r3, [r4, #0]
    9794:	6063      	str	r3, [r4, #4]
    9796:	bd10      	pop	{r4, pc}
    9798:	4b02      	ldr	r3, [pc, #8]	; (97a4 <mutex_free+0x20>)
    979a:	4803      	ldr	r0, [pc, #12]	; (97a8 <mutex_free+0x24>)
    979c:	685b      	ldr	r3, [r3, #4]
    979e:	4798      	blx	r3
    97a0:	e7f3      	b.n	978a <mutex_free+0x6>
    97a2:	bf00      	nop
    97a4:	20000198 	.word	0x20000198
    97a8:	0000aba0 	.word	0x0000aba0

000097ac <mutex_unlock>:
    97ac:	b168      	cbz	r0, 97ca <mutex_unlock+0x1e>
    97ae:	6843      	ldr	r3, [r0, #4]
    97b0:	b13b      	cbz	r3, 97c2 <mutex_unlock+0x16>
    97b2:	06db      	lsls	r3, r3, #27
    97b4:	d507      	bpl.n	97c6 <mutex_unlock+0x1a>
    97b6:	f3bf 8f5f 	dmb	sy
    97ba:	2300      	movs	r3, #0
    97bc:	6003      	str	r3, [r0, #0]
    97be:	4618      	mov	r0, r3
    97c0:	4770      	bx	lr
    97c2:	4803      	ldr	r0, [pc, #12]	; (97d0 <mutex_unlock+0x24>)
    97c4:	4770      	bx	lr
    97c6:	4803      	ldr	r0, [pc, #12]	; (97d4 <mutex_unlock+0x28>)
    97c8:	4770      	bx	lr
    97ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    97ce:	4770      	bx	lr
    97d0:	ffff8fea 	.word	0xffff8fea
    97d4:	ffff8fe9 	.word	0xffff8fe9

000097d8 <mutex_init>:
    97d8:	b510      	push	{r4, lr}
    97da:	4604      	mov	r4, r0
    97dc:	b120      	cbz	r0, 97e8 <mutex_init+0x10>
    97de:	2200      	movs	r2, #0
    97e0:	2311      	movs	r3, #17
    97e2:	6022      	str	r2, [r4, #0]
    97e4:	6063      	str	r3, [r4, #4]
    97e6:	bd10      	pop	{r4, pc}
    97e8:	4801      	ldr	r0, [pc, #4]	; (97f0 <mutex_init+0x18>)
    97ea:	f7ff ffa3 	bl	9734 <CC_PalAbort>
    97ee:	e7f6      	b.n	97de <mutex_init+0x6>
    97f0:	0000abc8 	.word	0x0000abc8

000097f4 <mutex_lock>:
    97f4:	b1c0      	cbz	r0, 9828 <mutex_lock+0x34>
    97f6:	6843      	ldr	r3, [r0, #4]
    97f8:	b1a3      	cbz	r3, 9824 <mutex_lock+0x30>
    97fa:	06db      	lsls	r3, r3, #27
    97fc:	d510      	bpl.n	9820 <mutex_lock+0x2c>
    97fe:	2201      	movs	r2, #1
    9800:	f3bf 8f5b 	dmb	ish
    9804:	e850 3f00 	ldrex	r3, [r0]
    9808:	e840 2100 	strex	r1, r2, [r0]
    980c:	2900      	cmp	r1, #0
    980e:	d1f9      	bne.n	9804 <mutex_lock+0x10>
    9810:	f3bf 8f5b 	dmb	ish
    9814:	2b01      	cmp	r3, #1
    9816:	d0f3      	beq.n	9800 <mutex_lock+0xc>
    9818:	f3bf 8f5f 	dmb	sy
    981c:	2000      	movs	r0, #0
    981e:	4770      	bx	lr
    9820:	4803      	ldr	r0, [pc, #12]	; (9830 <mutex_lock+0x3c>)
    9822:	4770      	bx	lr
    9824:	4803      	ldr	r0, [pc, #12]	; (9834 <mutex_lock+0x40>)
    9826:	4770      	bx	lr
    9828:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    982c:	4770      	bx	lr
    982e:	bf00      	nop
    9830:	ffff8fe9 	.word	0xffff8fe9
    9834:	ffff8fea 	.word	0xffff8fea

00009838 <nrf_cc3xx_platform_set_mutexes>:
    9838:	b570      	push	{r4, r5, r6, lr}
    983a:	e9d0 2300 	ldrd	r2, r3, [r0]
    983e:	4c13      	ldr	r4, [pc, #76]	; (988c <nrf_cc3xx_platform_set_mutexes+0x54>)
    9840:	4d13      	ldr	r5, [pc, #76]	; (9890 <nrf_cc3xx_platform_set_mutexes+0x58>)
    9842:	e9c4 2300 	strd	r2, r3, [r4]
    9846:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    984a:	e9c4 6302 	strd	r6, r3, [r4, #8]
    984e:	4b11      	ldr	r3, [pc, #68]	; (9894 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    9850:	6808      	ldr	r0, [r1, #0]
    9852:	6018      	str	r0, [r3, #0]
    9854:	6848      	ldr	r0, [r1, #4]
    9856:	6058      	str	r0, [r3, #4]
    9858:	6888      	ldr	r0, [r1, #8]
    985a:	6098      	str	r0, [r3, #8]
    985c:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    9860:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    9864:	60de      	str	r6, [r3, #12]
    9866:	6118      	str	r0, [r3, #16]
    9868:	06cb      	lsls	r3, r1, #27
    986a:	d50d      	bpl.n	9888 <nrf_cc3xx_platform_set_mutexes+0x50>
    986c:	2300      	movs	r3, #0
    986e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    9872:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    9876:	f505 7088 	add.w	r0, r5, #272	; 0x110
    987a:	4790      	blx	r2
    987c:	6823      	ldr	r3, [r4, #0]
    987e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    9882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9886:	4718      	bx	r3
    9888:	bd70      	pop	{r4, r5, r6, pc}
    988a:	bf00      	nop
    988c:	200001a8 	.word	0x200001a8
    9890:	200010e0 	.word	0x200010e0
    9894:	200001b8 	.word	0x200001b8

00009898 <CC_LibInitNoRng>:
    9898:	b510      	push	{r4, lr}
    989a:	f000 f833 	bl	9904 <CC_HalInit>
    989e:	b120      	cbz	r0, 98aa <CC_LibInitNoRng+0x12>
    98a0:	2403      	movs	r4, #3
    98a2:	f000 f867 	bl	9974 <CC_PalTerminate>
    98a6:	4620      	mov	r0, r4
    98a8:	bd10      	pop	{r4, pc}
    98aa:	f000 f835 	bl	9918 <CC_PalInit>
    98ae:	b990      	cbnz	r0, 98d6 <CC_LibInitNoRng+0x3e>
    98b0:	f000 f8b0 	bl	9a14 <CC_PalPowerSaveModeSelect>
    98b4:	b990      	cbnz	r0, 98dc <CC_LibInitNoRng+0x44>
    98b6:	4b0f      	ldr	r3, [pc, #60]	; (98f4 <CC_LibInitNoRng+0x5c>)
    98b8:	681b      	ldr	r3, [r3, #0]
    98ba:	0e1b      	lsrs	r3, r3, #24
    98bc:	2bf0      	cmp	r3, #240	; 0xf0
    98be:	d108      	bne.n	98d2 <CC_LibInitNoRng+0x3a>
    98c0:	4a0d      	ldr	r2, [pc, #52]	; (98f8 <CC_LibInitNoRng+0x60>)
    98c2:	4b0e      	ldr	r3, [pc, #56]	; (98fc <CC_LibInitNoRng+0x64>)
    98c4:	6812      	ldr	r2, [r2, #0]
    98c6:	429a      	cmp	r2, r3
    98c8:	d00a      	beq.n	98e0 <CC_LibInitNoRng+0x48>
    98ca:	2407      	movs	r4, #7
    98cc:	f000 f81c 	bl	9908 <CC_HalTerminate>
    98d0:	e7e7      	b.n	98a2 <CC_LibInitNoRng+0xa>
    98d2:	2406      	movs	r4, #6
    98d4:	e7fa      	b.n	98cc <CC_LibInitNoRng+0x34>
    98d6:	2404      	movs	r4, #4
    98d8:	4620      	mov	r0, r4
    98da:	bd10      	pop	{r4, pc}
    98dc:	2400      	movs	r4, #0
    98de:	e7f5      	b.n	98cc <CC_LibInitNoRng+0x34>
    98e0:	2001      	movs	r0, #1
    98e2:	f000 f897 	bl	9a14 <CC_PalPowerSaveModeSelect>
    98e6:	4604      	mov	r4, r0
    98e8:	2800      	cmp	r0, #0
    98ea:	d1f7      	bne.n	98dc <CC_LibInitNoRng+0x44>
    98ec:	4b04      	ldr	r3, [pc, #16]	; (9900 <CC_LibInitNoRng+0x68>)
    98ee:	6018      	str	r0, [r3, #0]
    98f0:	e7d9      	b.n	98a6 <CC_LibInitNoRng+0xe>
    98f2:	bf00      	nop
    98f4:	5002b928 	.word	0x5002b928
    98f8:	5002ba24 	.word	0x5002ba24
    98fc:	20e00000 	.word	0x20e00000
    9900:	5002ba0c 	.word	0x5002ba0c

00009904 <CC_HalInit>:
    9904:	2000      	movs	r0, #0
    9906:	4770      	bx	lr

00009908 <CC_HalTerminate>:
    9908:	2000      	movs	r0, #0
    990a:	4770      	bx	lr

0000990c <CC_HalMaskInterrupt>:
    990c:	4b01      	ldr	r3, [pc, #4]	; (9914 <CC_HalMaskInterrupt+0x8>)
    990e:	6018      	str	r0, [r3, #0]
    9910:	4770      	bx	lr
    9912:	bf00      	nop
    9914:	5002ba04 	.word	0x5002ba04

00009918 <CC_PalInit>:
    9918:	b510      	push	{r4, lr}
    991a:	4811      	ldr	r0, [pc, #68]	; (9960 <CC_PalInit+0x48>)
    991c:	f000 f848 	bl	99b0 <CC_PalMutexCreate>
    9920:	b100      	cbz	r0, 9924 <CC_PalInit+0xc>
    9922:	bd10      	pop	{r4, pc}
    9924:	480f      	ldr	r0, [pc, #60]	; (9964 <CC_PalInit+0x4c>)
    9926:	f000 f843 	bl	99b0 <CC_PalMutexCreate>
    992a:	2800      	cmp	r0, #0
    992c:	d1f9      	bne.n	9922 <CC_PalInit+0xa>
    992e:	4c0e      	ldr	r4, [pc, #56]	; (9968 <CC_PalInit+0x50>)
    9930:	4620      	mov	r0, r4
    9932:	f000 f83d 	bl	99b0 <CC_PalMutexCreate>
    9936:	2800      	cmp	r0, #0
    9938:	d1f3      	bne.n	9922 <CC_PalInit+0xa>
    993a:	4b0c      	ldr	r3, [pc, #48]	; (996c <CC_PalInit+0x54>)
    993c:	480c      	ldr	r0, [pc, #48]	; (9970 <CC_PalInit+0x58>)
    993e:	601c      	str	r4, [r3, #0]
    9940:	f000 f836 	bl	99b0 <CC_PalMutexCreate>
    9944:	4601      	mov	r1, r0
    9946:	2800      	cmp	r0, #0
    9948:	d1eb      	bne.n	9922 <CC_PalInit+0xa>
    994a:	f000 f82d 	bl	99a8 <CC_PalDmaInit>
    994e:	4604      	mov	r4, r0
    9950:	b108      	cbz	r0, 9956 <CC_PalInit+0x3e>
    9952:	4620      	mov	r0, r4
    9954:	bd10      	pop	{r4, pc}
    9956:	f000 f83f 	bl	99d8 <CC_PalPowerSaveModeInit>
    995a:	4620      	mov	r0, r4
    995c:	e7fa      	b.n	9954 <CC_PalInit+0x3c>
    995e:	bf00      	nop
    9960:	200001f0 	.word	0x200001f0
    9964:	200001e4 	.word	0x200001e4
    9968:	200001ec 	.word	0x200001ec
    996c:	200001f4 	.word	0x200001f4
    9970:	200001e8 	.word	0x200001e8

00009974 <CC_PalTerminate>:
    9974:	b508      	push	{r3, lr}
    9976:	4808      	ldr	r0, [pc, #32]	; (9998 <CC_PalTerminate+0x24>)
    9978:	f000 f824 	bl	99c4 <CC_PalMutexDestroy>
    997c:	4807      	ldr	r0, [pc, #28]	; (999c <CC_PalTerminate+0x28>)
    997e:	f000 f821 	bl	99c4 <CC_PalMutexDestroy>
    9982:	4807      	ldr	r0, [pc, #28]	; (99a0 <CC_PalTerminate+0x2c>)
    9984:	f000 f81e 	bl	99c4 <CC_PalMutexDestroy>
    9988:	4806      	ldr	r0, [pc, #24]	; (99a4 <CC_PalTerminate+0x30>)
    998a:	f000 f81b 	bl	99c4 <CC_PalMutexDestroy>
    998e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9992:	f000 b80b 	b.w	99ac <CC_PalDmaTerminate>
    9996:	bf00      	nop
    9998:	200001f0 	.word	0x200001f0
    999c:	200001e4 	.word	0x200001e4
    99a0:	200001ec 	.word	0x200001ec
    99a4:	200001e8 	.word	0x200001e8

000099a8 <CC_PalDmaInit>:
    99a8:	2000      	movs	r0, #0
    99aa:	4770      	bx	lr

000099ac <CC_PalDmaTerminate>:
    99ac:	4770      	bx	lr
    99ae:	bf00      	nop

000099b0 <CC_PalMutexCreate>:
    99b0:	b508      	push	{r3, lr}
    99b2:	4b03      	ldr	r3, [pc, #12]	; (99c0 <CC_PalMutexCreate+0x10>)
    99b4:	6802      	ldr	r2, [r0, #0]
    99b6:	681b      	ldr	r3, [r3, #0]
    99b8:	6810      	ldr	r0, [r2, #0]
    99ba:	4798      	blx	r3
    99bc:	2000      	movs	r0, #0
    99be:	bd08      	pop	{r3, pc}
    99c0:	200001a8 	.word	0x200001a8

000099c4 <CC_PalMutexDestroy>:
    99c4:	b508      	push	{r3, lr}
    99c6:	4b03      	ldr	r3, [pc, #12]	; (99d4 <CC_PalMutexDestroy+0x10>)
    99c8:	6802      	ldr	r2, [r0, #0]
    99ca:	685b      	ldr	r3, [r3, #4]
    99cc:	6810      	ldr	r0, [r2, #0]
    99ce:	4798      	blx	r3
    99d0:	2000      	movs	r0, #0
    99d2:	bd08      	pop	{r3, pc}
    99d4:	200001a8 	.word	0x200001a8

000099d8 <CC_PalPowerSaveModeInit>:
    99d8:	b570      	push	{r4, r5, r6, lr}
    99da:	4c09      	ldr	r4, [pc, #36]	; (9a00 <CC_PalPowerSaveModeInit+0x28>)
    99dc:	4d09      	ldr	r5, [pc, #36]	; (9a04 <CC_PalPowerSaveModeInit+0x2c>)
    99de:	6920      	ldr	r0, [r4, #16]
    99e0:	68ab      	ldr	r3, [r5, #8]
    99e2:	4798      	blx	r3
    99e4:	b118      	cbz	r0, 99ee <CC_PalPowerSaveModeInit+0x16>
    99e6:	4b08      	ldr	r3, [pc, #32]	; (9a08 <CC_PalPowerSaveModeInit+0x30>)
    99e8:	4808      	ldr	r0, [pc, #32]	; (9a0c <CC_PalPowerSaveModeInit+0x34>)
    99ea:	685b      	ldr	r3, [r3, #4]
    99ec:	4798      	blx	r3
    99ee:	4a08      	ldr	r2, [pc, #32]	; (9a10 <CC_PalPowerSaveModeInit+0x38>)
    99f0:	68eb      	ldr	r3, [r5, #12]
    99f2:	6920      	ldr	r0, [r4, #16]
    99f4:	2100      	movs	r1, #0
    99f6:	6011      	str	r1, [r2, #0]
    99f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99fc:	4718      	bx	r3
    99fe:	bf00      	nop
    9a00:	200001b8 	.word	0x200001b8
    9a04:	200001a8 	.word	0x200001a8
    9a08:	20000198 	.word	0x20000198
    9a0c:	0000abec 	.word	0x0000abec
    9a10:	20001008 	.word	0x20001008

00009a14 <CC_PalPowerSaveModeSelect>:
    9a14:	b570      	push	{r4, r5, r6, lr}
    9a16:	4d1a      	ldr	r5, [pc, #104]	; (9a80 <CC_PalPowerSaveModeSelect+0x6c>)
    9a18:	4e1a      	ldr	r6, [pc, #104]	; (9a84 <CC_PalPowerSaveModeSelect+0x70>)
    9a1a:	4604      	mov	r4, r0
    9a1c:	68b2      	ldr	r2, [r6, #8]
    9a1e:	6928      	ldr	r0, [r5, #16]
    9a20:	4790      	blx	r2
    9a22:	b9f0      	cbnz	r0, 9a62 <CC_PalPowerSaveModeSelect+0x4e>
    9a24:	b15c      	cbz	r4, 9a3e <CC_PalPowerSaveModeSelect+0x2a>
    9a26:	4c18      	ldr	r4, [pc, #96]	; (9a88 <CC_PalPowerSaveModeSelect+0x74>)
    9a28:	6823      	ldr	r3, [r4, #0]
    9a2a:	b1ab      	cbz	r3, 9a58 <CC_PalPowerSaveModeSelect+0x44>
    9a2c:	2b01      	cmp	r3, #1
    9a2e:	d01a      	beq.n	9a66 <CC_PalPowerSaveModeSelect+0x52>
    9a30:	3b01      	subs	r3, #1
    9a32:	6023      	str	r3, [r4, #0]
    9a34:	6928      	ldr	r0, [r5, #16]
    9a36:	68f3      	ldr	r3, [r6, #12]
    9a38:	4798      	blx	r3
    9a3a:	2000      	movs	r0, #0
    9a3c:	bd70      	pop	{r4, r5, r6, pc}
    9a3e:	4c12      	ldr	r4, [pc, #72]	; (9a88 <CC_PalPowerSaveModeSelect+0x74>)
    9a40:	6821      	ldr	r1, [r4, #0]
    9a42:	b939      	cbnz	r1, 9a54 <CC_PalPowerSaveModeSelect+0x40>
    9a44:	4b11      	ldr	r3, [pc, #68]	; (9a8c <CC_PalPowerSaveModeSelect+0x78>)
    9a46:	4a12      	ldr	r2, [pc, #72]	; (9a90 <CC_PalPowerSaveModeSelect+0x7c>)
    9a48:	2001      	movs	r0, #1
    9a4a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    9a4e:	6813      	ldr	r3, [r2, #0]
    9a50:	2b00      	cmp	r3, #0
    9a52:	d1fc      	bne.n	9a4e <CC_PalPowerSaveModeSelect+0x3a>
    9a54:	3101      	adds	r1, #1
    9a56:	6021      	str	r1, [r4, #0]
    9a58:	68f3      	ldr	r3, [r6, #12]
    9a5a:	6928      	ldr	r0, [r5, #16]
    9a5c:	4798      	blx	r3
    9a5e:	2000      	movs	r0, #0
    9a60:	bd70      	pop	{r4, r5, r6, pc}
    9a62:	480c      	ldr	r0, [pc, #48]	; (9a94 <CC_PalPowerSaveModeSelect+0x80>)
    9a64:	bd70      	pop	{r4, r5, r6, pc}
    9a66:	4a0a      	ldr	r2, [pc, #40]	; (9a90 <CC_PalPowerSaveModeSelect+0x7c>)
    9a68:	6813      	ldr	r3, [r2, #0]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d1fc      	bne.n	9a68 <CC_PalPowerSaveModeSelect+0x54>
    9a6e:	4a07      	ldr	r2, [pc, #28]	; (9a8c <CC_PalPowerSaveModeSelect+0x78>)
    9a70:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9a74:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9a78:	f7ff ff48 	bl	990c <CC_HalMaskInterrupt>
    9a7c:	6823      	ldr	r3, [r4, #0]
    9a7e:	e7d7      	b.n	9a30 <CC_PalPowerSaveModeSelect+0x1c>
    9a80:	200001b8 	.word	0x200001b8
    9a84:	200001a8 	.word	0x200001a8
    9a88:	20001008 	.word	0x20001008
    9a8c:	5002a000 	.word	0x5002a000
    9a90:	5002b910 	.word	0x5002b910
    9a94:	ffff8fe9 	.word	0xffff8fe9

00009a98 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    9a98:	6883      	ldr	r3, [r0, #8]
    9a9a:	69db      	ldr	r3, [r3, #28]
    9a9c:	b10b      	cbz	r3, 9aa2 <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    9a9e:	2201      	movs	r2, #1
    9aa0:	4718      	bx	r3
}
    9aa2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9aa6:	4770      	bx	lr

00009aa8 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    9aa8:	4040      	eors	r0, r0
    9aaa:	f380 8811 	msr	BASEPRI, r0
    9aae:	f04f 0004 	mov.w	r0, #4
    9ab2:	df02      	svc	2
}
    9ab4:	4770      	bx	lr

00009ab6 <encode_uint>:
{
    9ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aba:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    9abc:	78d3      	ldrb	r3, [r2, #3]
{
    9abe:	4614      	mov	r4, r2
	switch (specifier) {
    9ac0:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9ac2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    9ac6:	4606      	mov	r6, r0
    9ac8:	460f      	mov	r7, r1
    9aca:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    9acc:	d02d      	beq.n	9b2a <encode_uint+0x74>
    9ace:	d828      	bhi.n	9b22 <encode_uint+0x6c>
		return 16;
    9ad0:	2b58      	cmp	r3, #88	; 0x58
    9ad2:	bf14      	ite	ne
    9ad4:	250a      	movne	r5, #10
    9ad6:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    9ad8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    9adc:	46aa      	mov	sl, r5
    9ade:	f04f 0b00 	mov.w	fp, #0
    9ae2:	4652      	mov	r2, sl
    9ae4:	465b      	mov	r3, fp
    9ae6:	4630      	mov	r0, r6
    9ae8:	4639      	mov	r1, r7
    9aea:	f7f7 f975 	bl	dd8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9aee:	2a09      	cmp	r2, #9
    9af0:	b2d3      	uxtb	r3, r2
    9af2:	d81f      	bhi.n	9b34 <encode_uint+0x7e>
    9af4:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    9af6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9af8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    9afa:	bf08      	it	eq
    9afc:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9afe:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    9b02:	d301      	bcc.n	9b08 <encode_uint+0x52>
    9b04:	45c8      	cmp	r8, r9
    9b06:	d812      	bhi.n	9b2e <encode_uint+0x78>
	if (conv->flag_hash) {
    9b08:	7823      	ldrb	r3, [r4, #0]
    9b0a:	069b      	lsls	r3, r3, #26
    9b0c:	d505      	bpl.n	9b1a <encode_uint+0x64>
		if (radix == 8) {
    9b0e:	2d08      	cmp	r5, #8
    9b10:	d116      	bne.n	9b40 <encode_uint+0x8a>
			conv->altform_0 = true;
    9b12:	78a3      	ldrb	r3, [r4, #2]
    9b14:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    9b18:	70a3      	strb	r3, [r4, #2]
}
    9b1a:	4640      	mov	r0, r8
    9b1c:	b003      	add	sp, #12
    9b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9b22:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    9b26:	2b70      	cmp	r3, #112	; 0x70
    9b28:	e7d3      	b.n	9ad2 <encode_uint+0x1c>
	switch (specifier) {
    9b2a:	2508      	movs	r5, #8
    9b2c:	e7d4      	b.n	9ad8 <encode_uint+0x22>
		value /= radix;
    9b2e:	4606      	mov	r6, r0
    9b30:	460f      	mov	r7, r1
    9b32:	e7d6      	b.n	9ae2 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9b34:	9a01      	ldr	r2, [sp, #4]
    9b36:	2a19      	cmp	r2, #25
    9b38:	bf94      	ite	ls
    9b3a:	3337      	addls	r3, #55	; 0x37
    9b3c:	3357      	addhi	r3, #87	; 0x57
    9b3e:	e7da      	b.n	9af6 <encode_uint+0x40>
		} else if (radix == 16) {
    9b40:	2d10      	cmp	r5, #16
    9b42:	d1ea      	bne.n	9b1a <encode_uint+0x64>
			conv->altform_0c = true;
    9b44:	78a3      	ldrb	r3, [r4, #2]
    9b46:	f043 0310 	orr.w	r3, r3, #16
    9b4a:	e7e5      	b.n	9b18 <encode_uint+0x62>

00009b4c <outs>:
{
    9b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b50:	4607      	mov	r7, r0
    9b52:	4688      	mov	r8, r1
    9b54:	4615      	mov	r5, r2
    9b56:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9b58:	4614      	mov	r4, r2
    9b5a:	42b4      	cmp	r4, r6
    9b5c:	eba4 0005 	sub.w	r0, r4, r5
    9b60:	d302      	bcc.n	9b68 <outs+0x1c>
    9b62:	b93e      	cbnz	r6, 9b74 <outs+0x28>
    9b64:	7823      	ldrb	r3, [r4, #0]
    9b66:	b12b      	cbz	r3, 9b74 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    9b68:	f814 0b01 	ldrb.w	r0, [r4], #1
    9b6c:	4641      	mov	r1, r8
    9b6e:	47b8      	blx	r7
		if (rc < 0) {
    9b70:	2800      	cmp	r0, #0
    9b72:	daf2      	bge.n	9b5a <outs+0xe>
}
    9b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009b78 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    9b78:	4770      	bx	lr

00009b7a <sys_notify_validate>:
	if (notify == NULL) {
    9b7a:	4603      	mov	r3, r0
    9b7c:	b140      	cbz	r0, 9b90 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9b7e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9b80:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    9b84:	2a02      	cmp	r2, #2
    9b86:	d006      	beq.n	9b96 <sys_notify_validate+0x1c>
    9b88:	2a03      	cmp	r2, #3
    9b8a:	d004      	beq.n	9b96 <sys_notify_validate+0x1c>
    9b8c:	2a01      	cmp	r2, #1
    9b8e:	d005      	beq.n	9b9c <sys_notify_validate+0x22>
		return -EINVAL;
    9b90:	f06f 0015 	mvn.w	r0, #21
}
    9b94:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    9b96:	681a      	ldr	r2, [r3, #0]
    9b98:	2a00      	cmp	r2, #0
    9b9a:	d0f9      	beq.n	9b90 <sys_notify_validate+0x16>
		notify->result = 0;
    9b9c:	2000      	movs	r0, #0
    9b9e:	6098      	str	r0, [r3, #8]
    9ba0:	4770      	bx	lr

00009ba2 <abort_function>:
{
    9ba2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9ba4:	2000      	movs	r0, #0
    9ba6:	f7f9 f92b 	bl	2e00 <sys_reboot>

00009baa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9baa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    9bac:	f013 0307 	ands.w	r3, r3, #7
    9bb0:	d105      	bne.n	9bbe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9bb2:	6803      	ldr	r3, [r0, #0]
    9bb4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    9bb6:	bf0c      	ite	eq
    9bb8:	2000      	moveq	r0, #0
    9bba:	2003      	movne	r0, #3
    9bbc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9bbe:	2b02      	cmp	r3, #2
    9bc0:	d105      	bne.n	9bce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9bc2:	8bc3      	ldrh	r3, [r0, #30]
    9bc4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    9bc6:	bf14      	ite	ne
    9bc8:	2000      	movne	r0, #0
    9bca:	2004      	moveq	r0, #4
    9bcc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9bce:	2b01      	cmp	r3, #1
    9bd0:	d105      	bne.n	9bde <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9bd2:	6803      	ldr	r3, [r0, #0]
    9bd4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    9bd6:	bf0c      	ite	eq
    9bd8:	2000      	moveq	r0, #0
    9bda:	2005      	movne	r0, #5
    9bdc:	4770      	bx	lr
	int evt = EVT_NOP;
    9bde:	2000      	movs	r0, #0
}
    9be0:	4770      	bx	lr

00009be2 <notify_one>:
{
    9be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9be6:	460d      	mov	r5, r1
    9be8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9bea:	4619      	mov	r1, r3
    9bec:	1d28      	adds	r0, r5, #4
{
    9bee:	4690      	mov	r8, r2
    9bf0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9bf2:	f7f8 fbe5 	bl	23c0 <sys_notify_finalize>
	if (cb) {
    9bf6:	4604      	mov	r4, r0
    9bf8:	b138      	cbz	r0, 9c0a <notify_one+0x28>
		cb(mgr, cli, state, res);
    9bfa:	4633      	mov	r3, r6
    9bfc:	4642      	mov	r2, r8
    9bfe:	4629      	mov	r1, r5
    9c00:	4638      	mov	r0, r7
    9c02:	46a4      	mov	ip, r4
}
    9c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9c08:	4760      	bx	ip
}
    9c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009c0e <validate_args>:
{
    9c0e:	b510      	push	{r4, lr}
    9c10:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9c12:	b140      	cbz	r0, 9c26 <validate_args+0x18>
    9c14:	b139      	cbz	r1, 9c26 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9c16:	1d08      	adds	r0, r1, #4
    9c18:	f7ff ffaf 	bl	9b7a <sys_notify_validate>
	if ((rv == 0)
    9c1c:	b928      	cbnz	r0, 9c2a <validate_args+0x1c>
	    && ((cli->notify.flags
    9c1e:	68a3      	ldr	r3, [r4, #8]
    9c20:	f033 0303 	bics.w	r3, r3, #3
    9c24:	d001      	beq.n	9c2a <validate_args+0x1c>
		rv = -EINVAL;
    9c26:	f06f 0015 	mvn.w	r0, #21
}
    9c2a:	bd10      	pop	{r4, pc}

00009c2c <onoff_manager_init>:
{
    9c2c:	b538      	push	{r3, r4, r5, lr}
    9c2e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9c30:	4605      	mov	r5, r0
    9c32:	b158      	cbz	r0, 9c4c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9c34:	b151      	cbz	r1, 9c4c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9c36:	680b      	ldr	r3, [r1, #0]
    9c38:	b143      	cbz	r3, 9c4c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9c3a:	684b      	ldr	r3, [r1, #4]
    9c3c:	b133      	cbz	r3, 9c4c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9c3e:	2220      	movs	r2, #32
    9c40:	2100      	movs	r1, #0
    9c42:	f000 f86e 	bl	9d22 <memset>
    9c46:	612c      	str	r4, [r5, #16]
	return 0;
    9c48:	2000      	movs	r0, #0
}
    9c4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9c4c:	f06f 0015 	mvn.w	r0, #21
    9c50:	e7fb      	b.n	9c4a <onoff_manager_init+0x1e>

00009c52 <arch_printk_char_out>:
}
    9c52:	2000      	movs	r0, #0
    9c54:	4770      	bx	lr

00009c56 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    9c56:	b40f      	push	{r0, r1, r2, r3}
    9c58:	b507      	push	{r0, r1, r2, lr}
    9c5a:	a904      	add	r1, sp, #16
    9c5c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9c60:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    9c62:	f7f9 f8bf 	bl	2de4 <vprintk>
	}
	va_end(ap);
}
    9c66:	b003      	add	sp, #12
    9c68:	f85d eb04 	ldr.w	lr, [sp], #4
    9c6c:	b004      	add	sp, #16
    9c6e:	4770      	bx	lr

00009c70 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    9c70:	2200      	movs	r2, #0
    9c72:	e9c0 2200 	strd	r2, r2, [r0]
    9c76:	6082      	str	r2, [r0, #8]
}
    9c78:	4770      	bx	lr

00009c7a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9c7a:	4604      	mov	r4, r0
    9c7c:	b508      	push	{r3, lr}
    9c7e:	4608      	mov	r0, r1
    9c80:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9c82:	461a      	mov	r2, r3
    9c84:	47a0      	blx	r4
	return z_impl_z_current_get();
    9c86:	f7fe faf5 	bl	8274 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9c8a:	f7f9 fbf5 	bl	3478 <z_impl_k_thread_abort>

00009c8e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    9c8e:	f7fc bd31 	b.w	66f4 <z_fatal_error>

00009c92 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    9c92:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    9c94:	6800      	ldr	r0, [r0, #0]
    9c96:	f7fc bd2d 	b.w	66f4 <z_fatal_error>

00009c9a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9c9a:	2100      	movs	r1, #0
    9c9c:	2001      	movs	r0, #1
    9c9e:	f7ff bff6 	b.w	9c8e <z_arm_fatal_error>

00009ca2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    9ca2:	b508      	push	{r3, lr}
	handler();
    9ca4:	f7f9 f8fe 	bl	2ea4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    9ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9cac:	f7f9 ba0c 	b.w	30c8 <z_arm_exc_exit>

00009cb0 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    9cb0:	684b      	ldr	r3, [r1, #4]
    9cb2:	2b01      	cmp	r3, #1
    9cb4:	dd07      	ble.n	9cc6 <sprintf_out+0x16>
		*(p->ptr) = c;
    9cb6:	680b      	ldr	r3, [r1, #0]
    9cb8:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    9cba:	680b      	ldr	r3, [r1, #0]
    9cbc:	3301      	adds	r3, #1
    9cbe:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    9cc0:	684b      	ldr	r3, [r1, #4]
    9cc2:	3b01      	subs	r3, #1
    9cc4:	604b      	str	r3, [r1, #4]
}
    9cc6:	2000      	movs	r0, #0
    9cc8:	4770      	bx	lr

00009cca <_stdout_hook_default>:
}
    9cca:	f04f 30ff 	mov.w	r0, #4294967295
    9cce:	4770      	bx	lr

00009cd0 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    9cd0:	f7f9 bd42 	b.w	3758 <z_impl_zephyr_fputc>

00009cd4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9cd4:	4603      	mov	r3, r0
	size_t n = 0;
    9cd6:	2000      	movs	r0, #0

	while (*s != '\0') {
    9cd8:	5c1a      	ldrb	r2, [r3, r0]
    9cda:	b902      	cbnz	r2, 9cde <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    9cdc:	4770      	bx	lr
		n++;
    9cde:	3001      	adds	r0, #1
    9ce0:	e7fa      	b.n	9cd8 <strlen+0x4>

00009ce2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9ce2:	4603      	mov	r3, r0
	size_t n = 0;
    9ce4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9ce6:	5c1a      	ldrb	r2, [r3, r0]
    9ce8:	b10a      	cbz	r2, 9cee <strnlen+0xc>
    9cea:	4288      	cmp	r0, r1
    9cec:	d100      	bne.n	9cf0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    9cee:	4770      	bx	lr
		n++;
    9cf0:	3001      	adds	r0, #1
    9cf2:	e7f8      	b.n	9ce6 <strnlen+0x4>

00009cf4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9cf4:	1e43      	subs	r3, r0, #1
    9cf6:	3901      	subs	r1, #1
    9cf8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9cfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9d00:	4282      	cmp	r2, r0
    9d02:	d101      	bne.n	9d08 <strcmp+0x14>
    9d04:	2a00      	cmp	r2, #0
    9d06:	d1f7      	bne.n	9cf8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9d08:	1a10      	subs	r0, r2, r0
    9d0a:	4770      	bx	lr

00009d0c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    9d0c:	b510      	push	{r4, lr}
    9d0e:	1e43      	subs	r3, r0, #1
    9d10:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    9d12:	4291      	cmp	r1, r2
    9d14:	d100      	bne.n	9d18 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9d16:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    9d18:	f811 4b01 	ldrb.w	r4, [r1], #1
    9d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9d20:	e7f7      	b.n	9d12 <memcpy+0x6>

00009d22 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9d22:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    9d24:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    9d26:	4603      	mov	r3, r0
	while (n > 0) {
    9d28:	4293      	cmp	r3, r2
    9d2a:	d100      	bne.n	9d2e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9d2c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    9d2e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9d32:	e7f9      	b.n	9d28 <memset+0x6>

00009d34 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    9d34:	b084      	sub	sp, #16
    9d36:	ab04      	add	r3, sp, #16
    9d38:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    9d3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9d40:	2b06      	cmp	r3, #6
    9d42:	d108      	bne.n	9d56 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d48:	2201      	movs	r2, #1
    9d4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9d4e:	f3bf 8f4f 	dsb	sy
        __WFE();
    9d52:	bf20      	wfe
    while (true)
    9d54:	e7fd      	b.n	9d52 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    9d56:	b004      	add	sp, #16
    9d58:	4770      	bx	lr

00009d5a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    9d5a:	b084      	sub	sp, #16
    9d5c:	ab04      	add	r3, sp, #16
    9d5e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    9d62:	2300      	movs	r3, #0
    9d64:	f383 8811 	msr	BASEPRI, r3
    9d68:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9d6c:	b004      	add	sp, #16
    9d6e:	4770      	bx	lr

00009d70 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9d70:	f1a0 0308 	sub.w	r3, r0, #8
    9d74:	f3bf 8f5b 	dmb	ish
    9d78:	e853 2f00 	ldrex	r2, [r3]
    9d7c:	1c51      	adds	r1, r2, #1
    9d7e:	e843 1c00 	strex	ip, r1, [r3]
    9d82:	f1bc 0f00 	cmp.w	ip, #0
    9d86:	d1f7      	bne.n	9d78 <adc_context_on_timer_expired+0x8>
    9d88:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    9d8c:	b91a      	cbnz	r2, 9d96 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    9d8e:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9d92:	f7f9 bd3f 	b.w	3814 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    9d96:	f06f 030f 	mvn.w	r3, #15
    9d9a:	6683      	str	r3, [r0, #104]	; 0x68
}
    9d9c:	4770      	bx	lr

00009d9e <set_starting_state>:
{
    9d9e:	b510      	push	{r4, lr}
	__asm__ volatile(
    9da0:	f04f 0320 	mov.w	r3, #32
    9da4:	f3ef 8211 	mrs	r2, BASEPRI
    9da8:	f383 8812 	msr	BASEPRI_MAX, r3
    9dac:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9db0:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9db2:	f003 0407 	and.w	r4, r3, #7
    9db6:	2c01      	cmp	r4, #1
    9db8:	d106      	bne.n	9dc8 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9dba:	6001      	str	r1, [r0, #0]
	int err = 0;
    9dbc:	2000      	movs	r0, #0
	__asm__ volatile(
    9dbe:	f382 8811 	msr	BASEPRI, r2
    9dc2:	f3bf 8f6f 	isb	sy
}
    9dc6:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9dc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    9dcc:	428b      	cmp	r3, r1
		err = -EALREADY;
    9dce:	bf14      	ite	ne
    9dd0:	f04f 30ff 	movne.w	r0, #4294967295
    9dd4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    9dd8:	e7f1      	b.n	9dbe <set_starting_state+0x20>

00009dda <set_on_state>:
	__asm__ volatile(
    9dda:	f04f 0320 	mov.w	r3, #32
    9dde:	f3ef 8211 	mrs	r2, BASEPRI
    9de2:	f383 8812 	msr	BASEPRI_MAX, r3
    9de6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9dea:	6803      	ldr	r3, [r0, #0]
    9dec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9df0:	f043 0302 	orr.w	r3, r3, #2
    9df4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9df6:	f382 8811 	msr	BASEPRI, r2
    9dfa:	f3bf 8f6f 	isb	sy
}
    9dfe:	4770      	bx	lr

00009e00 <onoff_started_callback>:
	return &data->mgr[type];
    9e00:	6900      	ldr	r0, [r0, #16]
    9e02:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9e04:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    9e08:	2100      	movs	r1, #0
    9e0a:	4710      	bx	r2

00009e0c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9e0c:	2000      	movs	r0, #0
    9e0e:	f7fb bba7 	b.w	5560 <nrfx_clock_start>

00009e12 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9e12:	2000      	movs	r0, #0
    9e14:	f7fb bbf8 	b.w	5608 <nrfx_clock_stop>

00009e18 <api_stop>:
	return stop(dev, subsys, CTX_API);
    9e18:	2280      	movs	r2, #128	; 0x80
    9e1a:	f7f9 bf61 	b.w	3ce0 <stop>

00009e1e <blocking_start_callback>:
{
    9e1e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9e20:	f7fe bb5c 	b.w	84dc <z_impl_k_sem_give>

00009e24 <api_start>:
{
    9e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e28:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    9e2a:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9e2c:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    9e2e:	436f      	muls	r7, r5
{
    9e30:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    9e32:	f107 0048 	add.w	r0, r7, #72	; 0x48
    9e36:	2180      	movs	r1, #128	; 0x80
    9e38:	4420      	add	r0, r4
{
    9e3a:	4690      	mov	r8, r2
    9e3c:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    9e3e:	f7ff ffae 	bl	9d9e <set_starting_state>
	if (err < 0) {
    9e42:	2800      	cmp	r0, #0
    9e44:	db07      	blt.n	9e56 <api_start+0x32>
	subdata->cb = cb;
    9e46:	443c      	add	r4, r7
	subdata->user_data = user_data;
    9e48:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    9e4c:	6873      	ldr	r3, [r6, #4]
    9e4e:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    9e52:	4798      	blx	r3
	return 0;
    9e54:	2000      	movs	r0, #0
}
    9e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009e5a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e5a:	6843      	ldr	r3, [r0, #4]
    9e5c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9e5e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9e62:	600b      	str	r3, [r1, #0]
}
    9e64:	2000      	movs	r0, #0
    9e66:	4770      	bx	lr

00009e68 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e68:	6843      	ldr	r3, [r0, #4]
    9e6a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9e6c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9e70:	4042      	eors	r2, r0
    9e72:	400a      	ands	r2, r1
    9e74:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9e76:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    9e7a:	2000      	movs	r0, #0
    9e7c:	4770      	bx	lr

00009e7e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e7e:	6843      	ldr	r3, [r0, #4]
    9e80:	685b      	ldr	r3, [r3, #4]
}
    9e82:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9e84:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9e88:	4770      	bx	lr

00009e8a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e8a:	6843      	ldr	r3, [r0, #4]
    9e8c:	685b      	ldr	r3, [r3, #4]
}
    9e8e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9e90:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9e94:	4770      	bx	lr

00009e96 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9e96:	6843      	ldr	r3, [r0, #4]
    9e98:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9e9a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    9e9e:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9ea0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    9ea4:	2000      	movs	r0, #0
    9ea6:	4770      	bx	lr

00009ea8 <any_other_channel_is_active>:
{
    9ea8:	b530      	push	{r4, r5, lr}
    9eaa:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    9eac:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    9eae:	b2da      	uxtb	r2, r3
    9eb0:	4282      	cmp	r2, r0
    9eb2:	d007      	beq.n	9ec4 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    9eb4:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    9eb8:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    9ebc:	b112      	cbz	r2, 9ec4 <any_other_channel_is_active+0x1c>
    9ebe:	898d      	ldrh	r5, [r1, #12]
    9ec0:	4295      	cmp	r5, r2
    9ec2:	d804      	bhi.n	9ece <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    9ec4:	3301      	adds	r3, #1
    9ec6:	2b04      	cmp	r3, #4
    9ec8:	d1f1      	bne.n	9eae <any_other_channel_is_active+0x6>
	return false;
    9eca:	2000      	movs	r0, #0
}
    9ecc:	bd30      	pop	{r4, r5, pc}
			return true;
    9ece:	2001      	movs	r0, #1
    9ed0:	e7fc      	b.n	9ecc <any_other_channel_is_active+0x24>

00009ed2 <pwm_nrfx_pin_set>:
{
    9ed2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ed6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    9eda:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    9edc:	6904      	ldr	r4, [r0, #16]
{
    9ede:	4688      	mov	r8, r1
    9ee0:	4616      	mov	r6, r2
    9ee2:	4699      	mov	r9, r3
	if (flags) {
    9ee4:	2d00      	cmp	r5, #0
    9ee6:	d140      	bne.n	9f6a <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    9ee8:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    9eea:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    9eee:	2bff      	cmp	r3, #255	; 0xff
    9ef0:	d003      	beq.n	9efa <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    9ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9ef6:	4598      	cmp	r8, r3
    9ef8:	d03a      	beq.n	9f70 <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    9efa:	3501      	adds	r5, #1
    9efc:	b2ed      	uxtb	r5, r5
    9efe:	2d04      	cmp	r5, #4
    9f00:	d1f3      	bne.n	9eea <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    9f02:	f06f 0015 	mvn.w	r0, #21
    9f06:	e009      	b.n	9f1c <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    9f08:	2000      	movs	r0, #0
    9f0a:	e042      	b.n	9f92 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    9f0c:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    9f0e:	2b08      	cmp	r3, #8
		countertop >>= 1;
    9f10:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    9f14:	d158      	bne.n	9fc8 <pwm_nrfx_pin_set+0xf6>
    9f16:	e7f4      	b.n	9f02 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    9f18:	b9d0      	cbnz	r0, 9f50 <pwm_nrfx_pin_set+0x7e>
	return 0;
    9f1a:	2000      	movs	r0, #0
}
    9f1c:	b003      	add	sp, #12
    9f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    9f22:	454e      	cmp	r6, r9
    9f24:	d87f      	bhi.n	a026 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9f26:	a801      	add	r0, sp, #4
    9f28:	f8cd 8004 	str.w	r8, [sp, #4]
    9f2c:	f7fa fb10 	bl	4550 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9f30:	9a01      	ldr	r2, [sp, #4]
    9f32:	2301      	movs	r3, #1
    9f34:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    9f36:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    9f3a:	4621      	mov	r1, r4
    9f3c:	4628      	mov	r0, r5
    9f3e:	f7ff ffb3 	bl	9ea8 <any_other_channel_is_active>
    9f42:	2800      	cmp	r0, #0
    9f44:	d1e9      	bne.n	9f1a <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    9f46:	4601      	mov	r1, r0
    9f48:	4638      	mov	r0, r7
    9f4a:	f7fc fa47 	bl	63dc <nrfx_pwm_stop>
    9f4e:	e7e4      	b.n	9f1a <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    9f50:	4638      	mov	r0, r7
    9f52:	f7fc fa15 	bl	6380 <nrfx_pwm_is_stopped>
    9f56:	2800      	cmp	r0, #0
    9f58:	d0fa      	beq.n	9f50 <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    9f5a:	2302      	movs	r3, #2
    9f5c:	2201      	movs	r2, #1
    9f5e:	f107 0118 	add.w	r1, r7, #24
    9f62:	4638      	mov	r0, r7
    9f64:	f7fc f998 	bl	6298 <nrfx_pwm_simple_playback>
    9f68:	e7d7      	b.n	9f1a <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    9f6a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9f6e:	e7d5      	b.n	9f1c <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    9f70:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    9f74:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    9f78:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    9f7c:	b113      	cbz	r3, 9f84 <pwm_nrfx_pin_set+0xb2>
    9f7e:	89a2      	ldrh	r2, [r4, #12]
    9f80:	429a      	cmp	r2, r3
    9f82:	d8c1      	bhi.n	9f08 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    9f84:	4621      	mov	r1, r4
    9f86:	4628      	mov	r0, r5
    9f88:	f7ff ff8e 	bl	9ea8 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    9f8c:	f080 0001 	eor.w	r0, r0, #1
    9f90:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    9f92:	7bb9      	ldrb	r1, [r7, #14]
    9f94:	2901      	cmp	r1, #1
		period_cycles /= 2;
    9f96:	bf04      	itt	eq
    9f98:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    9f9a:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    9f9e:	b326      	cbz	r6, 9fea <pwm_nrfx_pin_set+0x118>
    9fa0:	6823      	ldr	r3, [r4, #0]
    9fa2:	42b3      	cmp	r3, r6
    9fa4:	d021      	beq.n	9fea <pwm_nrfx_pin_set+0x118>
    9fa6:	2300      	movs	r3, #0
				data->current[i]
    9fa8:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    9fac:	b2da      	uxtb	r2, r3
    9fae:	42aa      	cmp	r2, r5
    9fb0:	d005      	beq.n	9fbe <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    9fb2:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    9fb6:	f3c2 020e 	ubfx	r2, r2, #0, #15
    9fba:	2a00      	cmp	r2, #0
    9fbc:	d1a1      	bne.n	9f02 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    9fbe:	3301      	adds	r3, #1
    9fc0:	2b04      	cmp	r3, #4
    9fc2:	d1f3      	bne.n	9fac <pwm_nrfx_pin_set+0xda>
    9fc4:	4632      	mov	r2, r6
    9fc6:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    9fc8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    9fcc:	fa5f fc83 	uxtb.w	ip, r3
    9fd0:	d29c      	bcs.n	9f0c <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    9fd2:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    9fd6:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    9fda:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    9fdc:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    9fde:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    9fe2:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    9fe6:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    9fea:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    9fec:	454e      	cmp	r6, r9
    9fee:	4633      	mov	r3, r6
    9ff0:	bf28      	it	cs
    9ff2:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    9ff4:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    9ff8:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    9ffc:	ea42 020b 	orr.w	r2, r2, fp
    a000:	b292      	uxth	r2, r2
	data->current[channel] = (
    a002:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    a006:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    a00a:	b112      	cbz	r2, a012 <pwm_nrfx_pin_set+0x140>
    a00c:	89a1      	ldrh	r1, [r4, #12]
    a00e:	4291      	cmp	r1, r2
    a010:	d882      	bhi.n	9f18 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    a012:	197a      	adds	r2, r7, r5
    a014:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    a018:	2b00      	cmp	r3, #0
    a01a:	d082      	beq.n	9f22 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    a01c:	454e      	cmp	r6, r9
    a01e:	d805      	bhi.n	a02c <pwm_nrfx_pin_set+0x15a>
    a020:	2a00      	cmp	r2, #0
    a022:	db80      	blt.n	9f26 <pwm_nrfx_pin_set+0x54>
    a024:	e002      	b.n	a02c <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    a026:	2a00      	cmp	r2, #0
    a028:	f6bf af7d 	bge.w	9f26 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a02c:	a801      	add	r0, sp, #4
    a02e:	f8cd 8004 	str.w	r8, [sp, #4]
    a032:	f7fa fa8d 	bl	4550 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a036:	9a01      	ldr	r2, [sp, #4]
    a038:	2301      	movs	r3, #1
    a03a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    a03c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    a040:	e77b      	b.n	9f3a <pwm_nrfx_pin_set+0x68>

0000a042 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    a042:	6902      	ldr	r2, [r0, #16]
{
    a044:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    a046:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    a04a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    a04e:	2000      	movs	r0, #0
    a050:	4770      	bx	lr

0000a052 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    a052:	6843      	ldr	r3, [r0, #4]
    a054:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    a056:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    a05a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    a05e:	4770      	bx	lr

0000a060 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    a060:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    a062:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a064:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a068:	b940      	cbnz	r0, a07c <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    a06a:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a06c:	0792      	lsls	r2, r2, #30
    a06e:	d406      	bmi.n	a07e <is_tx_ready+0x1e>
    a070:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    a074:	3800      	subs	r0, #0
    a076:	bf18      	it	ne
    a078:	2001      	movne	r0, #1
    a07a:	4770      	bx	lr
    a07c:	2001      	movs	r0, #1
}
    a07e:	4770      	bx	lr

0000a080 <user_callback>:
	if (data->async->user_callback) {
    a080:	6903      	ldr	r3, [r0, #16]
    a082:	68da      	ldr	r2, [r3, #12]
    a084:	6813      	ldr	r3, [r2, #0]
    a086:	b10b      	cbz	r3, a08c <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    a088:	6852      	ldr	r2, [r2, #4]
    a08a:	4718      	bx	r3
}
    a08c:	4770      	bx	lr

0000a08e <notify_uart_rx_rdy>:
{
    a08e:	b570      	push	{r4, r5, r6, lr}
    a090:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a092:	6906      	ldr	r6, [r0, #16]
{
    a094:	4604      	mov	r4, r0
    a096:	460d      	mov	r5, r1
	struct uart_event evt = {
    a098:	2214      	movs	r2, #20
    a09a:	2100      	movs	r1, #0
    a09c:	a801      	add	r0, sp, #4
    a09e:	f7ff fe40 	bl	9d22 <memset>
    a0a2:	2302      	movs	r3, #2
    a0a4:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    a0a8:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    a0aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    a0ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    a0ae:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    a0b0:	a901      	add	r1, sp, #4
    a0b2:	4620      	mov	r0, r4
	struct uart_event evt = {
    a0b4:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    a0b8:	f7ff ffe2 	bl	a080 <user_callback>
}
    a0bc:	b006      	add	sp, #24
    a0be:	bd70      	pop	{r4, r5, r6, pc}

0000a0c0 <notify_rx_buf_release>:
{
    a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
    a0c2:	680f      	ldr	r7, [r1, #0]
{
    a0c4:	b087      	sub	sp, #28
    a0c6:	4606      	mov	r6, r0
    a0c8:	460c      	mov	r4, r1
    a0ca:	4615      	mov	r5, r2
	if (*buf) {
    a0cc:	b187      	cbz	r7, a0f0 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
    a0ce:	2100      	movs	r1, #0
    a0d0:	2214      	movs	r2, #20
    a0d2:	a801      	add	r0, sp, #4
    a0d4:	f7ff fe25 	bl	9d22 <memset>
    a0d8:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    a0da:	eb0d 0103 	add.w	r1, sp, r3
    a0de:	4630      	mov	r0, r6
		struct uart_event evt = {
    a0e0:	f88d 3004 	strb.w	r3, [sp, #4]
    a0e4:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
    a0e6:	f7ff ffcb 	bl	a080 <user_callback>
		if (clear) {
    a0ea:	b10d      	cbz	r5, a0f0 <notify_rx_buf_release+0x30>
			*buf = NULL;
    a0ec:	2300      	movs	r3, #0
    a0ee:	6023      	str	r3, [r4, #0]
}
    a0f0:	b007      	add	sp, #28
    a0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a0f4 <notify_rx_disable>:
{
    a0f4:	b510      	push	{r4, lr}
    a0f6:	b086      	sub	sp, #24
    a0f8:	4604      	mov	r4, r0
	struct uart_event evt = {
    a0fa:	2214      	movs	r2, #20
    a0fc:	2100      	movs	r1, #0
    a0fe:	a801      	add	r0, sp, #4
    a100:	f7ff fe0f 	bl	9d22 <memset>
    a104:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    a106:	a901      	add	r1, sp, #4
    a108:	4620      	mov	r0, r4
	struct uart_event evt = {
    a10a:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    a10e:	f7ff ffb7 	bl	a080 <user_callback>
}
    a112:	b006      	add	sp, #24
    a114:	bd10      	pop	{r4, pc}

0000a116 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    a116:	6843      	ldr	r3, [r0, #4]
{
    a118:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    a11a:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a11c:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    a11e:	f04f 0020 	mov.w	r0, #32
    a122:	f3ef 8511 	mrs	r5, BASEPRI
    a126:	f380 8812 	msr	BASEPRI_MAX, r0
    a12a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    a12e:	68e4      	ldr	r4, [r4, #12]
    a130:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a132:	b190      	cbz	r0, a15a <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    a134:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    a136:	b998      	cbnz	r0, a160 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    a138:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a13c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a140:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    a144:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a148:	f042 0220 	orr.w	r2, r2, #32
    a14c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    a150:	f385 8811 	msr	BASEPRI, r5
    a154:	f3bf 8f6f 	isb	sy
}
    a158:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    a15a:	f06f 000c 	mvn.w	r0, #12
    a15e:	e7f7      	b.n	a150 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    a160:	f06f 000f 	mvn.w	r0, #15
    a164:	e7f4      	b.n	a150 <uarte_nrfx_rx_buf_rsp+0x3a>

0000a166 <uarte_nrfx_callback_set>:
	if (!data->async) {
    a166:	6903      	ldr	r3, [r0, #16]
    a168:	68db      	ldr	r3, [r3, #12]
    a16a:	b11b      	cbz	r3, a174 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    a16c:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    a170:	2000      	movs	r0, #0
    a172:	4770      	bx	lr
		return -ENOTSUP;
    a174:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    a178:	4770      	bx	lr

0000a17a <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    a17a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    a17c:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    a17e:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    a180:	681b      	ldr	r3, [r3, #0]
{
    a182:	b510      	push	{r4, lr}
	if (data->async) {
    a184:	b958      	cbnz	r0, a19e <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a186:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a18a:	b15c      	cbz	r4, a1a4 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    a18c:	7d52      	ldrb	r2, [r2, #21]
    a18e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a190:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    a194:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a198:	2201      	movs	r2, #1
    a19a:	601a      	str	r2, [r3, #0]
}
    a19c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    a19e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a1a2:	e7fb      	b.n	a19c <uarte_nrfx_poll_in+0x22>
		return -1;
    a1a4:	f04f 30ff 	mov.w	r0, #4294967295
    a1a8:	e7f8      	b.n	a19c <uarte_nrfx_poll_in+0x22>

0000a1aa <rx_timeout>:
{
    a1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
    a1ac:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    a1ae:	68f3      	ldr	r3, [r6, #12]
    a1b0:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    a1b4:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    a1b8:	bb42      	cbnz	r2, a20c <rx_timeout+0x62>
	const struct device *dev = data->dev;
    a1ba:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
    a1bc:	686a      	ldr	r2, [r5, #4]
    a1be:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    a1c0:	2110      	movs	r1, #16
    a1c2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    a1c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    a1ca:	6f59      	ldr	r1, [r3, #116]	; 0x74
    a1cc:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    a1ce:	bf1e      	ittt	ne
    a1d0:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    a1d2:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    a1d4:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    a1d8:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
    a1dc:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    a1de:	bf48      	it	mi
    a1e0:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    a1e4:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
    a1e8:	bf48      	it	mi
    a1ea:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    a1ec:	18a0      	adds	r0, r4, r2
    a1ee:	4288      	cmp	r0, r1
    a1f0:	d90d      	bls.n	a20e <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
    a1f2:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
    a1f4:	2c00      	cmp	r4, #0
    a1f6:	dd04      	ble.n	a202 <rx_timeout+0x58>
		clipped = true;
    a1f8:	2701      	movs	r7, #1
    a1fa:	e00e      	b.n	a21a <rx_timeout+0x70>
			data->async->rx_timeout_left -=
    a1fc:	1a52      	subs	r2, r2, r1
    a1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
    a202:	686b      	ldr	r3, [r5, #4]
    a204:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a206:	2210      	movs	r2, #16
    a208:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
    a20e:	2c00      	cmp	r4, #0
    a210:	d0f7      	beq.n	a202 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
    a212:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    a216:	428a      	cmp	r2, r1
    a218:	daf0      	bge.n	a1fc <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
    a21a:	4621      	mov	r1, r4
    a21c:	4628      	mov	r0, r5
    a21e:	f7ff ff36 	bl	a08e <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    a222:	68f0      	ldr	r0, [r6, #12]
    a224:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    a226:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
    a228:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
    a22a:	4421      	add	r1, r4
			data->async->rx_offset += len;
    a22c:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    a22e:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
    a230:	2f00      	cmp	r7, #0
    a232:	d0e6      	beq.n	a202 <rx_timeout+0x58>
	z_impl_k_timer_stop(timer);
    a234:	3088      	adds	r0, #136	; 0x88
    a236:	f000 fa3e 	bl	a6b6 <z_impl_k_timer_stop>
}
    a23a:	e7e2      	b.n	a202 <rx_timeout+0x58>

0000a23c <rx_flush>:
	return config->uarte_regs;
    a23c:	6843      	ldr	r3, [r0, #4]
{
    a23e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    a240:	681d      	ldr	r5, [r3, #0]
{
    a242:	4616      	mov	r6, r2
    return p_reg->RXD.AMOUNT;
    a244:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    a248:	460c      	mov	r4, r1
    a24a:	bb31      	cbnz	r1, a29a <rx_flush+0x5e>
    a24c:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
    a24e:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a250:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a254:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
    a256:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a25a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    a25e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a262:	2201      	movs	r2, #1
    a264:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a266:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a26a:	2a00      	cmp	r2, #0
    a26c:	d0fb      	beq.n	a266 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a26e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    a272:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    a276:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
    a27a:	b914      	cbnz	r4, a282 <rx_flush+0x46>
			return rx_amount;
    a27c:	b2c0      	uxtb	r0, r0
}
    a27e:	b003      	add	sp, #12
    a280:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
    a282:	4287      	cmp	r7, r0
    a284:	d1fa      	bne.n	a27c <rx_flush+0x40>
    a286:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
    a288:	42b4      	cmp	r4, r6
    a28a:	d101      	bne.n	a290 <rx_flush+0x54>
	return 0;
    a28c:	2000      	movs	r0, #0
    a28e:	e7f6      	b.n	a27e <rx_flush+0x42>
		if (buf[i] != dirty) {
    a290:	f814 3b01 	ldrb.w	r3, [r4], #1
    a294:	2b00      	cmp	r3, #0
    a296:	d0f7      	beq.n	a288 <rx_flush+0x4c>
    a298:	e7f0      	b.n	a27c <rx_flush+0x40>
		memset(buf, dirty, len);
    a29a:	2100      	movs	r1, #0
    a29c:	4620      	mov	r0, r4
    a29e:	f7ff fd40 	bl	9d22 <memset>
		flush_len = len;
    a2a2:	4623      	mov	r3, r4
    a2a4:	e7d4      	b.n	a250 <rx_flush+0x14>

0000a2a6 <async_uart_release>:
{
    a2a6:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a2a8:	6903      	ldr	r3, [r0, #16]
{
    a2aa:	4604      	mov	r4, r0
	__asm__ volatile(
    a2ac:	f04f 0220 	mov.w	r2, #32
    a2b0:	f3ef 8611 	mrs	r6, BASEPRI
    a2b4:	f382 8812 	msr	BASEPRI_MAX, r2
    a2b8:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    a2bc:	68dd      	ldr	r5, [r3, #12]
    a2be:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    a2c2:	ea23 0301 	bic.w	r3, r3, r1
    a2c6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    a2ca:	b96b      	cbnz	r3, a2e8 <async_uart_release+0x42>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    a2cc:	2902      	cmp	r1, #2
    a2ce:	d106      	bne.n	a2de <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
    a2d0:	2205      	movs	r2, #5
    a2d2:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    a2d6:	f7ff ffb1 	bl	a23c <rx_flush>
			data->async->rx_flush_cnt =
    a2da:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    a2de:	6863      	ldr	r3, [r4, #4]
    a2e0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a2e2:	2200      	movs	r2, #0
    a2e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    a2e8:	f386 8811 	msr	BASEPRI, r6
    a2ec:	f3bf 8f6f 	isb	sy
}
    a2f0:	bd70      	pop	{r4, r5, r6, pc}

0000a2f2 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    a2f2:	68c2      	ldr	r2, [r0, #12]
    a2f4:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    a2f6:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    a2f8:	b508      	push	{r3, lr}
    a2fa:	4603      	mov	r3, r0
	if (!remaining) {
    a2fc:	d00b      	beq.n	a316 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    a2fe:	2a08      	cmp	r2, #8
    a300:	bf28      	it	cs
    a302:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    a304:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    a306:	3018      	adds	r0, #24
    a308:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    a30a:	689b      	ldr	r3, [r3, #8]
    a30c:	4419      	add	r1, r3
    a30e:	f7ff fcfd 	bl	9d0c <memcpy>
	return true;
    a312:	2001      	movs	r0, #1
}
    a314:	bd08      	pop	{r3, pc}
		return false;
    a316:	4610      	mov	r0, r2
    a318:	e7fc      	b.n	a314 <setup_tx_cache.isra.0+0x22>

0000a31a <uarte_nrfx_tx_abort>:
{
    a31a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    a31c:	6843      	ldr	r3, [r0, #4]
    a31e:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    a320:	6903      	ldr	r3, [r0, #16]
    a322:	68d8      	ldr	r0, [r3, #12]
    a324:	6883      	ldr	r3, [r0, #8]
    a326:	b14b      	cbz	r3, a33c <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    a328:	2400      	movs	r4, #0
    a32a:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    a32e:	3028      	adds	r0, #40	; 0x28
    a330:	f000 f9c1 	bl	a6b6 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a334:	2301      	movs	r3, #1
    a336:	60eb      	str	r3, [r5, #12]
	return 0;
    a338:	4620      	mov	r0, r4
}
    a33a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    a33c:	f06f 000d 	mvn.w	r0, #13
    a340:	e7fb      	b.n	a33a <uarte_nrfx_tx_abort+0x20>

0000a342 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    a342:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a344:	6818      	ldr	r0, [r3, #0]
    a346:	f7ff bfe8 	b.w	a31a <uarte_nrfx_tx_abort>

0000a34a <uarte_nrfx_rx_disable>:
{
    a34a:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a34c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    a34e:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    a350:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    a352:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    a354:	6e03      	ldr	r3, [r0, #96]	; 0x60
    a356:	b1b3      	cbz	r3, a386 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    a358:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a35a:	b153      	cbz	r3, a372 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    a35c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    a360:	f023 0320 	bic.w	r3, r3, #32
    a364:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a368:	2300      	movs	r3, #0
    a36a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    a36e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    a372:	3088      	adds	r0, #136	; 0x88
    a374:	f000 f99f 	bl	a6b6 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    a378:	68eb      	ldr	r3, [r5, #12]
    a37a:	2000      	movs	r0, #0
    a37c:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a380:	2301      	movs	r3, #1
    a382:	6063      	str	r3, [r4, #4]
}
    a384:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    a386:	f06f 000d 	mvn.w	r0, #13
    a38a:	e7fb      	b.n	a384 <uarte_nrfx_rx_disable+0x3a>

0000a38c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a38c:	b510      	push	{r4, lr}
    a38e:	2200      	movs	r2, #0
    a390:	4604      	mov	r4, r0
    a392:	2101      	movs	r1, #1
    a394:	2002      	movs	r0, #2
    a396:	f7f8 fde1 	bl	2f5c <z_arm_irq_priority_set>
    a39a:	2002      	movs	r0, #2
    a39c:	f7f8 fdc0 	bl	2f20 <arch_irq_enable>
    a3a0:	4620      	mov	r0, r4
    a3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3a6:	f7fa baa5 	b.w	48f4 <uarte_instance_init.isra.0>

0000a3aa <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    a3aa:	b510      	push	{r4, lr}
    a3ac:	2200      	movs	r2, #0
    a3ae:	4604      	mov	r4, r0
    a3b0:	2101      	movs	r1, #1
    a3b2:	2028      	movs	r0, #40	; 0x28
    a3b4:	f7f8 fdd2 	bl	2f5c <z_arm_irq_priority_set>
    a3b8:	2028      	movs	r0, #40	; 0x28
    a3ba:	f7f8 fdb1 	bl	2f20 <arch_irq_enable>
    a3be:	4620      	mov	r0, r4
    a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3c4:	f7fa ba96 	b.w	48f4 <uarte_instance_init.isra.0>

0000a3c8 <tx_start>:
{
    a3c8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    a3ca:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    a3cc:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a3ce:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a3d2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a3d6:	2200      	movs	r2, #0
    a3d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    a3dc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    a3e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    a3e4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a3e8:	6862      	ldr	r2, [r4, #4]
    a3ea:	06d2      	lsls	r2, r2, #27
    a3ec:	d50f      	bpl.n	a40e <tx_start+0x46>
	if (data->async) {
    a3ee:	6902      	ldr	r2, [r0, #16]
    a3f0:	68d2      	ldr	r2, [r2, #12]
    a3f2:	b12a      	cbz	r2, a400 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    a3f4:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    a3f8:	f041 0101 	orr.w	r1, r1, #1
    a3fc:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a400:	2208      	movs	r2, #8
    a402:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a406:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a40a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a40e:	2201      	movs	r2, #1
    a410:	609a      	str	r2, [r3, #8]
}
    a412:	bd10      	pop	{r4, pc}

0000a414 <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
    a414:	b510      	push	{r4, lr}
    a416:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    a418:	f7ff fe22 	bl	a060 <is_tx_ready>
    a41c:	680b      	ldr	r3, [r1, #0]
    a41e:	b918      	cbnz	r0, a428 <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
    a420:	2201      	movs	r2, #1
    a422:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    a426:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    a428:	2200      	movs	r2, #0
    a42a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    a42e:	f04f 32ff 	mov.w	r2, #4294967295
    a432:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    a436:	4620      	mov	r0, r4
    a438:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    a43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    a440:	f7ff bfc2 	b.w	a3c8 <tx_start>

0000a444 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a444:	4770      	bx	lr

0000a446 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    a446:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    a448:	2000      	movs	r0, #0
    a44a:	f7f9 f9c3 	bl	37d4 <sys_arch_reboot>

0000a44e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    a44e:	f7ff b943 	b.w	96d8 <nrf_cc3xx_platform_init_no_rng>

0000a452 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    a452:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    a454:	f7f7 ffe4 	bl	2420 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    a458:	f7f8 f896 	bl	2588 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    a45c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    a460:	f7ff b93a 	b.w	96d8 <nrf_cc3xx_platform_init_no_rng>

0000a464 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    a464:	4700      	bx	r0

0000a466 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    a466:	f000 b916 	b.w	a696 <z_impl_k_busy_wait>

0000a46a <nrf_gpio_pin_present_check>:
    switch (port)
    a46a:	0943      	lsrs	r3, r0, #5
    a46c:	d00b      	beq.n	a486 <nrf_gpio_pin_present_check+0x1c>
    a46e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    a470:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a474:	bf18      	it	ne
    a476:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    a478:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    a47c:	fa23 f000 	lsr.w	r0, r3, r0
}
    a480:	f000 0001 	and.w	r0, r0, #1
    a484:	4770      	bx	lr
    switch (port)
    a486:	f04f 33ff 	mov.w	r3, #4294967295
    a48a:	e7f5      	b.n	a478 <nrf_gpio_pin_present_check+0xe>

0000a48c <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    a48c:	0080      	lsls	r0, r0, #2
}
    a48e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    a492:	4770      	bx	lr

0000a494 <nrf_gpio_reconfigure>:
{
    a494:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a498:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a49a:	a801      	add	r0, sp, #4
{
    a49c:	460e      	mov	r6, r1
    a49e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    a4a2:	4690      	mov	r8, r2
    a4a4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a4a6:	f7fb fa1d 	bl	58e4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a4aa:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a4ac:	f1b8 0f00 	cmp.w	r8, #0
    a4b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a4b4:	bf14      	ite	ne
    a4b6:	2302      	movne	r3, #2
    a4b8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a4ba:	2e00      	cmp	r6, #0
    a4bc:	bf18      	it	ne
    a4be:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a4c2:	2d00      	cmp	r5, #0
    a4c4:	bf14      	ite	ne
    a4c6:	210c      	movne	r1, #12
    a4c8:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a4ca:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a4cc:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a4d0:	bf14      	ite	ne
    a4d2:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    a4d6:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a4d8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a4da:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a4de:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a4e2:	bf14      	ite	ne
    a4e4:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    a4e8:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a4ea:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    a4ec:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a4f0:	b106      	cbz	r6, a4f4 <nrf_gpio_reconfigure+0x60>
    a4f2:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    a4f4:	f1b8 0f00 	cmp.w	r8, #0
    a4f8:	d003      	beq.n	a502 <nrf_gpio_reconfigure+0x6e>
    a4fa:	f898 8000 	ldrb.w	r8, [r8]
    a4fe:	ea4f 0848 	mov.w	r8, r8, lsl #1
    a502:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    a504:	b10d      	cbz	r5, a50a <nrf_gpio_reconfigure+0x76>
    a506:	782d      	ldrb	r5, [r5, #0]
    a508:	00ad      	lsls	r5, r5, #2
    a50a:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    a50e:	b10c      	cbz	r4, a514 <nrf_gpio_reconfigure+0x80>
    a510:	7822      	ldrb	r2, [r4, #0]
    a512:	0214      	lsls	r4, r2, #8
    a514:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    a516:	b10f      	cbz	r7, a51c <nrf_gpio_reconfigure+0x88>
    a518:	783f      	ldrb	r7, [r7, #0]
    a51a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a51c:	432c      	orrs	r4, r5
    a51e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    a520:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    a524:	b002      	add	sp, #8
    a526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a52a <nrf_gpio_cfg_sense_set>:
{
    a52a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a52c:	f10d 030f 	add.w	r3, sp, #15
    a530:	9301      	str	r3, [sp, #4]
    a532:	2300      	movs	r3, #0
{
    a534:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a538:	9300      	str	r3, [sp, #0]
    a53a:	461a      	mov	r2, r3
    a53c:	4619      	mov	r1, r3
    a53e:	f7ff ffa9 	bl	a494 <nrf_gpio_reconfigure>
}
    a542:	b005      	add	sp, #20
    a544:	f85d fb04 	ldr.w	pc, [sp], #4

0000a548 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    a548:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    a54a:	2402      	movs	r4, #2
    a54c:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    a54e:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    a550:	6809      	ldr	r1, [r1, #0]
    a552:	b171      	cbz	r1, a572 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    a554:	f012 0f04 	tst.w	r2, #4
    a558:	bf0c      	ite	eq
    a55a:	2182      	moveq	r1, #130	; 0x82
    a55c:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    a55e:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    a560:	bf48      	it	mi
    a562:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    a566:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    a568:	bf48      	it	mi
    a56a:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    a56e:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    a572:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a574:	f04f 0100 	mov.w	r1, #0
    a578:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a57c:	bf58      	it	pl
    a57e:	2201      	movpl	r2, #1
    a580:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    a584:	bf56      	itet	pl
    a586:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    a588:	18c0      	addmi	r0, r0, r3
    return 0;
    a58a:	4608      	movpl	r0, r1
}
    a58c:	bd10      	pop	{r4, pc}

0000a58e <z_device_state_init>:
}
    a58e:	4770      	bx	lr

0000a590 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    a590:	b138      	cbz	r0, a5a2 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    a592:	68c3      	ldr	r3, [r0, #12]
    a594:	8818      	ldrh	r0, [r3, #0]
    a596:	f3c0 0008 	ubfx	r0, r0, #0, #9
    a59a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    a59e:	4258      	negs	r0, r3
    a5a0:	4158      	adcs	r0, r3
}
    a5a2:	4770      	bx	lr

0000a5a4 <z_pm_save_idle_exit>:
{
    a5a4:	b508      	push	{r3, lr}
	pm_system_resume();
    a5a6:	f7f8 fb4b 	bl	2c40 <pm_system_resume>
}
    a5aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    a5ae:	f7ff bf49 	b.w	a444 <sys_clock_idle_exit>

0000a5b2 <k_mem_slab_init>:
{
    a5b2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    a5b4:	2400      	movs	r4, #0
    a5b6:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    a5b8:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a5ba:	ea41 0402 	orr.w	r4, r1, r2
    a5be:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    a5c2:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    a5c6:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a5c8:	d10c      	bne.n	a5e4 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    a5ca:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    a5cc:	42a3      	cmp	r3, r4
    a5ce:	d103      	bne.n	a5d8 <k_mem_slab_init+0x26>
    a5d0:	e9c0 0000 	strd	r0, r0, [r0]
}
    a5d4:	2000      	movs	r0, #0
}
    a5d6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    a5d8:	6985      	ldr	r5, [r0, #24]
    a5da:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    a5dc:	3401      	adds	r4, #1
		slab->free_list = p;
    a5de:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    a5e0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    a5e2:	e7f3      	b.n	a5cc <k_mem_slab_init+0x1a>
		return -EINVAL;
    a5e4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    a5e8:	e7f5      	b.n	a5d6 <k_mem_slab_init+0x24>

0000a5ea <z_impl_k_mutex_init>:
{
    a5ea:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a5ec:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    a5ee:	e9c3 0002 	strd	r0, r0, [r3, #8]
    a5f2:	e9c3 3300 	strd	r3, r3, [r3]
}
    a5f6:	4770      	bx	lr

0000a5f8 <z_handle_obj_poll_events>:
{
    a5f8:	4603      	mov	r3, r0
	return list->head == list;
    a5fa:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    a5fc:	4283      	cmp	r3, r0
    a5fe:	d008      	beq.n	a612 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    a600:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    a604:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a606:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a608:	2300      	movs	r3, #0
	node->prev = NULL;
    a60a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    a60e:	f7fc bc65 	b.w	6edc <signal_poll_event>
}
    a612:	4770      	bx	lr

0000a614 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a614:	4603      	mov	r3, r0
    a616:	b920      	cbnz	r0, a622 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a618:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    a61c:	b90a      	cbnz	r2, a622 <z_reschedule_irqlock+0xe>
    a61e:	f7f8 bced 	b.w	2ffc <arch_swap>
    a622:	f383 8811 	msr	BASEPRI, r3
    a626:	f3bf 8f6f 	isb	sy
}
    a62a:	4770      	bx	lr

0000a62c <z_reschedule_unlocked>:
	__asm__ volatile(
    a62c:	f04f 0320 	mov.w	r3, #32
    a630:	f3ef 8011 	mrs	r0, BASEPRI
    a634:	f383 8812 	msr	BASEPRI_MAX, r3
    a638:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a63c:	f7ff bfea 	b.w	a614 <z_reschedule_irqlock>

0000a640 <z_priq_dumb_best>:
{
    a640:	4603      	mov	r3, r0
	return list->head == list;
    a642:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a644:	4283      	cmp	r3, r0
    a646:	d003      	beq.n	a650 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    a648:	2800      	cmp	r0, #0
    a64a:	bf38      	it	cc
    a64c:	2000      	movcc	r0, #0
    a64e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    a650:	2000      	movs	r0, #0
}
    a652:	4770      	bx	lr

0000a654 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    a654:	b15a      	cbz	r2, a66e <z_impl_k_sem_init+0x1a>
    a656:	428a      	cmp	r2, r1
    a658:	d309      	bcc.n	a66e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    a65a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    a65e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    a662:	e9c0 0000 	strd	r0, r0, [r0]
    a666:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    a66a:	2000      	movs	r0, #0
    a66c:	4770      	bx	lr
		return -EINVAL;
    a66e:	f06f 0015 	mvn.w	r0, #21
}
    a672:	4770      	bx	lr

0000a674 <k_is_in_isr>:
    a674:	f3ef 8005 	mrs	r0, IPSR
}
    a678:	3800      	subs	r0, #0
    a67a:	bf18      	it	ne
    a67c:	2001      	movne	r0, #1
    a67e:	4770      	bx	lr

0000a680 <z_impl_k_thread_name_set>:
}
    a680:	f06f 0057 	mvn.w	r0, #87	; 0x57
    a684:	4770      	bx	lr

0000a686 <z_impl_k_thread_start>:
	z_sched_start(thread);
    a686:	f7fd b8a7 	b.w	77d8 <z_sched_start>

0000a68a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a68a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a68c:	f7fe fc4c 	bl	8f28 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a690:	bd08      	pop	{r3, pc}

0000a692 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    a692:	f7fe bc49 	b.w	8f28 <sys_clock_tick_get>

0000a696 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a696:	b108      	cbz	r0, a69c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a698:	f7f9 b8b2 	b.w	3800 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a69c:	4770      	bx	lr

0000a69e <k_timer_init>:
	timer->status = 0U;
    a69e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    a6a0:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    a6a4:	f100 0218 	add.w	r2, r0, #24
    a6a8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    a6ac:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    a6b0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    a6b2:	6343      	str	r3, [r0, #52]	; 0x34
}
    a6b4:	4770      	bx	lr

0000a6b6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    a6b6:	b510      	push	{r4, lr}
    a6b8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    a6ba:	f7fe fa83 	bl	8bc4 <z_abort_timeout>

	if (inactive) {
    a6be:	b9b0      	cbnz	r0, a6ee <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    a6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a6c2:	b10b      	cbz	r3, a6c8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    a6c4:	4620      	mov	r0, r4
    a6c6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    a6c8:	f104 0018 	add.w	r0, r4, #24
    a6cc:	f7fd fba0 	bl	7e10 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    a6d0:	b168      	cbz	r0, a6ee <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    a6d2:	f7fd f839 	bl	7748 <z_ready_thread>
    a6d6:	f04f 0320 	mov.w	r3, #32
    a6da:	f3ef 8011 	mrs	r0, BASEPRI
    a6de:	f383 8812 	msr	BASEPRI_MAX, r3
    a6e2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    a6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a6ea:	f7ff bf93 	b.w	a614 <z_reschedule_irqlock>
    a6ee:	bd10      	pop	{r4, pc}

0000a6f0 <notify_queue_locked>:
	if (queue != NULL) {
    a6f0:	b120      	cbz	r0, a6fc <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a6f2:	2200      	movs	r2, #0
    a6f4:	4611      	mov	r1, r2
    a6f6:	3088      	adds	r0, #136	; 0x88
    a6f8:	f7fd be86 	b.w	8408 <z_sched_wake>
}
    a6fc:	4770      	bx	lr

0000a6fe <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a6fe:	4770      	bx	lr

0000a700 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a700:	f7fb bec4 	b.w	648c <SystemInit>
